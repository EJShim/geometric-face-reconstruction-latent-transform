
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
  'use strict';

  /**
   * Common utilities
   * @module glMatrix
   */
  // Configuration Constants
  var EPSILON = 0.000001;
  var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
  if (!Math.hypot) Math.hypot = function () {
    var y = 0,
        i = arguments.length;

    while (i--) {
      y += arguments[i] * arguments[i];
    }

    return Math.sqrt(y);
  };

  /**
   * 3x3 Matrix
   * @module mat3
   */

  /**
   * Creates a new identity mat3
   *
   * @returns {mat3} a new 3x3 matrix
   */

  function create$4() {
    var out = new ARRAY_TYPE(9);

    if (ARRAY_TYPE != Float32Array) {
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[5] = 0;
      out[6] = 0;
      out[7] = 0;
    }

    out[0] = 1;
    out[4] = 1;
    out[8] = 1;
    return out;
  }
  /**
   * Copies the upper-left 3x3 values into the given mat3.
   *
   * @param {mat3} out the receiving 3x3 matrix
   * @param {ReadonlyMat4} a   the source 4x4 matrix
   * @returns {mat3} out
   */

  function fromMat4(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[4];
    out[4] = a[5];
    out[5] = a[6];
    out[6] = a[8];
    out[7] = a[9];
    out[8] = a[10];
    return out;
  }
  /**
   * Creates a new mat3 initialized with values from an existing matrix
   *
   * @param {ReadonlyMat3} a matrix to clone
   * @returns {mat3} a new 3x3 matrix
   */

  function clone$1(a) {
    var out = new ARRAY_TYPE(9);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
  }
  /**
   * Copy the values from one mat3 to another
   *
   * @param {mat3} out the receiving matrix
   * @param {ReadonlyMat3} a the source matrix
   * @returns {mat3} out
   */

  function copy$1(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
  }
  /**
   * Create a new mat3 with the given values
   *
   * @param {Number} m00 Component in column 0, row 0 position (index 0)
   * @param {Number} m01 Component in column 0, row 1 position (index 1)
   * @param {Number} m02 Component in column 0, row 2 position (index 2)
   * @param {Number} m10 Component in column 1, row 0 position (index 3)
   * @param {Number} m11 Component in column 1, row 1 position (index 4)
   * @param {Number} m12 Component in column 1, row 2 position (index 5)
   * @param {Number} m20 Component in column 2, row 0 position (index 6)
   * @param {Number} m21 Component in column 2, row 1 position (index 7)
   * @param {Number} m22 Component in column 2, row 2 position (index 8)
   * @returns {mat3} A new mat3
   */

  function fromValues$4(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
    var out = new ARRAY_TYPE(9);
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m10;
    out[4] = m11;
    out[5] = m12;
    out[6] = m20;
    out[7] = m21;
    out[8] = m22;
    return out;
  }
  /**
   * Set the components of a mat3 to the given values
   *
   * @param {mat3} out the receiving matrix
   * @param {Number} m00 Component in column 0, row 0 position (index 0)
   * @param {Number} m01 Component in column 0, row 1 position (index 1)
   * @param {Number} m02 Component in column 0, row 2 position (index 2)
   * @param {Number} m10 Component in column 1, row 0 position (index 3)
   * @param {Number} m11 Component in column 1, row 1 position (index 4)
   * @param {Number} m12 Component in column 1, row 2 position (index 5)
   * @param {Number} m20 Component in column 2, row 0 position (index 6)
   * @param {Number} m21 Component in column 2, row 1 position (index 7)
   * @param {Number} m22 Component in column 2, row 2 position (index 8)
   * @returns {mat3} out
   */

  function set$3(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m10;
    out[4] = m11;
    out[5] = m12;
    out[6] = m20;
    out[7] = m21;
    out[8] = m22;
    return out;
  }
  /**
   * Set a mat3 to the identity matrix
   *
   * @param {mat3} out the receiving matrix
   * @returns {mat3} out
   */

  function identity$1(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
  }
  /**
   * Transpose the values of a mat3
   *
   * @param {mat3} out the receiving matrix
   * @param {ReadonlyMat3} a the source matrix
   * @returns {mat3} out
   */

  function transpose$1(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
      var a01 = a[1],
          a02 = a[2],
          a12 = a[5];
      out[1] = a[3];
      out[2] = a[6];
      out[3] = a01;
      out[5] = a[7];
      out[6] = a02;
      out[7] = a12;
    } else {
      out[0] = a[0];
      out[1] = a[3];
      out[2] = a[6];
      out[3] = a[1];
      out[4] = a[4];
      out[5] = a[7];
      out[6] = a[2];
      out[7] = a[5];
      out[8] = a[8];
    }

    return out;
  }
  /**
   * Inverts a mat3
   *
   * @param {mat3} out the receiving matrix
   * @param {ReadonlyMat3} a the source matrix
   * @returns {mat3} out
   */

  function invert$1(out, a) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2];
    var a10 = a[3],
        a11 = a[4],
        a12 = a[5];
    var a20 = a[6],
        a21 = a[7],
        a22 = a[8];
    var b01 = a22 * a11 - a12 * a21;
    var b11 = -a22 * a10 + a12 * a20;
    var b21 = a21 * a10 - a11 * a20; // Calculate the determinant

    var det = a00 * b01 + a01 * b11 + a02 * b21;

    if (!det) {
      return null;
    }

    det = 1.0 / det;
    out[0] = b01 * det;
    out[1] = (-a22 * a01 + a02 * a21) * det;
    out[2] = (a12 * a01 - a02 * a11) * det;
    out[3] = b11 * det;
    out[4] = (a22 * a00 - a02 * a20) * det;
    out[5] = (-a12 * a00 + a02 * a10) * det;
    out[6] = b21 * det;
    out[7] = (-a21 * a00 + a01 * a20) * det;
    out[8] = (a11 * a00 - a01 * a10) * det;
    return out;
  }
  /**
   * Calculates the adjugate of a mat3
   *
   * @param {mat3} out the receiving matrix
   * @param {ReadonlyMat3} a the source matrix
   * @returns {mat3} out
   */

  function adjoint$1(out, a) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2];
    var a10 = a[3],
        a11 = a[4],
        a12 = a[5];
    var a20 = a[6],
        a21 = a[7],
        a22 = a[8];
    out[0] = a11 * a22 - a12 * a21;
    out[1] = a02 * a21 - a01 * a22;
    out[2] = a01 * a12 - a02 * a11;
    out[3] = a12 * a20 - a10 * a22;
    out[4] = a00 * a22 - a02 * a20;
    out[5] = a02 * a10 - a00 * a12;
    out[6] = a10 * a21 - a11 * a20;
    out[7] = a01 * a20 - a00 * a21;
    out[8] = a00 * a11 - a01 * a10;
    return out;
  }
  /**
   * Calculates the determinant of a mat3
   *
   * @param {ReadonlyMat3} a the source matrix
   * @returns {Number} determinant of a
   */

  function determinant$1(a) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2];
    var a10 = a[3],
        a11 = a[4],
        a12 = a[5];
    var a20 = a[6],
        a21 = a[7],
        a22 = a[8];
    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
  }
  /**
   * Multiplies two mat3's
   *
   * @param {mat3} out the receiving matrix
   * @param {ReadonlyMat3} a the first operand
   * @param {ReadonlyMat3} b the second operand
   * @returns {mat3} out
   */

  function multiply$2(out, a, b) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2];
    var a10 = a[3],
        a11 = a[4],
        a12 = a[5];
    var a20 = a[6],
        a21 = a[7],
        a22 = a[8];
    var b00 = b[0],
        b01 = b[1],
        b02 = b[2];
    var b10 = b[3],
        b11 = b[4],
        b12 = b[5];
    var b20 = b[6],
        b21 = b[7],
        b22 = b[8];
    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
    out[2] = b00 * a02 + b01 * a12 + b02 * a22;
    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
    out[5] = b10 * a02 + b11 * a12 + b12 * a22;
    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
    return out;
  }
  /**
   * Translate a mat3 by the given vector
   *
   * @param {mat3} out the receiving matrix
   * @param {ReadonlyMat3} a the matrix to translate
   * @param {ReadonlyVec2} v vector to translate by
   * @returns {mat3} out
   */

  function translate$1(out, a, v) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a10 = a[3],
        a11 = a[4],
        a12 = a[5],
        a20 = a[6],
        a21 = a[7],
        a22 = a[8],
        x = v[0],
        y = v[1];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a10;
    out[4] = a11;
    out[5] = a12;
    out[6] = x * a00 + y * a10 + a20;
    out[7] = x * a01 + y * a11 + a21;
    out[8] = x * a02 + y * a12 + a22;
    return out;
  }
  /**
   * Rotates a mat3 by the given angle
   *
   * @param {mat3} out the receiving matrix
   * @param {ReadonlyMat3} a the matrix to rotate
   * @param {Number} rad the angle to rotate the matrix by
   * @returns {mat3} out
   */

  function rotate$1(out, a, rad) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a10 = a[3],
        a11 = a[4],
        a12 = a[5],
        a20 = a[6],
        a21 = a[7],
        a22 = a[8],
        s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = c * a00 + s * a10;
    out[1] = c * a01 + s * a11;
    out[2] = c * a02 + s * a12;
    out[3] = c * a10 - s * a00;
    out[4] = c * a11 - s * a01;
    out[5] = c * a12 - s * a02;
    out[6] = a20;
    out[7] = a21;
    out[8] = a22;
    return out;
  }
  /**
   * Scales the mat3 by the dimensions in the given vec2
   *
   * @param {mat3} out the receiving matrix
   * @param {ReadonlyMat3} a the matrix to rotate
   * @param {ReadonlyVec2} v the vec2 to scale the matrix by
   * @returns {mat3} out
   **/

  function scale$2(out, a, v) {
    var x = v[0],
        y = v[1];
    out[0] = x * a[0];
    out[1] = x * a[1];
    out[2] = x * a[2];
    out[3] = y * a[3];
    out[4] = y * a[4];
    out[5] = y * a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
  }
  /**
   * Creates a matrix from a vector translation
   * This is equivalent to (but much faster than):
   *
   *     mat3.identity(dest);
   *     mat3.translate(dest, dest, vec);
   *
   * @param {mat3} out mat3 receiving operation result
   * @param {ReadonlyVec2} v Translation vector
   * @returns {mat3} out
   */

  function fromTranslation$1(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = v[0];
    out[7] = v[1];
    out[8] = 1;
    return out;
  }
  /**
   * Creates a matrix from a given angle
   * This is equivalent to (but much faster than):
   *
   *     mat3.identity(dest);
   *     mat3.rotate(dest, dest, rad);
   *
   * @param {mat3} out mat3 receiving operation result
   * @param {Number} rad the angle to rotate the matrix by
   * @returns {mat3} out
   */

  function fromRotation$1(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = 0;
    out[3] = -s;
    out[4] = c;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
  }
  /**
   * Creates a matrix from a vector scaling
   * This is equivalent to (but much faster than):
   *
   *     mat3.identity(dest);
   *     mat3.scale(dest, dest, vec);
   *
   * @param {mat3} out mat3 receiving operation result
   * @param {ReadonlyVec2} v Scaling vector
   * @returns {mat3} out
   */

  function fromScaling$1(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = v[1];
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
  }
  /**
   * Copies the values from a mat2d into a mat3
   *
   * @param {mat3} out the receiving matrix
   * @param {ReadonlyMat2d} a the matrix to copy
   * @returns {mat3} out
   **/

  function fromMat2d(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = 0;
    out[3] = a[2];
    out[4] = a[3];
    out[5] = 0;
    out[6] = a[4];
    out[7] = a[5];
    out[8] = 1;
    return out;
  }
  /**
   * Calculates a 3x3 matrix from the given quaternion
   *
   * @param {mat3} out mat3 receiving operation result
   * @param {ReadonlyQuat} q Quaternion to create matrix from
   *
   * @returns {mat3} out
   */

  function fromQuat$1(out, q) {
    var x = q[0],
        y = q[1],
        z = q[2],
        w = q[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var yx = y * x2;
    var yy = y * y2;
    var zx = z * x2;
    var zy = z * y2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    out[0] = 1 - yy - zz;
    out[3] = yx - wz;
    out[6] = zx + wy;
    out[1] = yx + wz;
    out[4] = 1 - xx - zz;
    out[7] = zy - wx;
    out[2] = zx - wy;
    out[5] = zy + wx;
    out[8] = 1 - xx - yy;
    return out;
  }
  /**
   * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
   *
   * @param {mat3} out mat3 receiving operation result
   * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from
   *
   * @returns {mat3} out
   */

  function normalFromMat4(out, a) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3];
    var a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7];
    var a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];
    var a30 = a[12],
        a31 = a[13],
        a32 = a[14],
        a33 = a[15];
    var b00 = a00 * a11 - a01 * a10;
    var b01 = a00 * a12 - a02 * a10;
    var b02 = a00 * a13 - a03 * a10;
    var b03 = a01 * a12 - a02 * a11;
    var b04 = a01 * a13 - a03 * a11;
    var b05 = a02 * a13 - a03 * a12;
    var b06 = a20 * a31 - a21 * a30;
    var b07 = a20 * a32 - a22 * a30;
    var b08 = a20 * a33 - a23 * a30;
    var b09 = a21 * a32 - a22 * a31;
    var b10 = a21 * a33 - a23 * a31;
    var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

    var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) {
      return null;
    }

    det = 1.0 / det;
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    return out;
  }
  /**
   * Generates a 2D projection matrix with the given bounds
   *
   * @param {mat3} out mat3 frustum matrix will be written into
   * @param {number} width Width of your gl context
   * @param {number} height Height of gl context
   * @returns {mat3} out
   */

  function projection(out, width, height) {
    out[0] = 2 / width;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = -2 / height;
    out[5] = 0;
    out[6] = -1;
    out[7] = 1;
    out[8] = 1;
    return out;
  }
  /**
   * Returns a string representation of a mat3
   *
   * @param {ReadonlyMat3} a matrix to represent as a string
   * @returns {String} string representation of the matrix
   */

  function str$1(a) {
    return "mat3(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ")";
  }
  /**
   * Returns Frobenius norm of a mat3
   *
   * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of
   * @returns {Number} Frobenius norm
   */

  function frob$1(a) {
    return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);
  }
  /**
   * Adds two mat3's
   *
   * @param {mat3} out the receiving matrix
   * @param {ReadonlyMat3} a the first operand
   * @param {ReadonlyMat3} b the second operand
   * @returns {mat3} out
   */

  function add$3(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    out[6] = a[6] + b[6];
    out[7] = a[7] + b[7];
    out[8] = a[8] + b[8];
    return out;
  }
  /**
   * Subtracts matrix b from matrix a
   *
   * @param {mat3} out the receiving matrix
   * @param {ReadonlyMat3} a the first operand
   * @param {ReadonlyMat3} b the second operand
   * @returns {mat3} out
   */

  function subtract$3(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    out[4] = a[4] - b[4];
    out[5] = a[5] - b[5];
    out[6] = a[6] - b[6];
    out[7] = a[7] - b[7];
    out[8] = a[8] - b[8];
    return out;
  }
  /**
   * Multiply each element of the matrix by a scalar.
   *
   * @param {mat3} out the receiving matrix
   * @param {ReadonlyMat3} a the matrix to scale
   * @param {Number} b amount to scale the matrix's elements by
   * @returns {mat3} out
   */

  function multiplyScalar$2(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    out[6] = a[6] * b;
    out[7] = a[7] * b;
    out[8] = a[8] * b;
    return out;
  }
  /**
   * Adds two mat3's after multiplying each element of the second operand by a scalar value.
   *
   * @param {mat3} out the receiving vector
   * @param {ReadonlyMat3} a the first operand
   * @param {ReadonlyMat3} b the second operand
   * @param {Number} scale the amount to scale b's elements by before adding
   * @returns {mat3} out
   */

  function multiplyScalarAndAdd$1(out, a, b, scale) {
    out[0] = a[0] + b[0] * scale;
    out[1] = a[1] + b[1] * scale;
    out[2] = a[2] + b[2] * scale;
    out[3] = a[3] + b[3] * scale;
    out[4] = a[4] + b[4] * scale;
    out[5] = a[5] + b[5] * scale;
    out[6] = a[6] + b[6] * scale;
    out[7] = a[7] + b[7] * scale;
    out[8] = a[8] + b[8] * scale;
    return out;
  }
  /**
   * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
   *
   * @param {ReadonlyMat3} a The first matrix.
   * @param {ReadonlyMat3} b The second matrix.
   * @returns {Boolean} True if the matrices are equal, false otherwise.
   */

  function exactEquals$2(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
  }
  /**
   * Returns whether or not the matrices have approximately the same elements in the same position.
   *
   * @param {ReadonlyMat3} a The first matrix.
   * @param {ReadonlyMat3} b The second matrix.
   * @returns {Boolean} True if the matrices are equal, false otherwise.
   */

  function equals$2(a, b) {
    var a0 = a[0],
        a1 = a[1],
        a2 = a[2],
        a3 = a[3],
        a4 = a[4],
        a5 = a[5],
        a6 = a[6],
        a7 = a[7],
        a8 = a[8];
    var b0 = b[0],
        b1 = b[1],
        b2 = b[2],
        b3 = b[3],
        b4 = b[4],
        b5 = b[5],
        b6 = b[6],
        b7 = b[7],
        b8 = b[8];
    return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));
  }
  /**
   * Alias for {@link mat3.multiply}
   * @function
   */

  var mul$1 = multiply$2;
  /**
   * Alias for {@link mat3.subtract}
   * @function
   */

  var sub$2 = subtract$3;

  var mat3 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    create: create$4,
    fromMat4: fromMat4,
    clone: clone$1,
    copy: copy$1,
    fromValues: fromValues$4,
    set: set$3,
    identity: identity$1,
    transpose: transpose$1,
    invert: invert$1,
    adjoint: adjoint$1,
    determinant: determinant$1,
    multiply: multiply$2,
    translate: translate$1,
    rotate: rotate$1,
    scale: scale$2,
    fromTranslation: fromTranslation$1,
    fromRotation: fromRotation$1,
    fromScaling: fromScaling$1,
    fromMat2d: fromMat2d,
    fromQuat: fromQuat$1,
    normalFromMat4: normalFromMat4,
    projection: projection,
    str: str$1,
    frob: frob$1,
    add: add$3,
    subtract: subtract$3,
    multiplyScalar: multiplyScalar$2,
    multiplyScalarAndAdd: multiplyScalarAndAdd$1,
    exactEquals: exactEquals$2,
    equals: equals$2,
    mul: mul$1,
    sub: sub$2
  });

  /**
   * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.
   * @module mat4
   */

  /**
   * Creates a new identity mat4
   *
   * @returns {mat4} a new 4x4 matrix
   */

  function create$3() {
    var out = new ARRAY_TYPE(16);

    if (ARRAY_TYPE != Float32Array) {
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[11] = 0;
      out[12] = 0;
      out[13] = 0;
      out[14] = 0;
    }

    out[0] = 1;
    out[5] = 1;
    out[10] = 1;
    out[15] = 1;
    return out;
  }
  /**
   * Creates a new mat4 initialized with values from an existing matrix
   *
   * @param {ReadonlyMat4} a matrix to clone
   * @returns {mat4} a new 4x4 matrix
   */

  function clone(a) {
    var out = new ARRAY_TYPE(16);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
  }
  /**
   * Copy the values from one mat4 to another
   *
   * @param {mat4} out the receiving matrix
   * @param {ReadonlyMat4} a the source matrix
   * @returns {mat4} out
   */

  function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
  }
  /**
   * Create a new mat4 with the given values
   *
   * @param {Number} m00 Component in column 0, row 0 position (index 0)
   * @param {Number} m01 Component in column 0, row 1 position (index 1)
   * @param {Number} m02 Component in column 0, row 2 position (index 2)
   * @param {Number} m03 Component in column 0, row 3 position (index 3)
   * @param {Number} m10 Component in column 1, row 0 position (index 4)
   * @param {Number} m11 Component in column 1, row 1 position (index 5)
   * @param {Number} m12 Component in column 1, row 2 position (index 6)
   * @param {Number} m13 Component in column 1, row 3 position (index 7)
   * @param {Number} m20 Component in column 2, row 0 position (index 8)
   * @param {Number} m21 Component in column 2, row 1 position (index 9)
   * @param {Number} m22 Component in column 2, row 2 position (index 10)
   * @param {Number} m23 Component in column 2, row 3 position (index 11)
   * @param {Number} m30 Component in column 3, row 0 position (index 12)
   * @param {Number} m31 Component in column 3, row 1 position (index 13)
   * @param {Number} m32 Component in column 3, row 2 position (index 14)
   * @param {Number} m33 Component in column 3, row 3 position (index 15)
   * @returns {mat4} A new mat4
   */

  function fromValues$3(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    var out = new ARRAY_TYPE(16);
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m03;
    out[4] = m10;
    out[5] = m11;
    out[6] = m12;
    out[7] = m13;
    out[8] = m20;
    out[9] = m21;
    out[10] = m22;
    out[11] = m23;
    out[12] = m30;
    out[13] = m31;
    out[14] = m32;
    out[15] = m33;
    return out;
  }
  /**
   * Set the components of a mat4 to the given values
   *
   * @param {mat4} out the receiving matrix
   * @param {Number} m00 Component in column 0, row 0 position (index 0)
   * @param {Number} m01 Component in column 0, row 1 position (index 1)
   * @param {Number} m02 Component in column 0, row 2 position (index 2)
   * @param {Number} m03 Component in column 0, row 3 position (index 3)
   * @param {Number} m10 Component in column 1, row 0 position (index 4)
   * @param {Number} m11 Component in column 1, row 1 position (index 5)
   * @param {Number} m12 Component in column 1, row 2 position (index 6)
   * @param {Number} m13 Component in column 1, row 3 position (index 7)
   * @param {Number} m20 Component in column 2, row 0 position (index 8)
   * @param {Number} m21 Component in column 2, row 1 position (index 9)
   * @param {Number} m22 Component in column 2, row 2 position (index 10)
   * @param {Number} m23 Component in column 2, row 3 position (index 11)
   * @param {Number} m30 Component in column 3, row 0 position (index 12)
   * @param {Number} m31 Component in column 3, row 1 position (index 13)
   * @param {Number} m32 Component in column 3, row 2 position (index 14)
   * @param {Number} m33 Component in column 3, row 3 position (index 15)
   * @returns {mat4} out
   */

  function set$2(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m03;
    out[4] = m10;
    out[5] = m11;
    out[6] = m12;
    out[7] = m13;
    out[8] = m20;
    out[9] = m21;
    out[10] = m22;
    out[11] = m23;
    out[12] = m30;
    out[13] = m31;
    out[14] = m32;
    out[15] = m33;
    return out;
  }
  /**
   * Set a mat4 to the identity matrix
   *
   * @param {mat4} out the receiving matrix
   * @returns {mat4} out
   */

  function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  /**
   * Transpose the values of a mat4
   *
   * @param {mat4} out the receiving matrix
   * @param {ReadonlyMat4} a the source matrix
   * @returns {mat4} out
   */

  function transpose(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
      var a01 = a[1],
          a02 = a[2],
          a03 = a[3];
      var a12 = a[6],
          a13 = a[7];
      var a23 = a[11];
      out[1] = a[4];
      out[2] = a[8];
      out[3] = a[12];
      out[4] = a01;
      out[6] = a[9];
      out[7] = a[13];
      out[8] = a02;
      out[9] = a12;
      out[11] = a[14];
      out[12] = a03;
      out[13] = a13;
      out[14] = a23;
    } else {
      out[0] = a[0];
      out[1] = a[4];
      out[2] = a[8];
      out[3] = a[12];
      out[4] = a[1];
      out[5] = a[5];
      out[6] = a[9];
      out[7] = a[13];
      out[8] = a[2];
      out[9] = a[6];
      out[10] = a[10];
      out[11] = a[14];
      out[12] = a[3];
      out[13] = a[7];
      out[14] = a[11];
      out[15] = a[15];
    }

    return out;
  }
  /**
   * Inverts a mat4
   *
   * @param {mat4} out the receiving matrix
   * @param {ReadonlyMat4} a the source matrix
   * @returns {mat4} out
   */

  function invert(out, a) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3];
    var a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7];
    var a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];
    var a30 = a[12],
        a31 = a[13],
        a32 = a[14],
        a33 = a[15];
    var b00 = a00 * a11 - a01 * a10;
    var b01 = a00 * a12 - a02 * a10;
    var b02 = a00 * a13 - a03 * a10;
    var b03 = a01 * a12 - a02 * a11;
    var b04 = a01 * a13 - a03 * a11;
    var b05 = a02 * a13 - a03 * a12;
    var b06 = a20 * a31 - a21 * a30;
    var b07 = a20 * a32 - a22 * a30;
    var b08 = a20 * a33 - a23 * a30;
    var b09 = a21 * a32 - a22 * a31;
    var b10 = a21 * a33 - a23 * a31;
    var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

    var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) {
      return null;
    }

    det = 1.0 / det;
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
    return out;
  }
  /**
   * Calculates the adjugate of a mat4
   *
   * @param {mat4} out the receiving matrix
   * @param {ReadonlyMat4} a the source matrix
   * @returns {mat4} out
   */

  function adjoint(out, a) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3];
    var a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7];
    var a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];
    var a30 = a[12],
        a31 = a[13],
        a32 = a[14],
        a33 = a[15];
    out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
    out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
    out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
    out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
    out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
    out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
    out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
    out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
    out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
    out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
    out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
    out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
    out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
    return out;
  }
  /**
   * Calculates the determinant of a mat4
   *
   * @param {ReadonlyMat4} a the source matrix
   * @returns {Number} determinant of a
   */

  function determinant(a) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3];
    var a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7];
    var a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];
    var a30 = a[12],
        a31 = a[13],
        a32 = a[14],
        a33 = a[15];
    var b00 = a00 * a11 - a01 * a10;
    var b01 = a00 * a12 - a02 * a10;
    var b02 = a00 * a13 - a03 * a10;
    var b03 = a01 * a12 - a02 * a11;
    var b04 = a01 * a13 - a03 * a11;
    var b05 = a02 * a13 - a03 * a12;
    var b06 = a20 * a31 - a21 * a30;
    var b07 = a20 * a32 - a22 * a30;
    var b08 = a20 * a33 - a23 * a30;
    var b09 = a21 * a32 - a22 * a31;
    var b10 = a21 * a33 - a23 * a31;
    var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
  }
  /**
   * Multiplies two mat4s
   *
   * @param {mat4} out the receiving matrix
   * @param {ReadonlyMat4} a the first operand
   * @param {ReadonlyMat4} b the second operand
   * @returns {mat4} out
   */

  function multiply$1(out, a, b) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3];
    var a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7];
    var a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];
    var a30 = a[12],
        a31 = a[13],
        a32 = a[14],
        a33 = a[15]; // Cache only the current line of the second matrix

    var b0 = b[0],
        b1 = b[1],
        b2 = b[2],
        b3 = b[3];
    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[4];
    b1 = b[5];
    b2 = b[6];
    b3 = b[7];
    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[8];
    b1 = b[9];
    b2 = b[10];
    b3 = b[11];
    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[12];
    b1 = b[13];
    b2 = b[14];
    b3 = b[15];
    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    return out;
  }
  /**
   * Translate a mat4 by the given vector
   *
   * @param {mat4} out the receiving matrix
   * @param {ReadonlyMat4} a the matrix to translate
   * @param {ReadonlyVec3} v vector to translate by
   * @returns {mat4} out
   */

  function translate(out, a, v) {
    var x = v[0],
        y = v[1],
        z = v[2];
    var a00, a01, a02, a03;
    var a10, a11, a12, a13;
    var a20, a21, a22, a23;

    if (a === out) {
      out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
      out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
      out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
      out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    } else {
      a00 = a[0];
      a01 = a[1];
      a02 = a[2];
      a03 = a[3];
      a10 = a[4];
      a11 = a[5];
      a12 = a[6];
      a13 = a[7];
      a20 = a[8];
      a21 = a[9];
      a22 = a[10];
      a23 = a[11];
      out[0] = a00;
      out[1] = a01;
      out[2] = a02;
      out[3] = a03;
      out[4] = a10;
      out[5] = a11;
      out[6] = a12;
      out[7] = a13;
      out[8] = a20;
      out[9] = a21;
      out[10] = a22;
      out[11] = a23;
      out[12] = a00 * x + a10 * y + a20 * z + a[12];
      out[13] = a01 * x + a11 * y + a21 * z + a[13];
      out[14] = a02 * x + a12 * y + a22 * z + a[14];
      out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }

    return out;
  }
  /**
   * Scales the mat4 by the dimensions in the given vec3 not using vectorization
   *
   * @param {mat4} out the receiving matrix
   * @param {ReadonlyMat4} a the matrix to scale
   * @param {ReadonlyVec3} v the vec3 to scale the matrix by
   * @returns {mat4} out
   **/

  function scale$1(out, a, v) {
    var x = v[0],
        y = v[1],
        z = v[2];
    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
  }
  /**
   * Rotates a mat4 by the given angle around the given axis
   *
   * @param {mat4} out the receiving matrix
   * @param {ReadonlyMat4} a the matrix to rotate
   * @param {Number} rad the angle to rotate the matrix by
   * @param {ReadonlyVec3} axis the axis to rotate around
   * @returns {mat4} out
   */

  function rotate(out, a, rad, axis) {
    var x = axis[0],
        y = axis[1],
        z = axis[2];
    var len = Math.hypot(x, y, z);
    var s, c, t;
    var a00, a01, a02, a03;
    var a10, a11, a12, a13;
    var a20, a21, a22, a23;
    var b00, b01, b02;
    var b10, b11, b12;
    var b20, b21, b22;

    if (len < EPSILON) {
      return null;
    }

    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;
    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11]; // Construct the elements of the rotation matrix

    b00 = x * x * t + c;
    b01 = y * x * t + z * s;
    b02 = z * x * t - y * s;
    b10 = x * y * t - z * s;
    b11 = y * y * t + c;
    b12 = z * y * t + x * s;
    b20 = x * z * t + y * s;
    b21 = y * z * t - x * s;
    b22 = z * z * t + c; // Perform rotation-specific matrix multiplication

    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;

    if (a !== out) {
      // If the source and destination differ, copy the unchanged last row
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }

    return out;
  }
  /**
   * Rotates a matrix by the given angle around the X axis
   *
   * @param {mat4} out the receiving matrix
   * @param {ReadonlyMat4} a the matrix to rotate
   * @param {Number} rad the angle to rotate the matrix by
   * @returns {mat4} out
   */

  function rotateX(out, a, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    var a10 = a[4];
    var a11 = a[5];
    var a12 = a[6];
    var a13 = a[7];
    var a20 = a[8];
    var a21 = a[9];
    var a22 = a[10];
    var a23 = a[11];

    if (a !== out) {
      // If the source and destination differ, copy the unchanged rows
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    } // Perform axis-specific matrix multiplication


    out[4] = a10 * c + a20 * s;
    out[5] = a11 * c + a21 * s;
    out[6] = a12 * c + a22 * s;
    out[7] = a13 * c + a23 * s;
    out[8] = a20 * c - a10 * s;
    out[9] = a21 * c - a11 * s;
    out[10] = a22 * c - a12 * s;
    out[11] = a23 * c - a13 * s;
    return out;
  }
  /**
   * Rotates a matrix by the given angle around the Y axis
   *
   * @param {mat4} out the receiving matrix
   * @param {ReadonlyMat4} a the matrix to rotate
   * @param {Number} rad the angle to rotate the matrix by
   * @returns {mat4} out
   */

  function rotateY(out, a, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    var a00 = a[0];
    var a01 = a[1];
    var a02 = a[2];
    var a03 = a[3];
    var a20 = a[8];
    var a21 = a[9];
    var a22 = a[10];
    var a23 = a[11];

    if (a !== out) {
      // If the source and destination differ, copy the unchanged rows
      out[4] = a[4];
      out[5] = a[5];
      out[6] = a[6];
      out[7] = a[7];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    } // Perform axis-specific matrix multiplication


    out[0] = a00 * c - a20 * s;
    out[1] = a01 * c - a21 * s;
    out[2] = a02 * c - a22 * s;
    out[3] = a03 * c - a23 * s;
    out[8] = a00 * s + a20 * c;
    out[9] = a01 * s + a21 * c;
    out[10] = a02 * s + a22 * c;
    out[11] = a03 * s + a23 * c;
    return out;
  }
  /**
   * Rotates a matrix by the given angle around the Z axis
   *
   * @param {mat4} out the receiving matrix
   * @param {ReadonlyMat4} a the matrix to rotate
   * @param {Number} rad the angle to rotate the matrix by
   * @returns {mat4} out
   */

  function rotateZ(out, a, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    var a00 = a[0];
    var a01 = a[1];
    var a02 = a[2];
    var a03 = a[3];
    var a10 = a[4];
    var a11 = a[5];
    var a12 = a[6];
    var a13 = a[7];

    if (a !== out) {
      // If the source and destination differ, copy the unchanged last row
      out[8] = a[8];
      out[9] = a[9];
      out[10] = a[10];
      out[11] = a[11];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    } // Perform axis-specific matrix multiplication


    out[0] = a00 * c + a10 * s;
    out[1] = a01 * c + a11 * s;
    out[2] = a02 * c + a12 * s;
    out[3] = a03 * c + a13 * s;
    out[4] = a10 * c - a00 * s;
    out[5] = a11 * c - a01 * s;
    out[6] = a12 * c - a02 * s;
    out[7] = a13 * c - a03 * s;
    return out;
  }
  /**
   * Creates a matrix from a vector translation
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.translate(dest, dest, vec);
   *
   * @param {mat4} out mat4 receiving operation result
   * @param {ReadonlyVec3} v Translation vector
   * @returns {mat4} out
   */

  function fromTranslation(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
  }
  /**
   * Creates a matrix from a vector scaling
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.scale(dest, dest, vec);
   *
   * @param {mat4} out mat4 receiving operation result
   * @param {ReadonlyVec3} v Scaling vector
   * @returns {mat4} out
   */

  function fromScaling(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = v[1];
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = v[2];
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  /**
   * Creates a matrix from a given angle around a given axis
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.rotate(dest, dest, rad, axis);
   *
   * @param {mat4} out mat4 receiving operation result
   * @param {Number} rad the angle to rotate the matrix by
   * @param {ReadonlyVec3} axis the axis to rotate around
   * @returns {mat4} out
   */

  function fromRotation(out, rad, axis) {
    var x = axis[0],
        y = axis[1],
        z = axis[2];
    var len = Math.hypot(x, y, z);
    var s, c, t;

    if (len < EPSILON) {
      return null;
    }

    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;
    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c; // Perform rotation-specific matrix multiplication

    out[0] = x * x * t + c;
    out[1] = y * x * t + z * s;
    out[2] = z * x * t - y * s;
    out[3] = 0;
    out[4] = x * y * t - z * s;
    out[5] = y * y * t + c;
    out[6] = z * y * t + x * s;
    out[7] = 0;
    out[8] = x * z * t + y * s;
    out[9] = y * z * t - x * s;
    out[10] = z * z * t + c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  /**
   * Creates a matrix from the given angle around the X axis
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.rotateX(dest, dest, rad);
   *
   * @param {mat4} out mat4 receiving operation result
   * @param {Number} rad the angle to rotate the matrix by
   * @returns {mat4} out
   */

  function fromXRotation(out, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad); // Perform axis-specific matrix multiplication

    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = c;
    out[6] = s;
    out[7] = 0;
    out[8] = 0;
    out[9] = -s;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  /**
   * Creates a matrix from the given angle around the Y axis
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.rotateY(dest, dest, rad);
   *
   * @param {mat4} out mat4 receiving operation result
   * @param {Number} rad the angle to rotate the matrix by
   * @returns {mat4} out
   */

  function fromYRotation(out, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad); // Perform axis-specific matrix multiplication

    out[0] = c;
    out[1] = 0;
    out[2] = -s;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = s;
    out[9] = 0;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  /**
   * Creates a matrix from the given angle around the Z axis
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.rotateZ(dest, dest, rad);
   *
   * @param {mat4} out mat4 receiving operation result
   * @param {Number} rad the angle to rotate the matrix by
   * @returns {mat4} out
   */

  function fromZRotation(out, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad); // Perform axis-specific matrix multiplication

    out[0] = c;
    out[1] = s;
    out[2] = 0;
    out[3] = 0;
    out[4] = -s;
    out[5] = c;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  /**
   * Creates a matrix from a quaternion rotation and vector translation
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.translate(dest, vec);
   *     let quatMat = mat4.create();
   *     quat4.toMat4(quat, quatMat);
   *     mat4.multiply(dest, quatMat);
   *
   * @param {mat4} out mat4 receiving operation result
   * @param {quat4} q Rotation quaternion
   * @param {ReadonlyVec3} v Translation vector
   * @returns {mat4} out
   */

  function fromRotationTranslation(out, q, v) {
    // Quaternion math
    var x = q[0],
        y = q[1],
        z = q[2],
        w = q[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var xy = x * y2;
    var xz = x * z2;
    var yy = y * y2;
    var yz = y * z2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
  }
  /**
   * Creates a new mat4 from a dual quat.
   *
   * @param {mat4} out Matrix
   * @param {ReadonlyQuat2} a Dual Quaternion
   * @returns {mat4} mat4 receiving operation result
   */

  function fromQuat2(out, a) {
    var translation = new ARRAY_TYPE(3);
    var bx = -a[0],
        by = -a[1],
        bz = -a[2],
        bw = a[3],
        ax = a[4],
        ay = a[5],
        az = a[6],
        aw = a[7];
    var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense

    if (magnitude > 0) {
      translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
      translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
      translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
    } else {
      translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
      translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
      translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
    }

    fromRotationTranslation(out, a, translation);
    return out;
  }
  /**
   * Returns the translation vector component of a transformation
   *  matrix. If a matrix is built with fromRotationTranslation,
   *  the returned vector will be the same as the translation vector
   *  originally supplied.
   * @param  {vec3} out Vector to receive translation component
   * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)
   * @return {vec3} out
   */

  function getTranslation(out, mat) {
    out[0] = mat[12];
    out[1] = mat[13];
    out[2] = mat[14];
    return out;
  }
  /**
   * Returns the scaling factor component of a transformation
   *  matrix. If a matrix is built with fromRotationTranslationScale
   *  with a normalized Quaternion paramter, the returned vector will be
   *  the same as the scaling vector
   *  originally supplied.
   * @param  {vec3} out Vector to receive scaling factor component
   * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)
   * @return {vec3} out
   */

  function getScaling(out, mat) {
    var m11 = mat[0];
    var m12 = mat[1];
    var m13 = mat[2];
    var m21 = mat[4];
    var m22 = mat[5];
    var m23 = mat[6];
    var m31 = mat[8];
    var m32 = mat[9];
    var m33 = mat[10];
    out[0] = Math.hypot(m11, m12, m13);
    out[1] = Math.hypot(m21, m22, m23);
    out[2] = Math.hypot(m31, m32, m33);
    return out;
  }
  /**
   * Returns a quaternion representing the rotational component
   *  of a transformation matrix. If a matrix is built with
   *  fromRotationTranslation, the returned quaternion will be the
   *  same as the quaternion originally supplied.
   * @param {quat} out Quaternion to receive the rotation component
   * @param {ReadonlyMat4} mat Matrix to be decomposed (input)
   * @return {quat} out
   */

  function getRotation(out, mat) {
    var scaling = new ARRAY_TYPE(3);
    getScaling(scaling, mat);
    var is1 = 1 / scaling[0];
    var is2 = 1 / scaling[1];
    var is3 = 1 / scaling[2];
    var sm11 = mat[0] * is1;
    var sm12 = mat[1] * is2;
    var sm13 = mat[2] * is3;
    var sm21 = mat[4] * is1;
    var sm22 = mat[5] * is2;
    var sm23 = mat[6] * is3;
    var sm31 = mat[8] * is1;
    var sm32 = mat[9] * is2;
    var sm33 = mat[10] * is3;
    var trace = sm11 + sm22 + sm33;
    var S = 0;

    if (trace > 0) {
      S = Math.sqrt(trace + 1.0) * 2;
      out[3] = 0.25 * S;
      out[0] = (sm23 - sm32) / S;
      out[1] = (sm31 - sm13) / S;
      out[2] = (sm12 - sm21) / S;
    } else if (sm11 > sm22 && sm11 > sm33) {
      S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;
      out[3] = (sm23 - sm32) / S;
      out[0] = 0.25 * S;
      out[1] = (sm12 + sm21) / S;
      out[2] = (sm31 + sm13) / S;
    } else if (sm22 > sm33) {
      S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;
      out[3] = (sm31 - sm13) / S;
      out[0] = (sm12 + sm21) / S;
      out[1] = 0.25 * S;
      out[2] = (sm23 + sm32) / S;
    } else {
      S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;
      out[3] = (sm12 - sm21) / S;
      out[0] = (sm31 + sm13) / S;
      out[1] = (sm23 + sm32) / S;
      out[2] = 0.25 * S;
    }

    return out;
  }
  /**
   * Creates a matrix from a quaternion rotation, vector translation and vector scale
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.translate(dest, vec);
   *     let quatMat = mat4.create();
   *     quat4.toMat4(quat, quatMat);
   *     mat4.multiply(dest, quatMat);
   *     mat4.scale(dest, scale)
   *
   * @param {mat4} out mat4 receiving operation result
   * @param {quat4} q Rotation quaternion
   * @param {ReadonlyVec3} v Translation vector
   * @param {ReadonlyVec3} s Scaling vector
   * @returns {mat4} out
   */

  function fromRotationTranslationScale(out, q, v, s) {
    // Quaternion math
    var x = q[0],
        y = q[1],
        z = q[2],
        w = q[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var xy = x * y2;
    var xz = x * z2;
    var yy = y * y2;
    var yz = y * z2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    var sx = s[0];
    var sy = s[1];
    var sz = s[2];
    out[0] = (1 - (yy + zz)) * sx;
    out[1] = (xy + wz) * sx;
    out[2] = (xz - wy) * sx;
    out[3] = 0;
    out[4] = (xy - wz) * sy;
    out[5] = (1 - (xx + zz)) * sy;
    out[6] = (yz + wx) * sy;
    out[7] = 0;
    out[8] = (xz + wy) * sz;
    out[9] = (yz - wx) * sz;
    out[10] = (1 - (xx + yy)) * sz;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
  }
  /**
   * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.translate(dest, vec);
   *     mat4.translate(dest, origin);
   *     let quatMat = mat4.create();
   *     quat4.toMat4(quat, quatMat);
   *     mat4.multiply(dest, quatMat);
   *     mat4.scale(dest, scale)
   *     mat4.translate(dest, negativeOrigin);
   *
   * @param {mat4} out mat4 receiving operation result
   * @param {quat4} q Rotation quaternion
   * @param {ReadonlyVec3} v Translation vector
   * @param {ReadonlyVec3} s Scaling vector
   * @param {ReadonlyVec3} o The origin vector around which to scale and rotate
   * @returns {mat4} out
   */

  function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
    // Quaternion math
    var x = q[0],
        y = q[1],
        z = q[2],
        w = q[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var xy = x * y2;
    var xz = x * z2;
    var yy = y * y2;
    var yz = y * z2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    var sx = s[0];
    var sy = s[1];
    var sz = s[2];
    var ox = o[0];
    var oy = o[1];
    var oz = o[2];
    var out0 = (1 - (yy + zz)) * sx;
    var out1 = (xy + wz) * sx;
    var out2 = (xz - wy) * sx;
    var out4 = (xy - wz) * sy;
    var out5 = (1 - (xx + zz)) * sy;
    var out6 = (yz + wx) * sy;
    var out8 = (xz + wy) * sz;
    var out9 = (yz - wx) * sz;
    var out10 = (1 - (xx + yy)) * sz;
    out[0] = out0;
    out[1] = out1;
    out[2] = out2;
    out[3] = 0;
    out[4] = out4;
    out[5] = out5;
    out[6] = out6;
    out[7] = 0;
    out[8] = out8;
    out[9] = out9;
    out[10] = out10;
    out[11] = 0;
    out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
    out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
    out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
    out[15] = 1;
    return out;
  }
  /**
   * Calculates a 4x4 matrix from the given quaternion
   *
   * @param {mat4} out mat4 receiving operation result
   * @param {ReadonlyQuat} q Quaternion to create matrix from
   *
   * @returns {mat4} out
   */

  function fromQuat(out, q) {
    var x = q[0],
        y = q[1],
        z = q[2],
        w = q[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var yx = y * x2;
    var yy = y * y2;
    var zx = z * x2;
    var zy = z * y2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;
    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;
    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  /**
   * Generates a frustum matrix with the given bounds
   *
   * @param {mat4} out mat4 frustum matrix will be written into
   * @param {Number} left Left bound of the frustum
   * @param {Number} right Right bound of the frustum
   * @param {Number} bottom Bottom bound of the frustum
   * @param {Number} top Top bound of the frustum
   * @param {Number} near Near bound of the frustum
   * @param {Number} far Far bound of the frustum
   * @returns {mat4} out
   */

  function frustum(out, left, right, bottom, top, near, far) {
    var rl = 1 / (right - left);
    var tb = 1 / (top - bottom);
    var nf = 1 / (near - far);
    out[0] = near * 2 * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = near * 2 * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = far * near * 2 * nf;
    out[15] = 0;
    return out;
  }
  /**
   * Generates a perspective projection matrix with the given bounds.
   * Passing null/undefined/no value for far will generate infinite projection matrix.
   *
   * @param {mat4} out mat4 frustum matrix will be written into
   * @param {number} fovy Vertical field of view in radians
   * @param {number} aspect Aspect ratio. typically viewport width/height
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum, can be null or Infinity
   * @returns {mat4} out
   */

  function perspective(out, fovy, aspect, near, far) {
    var f = 1.0 / Math.tan(fovy / 2),
        nf;
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[15] = 0;

    if (far != null && far !== Infinity) {
      nf = 1 / (near - far);
      out[10] = (far + near) * nf;
      out[14] = 2 * far * near * nf;
    } else {
      out[10] = -1;
      out[14] = -2 * near;
    }

    return out;
  }
  /**
   * Generates a perspective projection matrix with the given field of view.
   * This is primarily useful for generating projection matrices to be used
   * with the still experiemental WebVR API.
   *
   * @param {mat4} out mat4 frustum matrix will be written into
   * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @returns {mat4} out
   */

  function perspectiveFromFieldOfView(out, fov, near, far) {
    var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);
    var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);
    var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);
    var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);
    var xScale = 2.0 / (leftTan + rightTan);
    var yScale = 2.0 / (upTan + downTan);
    out[0] = xScale;
    out[1] = 0.0;
    out[2] = 0.0;
    out[3] = 0.0;
    out[4] = 0.0;
    out[5] = yScale;
    out[6] = 0.0;
    out[7] = 0.0;
    out[8] = -((leftTan - rightTan) * xScale * 0.5);
    out[9] = (upTan - downTan) * yScale * 0.5;
    out[10] = far / (near - far);
    out[11] = -1.0;
    out[12] = 0.0;
    out[13] = 0.0;
    out[14] = far * near / (near - far);
    out[15] = 0.0;
    return out;
  }
  /**
   * Generates a orthogonal projection matrix with the given bounds
   *
   * @param {mat4} out mat4 frustum matrix will be written into
   * @param {number} left Left bound of the frustum
   * @param {number} right Right bound of the frustum
   * @param {number} bottom Bottom bound of the frustum
   * @param {number} top Top bound of the frustum
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @returns {mat4} out
   */

  function ortho(out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right);
    var bt = 1 / (bottom - top);
    var nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
  }
  /**
   * Generates a look-at matrix with the given eye position, focal point, and up axis.
   * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.
   *
   * @param {mat4} out mat4 frustum matrix will be written into
   * @param {ReadonlyVec3} eye Position of the viewer
   * @param {ReadonlyVec3} center Point the viewer is looking at
   * @param {ReadonlyVec3} up vec3 pointing up
   * @returns {mat4} out
   */

  function lookAt(out, eye, center, up) {
    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
    var eyex = eye[0];
    var eyey = eye[1];
    var eyez = eye[2];
    var upx = up[0];
    var upy = up[1];
    var upz = up[2];
    var centerx = center[0];
    var centery = center[1];
    var centerz = center[2];

    if (Math.abs(eyex - centerx) < EPSILON && Math.abs(eyey - centery) < EPSILON && Math.abs(eyez - centerz) < EPSILON) {
      return identity(out);
    }

    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;
    len = 1 / Math.hypot(z0, z1, z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;
    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.hypot(x0, x1, x2);

    if (!len) {
      x0 = 0;
      x1 = 0;
      x2 = 0;
    } else {
      len = 1 / len;
      x0 *= len;
      x1 *= len;
      x2 *= len;
    }

    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;
    len = Math.hypot(y0, y1, y2);

    if (!len) {
      y0 = 0;
      y1 = 0;
      y2 = 0;
    } else {
      len = 1 / len;
      y0 *= len;
      y1 *= len;
      y2 *= len;
    }

    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;
    return out;
  }
  /**
   * Generates a matrix that makes something look at something else.
   *
   * @param {mat4} out mat4 frustum matrix will be written into
   * @param {ReadonlyVec3} eye Position of the viewer
   * @param {ReadonlyVec3} center Point the viewer is looking at
   * @param {ReadonlyVec3} up vec3 pointing up
   * @returns {mat4} out
   */

  function targetTo(out, eye, target, up) {
    var eyex = eye[0],
        eyey = eye[1],
        eyez = eye[2],
        upx = up[0],
        upy = up[1],
        upz = up[2];
    var z0 = eyex - target[0],
        z1 = eyey - target[1],
        z2 = eyez - target[2];
    var len = z0 * z0 + z1 * z1 + z2 * z2;

    if (len > 0) {
      len = 1 / Math.sqrt(len);
      z0 *= len;
      z1 *= len;
      z2 *= len;
    }

    var x0 = upy * z2 - upz * z1,
        x1 = upz * z0 - upx * z2,
        x2 = upx * z1 - upy * z0;
    len = x0 * x0 + x1 * x1 + x2 * x2;

    if (len > 0) {
      len = 1 / Math.sqrt(len);
      x0 *= len;
      x1 *= len;
      x2 *= len;
    }

    out[0] = x0;
    out[1] = x1;
    out[2] = x2;
    out[3] = 0;
    out[4] = z1 * x2 - z2 * x1;
    out[5] = z2 * x0 - z0 * x2;
    out[6] = z0 * x1 - z1 * x0;
    out[7] = 0;
    out[8] = z0;
    out[9] = z1;
    out[10] = z2;
    out[11] = 0;
    out[12] = eyex;
    out[13] = eyey;
    out[14] = eyez;
    out[15] = 1;
    return out;
  }
  /**
   * Returns a string representation of a mat4
   *
   * @param {ReadonlyMat4} a matrix to represent as a string
   * @returns {String} string representation of the matrix
   */

  function str(a) {
    return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")";
  }
  /**
   * Returns Frobenius norm of a mat4
   *
   * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of
   * @returns {Number} Frobenius norm
   */

  function frob(a) {
    return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
  }
  /**
   * Adds two mat4's
   *
   * @param {mat4} out the receiving matrix
   * @param {ReadonlyMat4} a the first operand
   * @param {ReadonlyMat4} b the second operand
   * @returns {mat4} out
   */

  function add$2(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    out[6] = a[6] + b[6];
    out[7] = a[7] + b[7];
    out[8] = a[8] + b[8];
    out[9] = a[9] + b[9];
    out[10] = a[10] + b[10];
    out[11] = a[11] + b[11];
    out[12] = a[12] + b[12];
    out[13] = a[13] + b[13];
    out[14] = a[14] + b[14];
    out[15] = a[15] + b[15];
    return out;
  }
  /**
   * Subtracts matrix b from matrix a
   *
   * @param {mat4} out the receiving matrix
   * @param {ReadonlyMat4} a the first operand
   * @param {ReadonlyMat4} b the second operand
   * @returns {mat4} out
   */

  function subtract$2(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    out[4] = a[4] - b[4];
    out[5] = a[5] - b[5];
    out[6] = a[6] - b[6];
    out[7] = a[7] - b[7];
    out[8] = a[8] - b[8];
    out[9] = a[9] - b[9];
    out[10] = a[10] - b[10];
    out[11] = a[11] - b[11];
    out[12] = a[12] - b[12];
    out[13] = a[13] - b[13];
    out[14] = a[14] - b[14];
    out[15] = a[15] - b[15];
    return out;
  }
  /**
   * Multiply each element of the matrix by a scalar.
   *
   * @param {mat4} out the receiving matrix
   * @param {ReadonlyMat4} a the matrix to scale
   * @param {Number} b amount to scale the matrix's elements by
   * @returns {mat4} out
   */

  function multiplyScalar$1(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    out[6] = a[6] * b;
    out[7] = a[7] * b;
    out[8] = a[8] * b;
    out[9] = a[9] * b;
    out[10] = a[10] * b;
    out[11] = a[11] * b;
    out[12] = a[12] * b;
    out[13] = a[13] * b;
    out[14] = a[14] * b;
    out[15] = a[15] * b;
    return out;
  }
  /**
   * Adds two mat4's after multiplying each element of the second operand by a scalar value.
   *
   * @param {mat4} out the receiving vector
   * @param {ReadonlyMat4} a the first operand
   * @param {ReadonlyMat4} b the second operand
   * @param {Number} scale the amount to scale b's elements by before adding
   * @returns {mat4} out
   */

  function multiplyScalarAndAdd(out, a, b, scale) {
    out[0] = a[0] + b[0] * scale;
    out[1] = a[1] + b[1] * scale;
    out[2] = a[2] + b[2] * scale;
    out[3] = a[3] + b[3] * scale;
    out[4] = a[4] + b[4] * scale;
    out[5] = a[5] + b[5] * scale;
    out[6] = a[6] + b[6] * scale;
    out[7] = a[7] + b[7] * scale;
    out[8] = a[8] + b[8] * scale;
    out[9] = a[9] + b[9] * scale;
    out[10] = a[10] + b[10] * scale;
    out[11] = a[11] + b[11] * scale;
    out[12] = a[12] + b[12] * scale;
    out[13] = a[13] + b[13] * scale;
    out[14] = a[14] + b[14] * scale;
    out[15] = a[15] + b[15] * scale;
    return out;
  }
  /**
   * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
   *
   * @param {ReadonlyMat4} a The first matrix.
   * @param {ReadonlyMat4} b The second matrix.
   * @returns {Boolean} True if the matrices are equal, false otherwise.
   */

  function exactEquals$1(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
  }
  /**
   * Returns whether or not the matrices have approximately the same elements in the same position.
   *
   * @param {ReadonlyMat4} a The first matrix.
   * @param {ReadonlyMat4} b The second matrix.
   * @returns {Boolean} True if the matrices are equal, false otherwise.
   */

  function equals$1(a, b) {
    var a0 = a[0],
        a1 = a[1],
        a2 = a[2],
        a3 = a[3];
    var a4 = a[4],
        a5 = a[5],
        a6 = a[6],
        a7 = a[7];
    var a8 = a[8],
        a9 = a[9],
        a10 = a[10],
        a11 = a[11];
    var a12 = a[12],
        a13 = a[13],
        a14 = a[14],
        a15 = a[15];
    var b0 = b[0],
        b1 = b[1],
        b2 = b[2],
        b3 = b[3];
    var b4 = b[4],
        b5 = b[5],
        b6 = b[6],
        b7 = b[7];
    var b8 = b[8],
        b9 = b[9],
        b10 = b[10],
        b11 = b[11];
    var b12 = b[12],
        b13 = b[13],
        b14 = b[14],
        b15 = b[15];
    return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));
  }
  /**
   * Alias for {@link mat4.multiply}
   * @function
   */

  var mul = multiply$1;
  /**
   * Alias for {@link mat4.subtract}
   * @function
   */

  var sub$1 = subtract$2;

  var mat4 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    create: create$3,
    clone: clone,
    copy: copy,
    fromValues: fromValues$3,
    set: set$2,
    identity: identity,
    transpose: transpose,
    invert: invert,
    adjoint: adjoint,
    determinant: determinant,
    multiply: multiply$1,
    translate: translate,
    scale: scale$1,
    rotate: rotate,
    rotateX: rotateX,
    rotateY: rotateY,
    rotateZ: rotateZ,
    fromTranslation: fromTranslation,
    fromScaling: fromScaling,
    fromRotation: fromRotation,
    fromXRotation: fromXRotation,
    fromYRotation: fromYRotation,
    fromZRotation: fromZRotation,
    fromRotationTranslation: fromRotationTranslation,
    fromQuat2: fromQuat2,
    getTranslation: getTranslation,
    getScaling: getScaling,
    getRotation: getRotation,
    fromRotationTranslationScale: fromRotationTranslationScale,
    fromRotationTranslationScaleOrigin: fromRotationTranslationScaleOrigin,
    fromQuat: fromQuat,
    frustum: frustum,
    perspective: perspective,
    perspectiveFromFieldOfView: perspectiveFromFieldOfView,
    ortho: ortho,
    lookAt: lookAt,
    targetTo: targetTo,
    str: str,
    frob: frob,
    add: add$2,
    subtract: subtract$2,
    multiplyScalar: multiplyScalar$1,
    multiplyScalarAndAdd: multiplyScalarAndAdd,
    exactEquals: exactEquals$1,
    equals: equals$1,
    mul: mul,
    sub: sub$1
  });

  /**
   * 3 Dimensional Vector
   * @module vec3
   */

  /**
   * Creates a new, empty vec3
   *
   * @returns {vec3} a new 3D vector
   */

  function create$2() {
    var out = new ARRAY_TYPE(3);

    if (ARRAY_TYPE != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
    }

    return out;
  }
  /**
   * Calculates the length of a vec3
   *
   * @param {ReadonlyVec3} a vector to calculate length of
   * @returns {Number} length of a
   */

  function length(a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    return Math.hypot(x, y, z);
  }
  /**
   * Creates a new vec3 initialized with the given values
   *
   * @param {Number} x X component
   * @param {Number} y Y component
   * @param {Number} z Z component
   * @returns {vec3} a new 3D vector
   */

  function fromValues$2(x, y, z) {
    var out = new ARRAY_TYPE(3);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
  }
  /**
   * Set the components of a vec3 to the given values
   *
   * @param {vec3} out the receiving vector
   * @param {Number} x X component
   * @param {Number} y Y component
   * @param {Number} z Z component
   * @returns {vec3} out
   */

  function set$1(out, x, y, z) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
  }
  /**
   * Adds two vec3's
   *
   * @param {vec3} out the receiving vector
   * @param {ReadonlyVec3} a the first operand
   * @param {ReadonlyVec3} b the second operand
   * @returns {vec3} out
   */

  function add$1(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    return out;
  }
  /**
   * Subtracts vector b from vector a
   *
   * @param {vec3} out the receiving vector
   * @param {ReadonlyVec3} a the first operand
   * @param {ReadonlyVec3} b the second operand
   * @returns {vec3} out
   */

  function subtract$1(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    return out;
  }
  /**
   * Scales a vec3 by a scalar number
   *
   * @param {vec3} out the receiving vector
   * @param {ReadonlyVec3} a the vector to scale
   * @param {Number} b amount to scale the vector by
   * @returns {vec3} out
   */

  function scale(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    return out;
  }
  /**
   * Returns the inverse of the components of a vec3
   *
   * @param {vec3} out the receiving vector
   * @param {ReadonlyVec3} a vector to invert
   * @returns {vec3} out
   */

  function inverse(out, a) {
    out[0] = 1.0 / a[0];
    out[1] = 1.0 / a[1];
    out[2] = 1.0 / a[2];
    return out;
  }
  /**
   * Normalize a vec3
   *
   * @param {vec3} out the receiving vector
   * @param {ReadonlyVec3} a vector to normalize
   * @returns {vec3} out
   */

  function normalize$3(out, a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var len = x * x + y * y + z * z;

    if (len > 0) {
      //TODO: evaluate use of glm_invsqrt here?
      len = 1 / Math.sqrt(len);
    }

    out[0] = a[0] * len;
    out[1] = a[1] * len;
    out[2] = a[2] * len;
    return out;
  }
  /**
   * Calculates the dot product of two vec3's
   *
   * @param {ReadonlyVec3} a the first operand
   * @param {ReadonlyVec3} b the second operand
   * @returns {Number} dot product of a and b
   */

  function dot$1(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  /**
   * Computes the cross product of two vec3's
   *
   * @param {vec3} out the receiving vector
   * @param {ReadonlyVec3} a the first operand
   * @param {ReadonlyVec3} b the second operand
   * @returns {vec3} out
   */

  function cross$1(out, a, b) {
    var ax = a[0],
        ay = a[1],
        az = a[2];
    var bx = b[0],
        by = b[1],
        bz = b[2];
    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
  }
  /**
   * Transforms the vec3 with a mat4.
   * 4th vector component is implicitly '1'
   *
   * @param {vec3} out the receiving vector
   * @param {ReadonlyVec3} a the vector to transform
   * @param {ReadonlyMat4} m matrix to transform with
   * @returns {vec3} out
   */

  function transformMat4$1(out, a, m) {
    var x = a[0],
        y = a[1],
        z = a[2];
    var w = m[3] * x + m[7] * y + m[11] * z + m[15];
    w = w || 1.0;
    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
    return out;
  }
  /**
   * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
   *
   * @param {ReadonlyVec3} a The first vector.
   * @param {ReadonlyVec3} b The second vector.
   * @returns {Boolean} True if the vectors are equal, false otherwise.
   */

  function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
  }
  /**
   * Returns whether or not the vectors have approximately the same elements in the same position.
   *
   * @param {ReadonlyVec3} a The first vector.
   * @param {ReadonlyVec3} b The second vector.
   * @returns {Boolean} True if the vectors are equal, false otherwise.
   */

  function equals(a, b) {
    var a0 = a[0],
        a1 = a[1],
        a2 = a[2];
    var b0 = b[0],
        b1 = b[1],
        b2 = b[2];
    return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));
  }
  /**
   * Alias for {@link vec3.subtract}
   * @function
   */

  var sub = subtract$1;
  /**
   * Alias for {@link vec3.length}
   * @function
   */

  var len = length;
  /**
   * Perform some operation over an array of vec3s.
   *
   * @param {Array} a the array of vectors to iterate over
   * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
   * @param {Number} offset Number of elements to skip at the beginning of the array
   * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
   * @param {Function} fn Function to call for each vector in the array
   * @param {Object} [arg] additional argument to pass to fn
   * @returns {Array} a
   * @function
   */

  (function () {
    var vec = create$2();
    return function (a, stride, offset, count, fn, arg) {
      var i, l;

      if (!stride) {
        stride = 3;
      }

      if (!offset) {
        offset = 0;
      }

      if (count) {
        l = Math.min(count * stride + offset, a.length);
      } else {
        l = a.length;
      }

      for (i = offset; i < l; i += stride) {
        vec[0] = a[i];
        vec[1] = a[i + 1];
        vec[2] = a[i + 2];
        fn(vec, vec, arg);
        a[i] = vec[0];
        a[i + 1] = vec[1];
        a[i + 2] = vec[2];
      }

      return a;
    };
  })();

  /**
   * 4 Dimensional Vector
   * @module vec4
   */

  /**
   * Creates a new, empty vec4
   *
   * @returns {vec4} a new 4D vector
   */

  function create$1() {
    var out = new ARRAY_TYPE(4);

    if (ARRAY_TYPE != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
    }

    return out;
  }
  /**
   * Creates a new vec4 initialized with the given values
   *
   * @param {Number} x X component
   * @param {Number} y Y component
   * @param {Number} z Z component
   * @param {Number} w W component
   * @returns {vec4} a new 4D vector
   */

  function fromValues$1(x, y, z, w) {
    var out = new ARRAY_TYPE(4);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
  }
  /**
   * Normalize a vec4
   *
   * @param {vec4} out the receiving vector
   * @param {ReadonlyVec4} a vector to normalize
   * @returns {vec4} out
   */

  function normalize$2(out, a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var w = a[3];
    var len = x * x + y * y + z * z + w * w;

    if (len > 0) {
      len = 1 / Math.sqrt(len);
    }

    out[0] = x * len;
    out[1] = y * len;
    out[2] = z * len;
    out[3] = w * len;
    return out;
  }
  /**
   * Transforms the vec4 with a mat4.
   *
   * @param {vec4} out the receiving vector
   * @param {ReadonlyVec4} a the vector to transform
   * @param {ReadonlyMat4} m matrix to transform with
   * @returns {vec4} out
   */

  function transformMat4(out, a, m) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
    return out;
  }
  /**
   * Perform some operation over an array of vec4s.
   *
   * @param {Array} a the array of vectors to iterate over
   * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
   * @param {Number} offset Number of elements to skip at the beginning of the array
   * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
   * @param {Function} fn Function to call for each vector in the array
   * @param {Object} [arg] additional argument to pass to fn
   * @returns {Array} a
   * @function
   */

  (function () {
    var vec = create$1();
    return function (a, stride, offset, count, fn, arg) {
      var i, l;

      if (!stride) {
        stride = 4;
      }

      if (!offset) {
        offset = 0;
      }

      if (count) {
        l = Math.min(count * stride + offset, a.length);
      } else {
        l = a.length;
      }

      for (i = offset; i < l; i += stride) {
        vec[0] = a[i];
        vec[1] = a[i + 1];
        vec[2] = a[i + 2];
        vec[3] = a[i + 3];
        fn(vec, vec, arg);
        a[i] = vec[0];
        a[i + 1] = vec[1];
        a[i + 2] = vec[2];
        a[i + 3] = vec[3];
      }

      return a;
    };
  })();

  /**
   * Quaternion
   * @module quat
   */

  /**
   * Creates a new identity quat
   *
   * @returns {quat} a new quaternion
   */

  function create() {
    var out = new ARRAY_TYPE(4);

    if (ARRAY_TYPE != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
    }

    out[3] = 1;
    return out;
  }
  /**
   * Sets a quat from the given angle and rotation axis,
   * then returns it.
   *
   * @param {quat} out the receiving quaternion
   * @param {ReadonlyVec3} axis the axis around which to rotate
   * @param {Number} rad the angle in radians
   * @returns {quat} out
   **/

  function setAxisAngle(out, axis, rad) {
    rad = rad * 0.5;
    var s = Math.sin(rad);
    out[0] = s * axis[0];
    out[1] = s * axis[1];
    out[2] = s * axis[2];
    out[3] = Math.cos(rad);
    return out;
  }
  /**
   * Gets the rotation axis and angle for a given
   *  quaternion. If a quaternion is created with
   *  setAxisAngle, this method will return the same
   *  values as providied in the original parameter list
   *  OR functionally equivalent values.
   * Example: The quaternion formed by axis [0, 0, 1] and
   *  angle -90 is the same as the quaternion formed by
   *  [0, 0, 1] and 270. This method favors the latter.
   * @param  {vec3} out_axis  Vector receiving the axis of rotation
   * @param  {ReadonlyQuat} q     Quaternion to be decomposed
   * @return {Number}     Angle, in radians, of the rotation
   */

  function getAxisAngle(out_axis, q) {
    var rad = Math.acos(q[3]) * 2.0;
    var s = Math.sin(rad / 2.0);

    if (s > EPSILON) {
      out_axis[0] = q[0] / s;
      out_axis[1] = q[1] / s;
      out_axis[2] = q[2] / s;
    } else {
      // If s is zero, return any axis (no rotation - axis does not matter)
      out_axis[0] = 1;
      out_axis[1] = 0;
      out_axis[2] = 0;
    }

    return rad;
  }
  /**
   * Multiplies two quat's
   *
   * @param {quat} out the receiving quaternion
   * @param {ReadonlyQuat} a the first operand
   * @param {ReadonlyQuat} b the second operand
   * @returns {quat} out
   */

  function multiply(out, a, b) {
    var ax = a[0],
        ay = a[1],
        az = a[2],
        aw = a[3];
    var bx = b[0],
        by = b[1],
        bz = b[2],
        bw = b[3];
    out[0] = ax * bw + aw * bx + ay * bz - az * by;
    out[1] = ay * bw + aw * by + az * bx - ax * bz;
    out[2] = az * bw + aw * bz + ax * by - ay * bx;
    out[3] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
  }
  /**
   * Performs a spherical linear interpolation between two quat
   *
   * @param {quat} out the receiving quaternion
   * @param {ReadonlyQuat} a the first operand
   * @param {ReadonlyQuat} b the second operand
   * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
   * @returns {quat} out
   */

  function slerp(out, a, b, t) {
    // benchmarks:
    //    http://jsperf.com/quaternion-slerp-implementations
    var ax = a[0],
        ay = a[1],
        az = a[2],
        aw = a[3];
    var bx = b[0],
        by = b[1],
        bz = b[2],
        bw = b[3];
    var omega, cosom, sinom, scale0, scale1; // calc cosine

    cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)

    if (cosom < 0.0) {
      cosom = -cosom;
      bx = -bx;
      by = -by;
      bz = -bz;
      bw = -bw;
    } // calculate coefficients


    if (1.0 - cosom > EPSILON) {
      // standard case (slerp)
      omega = Math.acos(cosom);
      sinom = Math.sin(omega);
      scale0 = Math.sin((1.0 - t) * omega) / sinom;
      scale1 = Math.sin(t * omega) / sinom;
    } else {
      // "from" and "to" quaternions are very close
      //  ... so we can do a linear interpolation
      scale0 = 1.0 - t;
      scale1 = t;
    } // calculate final values


    out[0] = scale0 * ax + scale1 * bx;
    out[1] = scale0 * ay + scale1 * by;
    out[2] = scale0 * az + scale1 * bz;
    out[3] = scale0 * aw + scale1 * bw;
    return out;
  }
  /**
   * Calculates the conjugate of a quat
   * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
   *
   * @param {quat} out the receiving quaternion
   * @param {ReadonlyQuat} a quat to calculate conjugate of
   * @returns {quat} out
   */

  function conjugate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a[3];
    return out;
  }
  /**
   * Creates a quaternion from the given 3x3 rotation matrix.
   *
   * NOTE: The resultant quaternion is not normalized, so you should be sure
   * to renormalize the quaternion yourself where necessary.
   *
   * @param {quat} out the receiving quaternion
   * @param {ReadonlyMat3} m rotation matrix
   * @returns {quat} out
   * @function
   */

  function fromMat3(out, m) {
    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
    // article "Quaternion Calculus and Fast Animation".
    var fTrace = m[0] + m[4] + m[8];
    var fRoot;

    if (fTrace > 0.0) {
      // |w| > 1/2, may as well choose w > 1/2
      fRoot = Math.sqrt(fTrace + 1.0); // 2w

      out[3] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot; // 1/(4w)

      out[0] = (m[5] - m[7]) * fRoot;
      out[1] = (m[6] - m[2]) * fRoot;
      out[2] = (m[1] - m[3]) * fRoot;
    } else {
      // |w| <= 1/2
      var i = 0;
      if (m[4] > m[0]) i = 1;
      if (m[8] > m[i * 3 + i]) i = 2;
      var j = (i + 1) % 3;
      var k = (i + 2) % 3;
      fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
      out[i] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot;
      out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
      out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
      out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
    }

    return out;
  }
  /**
   * Creates a new quat initialized with the given values
   *
   * @param {Number} x X component
   * @param {Number} y Y component
   * @param {Number} z Z component
   * @param {Number} w W component
   * @returns {quat} a new quaternion
   * @function
   */

  var fromValues = fromValues$1;
  /**
   * Normalize a quat
   *
   * @param {quat} out the receiving quaternion
   * @param {ReadonlyQuat} a quaternion to normalize
   * @returns {quat} out
   * @function
   */

  var normalize$1 = normalize$2;
  /**
   * Sets a quaternion to represent the shortest rotation from one
   * vector to another.
   *
   * Both vectors are assumed to be unit length.
   *
   * @param {quat} out the receiving quaternion.
   * @param {ReadonlyVec3} a the initial vector
   * @param {ReadonlyVec3} b the destination vector
   * @returns {quat} out
   */

  (function () {
    var tmpvec3 = create$2();
    var xUnitVec3 = fromValues$2(1, 0, 0);
    var yUnitVec3 = fromValues$2(0, 1, 0);
    return function (out, a, b) {
      var dot = dot$1(a, b);

      if (dot < -0.999999) {
        cross$1(tmpvec3, xUnitVec3, a);
        if (len(tmpvec3) < 0.000001) cross$1(tmpvec3, yUnitVec3, a);
        normalize$3(tmpvec3, tmpvec3);
        setAxisAngle(out, tmpvec3, Math.PI);
        return out;
      } else if (dot > 0.999999) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        return out;
      } else {
        cross$1(tmpvec3, a, b);
        out[0] = tmpvec3[0];
        out[1] = tmpvec3[1];
        out[2] = tmpvec3[2];
        out[3] = 1 + dot;
        return normalize$1(out, out);
      }
    };
  })();
  /**
   * Performs a spherical linear interpolation with two control points
   *
   * @param {quat} out the receiving quaternion
   * @param {ReadonlyQuat} a the first operand
   * @param {ReadonlyQuat} b the second operand
   * @param {ReadonlyQuat} c the third operand
   * @param {ReadonlyQuat} d the fourth operand
   * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
   * @returns {quat} out
   */

  (function () {
    var temp1 = create();
    var temp2 = create();
    return function (out, a, b, c, d, t) {
      slerp(temp1, a, d, t);
      slerp(temp2, b, c, t);
      slerp(out, temp1, temp2, 2 * t * (1 - t));
      return out;
    };
  })();
  /**
   * Sets the specified quaternion with values corresponding to the given
   * axes. Each axis is a vec3 and is expected to be unit length and
   * perpendicular to all other specified axes.
   *
   * @param {ReadonlyVec3} view  the vector representing the viewing direction
   * @param {ReadonlyVec3} right the vector representing the local "right" direction
   * @param {ReadonlyVec3} up    the vector representing the local "up" direction
   * @returns {quat} out
   */

  (function () {
    var matr = create$4();
    return function (out, view, right, up) {
      matr[0] = right[0];
      matr[3] = right[1];
      matr[6] = right[2];
      matr[1] = up[0];
      matr[4] = up[1];
      matr[7] = up[2];
      matr[2] = -view[0];
      matr[5] = -view[1];
      matr[8] = -view[2];
      return normalize$1(out, fromMat3(out, matr));
    };
  })();

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct$1() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct$1()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  var toStr$2 = Object.prototype.toString;

  var isArguments = function isArguments(value) {
  	var str = toStr$2.call(value);
  	var isArgs = str === '[object Arguments]';
  	if (!isArgs) {
  		isArgs = str !== '[object Array]' &&
  			value !== null &&
  			typeof value === 'object' &&
  			typeof value.length === 'number' &&
  			value.length >= 0 &&
  			toStr$2.call(value.callee) === '[object Function]';
  	}
  	return isArgs;
  };

  var keysShim$1;
  if (!Object.keys) {
  	// modified from https://github.com/es-shims/es5-shim
  	var has$1 = Object.prototype.hasOwnProperty;
  	var toStr$1 = Object.prototype.toString;
  	var isArgs = isArguments; // eslint-disable-line global-require
  	var isEnumerable = Object.prototype.propertyIsEnumerable;
  	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
  	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
  	var dontEnums = [
  		'toString',
  		'toLocaleString',
  		'valueOf',
  		'hasOwnProperty',
  		'isPrototypeOf',
  		'propertyIsEnumerable',
  		'constructor'
  	];
  	var equalsConstructorPrototype = function (o) {
  		var ctor = o.constructor;
  		return ctor && ctor.prototype === o;
  	};
  	var excludedKeys = {
  		$applicationCache: true,
  		$console: true,
  		$external: true,
  		$frame: true,
  		$frameElement: true,
  		$frames: true,
  		$innerHeight: true,
  		$innerWidth: true,
  		$onmozfullscreenchange: true,
  		$onmozfullscreenerror: true,
  		$outerHeight: true,
  		$outerWidth: true,
  		$pageXOffset: true,
  		$pageYOffset: true,
  		$parent: true,
  		$scrollLeft: true,
  		$scrollTop: true,
  		$scrollX: true,
  		$scrollY: true,
  		$self: true,
  		$webkitIndexedDB: true,
  		$webkitStorageInfo: true,
  		$window: true
  	};
  	var hasAutomationEqualityBug = (function () {
  		/* global window */
  		if (typeof window === 'undefined') { return false; }
  		for (var k in window) {
  			try {
  				if (!excludedKeys['$' + k] && has$1.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
  					try {
  						equalsConstructorPrototype(window[k]);
  					} catch (e) {
  						return true;
  					}
  				}
  			} catch (e) {
  				return true;
  			}
  		}
  		return false;
  	}());
  	var equalsConstructorPrototypeIfNotBuggy = function (o) {
  		/* global window */
  		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
  			return equalsConstructorPrototype(o);
  		}
  		try {
  			return equalsConstructorPrototype(o);
  		} catch (e) {
  			return false;
  		}
  	};

  	keysShim$1 = function keys(object) {
  		var isObject = object !== null && typeof object === 'object';
  		var isFunction = toStr$1.call(object) === '[object Function]';
  		var isArguments = isArgs(object);
  		var isString = isObject && toStr$1.call(object) === '[object String]';
  		var theKeys = [];

  		if (!isObject && !isFunction && !isArguments) {
  			throw new TypeError('Object.keys called on a non-object');
  		}

  		var skipProto = hasProtoEnumBug && isFunction;
  		if (isString && object.length > 0 && !has$1.call(object, 0)) {
  			for (var i = 0; i < object.length; ++i) {
  				theKeys.push(String(i));
  			}
  		}

  		if (isArguments && object.length > 0) {
  			for (var j = 0; j < object.length; ++j) {
  				theKeys.push(String(j));
  			}
  		} else {
  			for (var name in object) {
  				if (!(skipProto && name === 'prototype') && has$1.call(object, name)) {
  					theKeys.push(String(name));
  				}
  			}
  		}

  		if (hasDontEnumBug) {
  			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

  			for (var k = 0; k < dontEnums.length; ++k) {
  				if (!(skipConstructor && dontEnums[k] === 'constructor') && has$1.call(object, dontEnums[k])) {
  					theKeys.push(dontEnums[k]);
  				}
  			}
  		}
  		return theKeys;
  	};
  }
  var implementation = keysShim$1;

  var slice = Array.prototype.slice;


  var origKeys = Object.keys;
  var keysShim = origKeys ? function keys(o) { return origKeys(o); } : implementation;

  var originalKeys = Object.keys;

  keysShim.shim = function shimObjectKeys() {
  	if (Object.keys) {
  		var keysWorksWithArguments = (function () {
  			// Safari 5.0 bug
  			var args = Object.keys(arguments);
  			return args && args.length === arguments.length;
  		}(1, 2));
  		if (!keysWorksWithArguments) {
  			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
  				if (isArguments(object)) {
  					return originalKeys(slice.call(object));
  				}
  				return originalKeys(object);
  			};
  		}
  	} else {
  		Object.keys = keysShim;
  	}
  	return Object.keys || keysShim;
  };

  var objectKeys = keysShim;

  var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

  var toStr = Object.prototype.toString;
  var concat = Array.prototype.concat;
  var origDefineProperty = Object.defineProperty;

  var isFunction$1 = function (fn) {
  	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
  };

  var arePropertyDescriptorsSupported = function () {
  	var obj = {};
  	try {
  		origDefineProperty(obj, 'x', { enumerable: false, value: obj });
  		// eslint-disable-next-line no-unused-vars, no-restricted-syntax
  		for (var _ in obj) { // jscs:ignore disallowUnusedVariables
  			return false;
  		}
  		return obj.x === obj;
  	} catch (e) { /* this is IE 8. */
  		return false;
  	}
  };
  var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

  var defineProperty = function (object, name, value, predicate) {
  	if (name in object && (!isFunction$1(predicate) || !predicate())) {
  		return;
  	}
  	if (supportsDescriptors) {
  		origDefineProperty(object, name, {
  			configurable: true,
  			enumerable: false,
  			value: value,
  			writable: true
  		});
  	} else {
  		object[name] = value;
  	}
  };

  var defineProperties = function (object, map) {
  	var predicates = arguments.length > 2 ? arguments[2] : {};
  	var props = objectKeys(map);
  	if (hasSymbols) {
  		props = concat.call(props, Object.getOwnPropertySymbols(map));
  	}
  	for (var i = 0; i < props.length; i += 1) {
  		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
  	}
  };

  defineProperties.supportsDescriptors = !!supportsDescriptors;

  var defineProperties_1 = defineProperties;

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getAugmentedNamespace(n) {
  	if (n.__esModule) return n;
  	var a = Object.defineProperty({}, '__esModule', {value: true});
  	Object.keys(n).forEach(function (k) {
  		var d = Object.getOwnPropertyDescriptor(n, k);
  		Object.defineProperty(a, k, d.get ? d : {
  			enumerable: true,
  			get: function () {
  				return n[k];
  			}
  		});
  	});
  	return a;
  }

  function createCommonjsModule(fn) {
    var module = { exports: {} };
  	return fn(module, module.exports), module.exports;
  }

  /* eslint no-negated-condition: 0, no-new-func: 0 */

  var implementation_browser = createCommonjsModule(function (module) {

  if (typeof self !== 'undefined') {
  	module.exports = self;
  } else if (typeof window !== 'undefined') {
  	module.exports = window;
  } else {
  	module.exports = Function('return this')();
  }
  });

  var polyfill$1 = function getPolyfill() {
  	if (typeof commonjsGlobal !== 'object' || !commonjsGlobal || commonjsGlobal.Math !== Math || commonjsGlobal.Array !== Array) {
  		return implementation_browser;
  	}
  	return commonjsGlobal;
  };

  var shim = function shimGlobal() {
  	var polyfill = polyfill$1();
  	if (defineProperties_1.supportsDescriptors) {
  		var descriptor = Object.getOwnPropertyDescriptor(polyfill, 'globalThis');
  		if (!descriptor || (descriptor.configurable && (descriptor.enumerable || descriptor.writable || globalThis !== polyfill))) { // eslint-disable-line max-len
  			Object.defineProperty(polyfill, 'globalThis', {
  				configurable: true,
  				enumerable: false,
  				value: polyfill,
  				writable: false
  			});
  		}
  	} else if (typeof globalThis !== 'object' || globalThis !== polyfill) {
  		polyfill.globalThis = polyfill;
  	}
  	return polyfill;
  };

  var polyfill = polyfill$1();

  var getGlobal = function () { return polyfill; };

  defineProperties_1(getGlobal, {
  	getPolyfill: polyfill$1,
  	implementation: implementation_browser,
  	shim: shim
  });

  var globalthis = getGlobal;

  function ownKeys$o(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$o(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$o(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$o(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  var vtkGlobal = globalthis(); // returns native globalThis if compliant

  var factoryMapping = {
    vtkObject: function vtkObject() {
      return null;
    }
  };
  function vtk(obj) {
    if (obj === null || obj === undefined) {
      return obj;
    }

    if (obj.isA) {
      return obj;
    }

    if (!obj.vtkClass) {
      if (vtkGlobal.console && vtkGlobal.console.error) {
        vtkGlobal.console.error('Invalid VTK object');
      }

      return null;
    }

    var constructor = factoryMapping[obj.vtkClass];

    if (!constructor) {
      if (vtkGlobal.console && vtkGlobal.console.error) {
        vtkGlobal.console.error("No vtk class found for Object of type ".concat(obj.vtkClass));
      }

      return null;
    } // Shallow copy object


    var model = _objectSpread$o({}, obj); // Convert into vtkObject any nested key


    Object.keys(model).forEach(function (keyName) {
      if (model[keyName] && _typeof(model[keyName]) === 'object' && model[keyName].vtkClass) {
        model[keyName] = vtk(model[keyName]);
      }
    }); // Return the root

    var newInst = constructor(model);

    if (newInst && newInst.modified) {
      newInst.modified();
    }

    return newInst;
  }

  function register(vtkClassName, constructor) {
    factoryMapping[vtkClassName] = constructor;
  } // Nest register method under the vtk function


  vtk.register = register;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);
        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }

    return _get(target, property, receiver || target);
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }

    return _assertThisInitialized(self);
  }

  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return _construct(Class, arguments, _getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var ClassHierarchy = /*#__PURE__*/function (_Array) {
    _inherits(ClassHierarchy, _Array);

    var _super = _createSuper(ClassHierarchy);

    function ClassHierarchy() {
      _classCallCheck(this, ClassHierarchy);

      return _super.apply(this, arguments);
    }

    _createClass(ClassHierarchy, [{
      key: "push",
      value: function push() {
        var _this = this,
            _get2;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        // no perf issue since args.length should be small
        var newArgs = args.filter(function (arg) {
          return !_this.includes(arg);
        });
        return (_get2 = _get(_getPrototypeOf(ClassHierarchy.prototype), "push", this)).call.apply(_get2, [this].concat(_toConsumableArray(newArgs)));
      }
    }]);

    return ClassHierarchy;
  }( /*#__PURE__*/_wrapNativeSuper(Array));

  function ownKeys$n(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$n(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$n(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$n(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  var globalMTime = 0;
  var VOID$1 = Symbol('void');

  function getCurrentGlobalMTime() {
    return globalMTime;
  } // ----------------------------------------------------------------------------
  // Logging function calls
  // ----------------------------------------------------------------------------

  /* eslint-disable no-prototype-builtins                                      */


  var fakeConsole = {};

  function noOp() {}

  var consoleMethods = ['log', 'debug', 'info', 'warn', 'error', 'time', 'timeEnd', 'group', 'groupEnd'];
  consoleMethods.forEach(function (methodName) {
    fakeConsole[methodName] = noOp;
  });
  vtkGlobal.console = console.hasOwnProperty('log') ? console : fakeConsole;
  var loggerFunctions = {
    debug: noOp,
    // Don't print debug by default
    error: vtkGlobal.console.error || noOp,
    info: vtkGlobal.console.info || noOp,
    log: vtkGlobal.console.log || noOp,
    warn: vtkGlobal.console.warn || noOp
  };
  function setLoggerFunction(name, fn) {
    if (loggerFunctions[name]) {
      loggerFunctions[name] = fn || noOp;
    }
  }
  function vtkLogMacro() {
    loggerFunctions.log.apply(loggerFunctions, arguments);
  }
  function vtkInfoMacro() {
    loggerFunctions.info.apply(loggerFunctions, arguments);
  }
  function vtkDebugMacro$a() {
    loggerFunctions.debug.apply(loggerFunctions, arguments);
  }
  function vtkErrorMacro$m() {
    loggerFunctions.error.apply(loggerFunctions, arguments);
  }
  function vtkWarningMacro$6() {
    loggerFunctions.warn.apply(loggerFunctions, arguments);
  }
  var ERROR_ONCE_MAP = {};
  function vtkOnceErrorMacro$1(str) {
    if (!ERROR_ONCE_MAP[str]) {
      loggerFunctions.error(str);
      ERROR_ONCE_MAP[str] = true;
    }
  } // ----------------------------------------------------------------------------
  // TypedArray
  // ----------------------------------------------------------------------------

  var TYPED_ARRAYS = Object.create(null);
  TYPED_ARRAYS.Float32Array = Float32Array;
  TYPED_ARRAYS.Float64Array = Float64Array;
  TYPED_ARRAYS.Uint8Array = Uint8Array;
  TYPED_ARRAYS.Int8Array = Int8Array;
  TYPED_ARRAYS.Uint16Array = Uint16Array;
  TYPED_ARRAYS.Int16Array = Int16Array;
  TYPED_ARRAYS.Uint32Array = Uint32Array;
  TYPED_ARRAYS.Int32Array = Int32Array;
  TYPED_ARRAYS.Uint8ClampedArray = Uint8ClampedArray; // TYPED_ARRAYS.BigInt64Array = BigInt64Array;
  // TYPED_ARRAYS.BigUint64Array = BigUint64Array;

  function newTypedArray(type) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return _construct(TYPED_ARRAYS[type] || Float64Array, args);
  }
  function newTypedArrayFrom(type) {
    var _ref;

    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    return (_ref = TYPED_ARRAYS[type] || Float64Array).from.apply(_ref, args);
  } // ----------------------------------------------------------------------------
  // capitilze provided string
  // ----------------------------------------------------------------------------

  function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }
  function uncapitalize(str) {
    return str.charAt(0).toLowerCase() + str.slice(1);
  } // ----------------------------------------------------------------------------
  // Convert byte size into a well formatted string
  // ----------------------------------------------------------------------------

  function formatBytesToProperUnit(size) {
    var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
    var chunkSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000;
    var units = ['TB', 'GB', 'MB', 'KB'];
    var value = Number(size);
    var currentUnit = 'B';

    while (value > chunkSize) {
      value /= chunkSize;
      currentUnit = units.pop();
    }

    return "".concat(value.toFixed(precision), " ").concat(currentUnit);
  } // ----------------------------------------------------------------------------
  // Convert thousand number with proper separator
  // ----------------------------------------------------------------------------

  function formatNumbersWithThousandSeparator(n) {
    var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ' ';
    var sections = [];
    var size = n;

    while (size > 1000) {
      sections.push("000".concat(size % 1000).slice(-3));
      size = Math.floor(size / 1000);
    }

    if (size > 0) {
      sections.push(size);
    }

    sections.reverse();
    return sections.join(separator);
  } // ----------------------------------------------------------------------------
  // Array helper
  // ----------------------------------------------------------------------------

  function safeArrays(model) {
    Object.keys(model).forEach(function (key) {
      if (Array.isArray(model[key])) {
        model[key] = [].concat(model[key]);
      }
    });
  } // ----------------------------------------------------------------------------
  // shallow equals
  // ----------------------------------------------------------------------------


  function shallowEquals(a, b) {
    if (a === b) {
      return true;
    }

    if (Array.isArray(a) && Array.isArray(b)) {
      if (a.length !== b.length) {
        return false;
      }

      for (var i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) {
          return false;
        }
      }

      return true;
    }

    return false;
  } // ----------------------------------------------------------------------------


  function enumToString(e, value) {
    return Object.keys(e).find(function (key) {
      return e[key] === value;
    });
  }

  function getStateArrayMapFunc(item) {
    if (item.isA) {
      return item.getState();
    }

    return item;
  } // ----------------------------------------------------------------------------
  // setImmediate
  // ----------------------------------------------------------------------------


  function setImmediateVTK(fn) {
    setTimeout(fn, 0);
  } // ----------------------------------------------------------------------------
  // vtkObject: modified(), onModified(callback), delete()
  // ----------------------------------------------------------------------------

  function obj() {
    var publicAPI = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var model = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    // Ensure each instance as a unique ref of array
    safeArrays(model);
    var callbacks = [];

    if (!Number.isInteger(model.mtime)) {
      model.mtime = ++globalMTime;
    }

    if (!('classHierarchy' in model)) {
      model.classHierarchy = new ClassHierarchy('vtkObject');
    } else if (!(model.classHierarchy instanceof ClassHierarchy)) {
      model.classHierarchy = ClassHierarchy.from(model.classHierarchy);
    }

    function off(index) {
      callbacks[index] = null;
    }

    function on(index) {
      function unsubscribe() {
        off(index);
      }

      return Object.freeze({
        unsubscribe: unsubscribe
      });
    }

    publicAPI.isDeleted = function () {
      return !!model.deleted;
    };

    publicAPI.modified = function (otherMTime) {
      if (model.deleted) {
        vtkErrorMacro$m('instance deleted - cannot call any method');
        return;
      }

      if (otherMTime && otherMTime < publicAPI.getMTime()) {
        return;
      }

      model.mtime = ++globalMTime;
      callbacks.forEach(function (callback) {
        return callback && callback(publicAPI);
      });
    };

    publicAPI.onModified = function (callback) {
      if (model.deleted) {
        vtkErrorMacro$m('instance deleted - cannot call any method');
        return null;
      }

      var index = callbacks.length;
      callbacks.push(callback);
      return on(index);
    };

    publicAPI.getMTime = function () {
      return model.mtime;
    };

    publicAPI.isA = function (className) {
      var count = model.classHierarchy.length; // we go backwards as that is more likely for
      // early termination

      while (count--) {
        if (model.classHierarchy[count] === className) {
          return true;
        }
      }

      return false;
    };

    publicAPI.getClassName = function () {
      var depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      return model.classHierarchy[model.classHierarchy.length - 1 - depth];
    };

    publicAPI.set = function () {
      var map = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var noWarning = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var noFunction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var ret = false;
      Object.keys(map).forEach(function (name) {
        var fn = noFunction ? null : publicAPI["set".concat(capitalize(name))];

        if (fn && Array.isArray(map[name]) && fn.length > 1) {
          ret = fn.apply(void 0, _toConsumableArray(map[name])) || ret;
        } else if (fn) {
          ret = fn(map[name]) || ret;
        } else {
          // Set data on model directly
          if (['mtime'].indexOf(name) === -1 && !noWarning) {
            vtkWarningMacro$6("Warning: Set value to model directly ".concat(name, ", ").concat(map[name]));
          }

          ret = model[name] !== map[name] || ret;
          model[name] = map[name];
        }
      });
      return ret;
    };

    publicAPI.get = function () {
      for (var _len3 = arguments.length, list = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        list[_key3] = arguments[_key3];
      }

      if (!list.length) {
        return model;
      }

      var subset = {};
      list.forEach(function (name) {
        subset[name] = model[name];
      });
      return subset;
    };

    publicAPI.getReferenceByName = function (val) {
      return model[val];
    };

    publicAPI.delete = function () {
      Object.keys(model).forEach(function (field) {
        return delete model[field];
      });
      callbacks.forEach(function (el, index) {
        return off(index);
      }); // Flag the instance being deleted

      model.deleted = true;
    }; // Add serialization support


    publicAPI.getState = function () {
      var jsonArchive = _objectSpread$n(_objectSpread$n({}, model), {}, {
        vtkClass: publicAPI.getClassName()
      }); // Convert every vtkObject to its serializable form


      Object.keys(jsonArchive).forEach(function (keyName) {
        if (jsonArchive[keyName] === null || jsonArchive[keyName] === undefined || keyName[0] === '_' // protected members start with _
        ) {
          delete jsonArchive[keyName];
        } else if (jsonArchive[keyName].isA) {
          jsonArchive[keyName] = jsonArchive[keyName].getState();
        } else if (Array.isArray(jsonArchive[keyName])) {
          jsonArchive[keyName] = jsonArchive[keyName].map(getStateArrayMapFunc);
        }
      }); // Sort resulting object by key name

      var sortedObj = {};
      Object.keys(jsonArchive).sort().forEach(function (name) {
        sortedObj[name] = jsonArchive[name];
      }); // Remove mtime

      if (sortedObj.mtime) {
        delete sortedObj.mtime;
      }

      return sortedObj;
    }; // Add shallowCopy(otherInstance) support


    publicAPI.shallowCopy = function (other) {
      var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (other.getClassName() !== publicAPI.getClassName()) {
        throw new Error("Cannot ShallowCopy ".concat(other.getClassName(), " into ").concat(publicAPI.getClassName()));
      }

      var otherModel = other.get();
      var keyList = Object.keys(model).sort();
      var otherKeyList = Object.keys(otherModel).sort();
      otherKeyList.forEach(function (key) {
        var keyIdx = keyList.indexOf(key);

        if (keyIdx === -1) {
          if (debug) {
            vtkDebugMacro$a("add ".concat(key, " in shallowCopy"));
          }
        } else {
          keyList.splice(keyIdx, 1);
        }

        model[key] = otherModel[key];
      });

      if (keyList.length && debug) {
        vtkDebugMacro$a("Untouched keys: ".concat(keyList.join(', ')));
      }

      publicAPI.modified();
    }; // Allow usage as decorator


    return publicAPI;
  } // ----------------------------------------------------------------------------
  // getXXX: add getters
  // ----------------------------------------------------------------------------

  function get$1(publicAPI, model, fieldNames) {
    fieldNames.forEach(function (field) {
      if (_typeof(field) === 'object') {
        publicAPI["get".concat(capitalize(field.name))] = function () {
          return model[field.name];
        };
      } else {
        publicAPI["get".concat(capitalize(field))] = function () {
          return model[field];
        };
      }
    });
  } // ----------------------------------------------------------------------------
  // setXXX: add setters
  // ----------------------------------------------------------------------------

  var objectSetterMap = {
    enum: function _enum(publicAPI, model, field) {
      return function (value) {
        if (typeof value === 'string') {
          if (field.enum[value] !== undefined) {
            if (model[field.name] !== field.enum[value]) {
              model[field.name] = field.enum[value];
              publicAPI.modified();
              return true;
            }

            return false;
          }

          vtkErrorMacro$m("Set Enum with invalid argument ".concat(field, ", ").concat(value));
          throw new RangeError('Set Enum with invalid string argument');
        }

        if (typeof value === 'number') {
          if (model[field.name] !== value) {
            if (Object.keys(field.enum).map(function (key) {
              return field.enum[key];
            }).indexOf(value) !== -1) {
              model[field.name] = value;
              publicAPI.modified();
              return true;
            }

            vtkErrorMacro$m("Set Enum outside numeric range ".concat(field, ", ").concat(value));
            throw new RangeError('Set Enum outside numeric range');
          }

          return false;
        }

        vtkErrorMacro$m("Set Enum with invalid argument (String/Number) ".concat(field, ", ").concat(value));
        throw new TypeError('Set Enum with invalid argument (String/Number)');
      };
    }
  };

  function findSetter(field) {
    if (_typeof(field) === 'object') {
      var fn = objectSetterMap[field.type];

      if (fn) {
        return function (publicAPI, model) {
          return fn(publicAPI, model, field);
        };
      }

      vtkErrorMacro$m("No setter for field ".concat(field));
      throw new TypeError('No setter for field');
    }

    return function getSetter(publicAPI, model) {
      return function setter(value) {
        if (model.deleted) {
          vtkErrorMacro$m('instance deleted - cannot call any method');
          return false;
        }

        if (model[field] !== value) {
          model[field] = value;
          publicAPI.modified();
          return true;
        }

        return false;
      };
    };
  }

  function set(publicAPI, model, fields) {
    fields.forEach(function (field) {
      if (_typeof(field) === 'object') {
        publicAPI["set".concat(capitalize(field.name))] = findSetter(field)(publicAPI, model);
      } else {
        publicAPI["set".concat(capitalize(field))] = findSetter(field)(publicAPI, model);
      }
    });
  } // ----------------------------------------------------------------------------
  // set/get XXX: add both setters and getters
  // ----------------------------------------------------------------------------

  function setGet(publicAPI, model, fieldNames) {
    get$1(publicAPI, model, fieldNames);
    set(publicAPI, model, fieldNames);
  } // ----------------------------------------------------------------------------
  // getXXX: add getters for object of type array with copy to be safe
  // getXXXByReference: add getters for object of type array without copy
  // ----------------------------------------------------------------------------

  function getArray(publicAPI, model, fieldNames) {
    fieldNames.forEach(function (field) {
      publicAPI["get".concat(capitalize(field))] = function () {
        return model[field] ? [].concat(model[field]) : model[field];
      };

      publicAPI["get".concat(capitalize(field), "ByReference")] = function () {
        return model[field];
      };
    });
  } // ----------------------------------------------------------------------------
  // setXXX: add setter for object of type array
  // if 'defaultVal' is supplied, shorter arrays will be padded to 'size' with 'defaultVal'
  // set...From: fast path to copy the content of an array to the current one without call to modified.
  // ----------------------------------------------------------------------------

  function setArray(publicAPI, model, fieldNames, size) {
    var defaultVal = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
    fieldNames.forEach(function (field) {
      if (model[field] && size && model[field].length !== size) {
        throw new RangeError("Invalid initial number of values for array (".concat(field, ")"));
      }

      publicAPI["set".concat(capitalize(field))] = function () {
        if (model.deleted) {
          vtkErrorMacro$m('instance deleted - cannot call any method');
          return false;
        }

        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }

        var array = args;
        var changeDetected;
        var needCopy = false; // allow null or an array to be passed as a single arg.

        if (array.length === 1 && (array[0] == null || array[0].length >= 0)) {
          /* eslint-disable prefer-destructuring */
          array = array[0];
          /* eslint-enable prefer-destructuring */

          needCopy = true;
        }

        if (array == null) {
          changeDetected = model[field] !== array;
        } else {
          if (size && array.length !== size) {
            if (array.length < size && defaultVal !== undefined) {
              array = Array.from(array);
              needCopy = false;

              while (array.length < size) {
                array.push(defaultVal);
              }
            } else {
              throw new RangeError("Invalid number of values for array setter (".concat(field, ")"));
            }
          }

          changeDetected = model[field] == null || model[field].some(function (item, index) {
            return item !== array[index];
          }) || model[field].length !== array.length;

          if (changeDetected && needCopy) {
            array = Array.from(array);
          }
        }

        if (changeDetected) {
          model[field] = array;
          publicAPI.modified();
        }

        return changeDetected;
      };

      publicAPI["set".concat(capitalize(field), "From")] = function (otherArray) {
        var target = model[field];
        otherArray.forEach(function (v, i) {
          target[i] = v;
        });
      };
    });
  } // ----------------------------------------------------------------------------
  // set/get XXX: add setter and getter for object of type array
  // ----------------------------------------------------------------------------

  function setGetArray(publicAPI, model, fieldNames, size) {
    var defaultVal = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
    getArray(publicAPI, model, fieldNames);
    setArray(publicAPI, model, fieldNames, size, defaultVal);
  } // ----------------------------------------------------------------------------
  // vtkAlgorithm: setInputData(), setInputConnection(), getOutputData(), getOutputPort()
  // ----------------------------------------------------------------------------

  function algo(publicAPI, model, numberOfInputs, numberOfOutputs) {
    if (model.inputData) {
      model.inputData = model.inputData.map(vtk);
    } else {
      model.inputData = [];
    }

    if (model.inputConnection) {
      model.inputConnection = model.inputConnection.map(vtk);
    } else {
      model.inputConnection = [];
    }

    if (model.output) {
      model.output = model.output.map(vtk);
    } else {
      model.output = [];
    }

    if (model.inputArrayToProcess) {
      model.inputArrayToProcess = model.inputArrayToProcess.map(vtk);
    } else {
      model.inputArrayToProcess = [];
    } // Cache the argument for later manipulation


    model.numberOfInputs = numberOfInputs; // Methods

    function setInputData(dataset) {
      var port = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      if (model.deleted) {
        vtkErrorMacro$m('instance deleted - cannot call any method');
        return;
      }

      if (port >= model.numberOfInputs) {
        vtkErrorMacro$m("algorithm ".concat(publicAPI.getClassName(), " only has ").concat(model.numberOfInputs, " input ports. To add more input ports, use addInputData()"));
        return;
      }

      if (model.inputData[port] !== dataset || model.inputConnection[port]) {
        model.inputData[port] = dataset;
        model.inputConnection[port] = null;

        if (publicAPI.modified) {
          publicAPI.modified();
        }
      }
    }

    function getInputData() {
      var port = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (model.inputConnection[port]) {
        model.inputData[port] = model.inputConnection[port]();
      }

      return model.inputData[port];
    }

    function setInputConnection(outputPort) {
      var port = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      if (model.deleted) {
        vtkErrorMacro$m('instance deleted - cannot call any method');
        return;
      }

      if (port >= model.numberOfInputs) {
        var msg = "algorithm ".concat(publicAPI.getClassName(), " only has ");
        msg += "".concat(model.numberOfInputs);
        msg += ' input ports. To add more input ports, use addInputConnection()';
        vtkErrorMacro$m(msg);
        return;
      }

      model.inputData[port] = null;
      model.inputConnection[port] = outputPort;
    }

    function getInputConnection() {
      var port = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      return model.inputConnection[port];
    }

    function addInputConnection(outputPort) {
      if (model.deleted) {
        vtkErrorMacro$m('instance deleted - cannot call any method');
        return;
      }

      var portToFill = model.numberOfInputs;

      while (portToFill && !model.inputData[portToFill - 1] && !model.inputConnection[portToFill - 1]) {
        portToFill--;
      }

      if (portToFill === model.numberOfInputs) {
        model.numberOfInputs++;
      }

      setInputConnection(outputPort, portToFill);
    }

    function addInputData(dataset) {
      if (model.deleted) {
        vtkErrorMacro$m('instance deleted - cannot call any method');
        return;
      }

      var portToFill = model.numberOfInputs;

      while (portToFill && !model.inputData[portToFill - 1] && !model.inputConnection[portToFill - 1]) {
        portToFill--;
      }

      if (portToFill === model.numberOfInputs) {
        model.numberOfInputs++;
      }

      setInputData(dataset, portToFill);
    }

    function getOutputData() {
      var port = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (model.deleted) {
        vtkErrorMacro$m('instance deleted - cannot call any method');
        return null;
      }

      if (publicAPI.shouldUpdate()) {
        publicAPI.update();
      }

      return model.output[port];
    }

    publicAPI.shouldUpdate = function () {
      var localMTime = publicAPI.getMTime();
      var count = numberOfOutputs;
      var minOutputMTime = Infinity;

      while (count--) {
        if (!model.output[count]) {
          return true;
        }

        if (model.output[count].isDeleted()) {
          return true;
        }

        var mt = model.output[count].getMTime();

        if (mt < localMTime) {
          return true;
        }

        if (mt < minOutputMTime) {
          minOutputMTime = mt;
        }
      }

      count = model.numberOfInputs;

      while (count--) {
        if (model.inputConnection[count] && model.inputConnection[count].filter.shouldUpdate()) {
          return true;
        }
      }

      count = model.numberOfInputs;

      while (count--) {
        if (publicAPI.getInputData(count) && publicAPI.getInputData(count).getMTime() > minOutputMTime) {
          return true;
        }
      }

      return false;
    };

    function getOutputPort() {
      var port = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      var outputPortAccess = function outputPortAccess() {
        return getOutputData(port);
      }; // Add reference to filter


      outputPortAccess.filter = publicAPI;
      return outputPortAccess;
    } // Handle input if needed


    if (model.numberOfInputs) {
      // Reserve inputs
      var count = model.numberOfInputs;

      while (count--) {
        model.inputData.push(null);
        model.inputConnection.push(null);
      } // Expose public methods


      publicAPI.setInputData = setInputData;
      publicAPI.setInputConnection = setInputConnection;
      publicAPI.addInputData = addInputData;
      publicAPI.addInputConnection = addInputConnection;
      publicAPI.getInputData = getInputData;
      publicAPI.getInputConnection = getInputConnection;
    }

    if (numberOfOutputs) {
      publicAPI.getOutputData = getOutputData;
      publicAPI.getOutputPort = getOutputPort;
    }

    publicAPI.update = function () {
      var ins = [];

      if (model.numberOfInputs) {
        var _count = 0;

        while (_count < model.numberOfInputs) {
          ins[_count] = publicAPI.getInputData(_count);
          _count++;
        }
      }

      if (publicAPI.shouldUpdate() && publicAPI.requestData) {
        publicAPI.requestData(ins, model.output);
      }
    };

    publicAPI.getNumberOfInputPorts = function () {
      return model.numberOfInputs;
    };

    publicAPI.getNumberOfOutputPorts = function () {
      return numberOfOutputs || model.output.length;
    };

    publicAPI.getInputArrayToProcess = function (inputPort) {
      var arrayDesc = model.inputArrayToProcess[inputPort];
      var ds = model.inputData[inputPort];

      if (arrayDesc && ds) {
        return ds["get".concat(arrayDesc.fieldAssociation)]().getArray(arrayDesc.arrayName);
      }

      return null;
    };

    publicAPI.setInputArrayToProcess = function (inputPort, arrayName, fieldAssociation) {
      var attributeType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'Scalars';

      while (model.inputArrayToProcess.length < inputPort) {
        model.inputArrayToProcess.push(null);
      }

      model.inputArrayToProcess[inputPort] = {
        arrayName: arrayName,
        fieldAssociation: fieldAssociation,
        attributeType: attributeType
      };
    };
  } // ----------------------------------------------------------------------------
  // Event handling: onXXX(callback), invokeXXX(args...)
  // ----------------------------------------------------------------------------

  var EVENT_ABORT = Symbol('Event abort');
  function event(publicAPI, model, eventName) {
    var callbacks = [];
    var previousDelete = publicAPI.delete;
    var curCallbackID = 1;

    function off(callbackID) {
      for (var i = 0; i < callbacks.length; ++i) {
        var _callbacks$i = _slicedToArray(callbacks[i], 1),
            cbID = _callbacks$i[0];

        if (cbID === callbackID) {
          callbacks.splice(i, 1);
          return;
        }
      }
    }

    function on(callbackID) {
      function unsubscribe() {
        off(callbackID);
      }

      return Object.freeze({
        unsubscribe: unsubscribe
      });
    }

    function invoke() {
      var _arguments = arguments;

      if (model.deleted) {
        vtkErrorMacro$m('instance deleted - cannot call any method');
        return;
      }
      /* eslint-disable prefer-rest-params */
      // Go through a copy of the callbacks array in case new callbacks
      // get prepended within previous callbacks


      var currentCallbacks = callbacks.slice();

      var _loop = function _loop(index) {
        var _currentCallbacks$ind = _slicedToArray(currentCallbacks[index], 3),
            cb = _currentCallbacks$ind[1],
            priority = _currentCallbacks$ind[2];

        if (!cb) {
          return "continue"; // eslint-disable-line
        }

        if (priority < 0) {
          setTimeout(function () {
            return cb.apply(publicAPI, _arguments);
          }, 1 - priority);
        } else {
          // Abort only if the callback explicitly returns false
          var continueNext = cb.apply(publicAPI, _arguments);

          if (continueNext === EVENT_ABORT) {
            return "break";
          }
        }
      };

      for (var index = 0; index < currentCallbacks.length; ++index) {
        var _ret = _loop(index);

        if (_ret === "continue") continue;
        if (_ret === "break") break;
      }
      /* eslint-enable prefer-rest-params */

    }

    publicAPI["invoke".concat(capitalize(eventName))] = invoke;

    publicAPI["on".concat(capitalize(eventName))] = function (callback) {
      var priority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.0;

      if (!callback.apply) {
        console.error("Invalid callback for event ".concat(eventName));
        return null;
      }

      if (model.deleted) {
        vtkErrorMacro$m('instance deleted - cannot call any method');
        return null;
      }

      var callbackID = curCallbackID++;
      callbacks.push([callbackID, callback, priority]);
      callbacks.sort(function (cb1, cb2) {
        return cb2[2] - cb1[2];
      });
      return on(callbackID);
    };

    publicAPI.delete = function () {
      previousDelete();
      callbacks.forEach(function (_ref2) {
        var _ref3 = _slicedToArray(_ref2, 1),
            cbID = _ref3[0];

        return off(cbID);
      });
    };
  } // ----------------------------------------------------------------------------
  // newInstance
  // ----------------------------------------------------------------------------

  function newInstance$1j(extend, className) {
    var constructor = function constructor() {
      var initialValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var model = {};
      var publicAPI = {};
      extend(publicAPI, model, initialValues);
      return Object.freeze(publicAPI);
    }; // Register constructor to factory


    if (className) {
      vtk.register(className, constructor);
    }

    return constructor;
  } // ----------------------------------------------------------------------------
  // Chain function calls
  // ----------------------------------------------------------------------------

  function chain() {
    for (var _len5 = arguments.length, fn = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      fn[_key5] = arguments[_key5];
    }

    return function () {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }

      return fn.filter(function (i) {
        return !!i;
      }).map(function (i) {
        return i.apply(void 0, args);
      });
    };
  } // ----------------------------------------------------------------------------
  // Some utility methods for vtk objects
  // ----------------------------------------------------------------------------

  function isVtkObject(instance) {
    return instance && instance.isA && instance.isA('vtkObject');
  }
  function traverseInstanceTree(instance, extractFunction) {
    var accumulator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var visitedInstances = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

    if (isVtkObject(instance)) {
      if (visitedInstances.indexOf(instance) >= 0) {
        // avoid cycles
        return accumulator;
      }

      visitedInstances.push(instance);
      var result = extractFunction(instance);

      if (result !== undefined) {
        accumulator.push(result);
      } // Now go through this instance's model


      var model = instance.get();
      Object.keys(model).forEach(function (key) {
        var modelObj = model[key];

        if (Array.isArray(modelObj)) {
          modelObj.forEach(function (subObj) {
            traverseInstanceTree(subObj, extractFunction, accumulator, visitedInstances);
          });
        } else {
          traverseInstanceTree(modelObj, extractFunction, accumulator, visitedInstances);
        }
      });
    }

    return accumulator;
  } // ----------------------------------------------------------------------------
  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.

  function debounce(func, wait, immediate) {
    var _this = this;

    var timeout;

    var debounced = function debounced() {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }

      var context = _this;

      var later = function later() {
        timeout = null;

        if (!immediate) {
          func.apply(context, args);
        }
      };

      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);

      if (callNow) {
        func.apply(context, args);
      }
    };

    debounced.cancel = function () {
      return clearTimeout(timeout);
    };

    return debounced;
  } // ----------------------------------------------------------------------------
  // Creates a throttled function that only invokes `func` at most once per
  // every `wait` milliseconds.

  function throttle(callback, delay) {
    var isThrottled = false;
    var argsToUse = null;

    function next() {
      isThrottled = false;

      if (argsToUse !== null) {
        wrapper.apply(void 0, _toConsumableArray(argsToUse)); // eslint-disable-line

        argsToUse = null;
      }
    }

    function wrapper() {
      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        args[_key8] = arguments[_key8];
      }

      if (isThrottled) {
        argsToUse = args;
        return;
      }

      isThrottled = true;
      callback.apply(void 0, args);
      setTimeout(next, delay);
    }

    return wrapper;
  } // ----------------------------------------------------------------------------
  // keystore(publicAPI, model, initialKeystore)
  //
  //    - initialKeystore: Initial keystore. This can be either a Map or an
  //      object.
  //
  // Generated API
  //  setKey(key, value) : mixed (returns value)
  //  getKey(key) : mixed
  //  getAllKeys() : [mixed]
  //  deleteKey(key) : Boolean
  // ----------------------------------------------------------------------------

  function keystore(publicAPI, model) {
    var initialKeystore = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    model.keystore = Object.assign(model.keystore || {}, initialKeystore);

    publicAPI.setKey = function (key, value) {
      model.keystore[key] = value;
    };

    publicAPI.getKey = function (key) {
      return model.keystore[key];
    };

    publicAPI.getAllKeys = function () {
      return Object.keys(model.keystore);
    };

    publicAPI.deleteKey = function (key) {
      return delete model.keystore[key];
    };

    publicAPI.clearKeystore = function () {
      return publicAPI.getAllKeys().forEach(function (key) {
        return delete model.keystore[key];
      });
    };
  } // ----------------------------------------------------------------------------
  // proxy(publicAPI, model, sectionName, propertyUI)
  //
  //    - sectionName: Name of the section for UI
  //    - propertyUI: List of props with their UI description
  //
  // Generated API
  //  getProxyId() : String
  //  listProxyProperties() : [string]
  //  updateProxyProperty(name, prop)
  //  getProxySection() => List of properties for UI generation
  // ----------------------------------------------------------------------------

  var nextProxyId = 1;
  var ROOT_GROUP_NAME = '__root__';
  function proxy(publicAPI, model) {
    // Proxies are keystores
    keystore(publicAPI, model);
    var parentDelete = publicAPI.delete; // getProxyId

    model.proxyId = "".concat(nextProxyId++); // ui handling

    model.ui = JSON.parse(JSON.stringify(model.ui || [])); // deep copy

    get$1(publicAPI, model, ['proxyId', 'proxyGroup', 'proxyName']);
    setGet(publicAPI, model, ['proxyManager']); // group properties

    var propertyMap = {};
    var groupChildrenNames = {};

    function registerProperties(descriptionList, currentGroupName) {
      if (!groupChildrenNames[currentGroupName]) {
        groupChildrenNames[currentGroupName] = [];
      }

      var childrenNames = groupChildrenNames[currentGroupName];

      for (var i = 0; i < descriptionList.length; i++) {
        childrenNames.push(descriptionList[i].name);
        propertyMap[descriptionList[i].name] = descriptionList[i];

        if (descriptionList[i].children && descriptionList[i].children.length) {
          registerProperties(descriptionList[i].children, descriptionList[i].name);
        }
      }
    }

    registerProperties(model.ui, ROOT_GROUP_NAME);

    publicAPI.updateUI = function (ui) {
      model.ui = JSON.parse(JSON.stringify(ui || [])); // deep copy

      Object.keys(propertyMap).forEach(function (k) {
        return delete propertyMap[k];
      });
      Object.keys(groupChildrenNames).forEach(function (k) {
        return delete groupChildrenNames[k];
      });
      registerProperties(model.ui, ROOT_GROUP_NAME);
      publicAPI.modified();
    };

    function listProxyProperties() {
      var gName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ROOT_GROUP_NAME;
      return groupChildrenNames[gName];
    }

    publicAPI.updateProxyProperty = function (propertyName, propUI) {
      var prop = propertyMap[propertyName];

      if (prop) {
        Object.assign(prop, propUI);
      } else {
        propertyMap[propertyName] = _objectSpread$n({}, propUI);
      }
    };

    publicAPI.activate = function () {
      if (model.proxyManager) {
        var setActiveMethod = "setActive".concat(capitalize(publicAPI.getProxyGroup().slice(0, -1)));

        if (model.proxyManager[setActiveMethod]) {
          model.proxyManager[setActiveMethod](publicAPI);
        }
      }
    }; // property link


    model.propertyLinkSubscribers = {};

    publicAPI.registerPropertyLinkForGC = function (otherLink, type) {
      if (!(type in model.propertyLinkSubscribers)) {
        model.propertyLinkSubscribers[type] = [];
      }

      model.propertyLinkSubscribers[type].push(otherLink);
    };

    publicAPI.gcPropertyLinks = function (type) {
      var subscribers = model.propertyLinkSubscribers[type] || [];

      while (subscribers.length) {
        subscribers.pop().unbind(publicAPI);
      }
    };

    model.propertyLinkMap = {};

    publicAPI.getPropertyLink = function (id) {
      var persistent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (model.propertyLinkMap[id]) {
        return model.propertyLinkMap[id];
      }

      var value = null;
      var links = [];
      var count = 0;
      var updateInProgress = false;

      function update(source) {
        var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (updateInProgress) {
          return null;
        }

        var needUpdate = [];
        var sourceLink = null;
        count = links.length;

        while (count--) {
          var link = links[count];

          if (link.instance === source) {
            sourceLink = link;
          } else {
            needUpdate.push(link);
          }
        }

        if (!sourceLink) {
          return null;
        }

        var newValue = sourceLink.instance["get".concat(capitalize(sourceLink.propertyName))]();

        if (!shallowEquals(newValue, value) || force) {
          value = newValue;
          updateInProgress = true;

          while (needUpdate.length) {
            var linkToUpdate = needUpdate.pop();
            linkToUpdate.instance.set(_defineProperty({}, linkToUpdate.propertyName, value));
          }

          updateInProgress = false;
        }

        if (model.propertyLinkMap[id].persistent) {
          model.propertyLinkMap[id].value = newValue;
        }

        return newValue;
      }

      function unbind(instance, propertyName) {
        var indexToDelete = [];
        count = links.length;

        while (count--) {
          var link = links[count];

          if (link.instance === instance && (link.propertyName === propertyName || propertyName === undefined)) {
            link.subscription.unsubscribe();
            indexToDelete.push(count);
          }
        }

        while (indexToDelete.length) {
          links.splice(indexToDelete.pop(), 1);
        }
      }

      function bind(instance, propertyName) {
        var updateMe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var subscription = instance.onModified(update);
        var other = links[0];
        links.push({
          instance: instance,
          propertyName: propertyName,
          subscription: subscription
        });

        if (updateMe) {
          if (model.propertyLinkMap[id].persistent && model.propertyLinkMap[id].value !== undefined) {
            instance.set(_defineProperty({}, propertyName, model.propertyLinkMap[id].value));
          } else if (other) {
            update(other.instance, true);
          }
        }

        return {
          unsubscribe: function unsubscribe() {
            return unbind(instance, propertyName);
          }
        };
      }

      function unsubscribe() {
        while (links.length) {
          links.pop().subscription.unsubscribe();
        }
      }

      var linkHandler = {
        bind: bind,
        unbind: unbind,
        unsubscribe: unsubscribe,
        persistent: persistent
      };
      model.propertyLinkMap[id] = linkHandler;
      return linkHandler;
    }; // extract values


    function getProperties() {
      var groupName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ROOT_GROUP_NAME;
      var values = [];
      var id = model.proxyId;
      var propertyNames = listProxyProperties(groupName) || [];

      for (var i = 0; i < propertyNames.length; i++) {
        var name = propertyNames[i];
        var method = publicAPI["get".concat(capitalize(name))];
        var value = method ? method() : undefined;
        var prop = {
          id: id,
          name: name,
          value: value
        };
        var children = getProperties(name);

        if (children.length) {
          prop.children = children;
        }

        values.push(prop);
      }

      return values;
    }

    publicAPI.listPropertyNames = function () {
      return getProperties().map(function (p) {
        return p.name;
      });
    };

    publicAPI.getPropertyByName = function (name) {
      return getProperties().find(function (p) {
        return p.name === name;
      });
    };

    publicAPI.getPropertyDomainByName = function (name) {
      return (propertyMap[name] || {}).domain;
    }; // ui section


    publicAPI.getProxySection = function () {
      return {
        id: model.proxyId,
        name: model.proxyGroup,
        ui: model.ui,
        properties: getProperties()
      };
    }; // free resources


    publicAPI.delete = function () {
      var list = Object.keys(model.propertyLinkMap);
      var count = list.length;

      while (count--) {
        model.propertyLinkMap[list[count]].unsubscribe();
      }

      Object.keys(model.propertyLinkSubscribers).forEach(publicAPI.gcPropertyLinks);
      parentDelete();
    };

    function registerLinks() {
      // Allow dynamic registration of links at the application level
      if (model.links) {
        for (var i = 0; i < model.links.length; i++) {
          var _model$links$i = model.links[i],
              link = _model$links$i.link,
              property = _model$links$i.property,
              persistent = _model$links$i.persistent,
              updateOnBind = _model$links$i.updateOnBind,
              type = _model$links$i.type;

          if (type === 'application') {
            var sLink = model.proxyManager.getPropertyLink(link, persistent);
            publicAPI.registerPropertyLinkForGC(sLink, 'application');
            sLink.bind(publicAPI, property, updateOnBind);
          }
        }
      }
    }

    setImmediateVTK(registerLinks);
  } // ----------------------------------------------------------------------------
  // proxyPropertyMapping(publicAPI, model, map)
  //
  //   map = {
  //      opacity: { modelKey: 'property', property: 'opacity' },
  //   }
  //
  // Generated API:
  //  Elevate set/get methods from internal object stored in the model to current one
  // ----------------------------------------------------------------------------

  function proxyPropertyMapping(publicAPI, model, map) {
    var parentDelete = publicAPI.delete;
    var subscriptions = [];
    var propertyNames = Object.keys(map);
    var count = propertyNames.length;

    while (count--) {
      var propertyName = propertyNames[count];
      var _map$propertyName = map[propertyName],
          modelKey = _map$propertyName.modelKey,
          property = _map$propertyName.property,
          _map$propertyName$mod = _map$propertyName.modified,
          modified = _map$propertyName$mod === void 0 ? true : _map$propertyName$mod;
      var methodSrc = capitalize(property);
      var methodDst = capitalize(propertyName);
      publicAPI["get".concat(methodDst)] = model[modelKey]["get".concat(methodSrc)];
      publicAPI["set".concat(methodDst)] = model[modelKey]["set".concat(methodSrc)];

      if (modified) {
        subscriptions.push(model[modelKey].onModified(publicAPI.modified));
      }
    }

    publicAPI.delete = function () {
      while (subscriptions.length) {
        subscriptions.pop().unsubscribe();
      }

      parentDelete();
    };
  } // ----------------------------------------------------------------------------
  // proxyPropertyState(publicAPI, model, state, defaults)
  //
  //   state = {
  //     representation: {
  //       'Surface with edges': { property: { edgeVisibility: true, representation: 2 } },
  //       Surface: { property: { edgeVisibility: false, representation: 2 } },
  //       Wireframe: { property: { edgeVisibility: false, representation: 1 } },
  //       Points: { property: { edgeVisibility: false, representation: 0 } },
  //     },
  //   }
  //
  //   defaults = {
  //      representation: 'Surface',
  //   }
  //
  // Generated API
  //   get / set Representation ( string ) => push state to various internal objects
  // ----------------------------------------------------------------------------

  function proxyPropertyState(publicAPI, model) {
    var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var defaults = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    model.this = publicAPI;

    function applyState(map) {
      var modelKeys = Object.keys(map);
      var count = modelKeys.length;

      while (count--) {
        var modelKey = modelKeys[count];
        model[modelKey].set(map[modelKey]);
      }
    }

    var modelKeys = Object.keys(defaults);
    var count = modelKeys.length;

    var _loop2 = function _loop2() {
      // Add default
      var key = modelKeys[count];
      model[key] = defaults[key]; // Add set method

      var mapping = state[key];

      publicAPI["set".concat(capitalize(key))] = function (value) {
        if (value !== model[key]) {
          model[key] = value;
          var propValues = mapping[value];
          applyState(propValues);
          publicAPI.modified();
        }
      };
    };

    while (count--) {
      _loop2();
    } // Add getter


    if (modelKeys.length) {
      get$1(publicAPI, model, modelKeys);
    }
  } // ----------------------------------------------------------------------------
  // From : https://github.com/facebookarchive/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js
  //
  //
  // Copyright (c) 2015, Facebook, Inc.
  // All rights reserved.
  //
  // This source code is licensed under the BSD-style license found in the
  // LICENSE file in the root directory of this source tree. An additional grant
  // of patent rights can be found in the PATENTS file in the same directory.
  //
  //
  // Mouse wheel (and 2-finger trackpad) support on the web sucks.  It is
  // complicated, thus this doc is long and (hopefully) detailed enough to answer
  // your questions.
  //
  // If you need to react to the mouse wheel in a predictable way, this code is
  // like your bestest friend.// hugs//
  //
  // As of today, there are 4 DOM event types you can listen to:
  //
  //   'wheel'                -- Chrome(31+), FF(17+), IE(9+)
  //   'mousewheel'           -- Chrome, IE(6+), Opera, Safari
  //   'MozMousePixelScroll'  -- FF(3.5 only!) (2010-2013) -- don't bother!
  //   'DOMMouseScroll'       -- FF(0.9.7+) since 2003
  //
  // So what to do?  The is the best:
  //
  //   normalizeWheel.getEventType();
  //
  // In your event callback, use this code to get sane interpretation of the
  // deltas.  This code will return an object with properties:
  //
  //   spinX   -- normalized spin speed (use for zoom) - x plane
  //   spinY   -- " - y plane
  //   pixelX  -- normalized distance (to pixels) - x plane
  //   pixelY  -- " - y plane
  //
  // Wheel values are provided by the browser assuming you are using the wheel to
  // scroll a web page by a number of lines or pixels (or pages).  Values can vary
  // significantly on different platforms and browsers, forgetting that you can
  // scroll at different speeds.  Some devices (like trackpads) emit more events
  // at smaller increments with fine granularity, and some emit massive jumps with
  // linear speed or acceleration.
  //
  // This code does its best to normalize the deltas for you:
  //
  //   - spin is trying to normalize how far the wheel was spun (or trackpad
  //     dragged).  This is super useful for zoom support where you want to
  //     throw away the chunky scroll steps on the PC and make those equal to
  //     the slow and smooth tiny steps on the Mac. Key data: This code tries to
  //     resolve a single slow step on a wheel to 1.
  //
  //   - pixel is normalizing the desired scroll delta in pixel units.  You'll
  //     get the crazy differences between browsers, but at least it'll be in
  //     pixels!
  //
  //   - positive value indicates scrolling DOWN/RIGHT, negative UP/LEFT.  This
  //     should translate to positive value zooming IN, negative zooming OUT.
  //     This matches the newer 'wheel' event.
  //
  // Why are there spinX, spinY (or pixels)?
  //
  //   - spinX is a 2-finger side drag on the trackpad, and a shift + wheel turn
  //     with a mouse.  It results in side-scrolling in the browser by default.
  //
  //   - spinY is what you expect -- it's the classic axis of a mouse wheel.
  //
  //   - I dropped spinZ/pixelZ.  It is supported by the DOM 3 'wheel' event and
  //     probably is by browsers in conjunction with fancy 3D controllers .. but
  //     you know.
  //
  // Implementation info:
  //
  // Examples of 'wheel' event if you scroll slowly (down) by one step with an
  // average mouse:
  //
  //   OS X + Chrome  (mouse)     -    4   pixel delta  (wheelDelta -120)
  //   OS X + Safari  (mouse)     -  N/A   pixel delta  (wheelDelta  -12)
  //   OS X + Firefox (mouse)     -    0.1 line  delta  (wheelDelta  N/A)
  //   Win8 + Chrome  (mouse)     -  100   pixel delta  (wheelDelta -120)
  //   Win8 + Firefox (mouse)     -    3   line  delta  (wheelDelta -120)
  //
  // On the trackpad:
  //
  //   OS X + Chrome  (trackpad)  -    2   pixel delta  (wheelDelta   -6)
  //   OS X + Firefox (trackpad)  -    1   pixel delta  (wheelDelta  N/A)
  //
  // On other/older browsers.. it's more complicated as there can be multiple and
  // also missing delta values.
  //
  // The 'wheel' event is more standard:
  //
  // http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents
  //
  // The basics is that it includes a unit, deltaMode (pixels, lines, pages), and
  // deltaX, deltaY and deltaZ.  Some browsers provide other values to maintain
  // backward compatibility with older events.  Those other values help us
  // better normalize spin speed.  Example of what the browsers provide:
  //
  //                          | event.wheelDelta | event.detail
  //        ------------------+------------------+--------------
  //          Safari v5/OS X  |       -120       |       0
  //          Safari v5/Win7  |       -120       |       0
  //         Chrome v17/OS X  |       -120       |       0
  //         Chrome v17/Win7  |       -120       |       0
  //                IE9/Win7  |       -120       |   undefined
  //         Firefox v4/OS X  |     undefined    |       1
  //         Firefox v4/Win7  |     undefined    |       3
  //
  // ----------------------------------------------------------------------------
  // Reasonable defaults

  var PIXEL_STEP = 10;
  var LINE_HEIGHT = 40;
  var PAGE_HEIGHT = 800;
  function normalizeWheel$1(wheelEvent) {
    var sX = 0; // spinX

    var sY = 0; // spinY

    var pX = 0; // pixelX

    var pY = 0; // pixelY
    // Legacy

    if ('detail' in wheelEvent) {
      sY = wheelEvent.detail;
    }

    if ('wheelDelta' in wheelEvent) {
      sY = -wheelEvent.wheelDelta / 120;
    }

    if ('wheelDeltaY' in wheelEvent) {
      sY = -wheelEvent.wheelDeltaY / 120;
    }

    if ('wheelDeltaX' in wheelEvent) {
      sX = -wheelEvent.wheelDeltaX / 120;
    } // side scrolling on FF with DOMMouseScroll


    if ('axis' in wheelEvent && wheelEvent.axis === wheelEvent.HORIZONTAL_AXIS) {
      sX = sY;
      sY = 0;
    }

    pX = sX * PIXEL_STEP;
    pY = sY * PIXEL_STEP;

    if ('deltaY' in wheelEvent) {
      pY = wheelEvent.deltaY;
    }

    if ('deltaX' in wheelEvent) {
      pX = wheelEvent.deltaX;
    }

    if ((pX || pY) && wheelEvent.deltaMode) {
      if (wheelEvent.deltaMode === 1) {
        // delta in LINE units
        pX *= LINE_HEIGHT;
        pY *= LINE_HEIGHT;
      } else {
        // delta in PAGE units
        pX *= PAGE_HEIGHT;
        pY *= PAGE_HEIGHT;
      }
    } // Fall-back if spin cannot be determined


    if (pX && !sX) {
      sX = pX < 1 ? -1 : 1;
    }

    if (pY && !sY) {
      sY = pY < 1 ? -1 : 1;
    }

    return {
      spinX: sX,
      spinY: sY,
      pixelX: pX,
      pixelY: pY
    };
  } // ----------------------------------------------------------------------------
  // Default export
  // ----------------------------------------------------------------------------

  var macro = {
    algo: algo,
    capitalize: capitalize,
    chain: chain,
    debounce: debounce,
    enumToString: enumToString,
    event: event,
    EVENT_ABORT: EVENT_ABORT,
    formatBytesToProperUnit: formatBytesToProperUnit,
    formatNumbersWithThousandSeparator: formatNumbersWithThousandSeparator,
    get: get$1,
    getArray: getArray,
    getCurrentGlobalMTime: getCurrentGlobalMTime,
    getStateArrayMapFunc: getStateArrayMapFunc,
    isVtkObject: isVtkObject,
    keystore: keystore,
    newInstance: newInstance$1j,
    newTypedArray: newTypedArray,
    newTypedArrayFrom: newTypedArrayFrom,
    normalizeWheel: normalizeWheel$1,
    obj: obj,
    proxy: proxy,
    proxyPropertyMapping: proxyPropertyMapping,
    proxyPropertyState: proxyPropertyState,
    safeArrays: safeArrays,
    set: set,
    setArray: setArray,
    setGet: setGet,
    setGetArray: setGetArray,
    setImmediate: setImmediateVTK,
    setLoggerFunction: setLoggerFunction,
    throttle: throttle,
    traverseInstanceTree: traverseInstanceTree,
    TYPED_ARRAYS: TYPED_ARRAYS,
    // deprecated todo remove on breaking API revision
    uncapitalize: uncapitalize,
    VOID: VOID$1,
    vtkDebugMacro: vtkDebugMacro$a,
    vtkErrorMacro: vtkErrorMacro$m,
    vtkInfoMacro: vtkInfoMacro,
    vtkLogMacro: vtkLogMacro,
    vtkOnceErrorMacro: vtkOnceErrorMacro$1,
    vtkWarningMacro: vtkWarningMacro$6
  };

  var vtkErrorMacro$l = macro.vtkErrorMacro;
  var PASS_TYPES = ['Build', 'Render']; // ----------------------------------------------------------------------------
  // vtkViewNode methods
  // ----------------------------------------------------------------------------

  function vtkViewNode(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkViewNode'); // Builds myself.

    publicAPI.build = function (prepass) {}; // Renders myself


    publicAPI.render = function (prepass) {};

    publicAPI.traverse = function (renderPass) {
      // we can choose to do special
      // traversal here based on pass
      var passTraversal = renderPass.getTraverseOperation();
      var fn = publicAPI[passTraversal];

      if (fn) {
        fn(renderPass);
        return;
      } // default traversal


      publicAPI.apply(renderPass, true);

      for (var index = 0; index < model.children.length; index++) {
        model.children[index].traverse(renderPass);
      }

      publicAPI.apply(renderPass, false);
    };

    publicAPI.apply = function (renderPass, prepass) {
      var customRenderPass = publicAPI[renderPass.getOperation()];

      if (customRenderPass) {
        customRenderPass(prepass, renderPass);
      }
    };

    publicAPI.getViewNodeFor = function (dataObject) {
      if (model.renderable === dataObject) {
        return publicAPI;
      }

      for (var index = 0; index < model.children.length; ++index) {
        var child = model.children[index];
        var vn = child.getViewNodeFor(dataObject);

        if (vn) {
          return vn;
        }
      }

      return undefined;
    };

    publicAPI.getFirstAncestorOfType = function (type) {
      if (!model.parent) {
        return null;
      }

      if (model.parent.isA(type)) {
        return model.parent;
      }

      return model.parent.getFirstAncestorOfType(type);
    };

    publicAPI.addMissingNode = function (dobj) {
      if (!dobj) {
        return;
      }

      var result = model._renderableChildMap.get(dobj); // if found just mark as visited


      if (result !== undefined) {
        result.setVisited(true);
      } else {
        // otherwise create a node
        var newNode = publicAPI.createViewNode(dobj);

        if (newNode) {
          newNode.setParent(publicAPI);
          newNode.setVisited(true);

          model._renderableChildMap.set(dobj, newNode);

          model.children.push(newNode);
        }
      }
    };

    publicAPI.addMissingNodes = function (dataObjs) {
      if (!dataObjs || !dataObjs.length) {
        return;
      }

      for (var index = 0; index < dataObjs.length; ++index) {
        var dobj = dataObjs[index];

        var result = model._renderableChildMap.get(dobj); // if found just mark as visited


        if (result !== undefined) {
          result.setVisited(true);
        } else {
          // otherwise create a node
          var newNode = publicAPI.createViewNode(dobj);

          if (newNode) {
            newNode.setParent(publicAPI);
            newNode.setVisited(true);

            model._renderableChildMap.set(dobj, newNode);

            model.children.push(newNode);
          }
        }
      }
    };

    publicAPI.prepareNodes = function () {
      for (var index = 0; index < model.children.length; ++index) {
        model.children[index].setVisited(false);
      }
    };

    publicAPI.setVisited = function (val) {
      model.visited = val;
    };

    publicAPI.removeUnusedNodes = function () {
      var deleted = null;

      for (var index = 0; index < model.children.length; ++index) {
        var child = model.children[index];
        var visited = child.getVisited();

        if (!visited) {
          var renderable = child.getRenderable();

          if (renderable) {
            model._renderableChildMap.delete(renderable);
          }

          if (!deleted) {
            deleted = [];
          }

          deleted.push(child);
        } else {
          child.setVisited(false);
        }
      }

      if (deleted) {
        // slow does alloc but not as common
        model.children = model.children.filter(function (el) {
          return !deleted.includes(el);
        });
      }
    };

    publicAPI.createViewNode = function (dataObj) {
      if (!model.myFactory) {
        vtkErrorMacro$l('Cannot create view nodes without my own factory');
        return null;
      }

      var ret = model.myFactory.createNode(dataObj);

      if (ret) {
        ret.setRenderable(dataObj);
      }

      return ret;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$1l = {
    parent: null,
    renderable: null,
    myFactory: null,
    children: [],
    visited: false
  }; // ----------------------------------------------------------------------------

  function extend$1n(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$1l, initialValues); // Build VTK API

    macro.obj(publicAPI, model);
    macro.event(publicAPI, model, 'event');
    model._renderableChildMap = new Map();
    macro.get(publicAPI, model, ['visited']);
    macro.setGet(publicAPI, model, ['parent', 'renderable', 'myFactory']);
    macro.getArray(publicAPI, model, ['children']); // Object methods

    vtkViewNode(publicAPI, model);
  } // ----------------------------------------------------------------------------


  var newInstance$1i = macro.newInstance(extend$1n, 'vtkViewNode'); // ----------------------------------------------------------------------------

  var vtkViewNode$1 = {
    newInstance: newInstance$1i,
    extend: extend$1n,
    PASS_TYPES: PASS_TYPES
  };

  // vtkViewNodeFactory methods
  // ----------------------------------------------------------------------------

  function vtkViewNodeFactory$1(publicAPI, model) {
    // Make sure our overrides is just for our instance not shared with everyone...
    if (!model.overrides) {
      model.overrides = {};
    } // Set our className


    model.classHierarchy.push('vtkViewNodeFactory');

    publicAPI.createNode = function (dataObject) {
      if (dataObject.isDeleted()) {
        return null;
      }

      var cpt = 0;
      var className = dataObject.getClassName(cpt++);
      var isObject = false;
      var keys = Object.keys(model.overrides);

      while (className && !isObject) {
        if (keys.indexOf(className) !== -1) {
          isObject = true;
        } else {
          className = dataObject.getClassName(cpt++);
        }
      }

      if (!isObject) {
        return null;
      }

      var vn = model.overrides[className]();
      vn.setMyFactory(publicAPI);
      return vn;
    };

    publicAPI.registerOverride = function (className, func) {
      model.overrides[className] = func;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$1k = {// overrides: {},
  }; // ----------------------------------------------------------------------------

  function extend$1m(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$1k, initialValues); // Build VTK API

    macro.obj(publicAPI, model); // Object methods

    vtkViewNodeFactory$1(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$1h = macro.newInstance(extend$1m, 'vtkViewNodeFactory'); // ----------------------------------------------------------------------------

  var vtkViewNodeFactory$1$1 = {
    newInstance: newInstance$1h,
    extend: extend$1m
  };

  var CLASS_MAPPING$1 = Object.create(null);
  function registerOverride$1(className, fn) {
    CLASS_MAPPING$1[className] = fn;
  } // ----------------------------------------------------------------------------
  // vtkOpenGLViewNodeFactory methods
  // ----------------------------------------------------------------------------

  function vtkOpenGLViewNodeFactory(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkOpenGLViewNodeFactory');
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$1j = {}; // ----------------------------------------------------------------------------

  function extend$1l(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$1j, initialValues); // Static class mapping shared across instances

    model.overrides = CLASS_MAPPING$1; // Inheritance

    vtkViewNodeFactory$1$1.extend(publicAPI, model, initialValues); // Object methods

    vtkOpenGLViewNodeFactory(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$1g = macro.newInstance(extend$1l, 'vtkOpenGLViewNodeFactory'); // ----------------------------------------------------------------------------

  var vtkViewNodeFactory = {
    newInstance: newInstance$1g,
    extend: extend$1l
  };

  // vtkOpenGLCamera methods
  // ----------------------------------------------------------------------------

  function vtkOpenGLCamera(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkOpenGLCamera');

    publicAPI.buildPass = function (prepass) {
      if (prepass) {
        model.openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');
        model.openGLRenderWindow = model.openGLRenderer.getParent();
        model.context = model.openGLRenderWindow.getContext();
      }
    }; // Renders myself


    publicAPI.opaquePass = function (prepass) {
      if (prepass) {
        var tsize = model.openGLRenderer.getTiledSizeAndOrigin();
        model.context.viewport(tsize.lowerLeftU, tsize.lowerLeftV, tsize.usize, tsize.vsize);
        model.context.scissor(tsize.lowerLeftU, tsize.lowerLeftV, tsize.usize, tsize.vsize);
      }
    };

    publicAPI.translucentPass = publicAPI.opaquePass;
    publicAPI.opaqueZBufferPass = publicAPI.opaquePass;
    publicAPI.volumePass = publicAPI.opaquePass;

    publicAPI.getKeyMatrices = function (ren) {
      // has the camera changed?
      if (ren !== model.lastRenderer || model.openGLRenderWindow.getMTime() > model.keyMatrixTime.getMTime() || publicAPI.getMTime() > model.keyMatrixTime.getMTime() || ren.getMTime() > model.keyMatrixTime.getMTime() || model.renderable.getMTime() > model.keyMatrixTime.getMTime()) {
        copy(model.keyMatrices.wcvc, model.renderable.getViewMatrix());
        fromMat4(model.keyMatrices.normalMatrix, model.keyMatrices.wcvc);
        invert$1(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);
        transpose(model.keyMatrices.wcvc, model.keyMatrices.wcvc);
        var aspectRatio = model.openGLRenderer.getAspectRatio();
        copy(model.keyMatrices.vcpc, model.renderable.getProjectionMatrix(aspectRatio, -1, 1));
        transpose(model.keyMatrices.vcpc, model.keyMatrices.vcpc);
        multiply$1(model.keyMatrices.wcpc, model.keyMatrices.vcpc, model.keyMatrices.wcvc);
        model.keyMatrixTime.modified();
        model.lastRenderer = ren;
      }

      return model.keyMatrices;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$1i = {
    context: null,
    lastRenderer: null,
    keyMatrixTime: null,
    keyMatrices: null
  }; // ----------------------------------------------------------------------------

  function extend$1k(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$1i, initialValues); // Inheritance

    vtkViewNode$1.extend(publicAPI, model, initialValues);
    model.keyMatrixTime = {};
    obj(model.keyMatrixTime); // values always get set by the get method

    model.keyMatrices = {
      normalMatrix: new Float64Array(9),
      vcpc: new Float64Array(16),
      wcvc: new Float64Array(16),
      wcpc: new Float64Array(16)
    }; // Build VTK API

    setGet(publicAPI, model, ['context', 'keyMatrixTime']); // Object methods

    vtkOpenGLCamera(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$1f = newInstance$1j(extend$1k); // ----------------------------------------------------------------------------

  registerOverride$1('vtkCamera', newInstance$1f);

  var vtkDebugMacro$9 = vtkDebugMacro$a; // ----------------------------------------------------------------------------
  // vtkOpenGLRenderer methods
  // ----------------------------------------------------------------------------

  /* eslint-disable no-bitwise */

  function vtkOpenGLRenderer(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkOpenGLRenderer'); // Builds myself.

    publicAPI.buildPass = function (prepass) {
      if (prepass) {
        if (!model.renderable) {
          return;
        }

        publicAPI.updateLights();
        publicAPI.prepareNodes();
        publicAPI.addMissingNode(model.renderable.getActiveCamera());
        publicAPI.addMissingNodes(model.renderable.getViewPropsWithNestedProps());
        publicAPI.removeUnusedNodes();
      }
    };

    publicAPI.updateLights = function () {
      var count = 0;
      var lights = model.renderable.getLightsByReference();

      for (var index = 0; index < lights.length; ++index) {
        if (lights[index].getSwitch() > 0.0) {
          count++;
        }
      }

      if (!count) {
        vtkDebugMacro$9('No lights are on, creating one.');
        model.renderable.createLight();
      }

      return count;
    };

    publicAPI.opaqueZBufferPass = function (prepass) {
      if (prepass) {
        var clearMask = 0;
        var gl = model.context;

        if (!model.renderable.getTransparent()) {
          model.context.clearColor(1.0, 0.0, 0.0, 1.0);
          clearMask |= gl.COLOR_BUFFER_BIT;
        }

        if (!model.renderable.getPreserveDepthBuffer()) {
          gl.clearDepth(1.0);
          clearMask |= gl.DEPTH_BUFFER_BIT;
          model.context.depthMask(true);
        }

        var ts = publicAPI.getTiledSizeAndOrigin();
        gl.enable(gl.SCISSOR_TEST);
        gl.scissor(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);
        gl.viewport(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);
        gl.colorMask(true, true, true, true);
        gl.clear(clearMask);
        gl.enable(gl.DEPTH_TEST);
      }
    }; // Renders myself


    publicAPI.cameraPass = function (prepass) {
      if (prepass) {
        publicAPI.clear();
      }
    };

    publicAPI.getAspectRatio = function () {
      var size = model.parent.getSizeByReference();
      var viewport = model.renderable.getViewportByReference();
      return size[0] * (viewport[2] - viewport[0]) / ((viewport[3] - viewport[1]) * size[1]);
    };

    publicAPI.getTiledSizeAndOrigin = function () {
      var vport = model.renderable.getViewportByReference(); // if there is no window assume 0 1

      var tileViewPort = [0.0, 0.0, 1.0, 1.0]; // find the lower left corner of the viewport, taking into account the
      // lower left boundary of this tile

      var vpu = vport[0] - tileViewPort[0];
      var vpv = vport[1] - tileViewPort[1]; // store the result as a pixel value

      var ndvp = model.parent.normalizedDisplayToDisplay(vpu, vpv);
      var lowerLeftU = Math.round(ndvp[0]);
      var lowerLeftV = Math.round(ndvp[1]); // find the upper right corner of the viewport, taking into account the
      // lower left boundary of this tile

      var vpu2 = vport[2] - tileViewPort[0];
      var vpv2 = vport[3] - tileViewPort[1];
      var ndvp2 = model.parent.normalizedDisplayToDisplay(vpu2, vpv2); // now compute the size of the intersection of the viewport with the
      // current tile

      var usize = Math.round(ndvp2[0]) - lowerLeftU;
      var vsize = Math.round(ndvp2[1]) - lowerLeftV;

      if (usize < 0) {
        usize = 0;
      }

      if (vsize < 0) {
        vsize = 0;
      }

      return {
        usize: usize,
        vsize: vsize,
        lowerLeftU: lowerLeftU,
        lowerLeftV: lowerLeftV
      };
    };

    publicAPI.clear = function () {
      var clearMask = 0;
      var gl = model.context;

      if (!model.renderable.getTransparent()) {
        var background = model.renderable.getBackgroundByReference(); // renderable ensures that background has 4 entries.

        model.context.clearColor(background[0], background[1], background[2], background[3]);
        clearMask |= gl.COLOR_BUFFER_BIT;
      }

      if (!model.renderable.getPreserveDepthBuffer()) {
        gl.clearDepth(1.0);
        clearMask |= gl.DEPTH_BUFFER_BIT;
        model.context.depthMask(true);
      }

      gl.colorMask(true, true, true, true);
      var ts = publicAPI.getTiledSizeAndOrigin();
      gl.enable(gl.SCISSOR_TEST);
      gl.scissor(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);
      gl.viewport(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);
      gl.clear(clearMask);
      gl.enable(gl.DEPTH_TEST);
      /* eslint-enable no-bitwise */
    };

    publicAPI.releaseGraphicsResources = function () {
      if (model.selector !== null) {
        model.selector.releaseGraphicsResources();
      }
    };

    publicAPI.setOpenGLRenderWindow = function (rw) {
      if (model.openGLRenderWindow === rw) {
        return;
      }

      publicAPI.releaseGraphicsResources();
      model.openGLRenderWindow = rw;
      model.context = null;

      if (rw) {
        model.context = model.openGLRenderWindow.getContext();
      }
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$1h = {
    context: null,
    openGLRenderWindow: null,
    selector: null
  }; // ----------------------------------------------------------------------------

  function extend$1j(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$1h, initialValues); // Inheritance

    vtkViewNode$1.extend(publicAPI, model, initialValues); // Build VTK API

    get$1(publicAPI, model, ['shaderCache']);
    setGet(publicAPI, model, ['selector']); // Object methods

    vtkOpenGLRenderer(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$1e = newInstance$1j(extend$1j, 'vtkOpenGLRenderer'); // ----------------------------------------------------------------------------

  registerOverride$1('vtkRenderer', newInstance$1e);

  // vtkOpenGLActor methods
  // ----------------------------------------------------------------------------

  function vtkOpenGLActor(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkOpenGLActor'); // Builds myself.

    publicAPI.buildPass = function (prepass) {
      if (prepass) {
        model.openGLRenderWindow = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderWindow');
        model.openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');
        model.context = model.openGLRenderWindow.getContext();
        publicAPI.prepareNodes();
        publicAPI.addMissingNodes(model.renderable.getTextures());
        publicAPI.addMissingNode(model.renderable.getMapper());
        publicAPI.removeUnusedNodes(); // we store textures and mapper

        model.ogltextures = null;
        model.activeTextures = null;

        for (var index = 0; index < model.children.length; index++) {
          var child = model.children[index];

          if (child.isA('vtkOpenGLTexture')) {
            if (!model.ogltextures) {
              model.ogltextures = [];
            }

            model.ogltextures.push(child);
          } else {
            model.oglmapper = child;
          }
        }
      }
    };

    publicAPI.traverseOpaqueZBufferPass = function (renderPass) {
      if (!model.renderable || !model.renderable.getNestedVisibility() || model.openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {
        return;
      }

      publicAPI.apply(renderPass, true);
      model.oglmapper.traverse(renderPass);
      publicAPI.apply(renderPass, false);
    }; // we draw textures, then mapper, then post pass textures


    publicAPI.traverseOpaquePass = function (renderPass) {
      if (!model.renderable || !model.renderable.getNestedVisibility() || !model.renderable.getIsOpaque() || model.openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {
        return;
      }

      publicAPI.apply(renderPass, true);
      model.oglmapper.traverse(renderPass);
      publicAPI.apply(renderPass, false);
    }; // we draw textures, then mapper, then post pass textures


    publicAPI.traverseTranslucentPass = function (renderPass) {
      if (!model.renderable || !model.renderable.getNestedVisibility() || model.renderable.getIsOpaque() || model.openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {
        return;
      }

      publicAPI.apply(renderPass, true);
      model.oglmapper.traverse(renderPass);
      publicAPI.apply(renderPass, false);
    };

    publicAPI.activateTextures = function () {
      // always traverse textures first, then mapper
      if (!model.ogltextures) {
        return;
      }

      model.activeTextures = [];

      for (var index = 0; index < model.ogltextures.length; index++) {
        var child = model.ogltextures[index];
        child.render();

        if (child.getHandle()) {
          model.activeTextures.push(child);
        }
      }
    };

    publicAPI.queryPass = function (prepass, renderPass) {
      if (prepass) {
        if (!model.renderable || !model.renderable.getVisibility()) {
          return;
        }

        if (model.renderable.getIsOpaque()) {
          renderPass.incrementOpaqueActorCount();
        } else {
          renderPass.incrementTranslucentActorCount();
        }
      }
    };

    publicAPI.opaqueZBufferPass = function (prepass, renderPass) {
      return publicAPI.opaquePass(prepass, renderPass);
    };

    publicAPI.opaquePass = function (prepass, renderPass) {
      if (prepass) {
        model.context.depthMask(true);
        publicAPI.activateTextures();
      } else if (model.activeTextures) {
        for (var index = 0; index < model.activeTextures.length; index++) {
          model.activeTextures[index].deactivate();
        }
      }
    }; // Renders myself


    publicAPI.translucentPass = function (prepass, renderPass) {
      if (prepass) {
        model.context.depthMask(false);
        publicAPI.activateTextures();
      } else if (model.activeTextures) {
        for (var index = 0; index < model.activeTextures.length; index++) {
          model.activeTextures[index].deactivate();
        }
      }
    };

    publicAPI.getKeyMatrices = function () {
      // has the actor changed?
      if (model.renderable.getMTime() > model.keyMatrixTime.getMTime()) {
        model.renderable.computeMatrix();
        copy(model.keyMatrices.mcwc, model.renderable.getMatrix());
        transpose(model.keyMatrices.mcwc, model.keyMatrices.mcwc);

        if (model.renderable.getIsIdentity()) {
          identity$1(model.keyMatrices.normalMatrix);
        } else {
          fromMat4(model.keyMatrices.normalMatrix, model.keyMatrices.mcwc);
          invert$1(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);
          transpose$1(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);
        }

        model.keyMatrixTime.modified();
      }

      return model.keyMatrices;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$1g = {
    context: null,
    keyMatrixTime: null,
    keyMatrices: null,
    activeTextures: null
  }; // ----------------------------------------------------------------------------

  function extend$1i(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$1g, initialValues); // Inheritance

    vtkViewNode$1.extend(publicAPI, model, initialValues);
    model.keyMatrixTime = {};
    obj(model.keyMatrixTime, {
      mtime: 0
    });
    model.keyMatrices = {
      normalMatrix: identity$1(new Float64Array(9)),
      mcwc: identity(new Float64Array(16))
    }; // Build VTK API

    setGet(publicAPI, model, ['context']);
    get$1(publicAPI, model, ['activeTextures']); // Object methods

    vtkOpenGLActor(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$1d = newInstance$1j(extend$1i); // ----------------------------------------------------------------------------

  registerOverride$1('vtkActor', newInstance$1d);

  // vtkOpenGLActor methods
  // ----------------------------------------------------------------------------

  function vtkOpenGLActor2D(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkOpenGLActor2D'); // Builds myself.

    publicAPI.buildPass = function (prepass) {
      if (prepass) {
        if (!model.renderable) {
          return;
        }

        model.openGLRenderWindow = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderWindow');
        model.openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');
        model.context = model.openGLRenderWindow.getContext();
        publicAPI.prepareNodes();
        publicAPI.addMissingNodes(model.renderable.getTextures());
        publicAPI.addMissingNode(model.renderable.getMapper());
        publicAPI.removeUnusedNodes(); // we store textures and mapper

        model.ogltextures = null;
        model.activeTextures = null;

        for (var index = 0; index < model.children.length; index++) {
          var child = model.children[index];

          if (child.isA('vtkOpenGLTexture')) {
            if (!model.ogltextures) {
              model.ogltextures = [];
            }

            model.ogltextures.push(child);
          } else {
            model.oglmapper = child;
          }
        }
      }
    };

    publicAPI.queryPass = function (prepass, renderPass) {
      if (prepass) {
        if (!model.renderable || !model.renderable.getVisibility()) {
          return;
        }

        renderPass.incrementOverlayActorCount();
      }
    }; // we draw textures, then mapper, then post pass textures


    publicAPI.traverseOpaquePass = function (renderPass) {
      if (!model.oglmapper || !model.renderable || !model.renderable.getNestedVisibility() || !model.renderable.getIsOpaque() || model.openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {
        return;
      }

      publicAPI.apply(renderPass, true);
      model.oglmapper.traverse(renderPass);
      publicAPI.apply(renderPass, false);
    }; // we draw textures, then mapper, then post pass textures


    publicAPI.traverseTranslucentPass = function (renderPass) {
      if (!model.oglmapper || !model.renderable || !model.renderable.getNestedVisibility() || model.renderable.getIsOpaque() || model.openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {
        return;
      }

      publicAPI.apply(renderPass, true);
      model.oglmapper.traverse(renderPass);
      publicAPI.apply(renderPass, false);
    };

    publicAPI.traverseOverlayPass = function (renderPass) {
      if (!model.oglmapper || !model.renderable || !model.renderable.getNestedVisibility() || model.openGLRenderer.getSelector() && !model.renderable.getNestedPickable) {
        return;
      }

      publicAPI.apply(renderPass, true);
      model.oglmapper.traverse(renderPass);
      publicAPI.apply(renderPass, false);
    };

    publicAPI.activateTextures = function () {
      // always traverse textures first, then mapper
      if (!model.ogltextures) {
        return;
      }

      model.activeTextures = [];

      for (var index = 0; index < model.ogltextures.length; index++) {
        var child = model.ogltextures[index];
        child.render();

        if (child.getHandle()) {
          model.activeTextures.push(child);
        }
      }
    }; // Renders myself


    publicAPI.opaquePass = function (prepass, renderPass) {
      if (prepass) {
        model.context.depthMask(true);
        publicAPI.activateTextures();
      } else if (model.activeTextures) {
        // deactivate textures
        for (var index = 0; index < model.activeTextures.length; index++) {
          model.activeTextures[index].deactivate();
        }
      }
    }; // Renders myself


    publicAPI.translucentPass = function (prepass, renderPass) {
      if (prepass) {
        model.context.depthMask(false);
        publicAPI.activateTextures();
      } else if (model.activeTextures) {
        for (var index = 0; index < model.activeTextures.length; index++) {
          model.activeTextures[index].deactivate();
        }
      }
    }; // Renders myself


    publicAPI.overlayPass = function (prepass, renderPass) {
      if (prepass) {
        model.context.depthMask(true);
        publicAPI.activateTextures();
      } else if (model.activeTextures) {
        // deactivate textures
        for (var index = 0; index < model.activeTextures.length; index++) {
          model.activeTextures[index].deactivate();
        }
      }
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$1f = {
    context: null,
    activeTextures: null
  }; // ----------------------------------------------------------------------------

  function extend$1h(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$1f, initialValues); // Inheritance

    vtkViewNode$1.extend(publicAPI, model, initialValues); // Build VTK API

    setGet(publicAPI, model, ['context']);
    get$1(publicAPI, model, ['activeTextures']); // Object methods

    vtkOpenGLActor2D(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$1c = newInstance$1j(extend$1h); // ----------------------------------------------------------------------------

  registerOverride$1('vtkActor2D', newInstance$1c);

  var ObjectType$1 = {
    ARRAY_BUFFER: 0,
    ELEMENT_ARRAY_BUFFER: 1,
    TEXTURE_BUFFER: 2
  };
  var Constants$b = {
    ObjectType: ObjectType$1
  };

  function ownKeys$m(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$m(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$m(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$m(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  var ObjectType = Constants$b.ObjectType; // ----------------------------------------------------------------------------
  // Global methods
  // ----------------------------------------------------------------------------
  // ----------------------------------------------------------------------------
  // Static API
  // ----------------------------------------------------------------------------

  var STATIC$9 = {}; // ----------------------------------------------------------------------------
  // vtkOpenGLBufferObject methods
  // ----------------------------------------------------------------------------

  function vtkOpenGLBufferObject(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkOpenGLBufferObject'); // Class-specific private functions

    function convertType(type) {
      switch (type) {
        case ObjectType.ELEMENT_ARRAY_BUFFER:
          return model.context.ELEMENT_ARRAY_BUFFER;

        case ObjectType.TEXTURE_BUFFER:
          if ('TEXTURE_BUFFER' in model.context) {
            return model.context.TEXTURE_BUFFER;
          }

        /* eslint-disable no-fallthrough */
        // Intentional fallthrough in case there is no TEXTURE_BUFFER in WebGL

        default:
        /* eslint-enable no-fallthrough */

        case ObjectType.ARRAY_BUFFER:
          return model.context.ARRAY_BUFFER;
      }
    }

    var internalType = null;
    var internalHandle = null;
    var dirty = true;
    var error = ''; // Public API methods

    publicAPI.getType = function () {
      return internalType;
    };

    publicAPI.setType = function (value) {
      internalType = value;
    };

    publicAPI.getHandle = function () {
      return internalHandle;
    };

    publicAPI.isReady = function () {
      return dirty === false;
    };

    publicAPI.generateBuffer = function (type) {
      var objectTypeGL = convertType(type);

      if (internalHandle === null) {
        internalHandle = model.context.createBuffer();
        internalType = type;
      }

      return convertType(internalType) === objectTypeGL;
    };

    publicAPI.upload = function (data, type) {
      // buffer, size, type
      var alreadyGenerated = publicAPI.generateBuffer(type);

      if (!alreadyGenerated) {
        error = 'Trying to upload array buffer to incompatible buffer.';
        return false;
      }

      model.context.bindBuffer(convertType(internalType), internalHandle);
      model.context.bufferData(convertType(internalType), data, model.context.STATIC_DRAW);
      dirty = false;
      return true;
    };

    publicAPI.bind = function () {
      if (!internalHandle) {
        return false;
      }

      model.context.bindBuffer(convertType(internalType), internalHandle);
      return true;
    };

    publicAPI.release = function () {
      if (!internalHandle) {
        return false;
      }

      model.context.bindBuffer(convertType(internalType), null);
      return true;
    };

    publicAPI.releaseGraphicsResources = function () {
      if (internalHandle !== null) {
        model.context.bindBuffer(convertType(internalType), null);
        model.context.deleteBuffer(internalHandle);
        internalHandle = null;
      }
    };

    publicAPI.setOpenGLRenderWindow = function (rw) {
      if (model.openGLRenderWindow === rw) {
        return;
      }

      publicAPI.releaseGraphicsResources();
      model.openGLRenderWindow = rw;
      model.context = null;

      if (rw) {
        model.context = model.openGLRenderWindow.getContext();
      }
    };

    publicAPI.getError = function () {
      return error;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$1e = {
    objectType: ObjectType.ARRAY_BUFFER,
    openGLRenderWindow: null,
    context: null
  }; // ----------------------------------------------------------------------------

  function extend$1g(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$1e, initialValues); // Object methods

    macro.obj(publicAPI, model);
    macro.get(publicAPI, model, ['openGLRenderWindow']);
    vtkOpenGLBufferObject(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$1b = macro.newInstance(extend$1g); // ----------------------------------------------------------------------------

  var vtkBufferObject = _objectSpread$m(_objectSpread$m({
    newInstance: newInstance$1b,
    extend: extend$1g
  }, STATIC$9), Constants$b);

  var Shading$1 = {
    FLAT: 0,
    GOURAUD: 1,
    PHONG: 2
  };
  var Representation$4 = {
    POINTS: 0,
    WIREFRAME: 1,
    SURFACE: 2
  };
  var Interpolation$1 = Shading$1;
  var PropertyConst = {
    Shading: Shading$1,
    Representation: Representation$4,
    Interpolation: Interpolation$1
  };

  var vtkErrorMacro$k = macro.vtkErrorMacro; // ----------------------------------------------------------------------------
  // Static functions
  // ----------------------------------------------------------------------------

  function computeInverseShiftAndScaleMatrix(coordShift, coordScale) {
    var inverseScale = new Float64Array(3);
    inverse(inverseScale, coordScale);
    var matrix = new Float64Array(16);
    fromRotationTranslationScale(matrix, create(), coordShift, inverseScale);
    return matrix;
  }

  function shouldApplyCoordShiftAndScale(coordShift, coordScale) {
    if (coordShift === null || coordScale === null) {
      return false;
    }

    return !(exactEquals(coordShift, [0, 0, 0]) && exactEquals(coordScale, [1, 1, 1]));
  } // ----------------------------------------------------------------------------
  // vtkOpenGLCellArrayBufferObject methods
  // ----------------------------------------------------------------------------


  function vtkOpenGLCellArrayBufferObject(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkOpenGLCellArrayBufferObject');
    publicAPI.setType(ObjectType$1.ARRAY_BUFFER);

    publicAPI.createVBO = function (cellArray, inRep, outRep, options) {
      if (!cellArray.getData() || !cellArray.getData().length) {
        model.elementCount = 0;
        return 0;
      } // Figure out how big each block will be, currently 6 or 7 floats.


      model.blockSize = 3;
      model.vertexOffset = 0;
      model.normalOffset = 0;
      model.tCoordOffset = 0;
      model.tCoordComponents = 0;
      model.colorComponents = 0;
      model.colorOffset = 0;
      model.customData = [];
      var pointData = options.points.getData();
      var normalData = null;
      var tcoordData = null;
      var colorData = null;
      var colorComponents = options.colors ? options.colors.getNumberOfComponents() : 0;
      var textureComponents = options.tcoords ? options.tcoords.getNumberOfComponents() : 0; // the values of 4 below are because floats are 4 bytes

      if (options.normals) {
        model.normalOffset = 4 * model.blockSize;
        model.blockSize += 3;
        normalData = options.normals.getData();
      }

      if (options.customAttributes) {
        options.customAttributes.forEach(function (a) {
          if (a) {
            model.customData.push({
              data: a.getData(),
              offset: 4 * model.blockSize,
              components: a.getNumberOfComponents(),
              name: a.getName()
            });
            model.blockSize += a.getNumberOfComponents();
          }
        });
      }

      if (options.tcoords) {
        model.tCoordOffset = 4 * model.blockSize;
        model.tCoordComponents = textureComponents;
        model.blockSize += textureComponents;
        tcoordData = options.tcoords.getData();
      }

      if (options.colors) {
        model.colorComponents = options.colors.getNumberOfComponents();
        model.colorOffset = 0;
        colorData = options.colors.getData();

        if (!model.colorBO) {
          model.colorBO = vtkBufferObject.newInstance();
        }

        model.colorBO.setOpenGLRenderWindow(model.openGLRenderWindow);
      } else {
        model.colorBO = null;
      }

      model.stride = 4 * model.blockSize;
      var pointIdx = 0;
      var normalIdx = 0;
      var tcoordIdx = 0;
      var colorIdx = 0;
      var custIdx = 0;
      var cellCount = 0;
      var addAPoint;
      var cellBuilders = {
        // easy, every input point becomes an output point
        anythingToPoints: function anythingToPoints(numPoints, cellPts, offset) {
          for (var i = 0; i < numPoints; ++i) {
            addAPoint(cellPts[offset + i]);
          }
        },
        linesToWireframe: function linesToWireframe(numPoints, cellPts, offset) {
          // for lines we add a bunch of segments
          for (var i = 0; i < numPoints - 1; ++i) {
            addAPoint(cellPts[offset + i]);
            addAPoint(cellPts[offset + i + 1]);
          }
        },
        polysToWireframe: function polysToWireframe(numPoints, cellPts, offset) {
          // for polys we add a bunch of segments and close it
          if (numPoints > 2) {
            for (var i = 0; i < numPoints; ++i) {
              addAPoint(cellPts[offset + i]);
              addAPoint(cellPts[offset + (i + 1) % numPoints]);
            }
          }
        },
        stripsToWireframe: function stripsToWireframe(numPoints, cellPts, offset) {
          if (numPoints > 2) {
            // for strips we add a bunch of segments and close it
            for (var i = 0; i < numPoints - 1; ++i) {
              addAPoint(cellPts[offset + i]);
              addAPoint(cellPts[offset + i + 1]);
            }

            for (var _i = 0; _i < numPoints - 2; _i++) {
              addAPoint(cellPts[offset + _i]);
              addAPoint(cellPts[offset + _i + 2]);
            }
          }
        },
        polysToSurface: function polysToSurface(npts, cellPts, offset) {
          for (var i = 0; i < npts - 2; i++) {
            addAPoint(cellPts[offset + 0]);
            addAPoint(cellPts[offset + i + 1]);
            addAPoint(cellPts[offset + i + 2]);
          }
        },
        stripsToSurface: function stripsToSurface(npts, cellPts, offset) {
          for (var i = 0; i < npts - 2; i++) {
            addAPoint(cellPts[offset + i]);
            addAPoint(cellPts[offset + i + 1 + i % 2]);
            addAPoint(cellPts[offset + i + 1 + (i + 1) % 2]);
          }
        }
      };
      var cellCounters = {
        // easy, every input point becomes an output point
        anythingToPoints: function anythingToPoints(numPoints, cellPts) {
          return numPoints;
        },
        linesToWireframe: function linesToWireframe(numPoints, cellPts) {
          if (numPoints > 1) {
            return (numPoints - 1) * 2;
          }

          return 0;
        },
        polysToWireframe: function polysToWireframe(numPoints, cellPts) {
          if (numPoints > 2) {
            return numPoints * 2;
          }

          return 0;
        },
        stripsToWireframe: function stripsToWireframe(numPoints, cellPts) {
          if (numPoints > 2) {
            return numPoints * 4 - 6;
          }

          return 0;
        },
        polysToSurface: function polysToSurface(npts, cellPts) {
          if (npts > 2) {
            return (npts - 2) * 3;
          }

          return 0;
        },
        stripsToSurface: function stripsToSurface(npts, cellPts, offset) {
          if (npts > 2) {
            return (npts - 2) * 3;
          }

          return 0;
        }
      };
      var func = null;
      var countFunc = null;

      if (outRep === Representation$4.POINTS || inRep === 'verts') {
        func = cellBuilders.anythingToPoints;
        countFunc = cellCounters.anythingToPoints;
      } else if (outRep === Representation$4.WIREFRAME || inRep === 'lines') {
        func = cellBuilders["".concat(inRep, "ToWireframe")];
        countFunc = cellCounters["".concat(inRep, "ToWireframe")];
      } else {
        func = cellBuilders["".concat(inRep, "ToSurface")];
        countFunc = cellCounters["".concat(inRep, "ToSurface")];
      }

      var array = cellArray.getData();
      var size = array.length;
      var caboCount = 0;

      for (var index = 0; index < size;) {
        caboCount += countFunc(array[index], array);
        index += array[index] + 1;
      }

      var packedUCVBO = null;
      var packedVBO = new Float32Array(caboCount * model.blockSize);

      if (colorData) {
        packedUCVBO = new Uint8Array(caboCount * 4);
      }

      var vboidx = 0;
      var ucidx = 0; // Find out if shift scale should be used
      // Compute squares of diagonal size and distance from the origin

      var diagSq = 0.0;
      var distSq = 0.0;

      for (var i = 0; i < 3; ++i) {
        var range = options.points.getRange(i);
        var delta = range[1] - range[0];
        diagSq += delta * delta;
        var distShift = 0.5 * (range[1] + range[0]);
        distSq += distShift * distShift;
      }

      var useShiftAndScale = diagSq > 0 && (Math.abs(distSq) / diagSq > 1.0e6 || // If data is far from the origin relative to its size
      Math.abs(Math.log10(diagSq)) > 3.0 || diagSq === 0 && distSq > 1.0e6); // If data is a point, but far from the origin

      if (useShiftAndScale) {
        // Compute shift and scale vectors
        var coordShift = new Float64Array(3);
        var coordScale = new Float64Array(3);

        for (var _i2 = 0; _i2 < 3; ++_i2) {
          var _range = options.points.getRange(_i2);

          var _delta = _range[1] - _range[0];

          coordShift[_i2] = 0.5 * (_range[1] + _range[0]);
          coordScale[_i2] = _delta > 0 ? 1.0 / _delta : 1.0;
        }

        publicAPI.setCoordShiftAndScale(coordShift, coordScale);
      } else if (model.coordShiftAndScaleEnabled === true) {
        // Make sure to reset
        publicAPI.setCoordShiftAndScale(null, null);
      }

      addAPoint = function addAPointFunc(i) {
        // Vertices
        pointIdx = i * 3;

        if (!model.coordShiftAndScaleEnabled) {
          packedVBO[vboidx++] = pointData[pointIdx++];
          packedVBO[vboidx++] = pointData[pointIdx++];
          packedVBO[vboidx++] = pointData[pointIdx++];
        } else {
          // Apply shift and scale
          packedVBO[vboidx++] = (pointData[pointIdx++] - model.coordShift[0]) * model.coordScale[0];
          packedVBO[vboidx++] = (pointData[pointIdx++] - model.coordShift[1]) * model.coordScale[1];
          packedVBO[vboidx++] = (pointData[pointIdx++] - model.coordShift[2]) * model.coordScale[2];
        }

        if (normalData !== null) {
          if (options.haveCellNormals) {
            normalIdx = (cellCount + options.cellOffset) * 3;
          } else {
            normalIdx = i * 3;
          }

          packedVBO[vboidx++] = normalData[normalIdx++];
          packedVBO[vboidx++] = normalData[normalIdx++];
          packedVBO[vboidx++] = normalData[normalIdx++];
        }

        model.customData.forEach(function (attr) {
          custIdx = i * attr.components;

          for (var j = 0; j < attr.components; ++j) {
            packedVBO[vboidx++] = attr.data[custIdx++];
          }
        });

        if (tcoordData !== null) {
          tcoordIdx = i * textureComponents;

          for (var j = 0; j < textureComponents; ++j) {
            packedVBO[vboidx++] = tcoordData[tcoordIdx++];
          }
        }

        if (colorData !== null) {
          if (options.haveCellScalars) {
            colorIdx = (cellCount + options.cellOffset) * colorComponents;
          } else {
            colorIdx = i * colorComponents;
          }

          packedUCVBO[ucidx++] = colorData[colorIdx++];
          packedUCVBO[ucidx++] = colorData[colorIdx++];
          packedUCVBO[ucidx++] = colorData[colorIdx++];
          packedUCVBO[ucidx++] = colorComponents === 4 ? colorData[colorIdx++] : 255;
        }
      };

      for (var _index = 0; _index < size;) {
        func(array[_index], array, _index + 1);
        _index += array[_index] + 1;
        cellCount++;
      }

      model.elementCount = caboCount;
      publicAPI.upload(packedVBO, ObjectType$1.ARRAY_BUFFER);

      if (model.colorBO) {
        model.colorBOStride = 4;
        model.colorBO.upload(packedUCVBO, ObjectType$1.ARRAY_BUFFER);
      }

      return cellCount;
    };

    publicAPI.setCoordShiftAndScale = function (coordShift, coordScale) {
      if (coordShift !== null && (coordShift.constructor !== Float64Array || coordShift.length !== 3)) {
        vtkErrorMacro$k('Wrong type for coordShift, expected vec3 or null');
        return;
      }

      if (coordScale !== null && (coordScale.constructor !== Float64Array || coordScale.length !== 3)) {
        vtkErrorMacro$k('Wrong type for coordScale, expected vec3 or null');
        return;
      }

      if (model.coordShift === null || coordShift === null || !equals(coordShift, model.coordShift)) {
        model.coordShift = coordShift;
      }

      if (model.coordScale === null || coordScale === null || !equals(coordScale, model.coordScale)) {
        model.coordScale = coordScale;
      }

      model.coordShiftAndScaleEnabled = shouldApplyCoordShiftAndScale(model.coordShift, model.coordScale);

      if (model.coordShiftAndScaleEnabled) {
        model.inverseShiftAndScaleMatrix = computeInverseShiftAndScaleMatrix(model.coordShift, model.coordScale);
      } else {
        model.inverseShiftAndScaleMatrix = null;
      }
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$1d = {
    elementCount: 0,
    stride: 0,
    colorBOStride: 0,
    vertexOffset: 0,
    normalOffset: 0,
    tCoordOffset: 0,
    tCoordComponents: 0,
    colorOffset: 0,
    colorComponents: 0,
    tcoordBO: null,
    customData: [],
    coordShift: null,
    coordScale: null,
    coordShiftAndScaleEnabled: false,
    inverseShiftAndScaleMatrix: null
  }; // ----------------------------------------------------------------------------

  function extend$1f(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$1d, initialValues); // Inheritance

    vtkBufferObject.extend(publicAPI, model, initialValues);
    macro.setGet(publicAPI, model, ['colorBO', 'elementCount', 'stride', 'colorBOStride', 'vertexOffset', 'normalOffset', 'tCoordOffset', 'tCoordComponents', 'colorOffset', 'colorComponents', 'customData']);
    macro.get(publicAPI, model, ['coordShift', 'coordScale', 'coordShiftAndScaleEnabled', 'inverseShiftAndScaleMatrix']); // Object specific methods

    vtkOpenGLCellArrayBufferObject(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$1a = macro.newInstance(extend$1f); // ----------------------------------------------------------------------------

  var vtkCellArrayBufferObject = {
    newInstance: newInstance$1a,
    extend: extend$1f
  };

  var vtkErrorMacro$j = macro.vtkErrorMacro; // export const SHADER_TYPES = ['Vertex', 'Fragment', 'Geometry', 'Unknown'];
  // ----------------------------------------------------------------------------
  // vtkShader methods
  // ----------------------------------------------------------------------------

  function vtkShader(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkShader');

    publicAPI.compile = function () {
      var stype = model.context.VERTEX_SHADER;

      if (!model.source || !model.source.length || model.shaderType === 'Unknown') {
        return false;
      } // Ensure we delete the previous shader if necessary.


      if (model.handle !== 0) {
        model.context.deleteShader(model.handle);
        model.handle = 0;
      }

      switch (model.shaderType) {
        // case vtkShader::Geometry:
        //   type = GL_GEOMETRY_SHADER;
        //   break;
        case 'Fragment':
          stype = model.context.FRAGMENT_SHADER;
          break;

        case 'Vertex':
        default:
          stype = model.context.VERTEX_SHADER;
          break;
      }

      model.handle = model.context.createShader(stype);
      model.context.shaderSource(model.handle, model.source);
      model.context.compileShader(model.handle);
      var isCompiled = model.context.getShaderParameter(model.handle, model.context.COMPILE_STATUS);

      if (!isCompiled) {
        var lastError = model.context.getShaderInfoLog(model.handle);
        vtkErrorMacro$j("Error compiling shader '".concat(model.source, "': ").concat(lastError));
        model.context.deleteShader(model.handle);
        model.handle = 0;
        return false;
      } // The shader compiled, store its handle and return success.


      return true;
    };

    publicAPI.cleanup = function () {
      if (model.shaderType === 'Unknown' || model.handle === 0) {
        return;
      }

      model.context.deleteShader(model.handle);
      model.handle = 0;
      model.dirty = true;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$1c = {
    shaderType: 'Unknown',
    source: '',
    error: '',
    handle: 0,
    dirty: false,
    context: null
  }; // ----------------------------------------------------------------------------

  function extend$1e(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$1c, initialValues); // Build VTK API

    macro.obj(publicAPI, model);
    macro.setGet(publicAPI, model, ['shaderType', 'source', 'error', 'handle', 'context']); // Object methods

    vtkShader(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$19 = macro.newInstance(extend$1e, 'vtkShader'); // ----------------------------------------------------------------------------

  var vtkShader$1 = {
    newInstance: newInstance$19,
    extend: extend$1e
  };

  var vtkErrorMacro$i = macro.vtkErrorMacro; // perform in place string substitutions, indicate if a substitution was done
  // this is useful for building up shader strings which typically involve
  // lots of string substitutions. Return true if a substitution was done.

  function substitute$1(source, search, replace) {
    var all = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    var replaceStr = Array.isArray(replace) ? replace.join('\n') : replace;
    var replaced = false;

    if (source.search(search) !== -1) {
      replaced = true;
    }

    var gflag = '';

    if (all) {
      gflag = 'g';
    }

    var regex = new RegExp(search, gflag);
    var resultstr = source.replace(regex, replaceStr);
    return {
      replace: replaced,
      result: resultstr
    };
  } // ----------------------------------------------------------------------------
  // vtkShaderProgram methods
  // ----------------------------------------------------------------------------


  function vtkShaderProgram(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkShaderProgram');

    publicAPI.compileShader = function () {
      if (!model.vertexShader.compile()) {
        vtkErrorMacro$i(model.vertexShader.getSource().split('\n').map(function (line, index) {
          return "".concat(index, ": ").concat(line);
        }).join('\n'));
        vtkErrorMacro$i(model.vertexShader.getError());
        return 0;
      }

      if (!model.fragmentShader.compile()) {
        vtkErrorMacro$i(model.fragmentShader.getSource().split('\n').map(function (line, index) {
          return "".concat(index, ": ").concat(line);
        }).join('\n'));
        vtkErrorMacro$i(model.fragmentShader.getError());
        return 0;
      } // skip geometry for now


      if (!publicAPI.attachShader(model.vertexShader)) {
        vtkErrorMacro$i(model.error);
        return 0;
      }

      if (!publicAPI.attachShader(model.fragmentShader)) {
        vtkErrorMacro$i(model.error);
        return 0;
      }

      if (!publicAPI.link()) {
        vtkErrorMacro$i("Links failed: ".concat(model.error));
        return 0;
      }

      publicAPI.setCompiled(true);
      return 1;
    };

    publicAPI.cleanup = function () {
      if (model.shaderType === 'Unknown' || model.handle === 0) {
        return;
      }

      model.context.deleteShader(model.handle);
      model.handle = 0;
    };

    publicAPI.bind = function () {
      if (!model.linked && !publicAPI.link()) {
        return false;
      }

      model.context.useProgram(model.handle);
      publicAPI.setBound(true);
      return true;
    };

    publicAPI.isBound = function () {
      return !!model.bound;
    };

    publicAPI.release = function () {
      model.context.useProgram(null);
      publicAPI.setBound(false);
    };

    publicAPI.setContext = function (ctx) {
      model.vertexShader.setContext(ctx);
      model.fragmentShader.setContext(ctx);
      model.geometryShader.setContext(ctx);
    };

    publicAPI.link = function () {
      if (model.inked) {
        return true;
      }

      if (model.handle === 0) {
        model.error = 'Program has not been initialized, and/or does not have shaders.';
        return false;
      } // clear out the list of uniforms used


      model.uniformLocs = {};
      model.context.linkProgram(model.handle);
      var isCompiled = model.context.getProgramParameter(model.handle, model.context.LINK_STATUS);

      if (!isCompiled) {
        var lastError = model.context.getProgramInfoLog(model.handle);
        vtkErrorMacro$i("Error linking shader ".concat(lastError));
        model.handle = 0;
        return false;
      }

      publicAPI.setLinked(true);
      model.attributeLocs = {};
      return true;
    };

    publicAPI.setUniformMatrix = function (name, v) {
      var location = publicAPI.findUniform(name);

      if (location === -1) {
        model.error = "Could not set uniform ".concat(name, " . No such uniform.");
        return false;
      }

      var f32 = new Float32Array(v);
      model.context.uniformMatrix4fv(location, false, f32);
      return true;
    };

    publicAPI.setUniformMatrix3x3 = function (name, v) {
      var location = publicAPI.findUniform(name);

      if (location === -1) {
        model.error = "Could not set uniform ".concat(name, " . No such uniform.");
        return false;
      }

      var f32 = new Float32Array(v);
      model.context.uniformMatrix3fv(location, false, f32);
      return true;
    };

    publicAPI.setUniformf = function (name, v) {
      var location = publicAPI.findUniform(name);

      if (location === -1) {
        model.error = "Could not set uniform ".concat(name, " . No such uniform.");
        return false;
      }

      model.context.uniform1f(location, v);
      return true;
    };

    publicAPI.setUniformfv = function (name, v) {
      var location = publicAPI.findUniform(name);

      if (location === -1) {
        model.error = "Could not set uniform ".concat(name, " . No such uniform.");
        return false;
      }

      model.context.uniform1fv(location, v);
      return true;
    };

    publicAPI.setUniformi = function (name, v) {
      var location = publicAPI.findUniform(name);

      if (location === -1) {
        model.error = "Could not set uniform ".concat(name, " . No such uniform.");
        return false;
      }

      model.context.uniform1i(location, v);
      return true;
    };

    publicAPI.setUniformiv = function (name, v) {
      var location = publicAPI.findUniform(name);

      if (location === -1) {
        model.error = "Could not set uniform ".concat(name, " . No such uniform.");
        return false;
      }

      model.context.uniform1iv(location, v);
      return true;
    };

    publicAPI.setUniform2f = function (name, v1, v2) {
      var location = publicAPI.findUniform(name);

      if (location === -1) {
        model.error = "Could not set uniform ".concat(name, " . No such uniform.");
        return false;
      }

      if (v2 === undefined) {
        throw new RangeError('Invalid number of values for array');
      }

      model.context.uniform2f(location, v1, v2);
      return true;
    };

    publicAPI.setUniform2fv = function (name, v) {
      var location = publicAPI.findUniform(name);

      if (location === -1) {
        model.error = "Could not set uniform ".concat(name, " . No such uniform.");
        return false;
      }

      model.context.uniform2fv(location, v);
      return true;
    };

    publicAPI.setUniform2i = function (name, v1, v2) {
      var location = publicAPI.findUniform(name);

      if (location === -1) {
        model.error = "Could not set uniform ".concat(name, " . No such uniform.");
        return false;
      }

      if (v2 === undefined) {
        throw new RangeError('Invalid number of values for array');
      }

      model.context.uniform2i(location, v1, v2);
      return true;
    };

    publicAPI.setUniform2iv = function (name, v) {
      var location = publicAPI.findUniform(name);

      if (location === -1) {
        model.error = "Could not set uniform ".concat(name, " . No such uniform.");
        return false;
      }

      model.context.uniform2iv(location, v);
      return true;
    };

    publicAPI.setUniform3f = function (name, a1, a2, a3) {
      var location = publicAPI.findUniform(name);

      if (location === -1) {
        model.error = "Could not set uniform ".concat(name, " . No such uniform.");
        return false;
      }

      if (a3 === undefined) {
        throw new RangeError('Invalid number of values for array');
      }

      model.context.uniform3f(location, a1, a2, a3);
      return true;
    };

    publicAPI.setUniform3fArray = function (name, a) {
      var location = publicAPI.findUniform(name);

      if (location === -1) {
        model.error = "Could not set uniform ".concat(name, " . No such uniform.");
        return false;
      }

      if (!Array.isArray(a) || a.length !== 3) {
        throw new RangeError('Invalid number of values for array');
      }

      model.context.uniform3f(location, a[0], a[1], a[2]);
      return true;
    };

    publicAPI.setUniform3fv = function (name, v) {
      var location = publicAPI.findUniform(name);

      if (location === -1) {
        model.error = "Could not set uniform ".concat(name, " . No such uniform.");
        return false;
      }

      model.context.uniform3fv(location, v);
      return true;
    };

    publicAPI.setUniform3i = function (name) {
      var location = publicAPI.findUniform(name);

      if (location === -1) {
        model.error = "Could not set uniform ".concat(name, " . No such uniform.");
        return false;
      }

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var array = args; // allow an array passed as a single argument

      if (array.length === 1 && Array.isArray(array[0])) {
        array = array[0];
      }

      if (array.length !== 3) {
        throw new RangeError('Invalid number of values for array');
      }

      model.context.uniform3i(location, array[0], array[1], array[2]);
      return true;
    };

    publicAPI.setUniform3iv = function (name, v) {
      var location = publicAPI.findUniform(name);

      if (location === -1) {
        model.error = "Could not set uniform ".concat(name, " . No such uniform.");
        return false;
      }

      model.context.uniform3iv(location, v);
      return true;
    };

    publicAPI.setUniform4f = function (name) {
      var location = publicAPI.findUniform(name);

      if (location === -1) {
        model.error = "Could not set uniform ".concat(name, " . No such uniform.");
        return false;
      }

      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      var array = args; // allow an array passed as a single argument

      if (array.length === 1 && Array.isArray(array[0])) {
        array = array[0];
      }

      if (array.length !== 4) {
        throw new RangeError('Invalid number of values for array');
      }

      model.context.uniform4f(location, array[0], array[1], array[2], array[3]);
      return true;
    };

    publicAPI.setUniform4fv = function (name, v) {
      var location = publicAPI.findUniform(name);

      if (location === -1) {
        model.error = "Could not set uniform ".concat(name, " . No such uniform.");
        return false;
      }

      model.context.uniform4fv(location, v);
      return true;
    };

    publicAPI.setUniform4i = function (name) {
      var location = publicAPI.findUniform(name);

      if (location === -1) {
        model.error = "Could not set uniform ".concat(name, " . No such uniform.");
        return false;
      }

      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }

      var array = args; // allow an array passed as a single argument

      if (array.length === 1 && Array.isArray(array[0])) {
        array = array[0];
      }

      if (array.length !== 4) {
        throw new RangeError('Invalid number of values for array');
      }

      model.context.uniform4i(location, array[0], array[1], array[2], array[3]);
      return true;
    };

    publicAPI.setUniform4iv = function (name, v) {
      var location = publicAPI.findUniform(name);

      if (location === -1) {
        model.error = "Could not set uniform ".concat(name, " . No such uniform.");
        return false;
      }

      model.context.uniform4iv(location, v);
      return true;
    };

    publicAPI.findUniform = function (name) {
      if (!name || !model.linked) {
        return -1;
      } // see if we have cached the result


      var loc = model.uniformLocs[name];

      if (loc !== undefined) {
        return loc;
      }

      loc = model.context.getUniformLocation(model.handle, name);

      if (loc === null) {
        model.error = "Uniform ".concat(name, " not found in current shader program.");
        model.uniformLocs[name] = -1;
        return -1;
      }

      model.uniformLocs[name] = loc;
      return loc;
    };

    publicAPI.isUniformUsed = function (name) {
      if (!name) {
        return false;
      } // see if we have cached the result


      var loc = model.uniformLocs[name];

      if (loc !== undefined) {
        return loc !== null;
      }

      if (!model.linked) {
        vtkErrorMacro$i('attempt to find uniform when the shader program is not linked');
        return false;
      }

      loc = model.context.getUniformLocation(model.handle, name);
      model.uniformLocs[name] = loc;

      if (loc === null) {
        return false;
      }

      return true;
    };

    publicAPI.isAttributeUsed = function (name) {
      if (!name) {
        return false;
      } // see if we have cached the result


      var loc = Object.keys(model.attributeLocs).indexOf(name);

      if (loc !== -1) {
        return true;
      }

      if (!model.linked) {
        vtkErrorMacro$i('attempt to find uniform when the shader program is not linked');
        return false;
      }

      loc = model.context.getAttribLocation(model.handle, name);

      if (loc === -1) {
        return false;
      }

      model.attributeLocs[name] = loc;
      return true;
    };

    publicAPI.attachShader = function (shader) {
      if (shader.getHandle() === 0) {
        model.error = 'Shader object was not initialized, cannot attach it.';
        return false;
      }

      if (shader.getShaderType() === 'Unknown') {
        model.error = 'Shader object is of type Unknown and cannot be used.';
        return false;
      }

      if (model.handle === 0) {
        var thandle = model.context.createProgram();

        if (thandle === 0) {
          model.error = 'Could not create shader program.';
          return false;
        }

        model.handle = thandle;
        model.linked = false;
      }

      if (shader.getShaderType() === 'Vertex') {
        if (model.vertexShaderHandle !== 0) {
          model.comntext.detachShader(model.handle, model.vertexShaderHandle);
        }

        model.vertexShaderHandle = shader.getHandle();
      }

      if (shader.getShaderType() === 'Fragment') {
        if (model.fragmentShaderHandle !== 0) {
          model.context.detachShader(model.handle, model.fragmentShaderHandle);
        }

        model.fragmentShaderHandle = shader.getHandle();
      }

      model.context.attachShader(model.handle, shader.getHandle());
      publicAPI.setLinked(false);
      return true;
    };

    publicAPI.detachShader = function (shader) {
      if (shader.getHandle() === 0) {
        model.error = 'shader object was not initialized, cannot attach it.';
        return false;
      }

      if (shader.getShaderType() === 'Unknown') {
        model.error = 'Shader object is of type Unknown and cannot be used.';
        return false;
      }

      if (model.handle === 0) {
        model.error = 'This shader program has not been initialized yet.';
      }

      switch (shader.getShaderType()) {
        case 'Vertex':
          if (model.vertexShaderHandle !== shader.getHandle()) {
            model.error = 'The supplied shader was not attached to this program.';
            return false;
          }

          model.context.detachShader(model.handle, shader.getHandle());
          model.vertexShaderHandle = 0;
          model.linked = false;
          return true;

        case 'Fragment':
          if (model.fragmentShaderHandle !== shader.getHandle()) {
            model.error = 'The supplied shader was not attached to this program.';
            return false;
          }

          model.context.detachShader(model.handle, shader.getHandle());
          model.fragmentShaderHandle = 0;
          model.linked = false;
          return true;

        default:
          return false;
      }
    };

    publicAPI.setContext = function (ctx) {
      model.context = ctx;
      model.vertexShader.setContext(ctx);
      model.fragmentShader.setContext(ctx);
      model.geometryShader.setContext(ctx);
    };

    publicAPI.setLastCameraMTime = function (mtime) {
      model.lastCameraMTime = mtime;
    }; // publicAPI.enableAttributeArray = (name) => {
    //   const location = publicAPI.findAttributeArray(name);
    //   if (location === -1) {
    //     model.error = `Could not enable attribute ${name} No such attribute.`;
    //     return false;
    //   }
    //   model.context.enableVertexAttribArray(location);
    //   return true;
    // };
    // publicAPI.disableAttributeArray = (name) => {
    //   const location = publicAPI.findAttributeArray(name);
    //   if (location === -1) {
    //     model.error = `Could not enable attribute ${name} No such attribute.`;
    //     return false;
    //   }
    //   model.context.disableVertexAttribArray(location);
    //   return true;
    // };

  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$1b = {
    vertexShaderHandle: 0,
    fragmentShaderHandle: 0,
    geometryShaderHandle: 0,
    vertexShader: null,
    fragmentShader: null,
    geometryShader: null,
    linked: false,
    bound: false,
    compiled: false,
    error: '',
    handle: 0,
    numberOfOutputs: 0,
    attributesLocs: null,
    uniformLocs: null,
    md5Hash: 0,
    context: null,
    lastCameraMTime: null
  }; // ----------------------------------------------------------------------------

  function extend$1d(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$1b, initialValues); // Instantiate internal objects

    model.attributesLocs = {};
    model.uniformLocs = {};
    model.vertexShader = vtkShader$1.newInstance();
    model.vertexShader.setShaderType('Vertex');
    model.fragmentShader = vtkShader$1.newInstance();
    model.fragmentShader.setShaderType('Fragment');
    model.geometryShader = vtkShader$1.newInstance();
    model.geometryShader.setShaderType('Geometry'); // Build VTK API

    macro.obj(publicAPI, model);
    macro.get(publicAPI, model, ['lastCameraMTime']);
    macro.setGet(publicAPI, model, ['error', 'handle', 'compiled', 'bound', 'md5Hash', 'vertexShader', 'fragmentShader', 'geometryShader', 'linked']); // Object methods

    vtkShaderProgram(publicAPI, model);
  } // ----------------------------------------------------------------------------


  var newInstance$18 = macro.newInstance(extend$1d, 'vtkShaderProgram'); // ----------------------------------------------------------------------------

  var vtkShaderProgram$1 = {
    newInstance: newInstance$18,
    extend: extend$1d,
    substitute: substitute$1
  };

  // vtkOpenGLVertexArrayObject methods
  // ----------------------------------------------------------------------------

  function vtkOpenGLVertexArrayObject(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkOpenGLVertexArrayObject'); // Public API methods

    publicAPI.exposedMethod = function () {// This is a publicly exposed method of this object
    };

    publicAPI.initialize = function () {
      model.instancingExtension = null;

      if (!model.openGLRenderWindow.getWebgl2()) {
        model.instancingExtension = model.context.getExtension('ANGLE_instanced_arrays');
      }

      if (!model.forceEmulation && model.openGLRenderWindow && model.openGLRenderWindow.getWebgl2()) {
        model.extension = null;
        model.supported = true;
        model.handleVAO = model.context.createVertexArray();
      } else {
        model.extension = model.context.getExtension('OES_vertex_array_object'); // Start setting up VAO

        if (!model.forceEmulation && model.extension) {
          model.supported = true;
          model.handleVAO = model.extension.createVertexArrayOES();
        } else {
          model.supported = false;
        }
      }
    };

    publicAPI.isReady = function () {
      return (// We either probed and allocated a VAO, or are falling back as the current
        // hardware does not support VAOs.
        model.handleVAO !== 0 || model.supported === false
      );
    };

    publicAPI.bind = function () {
      // Either simply bind the VAO, or emulate behavior by binding all attributes.
      if (!publicAPI.isReady()) {
        publicAPI.initialize();
      }

      if (publicAPI.isReady() && model.supported) {
        if (model.extension) {
          model.extension.bindVertexArrayOES(model.handleVAO);
        } else {
          model.context.bindVertexArray(model.handleVAO);
        }
      } else if (publicAPI.isReady()) {
        var gl = model.context;

        for (var ibuff = 0; ibuff < model.buffers.length; ++ibuff) {
          var buff = model.buffers[ibuff];
          model.context.bindBuffer(gl.ARRAY_BUFFER, buff.buffer);

          for (var iatt = 0; iatt < buff.attributes.length; ++iatt) {
            var attrIt = buff.attributes[iatt];
            var matrixCount = attrIt.isMatrix ? attrIt.size : 1;

            for (var i = 0; i < matrixCount; ++i) {
              gl.enableVertexAttribArray(attrIt.index + i);
              gl.vertexAttribPointer(attrIt.index + i, attrIt.size, attrIt.type, attrIt.normalize, attrIt.stride, attrIt.offset + attrIt.stride * i / attrIt.size);

              if (attrIt.divisor > 0) {
                if (model.instancingExtension) {
                  model.instancingExtension.vertexAttribDivisorANGLE(attrIt.index + i, 1);
                } else {
                  gl.vertexAttribDivisor(attrIt.index + i, 1);
                }
              }
            }
          }
        }
      }
    };

    publicAPI.release = function () {
      // Either simply release the VAO, or emulate behavior by releasing all attributes.
      if (publicAPI.isReady() && model.supported) {
        if (model.extension) {
          model.extension.bindVertexArrayOES(null);
        } else {
          model.context.bindVertexArray(null);
        }
      } else if (publicAPI.isReady()) {
        var gl = model.context;

        for (var ibuff = 0; ibuff < model.buffers.length; ++ibuff) {
          var buff = model.buffers[ibuff];
          model.context.bindBuffer(gl.ARRAY_BUFFER, buff.buffer);

          for (var iatt = 0; iatt < buff.attributes.length; ++iatt) {
            var attrIt = buff.attributes[iatt];
            var matrixCount = attrIt.isMatrix ? attrIt.size : 1;

            for (var i = 0; i < matrixCount; ++i) {
              gl.enableVertexAttribArray(attrIt.index + i);
              gl.vertexAttribPointer(attrIt.index + i, attrIt.size, attrIt.type, attrIt.normalize, attrIt.stride, attrIt.offset + attrIt.stride * i / attrIt.size);

              if (attrIt.divisor > 0) {
                if (model.instancingExtension) {
                  model.instancingExtension.vertexAttribDivisorANGLE(attrIt.index + i, 0);
                } else {
                  gl.vertexAttribDivisor(attrIt.index + i, 0);
                }
              }

              gl.disableVertexAttribArray(attrIt.index + i);
            }
          }
        }
      }
    };

    publicAPI.shaderProgramChanged = function () {
      publicAPI.release();

      if (model.handleVAO) {
        if (model.extension) {
          model.extension.deleteVertexArrayOES(model.handleVAO);
        } else {
          model.context.deleteVertexArray(model.handleVAO);
        }
      }

      model.handleVAO = 0;
      model.handleProgram = 0;
    };

    publicAPI.releaseGraphicsResources = function () {
      publicAPI.shaderProgramChanged();

      if (model.handleVAO) {
        if (model.extension) {
          model.extension.deleteVertexArrayOES(model.handleVAO);
        } else {
          model.context.deleteVertexArray(model.handleVAO);
        }
      }

      model.handleVAO = 0;
      model.supported = true;
      model.handleProgram = 0;
    };

    publicAPI.addAttributeArray = function (program, buffer, name, offset, stride, elementType, elementTupleSize, normalize) {
      return publicAPI.addAttributeArrayWithDivisor(program, buffer, name, offset, stride, elementType, elementTupleSize, normalize, 0, false);
    };

    publicAPI.addAttributeArrayWithDivisor = function (program, buffer, name, offset, stride, elementType, elementTupleSize, normalize, divisor, isMatrix) {
      if (!program) {
        return false;
      } // Check the program is bound, and the buffer is valid.


      if (!program.isBound() || buffer.getHandle() === 0 || buffer.getType() !== ObjectType$1.ARRAY_BUFFER) {
        return false;
      } // Perform initialization if necessary, ensure program matches VAOs.


      if (model.handleProgram === 0) {
        model.handleProgram = program.getHandle();
      }

      if (!publicAPI.isReady()) {
        publicAPI.initialize();
      }

      if (!publicAPI.isReady() || model.handleProgram !== program.getHandle()) {
        return false;
      }

      var gl = model.context;
      var attribs = {};
      attribs.name = name;
      attribs.index = gl.getAttribLocation(model.handleProgram, name);
      attribs.offset = offset;
      attribs.stride = stride;
      attribs.type = elementType;
      attribs.size = elementTupleSize;
      attribs.normalize = normalize;
      attribs.isMatrix = isMatrix;
      attribs.divisor = divisor;

      if (attribs.Index === -1) {
        return false;
      } // Always make the call as even the first use wants the attrib pointer setting
      // up when we are emulating.


      buffer.bind();
      gl.enableVertexAttribArray(attribs.index);
      gl.vertexAttribPointer(attribs.index, attribs.size, attribs.type, attribs.normalize, attribs.stride, attribs.offset);

      if (divisor > 0) {
        if (model.instancingExtension) {
          model.instancingExtension.vertexAttribDivisorANGLE(attribs.index, 1);
        } else {
          gl.vertexAttribDivisor(attribs.index, 1);
        }
      }

      attribs.buffer = buffer.getHandle(); // If vertex array objects are not supported then build up our list.

      if (!model.supported) {
        // find the buffer
        var buffFound = false;

        for (var ibuff = 0; ibuff < model.buffers.length; ++ibuff) {
          var buff = model.buffers[ibuff];

          if (buff.buffer === attribs.buffer) {
            buffFound = true;
            var found = false;

            for (var iatt = 0; iatt < buff.attributes.length; ++iatt) {
              var attrIt = buff.attributes[iatt];

              if (attrIt.name === name) {
                found = true;
                buff.attributes[iatt] = attribs;
              }
            }

            if (!found) {
              buff.attributes.push(attribs);
            }
          }
        }

        if (!buffFound) {
          model.buffers.push({
            buffer: attribs.buffer,
            attributes: [attribs]
          });
        }
      }

      return true;
    };

    publicAPI.addAttributeMatrixWithDivisor = function (program, buffer, name, offset, stride, elementType, elementTupleSize, normalize, divisor) {
      // bind the first row of values
      var result = publicAPI.addAttributeArrayWithDivisor(program, buffer, name, offset, stride, elementType, elementTupleSize, normalize, divisor, true);

      if (!result) {
        return result;
      }

      var gl = model.context;
      var index = gl.getAttribLocation(model.handleProgram, name);

      for (var i = 1; i < elementTupleSize; i++) {
        gl.enableVertexAttribArray(index + i);
        gl.vertexAttribPointer(index + i, elementTupleSize, elementType, normalize, stride, offset + stride * i / elementTupleSize);

        if (divisor > 0) {
          if (model.instancingExtension) {
            model.instancingExtension.vertexAttribDivisorANGLE(index + i, 1);
          } else {
            gl.vertexAttribDivisor(index + i, 1);
          }
        }
      }

      return true;
    };

    publicAPI.removeAttributeArray = function (name) {
      if (!publicAPI.isReady() || model.handleProgram === 0) {
        return false;
      } // If we don't have real VAOs find the entry and remove it too.


      if (!model.supported) {
        for (var ibuff = 0; ibuff < model.buffers.length; ++ibuff) {
          var buff = model.buffers[ibuff];

          for (var iatt = 0; iatt < buff.attributes.length; ++iatt) {
            var attrIt = buff.attributes[iatt];

            if (attrIt.name === name) {
              buff.attributes.splice(iatt, 1);

              if (!buff.attributes.length) {
                model.buffers.splice(ibuff, 1);
              }

              return true;
            }
          }
        }
      }

      return true;
    };

    publicAPI.setOpenGLRenderWindow = function (rw) {
      if (model.openGLRenderWindow === rw) {
        return;
      }

      publicAPI.releaseGraphicsResources();
      model.openGLRenderWindow = rw;
      model.context = null;

      if (rw) {
        model.context = model.openGLRenderWindow.getContext();
      }
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$1a = {
    forceEmulation: false,
    handleVAO: 0,
    handleProgram: 0,
    supported: true,
    buffers: null,
    context: null,
    openGLRenderWindow: null
  }; // ----------------------------------------------------------------------------

  function extend$1c(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$1a, initialValues); // Internal objects initialization

    model.buffers = []; // Object methods

    macro.obj(publicAPI, model); // Create get-only macros

    macro.get(publicAPI, model, ['supported']); // Create get-set macros

    macro.setGet(publicAPI, model, ['forceEmulation']); // For more macro methods, see "Sources/macros.js"
    // Object specific methods

    vtkOpenGLVertexArrayObject(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$17 = macro.newInstance(extend$1c, 'vtkOpenGLVertexArrayObject'); // ----------------------------------------------------------------------------

  var vtkVertexArrayObject = {
    newInstance: newInstance$17,
    extend: extend$1c
  };

  // vtkOpenGLHelper methods
  // ----------------------------------------------------------------------------

  function vtkOpenGLHelper(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkOpenGLHelper');

    publicAPI.setOpenGLRenderWindow = function (win) {
      model.program.setContext(win.getContext());
      model.VAO.setOpenGLRenderWindow(win);
      model.CABO.setOpenGLRenderWindow(win);
    };

    publicAPI.releaseGraphicsResources = function (oglwin) {
      model.VAO.releaseGraphicsResources();
      model.CABO.releaseGraphicsResources();
      model.CABO.setElementCount(0);
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$19 = {
    program: null,
    shaderSourceTime: null,
    VAO: null,
    attributeUpdateTime: null,
    CABO: null,
    primitiveType: 0
  }; // ----------------------------------------------------------------------------

  function extend$1b(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$19, initialValues); // Build VTK API

    macro.obj(publicAPI, model);
    model.shaderSourceTime = {};
    macro.obj(model.shaderSourceTime);
    model.attributeUpdateTime = {};
    macro.obj(model.attributeUpdateTime);
    macro.setGet(publicAPI, model, ['program', 'shaderSourceTime', 'VAO', 'attributeUpdateTime', 'CABO', 'primitiveType']);
    model.program = vtkShaderProgram$1.newInstance();
    model.VAO = vtkVertexArrayObject.newInstance();
    model.CABO = vtkCellArrayBufferObject.newInstance(); // Object methods

    vtkOpenGLHelper(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$16 = macro.newInstance(extend$1b); // ----------------------------------------------------------------------------

  var vtkHelper = {
    newInstance: newInstance$16,
    extend: extend$1b
  };

  // vtkAbstractMapper methods
  // ----------------------------------------------------------------------------

  function vtkAbstractMapper(publicAPI, model) {
    publicAPI.update = function () {
      publicAPI.getInputData();
    };

    publicAPI.addClippingPlane = function (plane) {
      if (plane.getClassName() !== 'vtkPlane') {
        return;
      }

      model.clippingPlanes.push(plane);
      publicAPI.modified();
    };

    publicAPI.getNumberOfClippingPlanes = function () {
      return model.clippingPlanes.length;
    };

    publicAPI.removeAllClippingPlanes = function () {
      model.clippingPlanes.length = 0;
    };

    publicAPI.removeClippingPlane = function (i) {
      if (i < 0 || i >= 6) {
        return;
      }

      model.clippingPlanes.splice(i, 1);
    };

    publicAPI.getClippingPlanes = function () {
      return model.clippingPlanes;
    };

    publicAPI.setClippingPlanes = function (planes) {
      if (!planes) {
        return;
      }

      if (!Array.isArray(planes)) {
        publicAPI.addClippingPlane(planes);
      } else {
        var nbPlanes = planes.length;

        for (var i = 0; i < nbPlanes && i < 6; i++) {
          publicAPI.addClippingPlane(planes[i]);
        }
      }
    };

    publicAPI.getClippingPlaneInDataCoords = function (propMatrix, i, hnormal) {
      var clipPlanes = model.clippingPlanes;
      var mat = propMatrix;

      if (clipPlanes) {
        var n = clipPlanes.length;

        if (i >= 0 && i < n) {
          // Get the plane
          var plane = clipPlanes[i];
          var normal = plane.getNormal();
          var origin = plane.getOrigin(); // Compute the plane equation

          var v1 = normal[0];
          var v2 = normal[1];
          var v3 = normal[2];
          var v4 = -(v1 * origin[0] + v2 * origin[1] + v3 * origin[2]); // Transform normal from world to data coords

          hnormal[0] = v1 * mat[0] + v2 * mat[4] + v3 * mat[8] + v4 * mat[12];
          hnormal[1] = v1 * mat[1] + v2 * mat[5] + v3 * mat[9] + v4 * mat[13];
          hnormal[2] = v1 * mat[2] + v2 * mat[6] + v3 * mat[10] + v4 * mat[14];
          hnormal[3] = v1 * mat[3] + v2 * mat[7] + v3 * mat[11] + v4 * mat[15];
          return;
        }
      }

      macro.vtkErrorMacro("Clipping plane index ".concat(i, " is out of range."));
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$18 = {
    clippingPlanes: []
  }; // ----------------------------------------------------------------------------

  function extend$1a(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$18, initialValues); // Object methods

    macro.obj(publicAPI, model);
    macro.algo(publicAPI, model, 1, 0);

    if (!model.clippingPlanes) {
      model.clippingPlanes = [];
    }

    vtkAbstractMapper(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var vtkAbstractMapper$1 = {
    extend: extend$1a
  };

  var alea = createCommonjsModule(function (module) {
  // A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010
  // http://baagoe.com/en/RandomMusings/javascript/
  // https://github.com/nquinlan/better-random-numbers-for-javascript-mirror
  // Original work is under MIT license -

  // Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>
  //
  // Permission is hereby granted, free of charge, to any person obtaining a copy
  // of this software and associated documentation files (the "Software"), to deal
  // in the Software without restriction, including without limitation the rights
  // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  // copies of the Software, and to permit persons to whom the Software is
  // furnished to do so, subject to the following conditions:
  //
  // The above copyright notice and this permission notice shall be included in
  // all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  // THE SOFTWARE.



  (function(global, module, define) {

  function Alea(seed) {
    var me = this, mash = Mash();

    me.next = function() {
      var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32
      me.s0 = me.s1;
      me.s1 = me.s2;
      return me.s2 = t - (me.c = t | 0);
    };

    // Apply the seeding algorithm from Baagoe.
    me.c = 1;
    me.s0 = mash(' ');
    me.s1 = mash(' ');
    me.s2 = mash(' ');
    me.s0 -= mash(seed);
    if (me.s0 < 0) { me.s0 += 1; }
    me.s1 -= mash(seed);
    if (me.s1 < 0) { me.s1 += 1; }
    me.s2 -= mash(seed);
    if (me.s2 < 0) { me.s2 += 1; }
    mash = null;
  }

  function copy(f, t) {
    t.c = f.c;
    t.s0 = f.s0;
    t.s1 = f.s1;
    t.s2 = f.s2;
    return t;
  }

  function impl(seed, opts) {
    var xg = new Alea(seed),
        state = opts && opts.state,
        prng = xg.next;
    prng.int32 = function() { return (xg.next() * 0x100000000) | 0; };
    prng.double = function() {
      return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53
    };
    prng.quick = prng;
    if (state) {
      if (typeof(state) == 'object') copy(state, xg);
      prng.state = function() { return copy(xg, {}); };
    }
    return prng;
  }

  function Mash() {
    var n = 0xefc8249d;

    var mash = function(data) {
      data = String(data);
      for (var i = 0; i < data.length; i++) {
        n += data.charCodeAt(i);
        var h = 0.02519603282416938 * n;
        n = h >>> 0;
        h -= n;
        h *= n;
        n = h >>> 0;
        h -= n;
        n += h * 0x100000000; // 2^32
      }
      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32
    };

    return mash;
  }


  if (module && module.exports) {
    module.exports = impl;
  } else if (define && define.amd) {
    define(function() { return impl; });
  } else {
    this.alea = impl;
  }

  })(
    commonjsGlobal,
    module,    // present in node.js
    (typeof undefined) == 'function'    // present with an AMD loader
  );
  });

  var xor128 = createCommonjsModule(function (module) {
  // A Javascript implementaion of the "xor128" prng algorithm by
  // George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

  (function(global, module, define) {

  function XorGen(seed) {
    var me = this, strseed = '';

    me.x = 0;
    me.y = 0;
    me.z = 0;
    me.w = 0;

    // Set up generator function.
    me.next = function() {
      var t = me.x ^ (me.x << 11);
      me.x = me.y;
      me.y = me.z;
      me.z = me.w;
      return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);
    };

    if (seed === (seed | 0)) {
      // Integer seed.
      me.x = seed;
    } else {
      // String seed.
      strseed += seed;
    }

    // Mix in string seed, then discard an initial batch of 64 values.
    for (var k = 0; k < strseed.length + 64; k++) {
      me.x ^= strseed.charCodeAt(k) | 0;
      me.next();
    }
  }

  function copy(f, t) {
    t.x = f.x;
    t.y = f.y;
    t.z = f.z;
    t.w = f.w;
    return t;
  }

  function impl(seed, opts) {
    var xg = new XorGen(seed),
        state = opts && opts.state,
        prng = function() { return (xg.next() >>> 0) / 0x100000000; };
    prng.double = function() {
      do {
        var top = xg.next() >>> 11,
            bot = (xg.next() >>> 0) / 0x100000000,
            result = (top + bot) / (1 << 21);
      } while (result === 0);
      return result;
    };
    prng.int32 = xg.next;
    prng.quick = prng;
    if (state) {
      if (typeof(state) == 'object') copy(state, xg);
      prng.state = function() { return copy(xg, {}); };
    }
    return prng;
  }

  if (module && module.exports) {
    module.exports = impl;
  } else if (define && define.amd) {
    define(function() { return impl; });
  } else {
    this.xor128 = impl;
  }

  })(
    commonjsGlobal,
    module,    // present in node.js
    (typeof undefined) == 'function'    // present with an AMD loader
  );
  });

  var xorwow = createCommonjsModule(function (module) {
  // A Javascript implementaion of the "xorwow" prng algorithm by
  // George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

  (function(global, module, define) {

  function XorGen(seed) {
    var me = this, strseed = '';

    // Set up generator function.
    me.next = function() {
      var t = (me.x ^ (me.x >>> 2));
      me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;
      return (me.d = (me.d + 362437 | 0)) +
         (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;
    };

    me.x = 0;
    me.y = 0;
    me.z = 0;
    me.w = 0;
    me.v = 0;

    if (seed === (seed | 0)) {
      // Integer seed.
      me.x = seed;
    } else {
      // String seed.
      strseed += seed;
    }

    // Mix in string seed, then discard an initial batch of 64 values.
    for (var k = 0; k < strseed.length + 64; k++) {
      me.x ^= strseed.charCodeAt(k) | 0;
      if (k == strseed.length) {
        me.d = me.x << 10 ^ me.x >>> 4;
      }
      me.next();
    }
  }

  function copy(f, t) {
    t.x = f.x;
    t.y = f.y;
    t.z = f.z;
    t.w = f.w;
    t.v = f.v;
    t.d = f.d;
    return t;
  }

  function impl(seed, opts) {
    var xg = new XorGen(seed),
        state = opts && opts.state,
        prng = function() { return (xg.next() >>> 0) / 0x100000000; };
    prng.double = function() {
      do {
        var top = xg.next() >>> 11,
            bot = (xg.next() >>> 0) / 0x100000000,
            result = (top + bot) / (1 << 21);
      } while (result === 0);
      return result;
    };
    prng.int32 = xg.next;
    prng.quick = prng;
    if (state) {
      if (typeof(state) == 'object') copy(state, xg);
      prng.state = function() { return copy(xg, {}); };
    }
    return prng;
  }

  if (module && module.exports) {
    module.exports = impl;
  } else if (define && define.amd) {
    define(function() { return impl; });
  } else {
    this.xorwow = impl;
  }

  })(
    commonjsGlobal,
    module,    // present in node.js
    (typeof undefined) == 'function'    // present with an AMD loader
  );
  });

  var xorshift7 = createCommonjsModule(function (module) {
  // A Javascript implementaion of the "xorshift7" algorithm by
  // François Panneton and Pierre L'ecuyer:
  // "On the Xorgshift Random Number Generators"
  // http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf

  (function(global, module, define) {

  function XorGen(seed) {
    var me = this;

    // Set up generator function.
    me.next = function() {
      // Update xor generator.
      var X = me.x, i = me.i, t, v;
      t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);
      t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);
      t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);
      t = X[(i + 4) & 7]; v ^= t ^ (t << 7);
      t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);
      X[i] = v;
      me.i = (i + 1) & 7;
      return v;
    };

    function init(me, seed) {
      var j, X = [];

      if (seed === (seed | 0)) {
        // Seed state array using a 32-bit integer.
        X[0] = seed;
      } else {
        // Seed state using a string.
        seed = '' + seed;
        for (j = 0; j < seed.length; ++j) {
          X[j & 7] = (X[j & 7] << 15) ^
              (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);
        }
      }
      // Enforce an array length of 8, not all zeroes.
      while (X.length < 8) X.push(0);
      for (j = 0; j < 8 && X[j] === 0; ++j);
      if (j == 8) X[7] = -1;

      me.x = X;
      me.i = 0;

      // Discard an initial 256 values.
      for (j = 256; j > 0; --j) {
        me.next();
      }
    }

    init(me, seed);
  }

  function copy(f, t) {
    t.x = f.x.slice();
    t.i = f.i;
    return t;
  }

  function impl(seed, opts) {
    if (seed == null) seed = +(new Date);
    var xg = new XorGen(seed),
        state = opts && opts.state,
        prng = function() { return (xg.next() >>> 0) / 0x100000000; };
    prng.double = function() {
      do {
        var top = xg.next() >>> 11,
            bot = (xg.next() >>> 0) / 0x100000000,
            result = (top + bot) / (1 << 21);
      } while (result === 0);
      return result;
    };
    prng.int32 = xg.next;
    prng.quick = prng;
    if (state) {
      if (state.x) copy(state, xg);
      prng.state = function() { return copy(xg, {}); };
    }
    return prng;
  }

  if (module && module.exports) {
    module.exports = impl;
  } else if (define && define.amd) {
    define(function() { return impl; });
  } else {
    this.xorshift7 = impl;
  }

  })(
    commonjsGlobal,
    module,    // present in node.js
    (typeof undefined) == 'function'    // present with an AMD loader
  );
  });

  var xor4096 = createCommonjsModule(function (module) {
  // A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.
  //
  // This fast non-cryptographic random number generator is designed for
  // use in Monte-Carlo algorithms. It combines a long-period xorshift
  // generator with a Weyl generator, and it passes all common batteries
  // of stasticial tests for randomness while consuming only a few nanoseconds
  // for each prng generated.  For background on the generator, see Brent's
  // paper: "Some long-period random number generators using shifts and xors."
  // http://arxiv.org/pdf/1004.3115v1.pdf
  //
  // Usage:
  //
  // var xor4096 = require('xor4096');
  // random = xor4096(1);                        // Seed with int32 or string.
  // assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.
  // assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.
  //
  // For nonzero numeric keys, this impelementation provides a sequence
  // identical to that by Brent's xorgens 3 implementaion in C.  This
  // implementation also provides for initalizing the generator with
  // string seeds, or for saving and restoring the state of the generator.
  //
  // On Chrome, this prng benchmarks about 2.1 times slower than
  // Javascript's built-in Math.random().

  (function(global, module, define) {

  function XorGen(seed) {
    var me = this;

    // Set up generator function.
    me.next = function() {
      var w = me.w,
          X = me.X, i = me.i, t, v;
      // Update Weyl generator.
      me.w = w = (w + 0x61c88647) | 0;
      // Update xor generator.
      v = X[(i + 34) & 127];
      t = X[i = ((i + 1) & 127)];
      v ^= v << 13;
      t ^= t << 17;
      v ^= v >>> 15;
      t ^= t >>> 12;
      // Update Xor generator array state.
      v = X[i] = v ^ t;
      me.i = i;
      // Result is the combination.
      return (v + (w ^ (w >>> 16))) | 0;
    };

    function init(me, seed) {
      var t, v, i, j, w, X = [], limit = 128;
      if (seed === (seed | 0)) {
        // Numeric seeds initialize v, which is used to generates X.
        v = seed;
        seed = null;
      } else {
        // String seeds are mixed into v and X one character at a time.
        seed = seed + '\0';
        v = 0;
        limit = Math.max(limit, seed.length);
      }
      // Initialize circular array and weyl value.
      for (i = 0, j = -32; j < limit; ++j) {
        // Put the unicode characters into the array, and shuffle them.
        if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);
        // After 32 shuffles, take v as the starting w value.
        if (j === 0) w = v;
        v ^= v << 10;
        v ^= v >>> 15;
        v ^= v << 4;
        v ^= v >>> 13;
        if (j >= 0) {
          w = (w + 0x61c88647) | 0;     // Weyl.
          t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.
          i = (0 == t) ? i + 1 : 0;     // Count zeroes.
        }
      }
      // We have detected all zeroes; make the key nonzero.
      if (i >= 128) {
        X[(seed && seed.length || 0) & 127] = -1;
      }
      // Run the generator 512 times to further mix the state before using it.
      // Factoring this as a function slows the main generator, so it is just
      // unrolled here.  The weyl generator is not advanced while warming up.
      i = 127;
      for (j = 4 * 128; j > 0; --j) {
        v = X[(i + 34) & 127];
        t = X[i = ((i + 1) & 127)];
        v ^= v << 13;
        t ^= t << 17;
        v ^= v >>> 15;
        t ^= t >>> 12;
        X[i] = v ^ t;
      }
      // Storing state as object members is faster than using closure variables.
      me.w = w;
      me.X = X;
      me.i = i;
    }

    init(me, seed);
  }

  function copy(f, t) {
    t.i = f.i;
    t.w = f.w;
    t.X = f.X.slice();
    return t;
  }
  function impl(seed, opts) {
    if (seed == null) seed = +(new Date);
    var xg = new XorGen(seed),
        state = opts && opts.state,
        prng = function() { return (xg.next() >>> 0) / 0x100000000; };
    prng.double = function() {
      do {
        var top = xg.next() >>> 11,
            bot = (xg.next() >>> 0) / 0x100000000,
            result = (top + bot) / (1 << 21);
      } while (result === 0);
      return result;
    };
    prng.int32 = xg.next;
    prng.quick = prng;
    if (state) {
      if (state.X) copy(state, xg);
      prng.state = function() { return copy(xg, {}); };
    }
    return prng;
  }

  if (module && module.exports) {
    module.exports = impl;
  } else if (define && define.amd) {
    define(function() { return impl; });
  } else {
    this.xor4096 = impl;
  }

  })(
    commonjsGlobal,                                     // window object or global
    module,    // present in node.js
    (typeof undefined) == 'function'    // present with an AMD loader
  );
  });

  var tychei = createCommonjsModule(function (module) {
  // A Javascript implementaion of the "Tyche-i" prng algorithm by
  // Samuel Neves and Filipe Araujo.
  // See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf

  (function(global, module, define) {

  function XorGen(seed) {
    var me = this, strseed = '';

    // Set up generator function.
    me.next = function() {
      var b = me.b, c = me.c, d = me.d, a = me.a;
      b = (b << 25) ^ (b >>> 7) ^ c;
      c = (c - d) | 0;
      d = (d << 24) ^ (d >>> 8) ^ a;
      a = (a - b) | 0;
      me.b = b = (b << 20) ^ (b >>> 12) ^ c;
      me.c = c = (c - d) | 0;
      me.d = (d << 16) ^ (c >>> 16) ^ a;
      return me.a = (a - b) | 0;
    };

    /* The following is non-inverted tyche, which has better internal
     * bit diffusion, but which is about 25% slower than tyche-i in JS.
    me.next = function() {
      var a = me.a, b = me.b, c = me.c, d = me.d;
      a = (me.a + me.b | 0) >>> 0;
      d = me.d ^ a; d = d << 16 ^ d >>> 16;
      c = me.c + d | 0;
      b = me.b ^ c; b = b << 12 ^ d >>> 20;
      me.a = a = a + b | 0;
      d = d ^ a; me.d = d = d << 8 ^ d >>> 24;
      me.c = c = c + d | 0;
      b = b ^ c;
      return me.b = (b << 7 ^ b >>> 25);
    }
    */

    me.a = 0;
    me.b = 0;
    me.c = 2654435769 | 0;
    me.d = 1367130551;

    if (seed === Math.floor(seed)) {
      // Integer seed.
      me.a = (seed / 0x100000000) | 0;
      me.b = seed | 0;
    } else {
      // String seed.
      strseed += seed;
    }

    // Mix in string seed, then discard an initial batch of 64 values.
    for (var k = 0; k < strseed.length + 20; k++) {
      me.b ^= strseed.charCodeAt(k) | 0;
      me.next();
    }
  }

  function copy(f, t) {
    t.a = f.a;
    t.b = f.b;
    t.c = f.c;
    t.d = f.d;
    return t;
  }
  function impl(seed, opts) {
    var xg = new XorGen(seed),
        state = opts && opts.state,
        prng = function() { return (xg.next() >>> 0) / 0x100000000; };
    prng.double = function() {
      do {
        var top = xg.next() >>> 11,
            bot = (xg.next() >>> 0) / 0x100000000,
            result = (top + bot) / (1 << 21);
      } while (result === 0);
      return result;
    };
    prng.int32 = xg.next;
    prng.quick = prng;
    if (state) {
      if (typeof(state) == 'object') copy(state, xg);
      prng.state = function() { return copy(xg, {}); };
    }
    return prng;
  }

  if (module && module.exports) {
    module.exports = impl;
  } else if (define && define.amd) {
    define(function() { return impl; });
  } else {
    this.tychei = impl;
  }

  })(
    commonjsGlobal,
    module,    // present in node.js
    (typeof undefined) == 'function'    // present with an AMD loader
  );
  });

  var empty$1 = {};

  var empty$2 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': empty$1
  });

  var require$$0 = /*@__PURE__*/getAugmentedNamespace(empty$2);

  /*
  Copyright 2019 David Bau.

  Permission is hereby granted, free of charge, to any person obtaining
  a copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

  */

  var seedrandom$1 = createCommonjsModule(function (module) {
  (function (global, pool, math) {
  //
  // The following constants are related to IEEE 754 limits.
  //

  var width = 256,        // each RC4 output is 0 <= x < 256
      chunks = 6,         // at least six RC4 outputs for each double
      digits = 52,        // there are 52 significant digits in a double
      rngname = 'random', // rngname: name for Math.random and Math.seedrandom
      startdenom = math.pow(width, chunks),
      significance = math.pow(2, digits),
      overflow = significance * 2,
      mask = width - 1,
      nodecrypto;         // node.js crypto module, initialized at the bottom.

  //
  // seedrandom()
  // This is the seedrandom function described above.
  //
  function seedrandom(seed, options, callback) {
    var key = [];
    options = (options == true) ? { entropy: true } : (options || {});

    // Flatten the seed string or build one from local entropy if needed.
    var shortseed = mixkey(flatten(
      options.entropy ? [seed, tostring(pool)] :
      (seed == null) ? autoseed() : seed, 3), key);

    // Use the seed to initialize an ARC4 generator.
    var arc4 = new ARC4(key);

    // This function returns a random double in [0, 1) that contains
    // randomness in every bit of the mantissa of the IEEE 754 value.
    var prng = function() {
      var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
          d = startdenom,                 //   and denominator d = 2 ^ 48.
          x = 0;                          //   and no 'extra last byte'.
      while (n < significance) {          // Fill up all significant digits by
        n = (n + x) * width;              //   shifting numerator and
        d *= width;                       //   denominator and generating a
        x = arc4.g(1);                    //   new least-significant-byte.
      }
      while (n >= overflow) {             // To avoid rounding up, before adding
        n /= 2;                           //   last byte, shift everything
        d /= 2;                           //   right using integer math until
        x >>>= 1;                         //   we have exactly the desired bits.
      }
      return (n + x) / d;                 // Form the number within [0, 1).
    };

    prng.int32 = function() { return arc4.g(4) | 0; };
    prng.quick = function() { return arc4.g(4) / 0x100000000; };
    prng.double = prng;

    // Mix the randomness into accumulated entropy.
    mixkey(tostring(arc4.S), pool);

    // Calling convention: what to return as a function of prng, seed, is_math.
    return (options.pass || callback ||
        function(prng, seed, is_math_call, state) {
          if (state) {
            // Load the arc4 state from the given state if it has an S array.
            if (state.S) { copy(state, arc4); }
            // Only provide the .state method if requested via options.state.
            prng.state = function() { return copy(arc4, {}); };
          }

          // If called as a method of Math (Math.seedrandom()), mutate
          // Math.random because that is how seedrandom.js has worked since v1.0.
          if (is_math_call) { math[rngname] = prng; return seed; }

          // Otherwise, it is a newer calling convention, so return the
          // prng directly.
          else return prng;
        })(
    prng,
    shortseed,
    'global' in options ? options.global : (this == math),
    options.state);
  }

  //
  // ARC4
  //
  // An ARC4 implementation.  The constructor takes a key in the form of
  // an array of at most (width) integers that should be 0 <= x < (width).
  //
  // The g(count) method returns a pseudorandom integer that concatenates
  // the next (count) outputs from ARC4.  Its return value is a number x
  // that is in the range 0 <= x < (width ^ count).
  //
  function ARC4(key) {
    var t, keylen = key.length,
        me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];

    // The empty key [] is treated as [0].
    if (!keylen) { key = [keylen++]; }

    // Set up S using the standard key scheduling algorithm.
    while (i < width) {
      s[i] = i++;
    }
    for (i = 0; i < width; i++) {
      s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
      s[j] = t;
    }

    // The "g" method returns the next (count) outputs as one number.
    (me.g = function(count) {
      // Using instance members instead of closure state nearly doubles speed.
      var t, r = 0,
          i = me.i, j = me.j, s = me.S;
      while (count--) {
        t = s[i = mask & (i + 1)];
        r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
      }
      me.i = i; me.j = j;
      return r;
      // For robust unpredictability, the function call below automatically
      // discards an initial batch of values.  This is called RC4-drop[256].
      // See http://google.com/search?q=rsa+fluhrer+response&btnI
    })(width);
  }

  //
  // copy()
  // Copies internal state of ARC4 to or from a plain object.
  //
  function copy(f, t) {
    t.i = f.i;
    t.j = f.j;
    t.S = f.S.slice();
    return t;
  }
  //
  // flatten()
  // Converts an object tree to nested arrays of strings.
  //
  function flatten(obj, depth) {
    var result = [], typ = (typeof obj), prop;
    if (depth && typ == 'object') {
      for (prop in obj) {
        try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
      }
    }
    return (result.length ? result : typ == 'string' ? obj : obj + '\0');
  }

  //
  // mixkey()
  // Mixes a string seed into a key that is an array of integers, and
  // returns a shortened string seed that is equivalent to the result key.
  //
  function mixkey(seed, key) {
    var stringseed = seed + '', smear, j = 0;
    while (j < stringseed.length) {
      key[mask & j] =
        mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
    }
    return tostring(key);
  }

  //
  // autoseed()
  // Returns an object for autoseeding, using window.crypto and Node crypto
  // module if available.
  //
  function autoseed() {
    try {
      var out;
      if (nodecrypto && (out = nodecrypto.randomBytes)) {
        // The use of 'out' to remember randomBytes makes tight minified code.
        out = out(width);
      } else {
        out = new Uint8Array(width);
        (global.crypto || global.msCrypto).getRandomValues(out);
      }
      return tostring(out);
    } catch (e) {
      var browser = global.navigator,
          plugins = browser && browser.plugins;
      return [+new Date, global, plugins, global.screen, tostring(pool)];
    }
  }

  //
  // tostring()
  // Converts an array of charcodes to a string
  //
  function tostring(a) {
    return String.fromCharCode.apply(0, a);
  }

  //
  // When seedrandom.js is loaded, we immediately mix a few bits
  // from the built-in RNG into the entropy pool.  Because we do
  // not want to interfere with deterministic PRNG state later,
  // seedrandom will not call math.random on its own again after
  // initialization.
  //
  mixkey(math.random(), pool);

  //
  // Nodejs and AMD support: export the implementation as a module using
  // either convention.
  //
  if (module.exports) {
    module.exports = seedrandom;
    // When in node.js, try using crypto package for autoseeding.
    try {
      nodecrypto = require$$0;
    } catch (ex) {}
  } else {
    // When included as a plain script, set up Math.seedrandom global.
    math['seed' + rngname] = seedrandom;
  }


  // End anonymous scope, and pass initial values.
  })(
    // global: `self` in browsers (including strict mode and web workers),
    // otherwise `this` in Node and other environments
    (typeof self !== 'undefined') ? self : commonjsGlobal,
    [],     // pool: entropy pool starts empty
    Math    // math: package containing random, pow, and seedrandom
  );
  });

  // A library of seedable RNGs implemented in Javascript.
  //
  // Usage:
  //
  // var seedrandom = require('seedrandom');
  // var random = seedrandom(1); // or any seed.
  // var x = random();       // 0 <= x < 1.  Every bit is random.
  // var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.

  // alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.
  // Period: ~2^116
  // Reported to pass all BigCrush tests.


  // xor128, a pure xor-shift generator by George Marsaglia.
  // Period: 2^128-1.
  // Reported to fail: MatrixRank and LinearComp.


  // xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.
  // Period: 2^192-2^32
  // Reported to fail: CollisionOver, SimpPoker, and LinearComp.


  // xorshift7, by François Panneton and Pierre L'ecuyer, takes
  // a different approach: it adds robustness by allowing more shifts
  // than Marsaglia's original three.  It is a 7-shift generator
  // with 256 bits, that passes BigCrush with no systmatic failures.
  // Period 2^256-1.
  // No systematic BigCrush failures reported.


  // xor4096, by Richard Brent, is a 4096-bit xor-shift with a
  // very long period that also adds a Weyl generator. It also passes
  // BigCrush with no systematic failures.  Its long period may
  // be useful if you have many generators and need to avoid
  // collisions.
  // Period: 2^4128-2^32.
  // No systematic BigCrush failures reported.


  // Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random
  // number generator derived from ChaCha, a modern stream cipher.
  // https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf
  // Period: ~2^127
  // No systematic BigCrush failures reported.


  // The original ARC4-based prng included in this library.
  // Period: ~2^1600


  seedrandom$1.alea = alea;
  seedrandom$1.xor128 = xor128;
  seedrandom$1.xorwow = xorwow;
  seedrandom$1.xorshift7 = xorshift7;
  seedrandom$1.xor4096 = xor4096;
  seedrandom$1.tychei = tychei;

  var seedrandom = seedrandom$1;

  var vtkErrorMacro$h = macro.vtkErrorMacro,
      vtkWarningMacro$5 = macro.vtkWarningMacro; // ----------------------------------------------------------------------------

  /* eslint-disable camelcase                                                  */

  /* eslint-disable no-cond-assign                                             */

  /* eslint-disable no-bitwise                                                 */

  /* eslint-disable no-multi-assign                                            */
  // ----------------------------------------------------------------------------

  var randomSeedValue = 0;
  var VTK_MAX_ROTATIONS = 20;
  var VTK_SMALL_NUMBER = 1.0e-12;

  function notImplemented$5(method) {
    return function () {
      return vtkErrorMacro$h("vtkMath::".concat(method, " - NOT IMPLEMENTED"));
    };
  }

  function vtkSwapVectors3(v1, v2) {
    for (var i = 0; i < 3; i++) {
      var tmp = v1[i];
      v1[i] = v2[i];
      v2[i] = tmp;
    }
  }

  function createArray() {
    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;
    var array = [];

    while (array.length < size) {
      array.push(0);
    }

    return array;
  } // ----------------------------------------------------------------------------
  // Global methods
  // ----------------------------------------------------------------------------


  var Pi = function Pi() {
    return Math.PI;
  };
  function radiansFromDegrees(deg) {
    return deg / 180 * Math.PI;
  }
  function degreesFromRadians(rad) {
    return rad * 180 / Math.PI;
  }
  var round = Math.round,
      floor = Math.floor,
      ceil = Math.ceil,
      min = Math.min,
      max = Math.max;
  function arrayMin(arr) {
    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    var minValue = Infinity;

    for (var i = offset, len = arr.length; i < len; i += stride) {
      if (arr[i] < minValue) {
        minValue = arr[i];
      }
    }

    return minValue;
  }
  function arrayMax(arr) {
    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    var maxValue = -Infinity;

    for (var i = offset, len = arr.length; i < len; i += stride) {
      if (maxValue < arr[i]) {
        maxValue = arr[i];
      }
    }

    return maxValue;
  }
  function arrayRange(arr) {
    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    var minValue = Infinity;
    var maxValue = -Infinity;

    for (var i = offset, len = arr.length; i < len; i += stride) {
      if (arr[i] < minValue) {
        minValue = arr[i];
      }

      if (maxValue < arr[i]) {
        maxValue = arr[i];
      }
    }

    return [minValue, maxValue];
  }
  var ceilLog2 = notImplemented$5('ceilLog2');
  var factorial = notImplemented$5('factorial');
  function nearestPowerOfTwo(xi) {
    var v = 1;

    while (v < xi) {
      v *= 2;
    }

    return v;
  }
  function isPowerOfTwo(x) {
    return x === nearestPowerOfTwo(x);
  }
  function binomial(m, n) {
    var r = 1;

    for (var i = 1; i <= n; ++i) {
      r *= (m - i + 1) / i;
    }

    return Math.floor(r);
  }
  function beginCombination(m, n) {
    if (m < n) {
      return 0;
    }

    var r = createArray(n);

    for (var i = 0; i < n; ++i) {
      r[i] = i;
    }

    return r;
  }
  function nextCombination(m, n, r) {
    var status = 0;

    for (var i = n - 1; i >= 0; --i) {
      if (r[i] < m - n + i) {
        var j = r[i] + 1;

        while (i < n) {
          r[i++] = j++;
        }

        status = 1;
        break;
      }
    }

    return status;
  }
  function randomSeed(seed) {
    seedrandom("".concat(seed), {
      global: true
    });
    randomSeedValue = seed;
  }
  function getSeed() {
    return randomSeedValue;
  }
  function random() {
    var minValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var maxValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var delta = maxValue - minValue;
    return minValue + delta * Math.random();
  }
  var gaussian = notImplemented$5('gaussian'); // Vect3 operations

  function add(a, b, out) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    return out;
  }
  function subtract(a, b, out) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    return out;
  }
  function multiplyScalar(vec, scalar) {
    vec[0] *= scalar;
    vec[1] *= scalar;
    vec[2] *= scalar;
    return vec;
  }
  function multiplyScalar2D(vec, scalar) {
    vec[0] *= scalar;
    vec[1] *= scalar;
    return vec;
  }
  function multiplyAccumulate(a, b, scalar, out) {
    out[0] = a[0] + b[0] * scalar;
    out[1] = a[1] + b[1] * scalar;
    out[2] = a[2] + b[2] * scalar;
    return out;
  }
  function multiplyAccumulate2D(a, b, scalar, out) {
    out[0] = a[0] + b[0] * scalar;
    out[1] = a[1] + b[1] * scalar;
    return out;
  }
  function dot(x, y) {
    return x[0] * y[0] + x[1] * y[1] + x[2] * y[2];
  }
  function outer(x, y, out_3x3) {
    for (var i = 0; i < 3; i++) {
      for (var j = 0; j < 3; j++) {
        out_3x3[i][j] = x[i] * y[j];
      }
    }
  }
  function cross(x, y, out) {
    var Zx = x[1] * y[2] - x[2] * y[1];
    var Zy = x[2] * y[0] - x[0] * y[2];
    var Zz = x[0] * y[1] - x[1] * y[0];
    out[0] = Zx;
    out[1] = Zy;
    out[2] = Zz;
    return out;
  }
  function norm(x) {
    var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;

    switch (n) {
      case 1:
        return Math.abs(x);

      case 2:
        return Math.sqrt(x[0] * x[0] + x[1] * x[1]);

      case 3:
        return Math.sqrt(x[0] * x[0] + x[1] * x[1] + x[2] * x[2]);

      default:
        {
          var sum = 0;

          for (var i = 0; i < n; i++) {
            sum += x[i] * x[i];
          }

          return Math.sqrt(sum);
        }
    }
  }
  function normalize(x) {
    var den = norm(x);

    if (den !== 0.0) {
      x[0] /= den;
      x[1] /= den;
      x[2] /= den;
    }

    return den;
  }
  function perpendiculars(x, y, z, theta) {
    var x2 = x[0] * x[0];
    var y2 = x[1] * x[1];
    var z2 = x[2] * x[2];
    var r = Math.sqrt(x2 + y2 + z2);
    var dx;
    var dy;
    var dz; // transpose the vector to avoid divide-by-zero error

    if (x2 > y2 && x2 > z2) {
      dx = 0;
      dy = 1;
      dz = 2;
    } else if (y2 > z2) {
      dx = 1;
      dy = 2;
      dz = 0;
    } else {
      dx = 2;
      dy = 0;
      dz = 1;
    }

    var a = x[dx] / r;
    var b = x[dy] / r;
    var c = x[dz] / r;
    var tmp = Math.sqrt(a * a + c * c);

    if (theta !== 0) {
      var sintheta = Math.sin(theta);
      var costheta = Math.cos(theta);

      if (y) {
        y[dx] = (c * costheta - a * b * sintheta) / tmp;
        y[dy] = sintheta * tmp;
        y[dz] = (-(a * costheta) - b * c * sintheta) / tmp;
      }

      if (z) {
        z[dx] = (-(c * sintheta) - a * b * costheta) / tmp;
        z[dy] = costheta * tmp;
        z[dz] = (a * sintheta - b * c * costheta) / tmp;
      }
    } else {
      if (y) {
        y[dx] = c / tmp;
        y[dy] = 0;
        y[dz] = -a / tmp;
      }

      if (z) {
        z[dx] = -a * b / tmp;
        z[dy] = tmp;
        z[dz] = -b * c / tmp;
      }
    }
  }
  function projectVector$1(a, b, projection) {
    var bSquared = dot(b, b);

    if (bSquared === 0) {
      projection[0] = 0;
      projection[1] = 0;
      projection[2] = 0;
      return false;
    }

    var scale = dot(a, b) / bSquared;

    for (var i = 0; i < 3; i++) {
      projection[i] = b[i];
    }

    multiplyScalar(projection, scale);
    return true;
  }
  function dot2D(x, y) {
    return x[0] * y[0] + x[1] * y[1];
  }
  function projectVector2D(a, b, projection) {
    var bSquared = dot2D(b, b);

    if (bSquared === 0) {
      projection[0] = 0;
      projection[1] = 0;
      return false;
    }

    var scale = dot2D(a, b) / bSquared;

    for (var i = 0; i < 2; i++) {
      projection[i] = b[i];
    }

    multiplyScalar2D(projection, scale);
    return true;
  }
  function distance2BetweenPoints(x, y) {
    return (x[0] - y[0]) * (x[0] - y[0]) + (x[1] - y[1]) * (x[1] - y[1]) + (x[2] - y[2]) * (x[2] - y[2]);
  }
  function angleBetweenVectors(v1, v2) {
    var crossVect = [0, 0, 0];
    cross(v1, v2, crossVect);
    return Math.atan2(norm(crossVect), dot(v1, v2));
  }
  function gaussianAmplitude(mean, variance, position) {
    var distanceFromMean = Math.abs(mean - position);
    return 1 / Math.sqrt(2 * Math.PI * variance) * Math.exp(-Math.pow(distanceFromMean, 2) / (2 * variance));
  }
  function gaussianWeight(mean, variance, position) {
    var distanceFromMean = Math.abs(mean - position);
    return Math.exp(-Math.pow(distanceFromMean, 2) / (2 * variance));
  }
  function outer2D(x, y, out_2x2) {
    for (var i = 0; i < 2; i++) {
      for (var j = 0; j < 2; j++) {
        out_2x2[i][j] = x[i] * y[j];
      }
    }
  }
  function norm2D(x2D) {
    return Math.sqrt(x2D[0] * x2D[0] + x2D[1] * x2D[1]);
  }
  function normalize2D(x) {
    var den = norm2D(x);

    if (den !== 0.0) {
      x[0] /= den;
      x[1] /= den;
    }

    return den;
  }
  function determinant2x2() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (args.length === 2) {
      return args[0][0] * args[1][1] - args[1][0] * args[0][1];
    }

    if (args.length === 4) {
      return args[0] * args[3] - args[1] * args[2];
    }

    return Number.NaN;
  }
  function LUFactor3x3(mat_3x3, index_3) {
    var maxI;
    var tmp;
    var largest;
    var scale = [0, 0, 0]; // Loop over rows to get implicit scaling information

    for (var i = 0; i < 3; i++) {
      largest = Math.abs(mat_3x3[i][0]);

      if ((tmp = Math.abs(mat_3x3[i][1])) > largest) {
        largest = tmp;
      }

      if ((tmp = Math.abs(mat_3x3[i][2])) > largest) {
        largest = tmp;
      }

      scale[i] = 1 / largest;
    } // Loop over all columns using Crout's method
    // first column


    largest = scale[0] * Math.abs(mat_3x3[0][0]);
    maxI = 0;

    if ((tmp = scale[1] * Math.abs(mat_3x3[1][0])) >= largest) {
      largest = tmp;
      maxI = 1;
    }

    if ((tmp = scale[2] * Math.abs(mat_3x3[2][0])) >= largest) {
      maxI = 2;
    }

    if (maxI !== 0) {
      vtkSwapVectors3(mat_3x3[maxI], mat_3x3[0]);
      scale[maxI] = scale[0];
    }

    index_3[0] = maxI;
    mat_3x3[1][0] /= mat_3x3[0][0];
    mat_3x3[2][0] /= mat_3x3[0][0]; // second column

    mat_3x3[1][1] -= mat_3x3[1][0] * mat_3x3[0][1];
    mat_3x3[2][1] -= mat_3x3[2][0] * mat_3x3[0][1];
    largest = scale[1] * Math.abs(mat_3x3[1][1]);
    maxI = 1;

    if ((tmp = scale[2] * Math.abs(mat_3x3[2][1])) >= largest) {
      maxI = 2;
      vtkSwapVectors3(mat_3x3[2], mat_3x3[1]);
      scale[2] = scale[1];
    }

    index_3[1] = maxI;
    mat_3x3[2][1] /= mat_3x3[1][1]; // third column

    mat_3x3[1][2] -= mat_3x3[1][0] * mat_3x3[0][2];
    mat_3x3[2][2] -= mat_3x3[2][0] * mat_3x3[0][2] + mat_3x3[2][1] * mat_3x3[1][2];
    index_3[2] = 2;
  }
  function LUSolve3x3(mat_3x3, index_3, x_3) {
    // forward substitution
    var sum = x_3[index_3[0]];
    x_3[index_3[0]] = x_3[0];
    x_3[0] = sum;
    sum = x_3[index_3[1]];
    x_3[index_3[1]] = x_3[1];
    x_3[1] = sum - mat_3x3[1][0] * x_3[0];
    sum = x_3[index_3[2]];
    x_3[index_3[2]] = x_3[2];
    x_3[2] = sum - mat_3x3[2][0] * x_3[0] - mat_3x3[2][1] * x_3[1]; // back substitution

    x_3[2] /= mat_3x3[2][2];
    x_3[1] = (x_3[1] - mat_3x3[1][2] * x_3[2]) / mat_3x3[1][1];
    x_3[0] = (x_3[0] - mat_3x3[0][1] * x_3[1] - mat_3x3[0][2] * x_3[2]) / mat_3x3[0][0];
  }
  function linearSolve3x3(mat_3x3, x_3, y_3) {
    var a1 = mat_3x3[0][0];
    var b1 = mat_3x3[0][1];
    var c1 = mat_3x3[0][2];
    var a2 = mat_3x3[1][0];
    var b2 = mat_3x3[1][1];
    var c2 = mat_3x3[1][2];
    var a3 = mat_3x3[2][0];
    var b3 = mat_3x3[2][1];
    var c3 = mat_3x3[2][2]; // Compute the adjoint

    var d1 = +determinant2x2(b2, b3, c2, c3);
    var d2 = -determinant2x2(a2, a3, c2, c3);
    var d3 = +determinant2x2(a2, a3, b2, b3);
    var e1 = -determinant2x2(b1, b3, c1, c3);
    var e2 = +determinant2x2(a1, a3, c1, c3);
    var e3 = -determinant2x2(a1, a3, b1, b3);
    var f1 = +determinant2x2(b1, b2, c1, c2);
    var f2 = -determinant2x2(a1, a2, c1, c2);
    var f3 = +determinant2x2(a1, a2, b1, b2); // Compute the determinant

    var det = a1 * d1 + b1 * d2 + c1 * d3; // Multiply by the adjoint

    var v1 = d1 * x_3[0] + e1 * x_3[1] + f1 * x_3[2];
    var v2 = d2 * x_3[0] + e2 * x_3[1] + f2 * x_3[2];
    var v3 = d3 * x_3[0] + e3 * x_3[1] + f3 * x_3[2]; // Divide by the determinant

    y_3[0] = v1 / det;
    y_3[1] = v2 / det;
    y_3[2] = v3 / det;
  }
  function multiply3x3_vect3(mat_3x3, in_3, out_3) {
    var x = mat_3x3[0][0] * in_3[0] + mat_3x3[0][1] * in_3[1] + mat_3x3[0][2] * in_3[2];
    var y = mat_3x3[1][0] * in_3[0] + mat_3x3[1][1] * in_3[1] + mat_3x3[1][2] * in_3[2];
    var z = mat_3x3[2][0] * in_3[0] + mat_3x3[2][1] * in_3[1] + mat_3x3[2][2] * in_3[2];
    out_3[0] = x;
    out_3[1] = y;
    out_3[2] = z;
  }
  function multiply3x3_mat3(a_3x3, b_3x3, out_3x3) {
    var tmp = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];

    for (var i = 0; i < 3; i++) {
      tmp[0][i] = a_3x3[0][0] * b_3x3[0][i] + a_3x3[0][1] * b_3x3[1][i] + a_3x3[0][2] * b_3x3[2][i];
      tmp[1][i] = a_3x3[1][0] * b_3x3[0][i] + a_3x3[1][1] * b_3x3[1][i] + a_3x3[1][2] * b_3x3[2][i];
      tmp[2][i] = a_3x3[2][0] * b_3x3[0][i] + a_3x3[2][1] * b_3x3[1][i] + a_3x3[2][2] * b_3x3[2][i];
    }

    for (var j = 0; j < 3; j++) {
      out_3x3[j][0] = tmp[j][0];
      out_3x3[j][1] = tmp[j][1];
      out_3x3[j][2] = tmp[j][2];
    }
  }
  function multiplyMatrix(a, b, rowA, colA, rowB, colB, out_rowXcol) {
    // we need colA == rowB
    if (colA !== rowB) {
      vtkErrorMacro$h('Number of columns of A must match number of rows of B.');
    } // output matrix is rowA*colB
    // output row


    for (var i = 0; i < rowA; i++) {
      // output col
      for (var j = 0; j < colB; j++) {
        out_rowXcol[i][j] = 0; // sum for this point

        for (var k = 0; k < colA; k++) {
          out_rowXcol[i][j] += a[i][k] * b[k][j];
        }
      }
    }
  }
  function transpose3x3(in_3x3, outT_3x3) {
    var tmp;
    tmp = in_3x3[1][0];
    outT_3x3[1][0] = in_3x3[0][1];
    outT_3x3[0][1] = tmp;
    tmp = in_3x3[2][0];
    outT_3x3[2][0] = in_3x3[0][2];
    outT_3x3[0][2] = tmp;
    tmp = in_3x3[2][1];
    outT_3x3[2][1] = in_3x3[1][2];
    outT_3x3[1][2] = tmp;
    outT_3x3[0][0] = in_3x3[0][0];
    outT_3x3[1][1] = in_3x3[1][1];
    outT_3x3[2][2] = in_3x3[2][2];
  }
  function invert3x3(in_3x3, outI_3x3) {
    var a1 = in_3x3[0][0];
    var b1 = in_3x3[0][1];
    var c1 = in_3x3[0][2];
    var a2 = in_3x3[1][0];
    var b2 = in_3x3[1][1];
    var c2 = in_3x3[1][2];
    var a3 = in_3x3[2][0];
    var b3 = in_3x3[2][1];
    var c3 = in_3x3[2][2]; // Compute the adjoint

    var d1 = +determinant2x2(b2, b3, c2, c3);
    var d2 = -determinant2x2(a2, a3, c2, c3);
    var d3 = +determinant2x2(a2, a3, b2, b3);
    var e1 = -determinant2x2(b1, b3, c1, c3);
    var e2 = +determinant2x2(a1, a3, c1, c3);
    var e3 = -determinant2x2(a1, a3, b1, b3);
    var f1 = +determinant2x2(b1, b2, c1, c2);
    var f2 = -determinant2x2(a1, a2, c1, c2);
    var f3 = +determinant2x2(a1, a2, b1, b2); // Divide by the determinant

    var det = a1 * d1 + b1 * d2 + c1 * d3;
    outI_3x3[0][0] = d1 / det;
    outI_3x3[1][0] = d2 / det;
    outI_3x3[2][0] = d3 / det;
    outI_3x3[0][1] = e1 / det;
    outI_3x3[1][1] = e2 / det;
    outI_3x3[2][1] = e3 / det;
    outI_3x3[0][2] = f1 / det;
    outI_3x3[1][2] = f2 / det;
    outI_3x3[2][2] = f3 / det;
  }
  function identity3x3(mat_3x3) {
    for (var i = 0; i < 3; i++) {
      mat_3x3[i][0] = mat_3x3[i][1] = mat_3x3[i][2] = 0;
      mat_3x3[i][i] = 1;
    }
  }
  function determinant3x3(mat_3x3) {
    return mat_3x3[0][0] * mat_3x3[1][1] * mat_3x3[2][2] + mat_3x3[1][0] * mat_3x3[2][1] * mat_3x3[0][2] + mat_3x3[2][0] * mat_3x3[0][1] * mat_3x3[1][2] - mat_3x3[0][0] * mat_3x3[2][1] * mat_3x3[1][2] - mat_3x3[1][0] * mat_3x3[0][1] * mat_3x3[2][2] - mat_3x3[2][0] * mat_3x3[1][1] * mat_3x3[0][2];
  }
  function quaternionToMatrix3x3(quat_4, mat_3x3) {
    var ww = quat_4[0] * quat_4[0];
    var wx = quat_4[0] * quat_4[1];
    var wy = quat_4[0] * quat_4[2];
    var wz = quat_4[0] * quat_4[3];
    var xx = quat_4[1] * quat_4[1];
    var yy = quat_4[2] * quat_4[2];
    var zz = quat_4[3] * quat_4[3];
    var xy = quat_4[1] * quat_4[2];
    var xz = quat_4[1] * quat_4[3];
    var yz = quat_4[2] * quat_4[3];
    var rr = xx + yy + zz; // normalization factor, just in case quaternion was not normalized

    var f = 1 / (ww + rr);
    var s = (ww - rr) * f;
    f *= 2;
    mat_3x3[0][0] = xx * f + s;
    mat_3x3[1][0] = (xy + wz) * f;
    mat_3x3[2][0] = (xz - wy) * f;
    mat_3x3[0][1] = (xy - wz) * f;
    mat_3x3[1][1] = yy * f + s;
    mat_3x3[2][1] = (yz + wx) * f;
    mat_3x3[0][2] = (xz + wy) * f;
    mat_3x3[1][2] = (yz - wx) * f;
    mat_3x3[2][2] = zz * f + s;
  }
  /**
   * Returns true if elements of both arrays are equals.
   * @param {Array} a an array of numbers (vector, point, matrix...)
   * @param {Array} b an array of numbers (vector, point, matrix...)
   * @param {Number} eps tolerance
   */

  function areEquals(a, b) {
    var eps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1e-6;

    if (a.length !== b.length) {
      return false;
    }

    function isEqual(element, index) {
      return Math.abs(element - b[index]) <= eps;
    }

    return a.every(isEqual);
  }
  var areMatricesEqual = areEquals;
  function roundNumber(num) {
    var digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    if (!"".concat(num).includes('e')) {
      return +"".concat(Math.round("".concat(num, "e+").concat(digits)), "e-").concat(digits);
    }

    var arr = "".concat(num).split('e');
    var sig = '';

    if (+arr[1] + digits > 0) {
      sig = '+';
    }

    return +"".concat(Math.round("".concat(+arr[0], "e").concat(sig).concat(+arr[1] + digits)), "e-").concat(digits);
  }
  function roundVector(vector) {
    var out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];
    var digits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    out[0] = roundNumber(vector[0], digits);
    out[1] = roundNumber(vector[1], digits);
    out[2] = roundNumber(vector[2], digits);
    return out;
  }
  function jacobiN(a, n, w, v) {
    var i;
    var j;
    var k;
    var iq;
    var ip;
    var numPos;
    var tresh;
    var theta;
    var t;
    var tau;
    var sm;
    var s;
    var h;
    var g;
    var c;
    var tmp;
    var b = createArray(n);
    var z = createArray(n);

    var vtkROTATE = function vtkROTATE(aa, ii, jj, kk, ll) {
      g = aa[ii][jj];
      h = aa[kk][ll];
      aa[ii][jj] = g - s * (h + g * tau);
      aa[kk][ll] = h + s * (g - h * tau);
    }; // initialize


    for (ip = 0; ip < n; ip++) {
      for (iq = 0; iq < n; iq++) {
        v[ip][iq] = 0.0;
      }

      v[ip][ip] = 1.0;
    }

    for (ip = 0; ip < n; ip++) {
      b[ip] = w[ip] = a[ip][ip];
      z[ip] = 0.0;
    } // begin rotation sequence


    for (i = 0; i < VTK_MAX_ROTATIONS; i++) {
      sm = 0.0;

      for (ip = 0; ip < n - 1; ip++) {
        for (iq = ip + 1; iq < n; iq++) {
          sm += Math.abs(a[ip][iq]);
        }
      }

      if (sm === 0.0) {
        break;
      } // first 3 sweeps


      if (i < 3) {
        tresh = 0.2 * sm / (n * n);
      } else {
        tresh = 0.0;
      }

      for (ip = 0; ip < n - 1; ip++) {
        for (iq = ip + 1; iq < n; iq++) {
          g = 100.0 * Math.abs(a[ip][iq]); // after 4 sweeps

          if (i > 3 && Math.abs(w[ip]) + g === Math.abs(w[ip]) && Math.abs(w[iq]) + g === Math.abs(w[iq])) {
            a[ip][iq] = 0.0;
          } else if (Math.abs(a[ip][iq]) > tresh) {
            h = w[iq] - w[ip];

            if (Math.abs(h) + g === Math.abs(h)) {
              t = a[ip][iq] / h;
            } else {
              theta = 0.5 * h / a[ip][iq];
              t = 1.0 / (Math.abs(theta) + Math.sqrt(1.0 + theta * theta));

              if (theta < 0.0) {
                t = -t;
              }
            }

            c = 1.0 / Math.sqrt(1 + t * t);
            s = t * c;
            tau = s / (1.0 + c);
            h = t * a[ip][iq];
            z[ip] -= h;
            z[iq] += h;
            w[ip] -= h;
            w[iq] += h;
            a[ip][iq] = 0.0; // ip already shifted left by 1 unit

            for (j = 0; j <= ip - 1; j++) {
              vtkROTATE(a, j, ip, j, iq);
            } // ip and iq already shifted left by 1 unit


            for (j = ip + 1; j <= iq - 1; j++) {
              vtkROTATE(a, ip, j, j, iq);
            } // iq already shifted left by 1 unit


            for (j = iq + 1; j < n; j++) {
              vtkROTATE(a, ip, j, iq, j);
            }

            for (j = 0; j < n; j++) {
              vtkROTATE(v, j, ip, j, iq);
            }
          }
        }
      }

      for (ip = 0; ip < n; ip++) {
        b[ip] += z[ip];
        w[ip] = b[ip];
        z[ip] = 0.0;
      }
    } // this is NEVER called


    if (i >= VTK_MAX_ROTATIONS) {
      vtkWarningMacro$5('vtkMath::Jacobi: Error extracting eigenfunctions');
      return 0;
    } // sort eigenfunctions: these changes do not affect accuracy


    for (j = 0; j < n - 1; j++) {
      // boundary incorrect
      k = j;
      tmp = w[k];

      for (i = j + 1; i < n; i++) {
        // boundary incorrect, shifted already
        if (w[i] >= tmp) {
          // why exchange if same?
          k = i;
          tmp = w[k];
        }
      }

      if (k !== j) {
        w[k] = w[j];
        w[j] = tmp;

        for (i = 0; i < n; i++) {
          tmp = v[i][j];
          v[i][j] = v[i][k];
          v[i][k] = tmp;
        }
      }
    } // ensure eigenvector consistency (i.e., Jacobi can compute vectors that
    // are negative of one another (.707,.707,0) and (-.707,-.707,0). This can
    // reek havoc in hyperstreamline/other stuff. We will select the most
    // positive eigenvector.


    var ceil_half_n = (n >> 1) + (n & 1);

    for (j = 0; j < n; j++) {
      for (numPos = 0, i = 0; i < n; i++) {
        if (v[i][j] >= 0.0) {
          numPos++;
        }
      } //    if ( numPos < ceil(double(n)/double(2.0)) )


      if (numPos < ceil_half_n) {
        for (i = 0; i < n; i++) {
          v[i][j] *= -1.0;
        }
      }
    }

    return 1;
  }
  function matrix3x3ToQuaternion(mat_3x3, quat_4) {
    var tmp = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]; // on-diagonal elements

    tmp[0][0] = mat_3x3[0][0] + mat_3x3[1][1] + mat_3x3[2][2];
    tmp[1][1] = mat_3x3[0][0] - mat_3x3[1][1] - mat_3x3[2][2];
    tmp[2][2] = -mat_3x3[0][0] + mat_3x3[1][1] - mat_3x3[2][2];
    tmp[3][3] = -mat_3x3[0][0] - mat_3x3[1][1] + mat_3x3[2][2]; // off-diagonal elements

    tmp[0][1] = tmp[1][0] = mat_3x3[2][1] - mat_3x3[1][2];
    tmp[0][2] = tmp[2][0] = mat_3x3[0][2] - mat_3x3[2][0];
    tmp[0][3] = tmp[3][0] = mat_3x3[1][0] - mat_3x3[0][1];
    tmp[1][2] = tmp[2][1] = mat_3x3[1][0] + mat_3x3[0][1];
    tmp[1][3] = tmp[3][1] = mat_3x3[0][2] + mat_3x3[2][0];
    tmp[2][3] = tmp[3][2] = mat_3x3[2][1] + mat_3x3[1][2];
    var eigenvectors = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];
    var eigenvalues = [0, 0, 0, 0]; // convert into format that JacobiN can use,
    // then use Jacobi to find eigenvalues and eigenvectors

    var NTemp = [0, 0, 0, 0];
    var eigenvectorsTemp = [0, 0, 0, 0];

    for (var i = 0; i < 4; i++) {
      NTemp[i] = tmp[i];
      eigenvectorsTemp[i] = eigenvectors[i];
    }

    jacobiN(NTemp, 4, eigenvalues, eigenvectorsTemp); // the first eigenvector is the one we want

    quat_4[0] = eigenvectors[0][0];
    quat_4[1] = eigenvectors[1][0];
    quat_4[2] = eigenvectors[2][0];
    quat_4[3] = eigenvectors[3][0];
  }
  function multiplyQuaternion(quat_1, quat_2, quat_out) {
    var ww = quat_1[0] * quat_2[0];
    var wx = quat_1[0] * quat_2[1];
    var wy = quat_1[0] * quat_2[2];
    var wz = quat_1[0] * quat_2[3];
    var xw = quat_1[1] * quat_2[0];
    var xx = quat_1[1] * quat_2[1];
    var xy = quat_1[1] * quat_2[2];
    var xz = quat_1[1] * quat_2[3];
    var yw = quat_1[2] * quat_2[0];
    var yx = quat_1[2] * quat_2[1];
    var yy = quat_1[2] * quat_2[2];
    var yz = quat_1[2] * quat_2[3];
    var zw = quat_1[3] * quat_2[0];
    var zx = quat_1[3] * quat_2[1];
    var zy = quat_1[3] * quat_2[2];
    var zz = quat_1[3] * quat_2[3];
    quat_out[0] = ww - xx - yy - zz;
    quat_out[1] = wx + xw + yz - zy;
    quat_out[2] = wy - xz + yw + zx;
    quat_out[3] = wz + xy - yx + zw;
  }
  function orthogonalize3x3(a_3x3, out_3x3) {
    // copy the matrix
    for (var i = 0; i < 3; i++) {
      out_3x3[0][i] = a_3x3[0][i];
      out_3x3[1][i] = a_3x3[1][i];
      out_3x3[2][i] = a_3x3[2][i];
    } // Pivot the matrix to improve accuracy


    var scale = createArray(3);
    var index = createArray(3);
    var largest; // Loop over rows to get implicit scaling information

    for (var _i = 0; _i < 3; _i++) {
      var _x = Math.abs(out_3x3[_i][0]);

      var _x2 = Math.abs(out_3x3[_i][1]);

      var _x3 = Math.abs(out_3x3[_i][2]);

      largest = _x2 > _x ? _x2 : _x;
      largest = _x3 > largest ? _x3 : largest;
      scale[_i] = 1;

      if (largest !== 0) {
        scale[_i] /= largest;
      }
    } // first column


    var x1 = Math.abs(out_3x3[0][0]) * scale[0];
    var x2 = Math.abs(out_3x3[1][0]) * scale[1];
    var x3 = Math.abs(out_3x3[2][0]) * scale[2];
    index[0] = 0;
    largest = x1;

    if (x2 >= largest) {
      largest = x2;
      index[0] = 1;
    }

    if (x3 >= largest) {
      index[0] = 2;
    }

    if (index[0] !== 0) {
      vtkSwapVectors3(out_3x3[index[0]], out_3x3[0]);
      scale[index[0]] = scale[0];
    } // second column


    var y2 = Math.abs(out_3x3[1][1]) * scale[1];
    var y3 = Math.abs(out_3x3[2][1]) * scale[2];
    index[1] = 1;
    largest = y2;

    if (y3 >= largest) {
      index[1] = 2;
      vtkSwapVectors3(out_3x3[2], out_3x3[1]);
    } // third column


    index[2] = 2; // A quaternion can only describe a pure rotation, not
    // a rotation with a flip, therefore the flip must be
    // removed before the matrix is converted to a quaternion.

    var flip = 0;

    if (determinant3x3(out_3x3) < 0) {
      flip = 1;

      for (var _i2 = 0; _i2 < 3; _i2++) {
        out_3x3[0][_i2] = -out_3x3[0][_i2];
        out_3x3[1][_i2] = -out_3x3[1][_i2];
        out_3x3[2][_i2] = -out_3x3[2][_i2];
      }
    } // Do orthogonalization using a quaternion intermediate
    // (this, essentially, does the orthogonalization via
    // diagonalization of an appropriately constructed symmetric
    // 4x4 matrix rather than by doing SVD of the 3x3 matrix)


    var quat = createArray(4);
    matrix3x3ToQuaternion(out_3x3, quat);
    quaternionToMatrix3x3(quat, out_3x3); // Put the flip back into the orthogonalized matrix.

    if (flip) {
      for (var _i3 = 0; _i3 < 3; _i3++) {
        out_3x3[0][_i3] = -out_3x3[0][_i3];
        out_3x3[1][_i3] = -out_3x3[1][_i3];
        out_3x3[2][_i3] = -out_3x3[2][_i3];
      }
    } // Undo the pivoting


    if (index[1] !== 1) {
      vtkSwapVectors3(out_3x3[index[1]], out_3x3[1]);
    }

    if (index[0] !== 0) {
      vtkSwapVectors3(out_3x3[index[0]], out_3x3[0]);
    }
  }
  function diagonalize3x3(a_3x3, w_3, v_3x3) {
    var i;
    var j;
    var k;
    var maxI;
    var tmp;
    var maxVal; // do the matrix[3][3] to **matrix conversion for Jacobi

    var C = [createArray(3), createArray(3), createArray(3)];
    var ATemp = createArray(3);
    var VTemp = createArray(3);

    for (i = 0; i < 3; i++) {
      C[i][0] = a_3x3[i][0];
      C[i][1] = a_3x3[i][1];
      C[i][2] = a_3x3[i][2];
      ATemp[i] = C[i];
      VTemp[i] = v_3x3[i];
    } // diagonalize using Jacobi


    jacobiN(ATemp, 3, w_3, VTemp); // if all the eigenvalues are the same, return identity matrix

    if (w_3[0] === w_3[1] && w_3[0] === w_3[2]) {
      identity3x3(v_3x3);
      return;
    } // transpose temporarily, it makes it easier to sort the eigenvectors


    transpose3x3(v_3x3, v_3x3); // if two eigenvalues are the same, re-orthogonalize to optimally line
    // up the eigenvectors with the x, y, and z axes

    for (i = 0; i < 3; i++) {
      // two eigenvalues are the same
      if (w_3[(i + 1) % 3] === w_3[(i + 2) % 3]) {
        // find maximum element of the independent eigenvector
        maxVal = Math.abs(v_3x3[i][0]);
        maxI = 0;

        for (j = 1; j < 3; j++) {
          if (maxVal < (tmp = Math.abs(v_3x3[i][j]))) {
            maxVal = tmp;
            maxI = j;
          }
        } // swap the eigenvector into its proper position


        if (maxI !== i) {
          tmp = w_3[maxI];
          w_3[maxI] = w_3[i];
          w_3[i] = tmp;
          vtkSwapVectors3(v_3x3[i], v_3x3[maxI]);
        } // maximum element of eigenvector should be positive


        if (v_3x3[maxI][maxI] < 0) {
          v_3x3[maxI][0] = -v_3x3[maxI][0];
          v_3x3[maxI][1] = -v_3x3[maxI][1];
          v_3x3[maxI][2] = -v_3x3[maxI][2];
        } // re-orthogonalize the other two eigenvectors


        j = (maxI + 1) % 3;
        k = (maxI + 2) % 3;
        v_3x3[j][0] = 0.0;
        v_3x3[j][1] = 0.0;
        v_3x3[j][2] = 0.0;
        v_3x3[j][j] = 1.0;
        cross(v_3x3[maxI], v_3x3[j], v_3x3[k]);
        normalize(v_3x3[k]);
        cross(v_3x3[k], v_3x3[maxI], v_3x3[j]); // transpose vectors back to columns

        transpose3x3(v_3x3, v_3x3);
        return;
      }
    } // the three eigenvalues are different, just sort the eigenvectors
    // to align them with the x, y, and z axes
    // find the vector with the largest x element, make that vector
    // the first vector


    maxVal = Math.abs(v_3x3[0][0]);
    maxI = 0;

    for (i = 1; i < 3; i++) {
      if (maxVal < (tmp = Math.abs(v_3x3[i][0]))) {
        maxVal = tmp;
        maxI = i;
      }
    } // swap eigenvalue and eigenvector


    if (maxI !== 0) {
      tmp = w_3[maxI];
      w_3[maxI] = w_3[0];
      w_3[0] = tmp;
      vtkSwapVectors3(v_3x3[maxI], v_3x3[0]);
    } // do the same for the y element


    if (Math.abs(v_3x3[1][1]) < Math.abs(v_3x3[2][1])) {
      tmp = w_3[2];
      w_3[2] = w_3[1];
      w_3[1] = tmp;
      vtkSwapVectors3(v_3x3[2], v_3x3[1]);
    } // ensure that the sign of the eigenvectors is correct


    for (i = 0; i < 2; i++) {
      if (v_3x3[i][i] < 0) {
        v_3x3[i][0] = -v_3x3[i][0];
        v_3x3[i][1] = -v_3x3[i][1];
        v_3x3[i][2] = -v_3x3[i][2];
      }
    } // set sign of final eigenvector to ensure that determinant is positive


    if (determinant3x3(v_3x3) < 0) {
      v_3x3[2][0] = -v_3x3[2][0];
      v_3x3[2][1] = -v_3x3[2][1];
      v_3x3[2][2] = -v_3x3[2][2];
    } // transpose the eigenvectors back again


    transpose3x3(v_3x3, v_3x3);
  }
  function singularValueDecomposition3x3(a_3x3, u_3x3, w_3, vT_3x3) {
    var i;
    var B = [createArray(3), createArray(3), createArray(3)]; // copy so that A can be used for U or VT without risk

    for (i = 0; i < 3; i++) {
      B[0][i] = a_3x3[0][i];
      B[1][i] = a_3x3[1][i];
      B[2][i] = a_3x3[2][i];
    } // temporarily flip if determinant is negative


    var d = determinant3x3(B);

    if (d < 0) {
      for (i = 0; i < 3; i++) {
        B[0][i] = -B[0][i];
        B[1][i] = -B[1][i];
        B[2][i] = -B[2][i];
      }
    } // orthogonalize, diagonalize, etc.


    orthogonalize3x3(B, u_3x3);
    transpose3x3(B, B);
    multiply3x3_mat3(B, u_3x3, vT_3x3);
    diagonalize3x3(vT_3x3, w_3, vT_3x3);
    multiply3x3_mat3(u_3x3, vT_3x3, u_3x3);
    transpose3x3(vT_3x3, vT_3x3); // re-create the flip

    if (d < 0) {
      w_3[0] = -w_3[0];
      w_3[1] = -w_3[1];
      w_3[2] = -w_3[2];
    }
  }
  function luFactorLinearSystem(A, index, size) {
    var i;
    var j;
    var k;
    var largest;
    var maxI = 0;
    var sum;
    var temp1;
    var temp2;
    var scale = createArray(size); //
    // Loop over rows to get implicit scaling information
    //

    for (i = 0; i < size; i++) {
      for (largest = 0.0, j = 0; j < size; j++) {
        if ((temp2 = Math.abs(A[i][j])) > largest) {
          largest = temp2;
        }
      }

      if (largest === 0.0) {
        vtkWarningMacro$5('Unable to factor linear system');
        return 0;
      }

      scale[i] = 1.0 / largest;
    } //
    // Loop over all columns using Crout's method
    //


    for (j = 0; j < size; j++) {
      for (i = 0; i < j; i++) {
        sum = A[i][j];

        for (k = 0; k < i; k++) {
          sum -= A[i][k] * A[k][j];
        }

        A[i][j] = sum;
      } //
      // Begin search for largest pivot element
      //


      for (largest = 0.0, i = j; i < size; i++) {
        sum = A[i][j];

        for (k = 0; k < j; k++) {
          sum -= A[i][k] * A[k][j];
        }

        A[i][j] = sum;

        if ((temp1 = scale[i] * Math.abs(sum)) >= largest) {
          largest = temp1;
          maxI = i;
        }
      } //
      // Check for row interchange
      //


      if (j !== maxI) {
        for (k = 0; k < size; k++) {
          temp1 = A[maxI][k];
          A[maxI][k] = A[j][k];
          A[j][k] = temp1;
        }

        scale[maxI] = scale[j];
      } //
      // Divide by pivot element and perform elimination
      //


      index[j] = maxI;

      if (Math.abs(A[j][j]) <= VTK_SMALL_NUMBER) {
        vtkWarningMacro$5('Unable to factor linear system');
        return 0;
      }

      if (j !== size - 1) {
        temp1 = 1.0 / A[j][j];

        for (i = j + 1; i < size; i++) {
          A[i][j] *= temp1;
        }
      }
    }

    return 1;
  }
  function luSolveLinearSystem(A, index, x, size) {
    var i;
    var j;
    var ii;
    var idx;
    var sum; //
    // Proceed with forward and backsubstitution for L and U
    // matrices.  First, forward substitution.
    //

    for (ii = -1, i = 0; i < size; i++) {
      idx = index[i];
      sum = x[idx];
      x[idx] = x[i];

      if (ii >= 0) {
        for (j = ii; j <= i - 1; j++) {
          sum -= A[i][j] * x[j];
        }
      } else if (sum !== 0.0) {
        ii = i;
      }

      x[i] = sum;
    } //
    // Now, back substitution
    //


    for (i = size - 1; i >= 0; i--) {
      sum = x[i];

      for (j = i + 1; j < size; j++) {
        sum -= A[i][j] * x[j];
      }

      x[i] = sum / A[i][i];
    }
  }
  function solveLinearSystem(A, x, size) {
    // if we solving something simple, just solve it
    if (size === 2) {
      var y = createArray(2);
      var det = determinant2x2(A[0][0], A[0][1], A[1][0], A[1][1]);

      if (det === 0.0) {
        // Unable to solve linear system
        return 0;
      }

      y[0] = (A[1][1] * x[0] - A[0][1] * x[1]) / det;
      y[1] = (-(A[1][0] * x[0]) + A[0][0] * x[1]) / det;
      x[0] = y[0];
      x[1] = y[1];
      return 1;
    }

    if (size === 1) {
      if (A[0][0] === 0.0) {
        // Unable to solve linear system
        return 0;
      }

      x[0] /= A[0][0];
      return 1;
    } //
    // System of equations is not trivial, use Crout's method
    //
    // Check on allocation of working vectors


    var index = createArray(size); // Factor and solve matrix

    if (luFactorLinearSystem(A, index, size) === 0) {
      return 0;
    }

    luSolveLinearSystem(A, index, x, size);
    return 1;
  }
  function invertMatrix(A, AI, size) {
    var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    var column = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
    var tmp1Size = index || createArray(size);
    var tmp2Size = column || createArray(size); // Factor matrix; then begin solving for inverse one column at a time.
    // Note: tmp1Size returned value is used later, tmp2Size is just working
    // memory whose values are not used in LUSolveLinearSystem

    if (luFactorLinearSystem(A, tmp1Size, size) === 0) {
      return 0;
    }

    for (var j = 0; j < size; j++) {
      for (var i = 0; i < size; i++) {
        tmp2Size[i] = 0.0;
      }

      tmp2Size[j] = 1.0;
      luSolveLinearSystem(A, tmp1Size, tmp2Size, size);

      for (var _i4 = 0; _i4 < size; _i4++) {
        AI[_i4][j] = tmp2Size[_i4];
      }
    }

    return 1;
  }
  function estimateMatrixCondition(A, size) {
    var minValue = +Number.MAX_VALUE;
    var maxValue = -Number.MAX_VALUE; // find the maximum value

    for (var i = 0; i < size; i++) {
      for (var j = i; j < size; j++) {
        if (Math.abs(A[i][j]) > max) {
          maxValue = Math.abs(A[i][j]);
        }
      }
    } // find the minimum diagonal value


    for (var _i5 = 0; _i5 < size; _i5++) {
      if (Math.abs(A[_i5][_i5]) < min) {
        minValue = Math.abs(A[_i5][_i5]);
      }
    }

    if (minValue === 0.0) {
      return Number.MAX_VALUE;
    }

    return maxValue / minValue;
  }
  function jacobi(a_3x3, w, v) {
    return jacobiN(a_3x3, 3, w, v);
  }
  function solveHomogeneousLeastSquares(numberOfSamples, xt, xOrder, mt) {
    // check dimensional consistency
    if (numberOfSamples < xOrder) {
      vtkWarningMacro$5('Insufficient number of samples. Underdetermined.');
      return 0;
    }

    var i;
    var j;
    var k; // set up intermediate variables
    // Allocate matrix to hold X times transpose of X

    var XXt = createArray(xOrder); // size x by x
    // Allocate the array of eigenvalues and eigenvectors

    var eigenvals = createArray(xOrder);
    var eigenvecs = createArray(xOrder); // Clear the upper triangular region (and btw, allocate the eigenvecs as well)

    for (i = 0; i < xOrder; i++) {
      eigenvecs[i] = createArray(xOrder);
      XXt[i] = createArray(xOrder);

      for (j = 0; j < xOrder; j++) {
        XXt[i][j] = 0.0;
      }
    } // Calculate XXt upper half only, due to symmetry


    for (k = 0; k < numberOfSamples; k++) {
      for (i = 0; i < xOrder; i++) {
        for (j = i; j < xOrder; j++) {
          XXt[i][j] += xt[k][i] * xt[k][j];
        }
      }
    } // now fill in the lower half of the XXt matrix


    for (i = 0; i < xOrder; i++) {
      for (j = 0; j < i; j++) {
        XXt[i][j] = XXt[j][i];
      }
    } // Compute the eigenvectors and eigenvalues


    jacobiN(XXt, xOrder, eigenvals, eigenvecs); // Smallest eigenval is at the end of the list (xOrder-1), and solution is
    // corresponding eigenvec.

    for (i = 0; i < xOrder; i++) {
      mt[i][0] = eigenvecs[i][xOrder - 1];
    }

    return 1;
  }
  function solveLeastSquares(numberOfSamples, xt, xOrder, yt, yOrder, mt) {
    var checkHomogeneous = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;

    // check dimensional consistency
    if (numberOfSamples < xOrder || numberOfSamples < yOrder) {
      vtkWarningMacro$5('Insufficient number of samples. Underdetermined.');
      return 0;
    }

    var homogenFlags = createArray(yOrder);
    var allHomogeneous = 1;
    var hmt;
    var homogRC = 0;
    var i;
    var j;
    var k;
    var someHomogeneous = 0; // Ok, first init some flags check and see if all the systems are homogeneous

    if (checkHomogeneous) {
      // If Y' is zero, it's a homogeneous system and can't be solved via
      // the pseudoinverse method. Detect this case, warn the user, and
      // invoke SolveHomogeneousLeastSquares instead. Note that it doesn't
      // really make much sense for yOrder to be greater than one in this case,
      // since that's just yOrder occurrences of a 0 vector on the RHS, but
      // we allow it anyway. N
      // Initialize homogeneous flags on a per-right-hand-side basis
      for (j = 0; j < yOrder; j++) {
        homogenFlags[j] = 1;
      }

      for (i = 0; i < numberOfSamples; i++) {
        for (j = 0; j < yOrder; j++) {
          if (Math.abs(yt[i][j]) > VTK_SMALL_NUMBER) {
            allHomogeneous = 0;
            homogenFlags[j] = 0;
          }
        }
      } // If we've got one system, and it's homogeneous, do it and bail out quickly.


      if (allHomogeneous && yOrder === 1) {
        vtkWarningMacro$5('Detected homogeneous system (Y=0), calling SolveHomogeneousLeastSquares()');
        return solveHomogeneousLeastSquares(numberOfSamples, xt, xOrder, mt);
      } // Ok, we've got more than one system of equations.
      // Figure out if we need to calculate the homogeneous equation solution for
      // any of them.


      if (allHomogeneous) {
        someHomogeneous = 1;
      } else {
        for (j = 0; j < yOrder; j++) {
          if (homogenFlags[j]) {
            someHomogeneous = 1;
          }
        }
      }
    } // If necessary, solve the homogeneous problem


    if (someHomogeneous) {
      // hmt is the homogeneous equation version of mt, the general solution.
      hmt = createArray(xOrder);

      for (j = 0; j < xOrder; j++) {
        // Only allocate 1 here, not yOrder, because here we're going to solve
        // just the one homogeneous equation subset of the entire problem
        hmt[j] = [0];
      } // Ok, solve the homogeneous problem


      homogRC = solveHomogeneousLeastSquares(numberOfSamples, xt, xOrder, hmt);
    } // set up intermediate variables


    var XXt = createArray(xOrder); // size x by x

    var XXtI = createArray(xOrder); // size x by x

    var XYt = createArray(xOrder); // size x by y

    for (i = 0; i < xOrder; i++) {
      XXt[i] = createArray(xOrder);
      XXtI[i] = createArray(xOrder);

      for (j = 0; j < xOrder; j++) {
        XXt[i][j] = 0.0;
        XXtI[i][j] = 0.0;
      }

      XYt[i] = createArray(yOrder);

      for (j = 0; j < yOrder; j++) {
        XYt[i][j] = 0.0;
      }
    } // first find the pseudoinverse matrix


    for (k = 0; k < numberOfSamples; k++) {
      for (i = 0; i < xOrder; i++) {
        // first calculate the XXt matrix, only do the upper half (symmetrical)
        for (j = i; j < xOrder; j++) {
          XXt[i][j] += xt[k][i] * xt[k][j];
        } // now calculate the XYt matrix


        for (j = 0; j < yOrder; j++) {
          XYt[i][j] += xt[k][i] * yt[k][j];
        }
      }
    } // now fill in the lower half of the XXt matrix


    for (i = 0; i < xOrder; i++) {
      for (j = 0; j < i; j++) {
        XXt[i][j] = XXt[j][i];
      }
    }

    var successFlag = invertMatrix(XXt, XXtI, xOrder); // next get the inverse of XXt

    if (successFlag) {
      for (i = 0; i < xOrder; i++) {
        for (j = 0; j < yOrder; j++) {
          mt[i][j] = 0.0;

          for (k = 0; k < xOrder; k++) {
            mt[i][j] += XXtI[i][k] * XYt[k][j];
          }
        }
      }
    } // Fix up any of the solutions that correspond to the homogeneous equation
    // problem.


    if (someHomogeneous) {
      for (j = 0; j < yOrder; j++) {
        if (homogenFlags[j]) {
          // Fix this one
          for (i = 0; i < xOrder; i++) {
            mt[i][j] = hmt[i][0];
          }
        }
      }
    }

    if (someHomogeneous) {
      return homogRC && successFlag;
    }

    return successFlag;
  }
  function hex2float(hexStr) {
    var outFloatArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0.5, 1];

    switch (hexStr.length) {
      case 3:
        // abc => #aabbcc
        outFloatArray[0] = parseInt(hexStr[0], 16) * 17 / 255;
        outFloatArray[1] = parseInt(hexStr[1], 16) * 17 / 255;
        outFloatArray[2] = parseInt(hexStr[2], 16) * 17 / 255;
        return outFloatArray;

      case 4:
        // #abc => #aabbcc
        outFloatArray[0] = parseInt(hexStr[1], 16) * 17 / 255;
        outFloatArray[1] = parseInt(hexStr[2], 16) * 17 / 255;
        outFloatArray[2] = parseInt(hexStr[3], 16) * 17 / 255;
        return outFloatArray;

      case 6:
        // ab01df => #ab01df
        outFloatArray[0] = parseInt(hexStr.substr(0, 2), 16) / 255;
        outFloatArray[1] = parseInt(hexStr.substr(2, 2), 16) / 255;
        outFloatArray[2] = parseInt(hexStr.substr(4, 2), 16) / 255;
        return outFloatArray;

      case 7:
        // #ab01df
        outFloatArray[0] = parseInt(hexStr.substr(1, 2), 16) / 255;
        outFloatArray[1] = parseInt(hexStr.substr(3, 2), 16) / 255;
        outFloatArray[2] = parseInt(hexStr.substr(5, 2), 16) / 255;
        return outFloatArray;

      case 9:
        // #ab01df00
        outFloatArray[0] = parseInt(hexStr.substr(1, 2), 16) / 255;
        outFloatArray[1] = parseInt(hexStr.substr(3, 2), 16) / 255;
        outFloatArray[2] = parseInt(hexStr.substr(5, 2), 16) / 255;
        outFloatArray[3] = parseInt(hexStr.substr(7, 2), 16) / 255;
        return outFloatArray;

      default:
        return outFloatArray;
    }
  }
  function rgb2hsv(rgb, hsv) {
    var h;
    var s;

    var _rgb = _slicedToArray(rgb, 3),
        r = _rgb[0],
        g = _rgb[1],
        b = _rgb[2];

    var onethird = 1.0 / 3.0;
    var onesixth = 1.0 / 6.0;
    var twothird = 2.0 / 3.0;
    var cmax = r;
    var cmin = r;

    if (g > cmax) {
      cmax = g;
    } else if (g < cmin) {
      cmin = g;
    }

    if (b > cmax) {
      cmax = b;
    } else if (b < cmin) {
      cmin = b;
    }

    var v = cmax;

    if (v > 0.0) {
      s = (cmax - cmin) / cmax;
    } else {
      s = 0.0;
    }

    if (s > 0) {
      if (r === cmax) {
        h = onesixth * (g - b) / (cmax - cmin);
      } else if (g === cmax) {
        h = onethird + onesixth * (b - r) / (cmax - cmin);
      } else {
        h = twothird + onesixth * (r - g) / (cmax - cmin);
      }

      if (h < 0.0) {
        h += 1.0;
      }
    } else {
      h = 0.0;
    } // Set the values back to the array


    hsv[0] = h;
    hsv[1] = s;
    hsv[2] = v;
  }
  function hsv2rgb(hsv, rgb) {
    var _hsv = _slicedToArray(hsv, 3),
        h = _hsv[0],
        s = _hsv[1],
        v = _hsv[2];

    var onethird = 1.0 / 3.0;
    var onesixth = 1.0 / 6.0;
    var twothird = 2.0 / 3.0;
    var fivesixth = 5.0 / 6.0;
    var r;
    var g;
    var b; // compute RGB from HSV

    if (h > onesixth && h <= onethird) {
      // green/red
      g = 1.0;
      r = (onethird - h) / onesixth;
      b = 0.0;
    } else if (h > onethird && h <= 0.5) {
      // green/blue
      g = 1.0;
      b = (h - onethird) / onesixth;
      r = 0.0;
    } else if (h > 0.5 && h <= twothird) {
      // blue/green
      b = 1.0;
      g = (twothird - h) / onesixth;
      r = 0.0;
    } else if (h > twothird && h <= fivesixth) {
      // blue/red
      b = 1.0;
      r = (h - twothird) / onesixth;
      g = 0.0;
    } else if (h > fivesixth && h <= 1.0) {
      // red/blue
      r = 1.0;
      b = (1.0 - h) / onesixth;
      g = 0.0;
    } else {
      // red/green
      r = 1.0;
      g = h / onesixth;
      b = 0.0;
    } // add Saturation to the equation.


    r = s * r + (1.0 - s);
    g = s * g + (1.0 - s);
    b = s * b + (1.0 - s);
    r *= v;
    g *= v;
    b *= v; // Assign back to the array

    rgb[0] = r;
    rgb[1] = g;
    rgb[2] = b;
  }
  function lab2xyz(lab, xyz) {
    // LAB to XYZ
    var _lab = _slicedToArray(lab, 3),
        L = _lab[0],
        a = _lab[1],
        b = _lab[2];

    var var_Y = (L + 16) / 116;
    var var_X = a / 500 + var_Y;
    var var_Z = var_Y - b / 200;

    if (Math.pow(var_Y, 3) > 0.008856) {
      var_Y = Math.pow(var_Y, 3);
    } else {
      var_Y = (var_Y - 16.0 / 116.0) / 7.787;
    }

    if (Math.pow(var_X, 3) > 0.008856) {
      var_X = Math.pow(var_X, 3);
    } else {
      var_X = (var_X - 16.0 / 116.0) / 7.787;
    }

    if (Math.pow(var_Z, 3) > 0.008856) {
      var_Z = Math.pow(var_Z, 3);
    } else {
      var_Z = (var_Z - 16.0 / 116.0) / 7.787;
    }

    var ref_X = 0.9505;
    var ref_Y = 1.0;
    var ref_Z = 1.089;
    xyz[0] = ref_X * var_X; // ref_X = 0.9505  Observer= 2 deg Illuminant= D65

    xyz[1] = ref_Y * var_Y; // ref_Y = 1.000

    xyz[2] = ref_Z * var_Z; // ref_Z = 1.089
  }
  function xyz2lab(xyz, lab) {
    var _xyz = _slicedToArray(xyz, 3),
        x = _xyz[0],
        y = _xyz[1],
        z = _xyz[2];

    var ref_X = 0.9505;
    var ref_Y = 1.0;
    var ref_Z = 1.089;
    var var_X = x / ref_X; // ref_X = 0.9505  Observer= 2 deg, Illuminant= D65

    var var_Y = y / ref_Y; // ref_Y = 1.000

    var var_Z = z / ref_Z; // ref_Z = 1.089

    if (var_X > 0.008856) var_X = Math.pow(var_X, 1.0 / 3.0);else var_X = 7.787 * var_X + 16.0 / 116.0;
    if (var_Y > 0.008856) var_Y = Math.pow(var_Y, 1.0 / 3.0);else var_Y = 7.787 * var_Y + 16.0 / 116.0;
    if (var_Z > 0.008856) var_Z = Math.pow(var_Z, 1.0 / 3.0);else var_Z = 7.787 * var_Z + 16.0 / 116.0;
    lab[0] = 116 * var_Y - 16;
    lab[1] = 500 * (var_X - var_Y);
    lab[2] = 200 * (var_Y - var_Z);
  }
  function xyz2rgb(xyz, rgb) {
    var _xyz2 = _slicedToArray(xyz, 3),
        x = _xyz2[0],
        y = _xyz2[1],
        z = _xyz2[2];

    var r = x * 3.2406 + y * -1.5372 + z * -0.4986;
    var g = x * -0.9689 + y * 1.8758 + z * 0.0415;
    var b = x * 0.0557 + y * -0.204 + z * 1.057; // The following performs a "gamma correction" specified by the sRGB color
    // space.  sRGB is defined by a canonical definition of a display monitor and
    // has been standardized by the International Electrotechnical Commission (IEC
    // 61966-2-1).  The nonlinearity of the correction is designed to make the
    // colors more perceptually uniform.  This color space has been adopted by
    // several applications including Adobe Photoshop and Microsoft Windows color
    // management.  OpenGL is agnostic on its RGB color space, but it is reasonable
    // to assume it is close to this one.

    if (r > 0.0031308) r = 1.055 * Math.pow(r, 1 / 2.4) - 0.055;else r *= 12.92;
    if (g > 0.0031308) g = 1.055 * Math.pow(g, 1 / 2.4) - 0.055;else g *= 12.92;
    if (b > 0.0031308) b = 1.055 * Math.pow(b, 1 / 2.4) - 0.055;else b *= 12.92; // Clip colors. ideally we would do something that is perceptually closest
    // (since we can see colors outside of the display gamut), but this seems to
    // work well enough.

    var maxVal = r;
    if (maxVal < g) maxVal = g;
    if (maxVal < b) maxVal = b;

    if (maxVal > 1.0) {
      r /= maxVal;
      g /= maxVal;
      b /= maxVal;
    }

    if (r < 0) r = 0;
    if (g < 0) g = 0;
    if (b < 0) b = 0; // Push values back to array

    rgb[0] = r;
    rgb[1] = g;
    rgb[2] = b;
  }
  function rgb2xyz(rgb, xyz) {
    var _rgb2 = _slicedToArray(rgb, 3),
        r = _rgb2[0],
        g = _rgb2[1],
        b = _rgb2[2]; // The following performs a "gamma correction" specified by the sRGB color
    // space.  sRGB is defined by a canonical definition of a display monitor and
    // has been standardized by the International Electrotechnical Commission (IEC
    // 61966-2-1).  The nonlinearity of the correction is designed to make the
    // colors more perceptually uniform.  This color space has been adopted by
    // several applications including Adobe Photoshop and Microsoft Windows color
    // management.  OpenGL is agnostic on its RGB color space, but it is reasonable
    // to assume it is close to this one.


    if (r > 0.04045) r = Math.pow((r + 0.055) / 1.055, 2.4);else r /= 12.92;
    if (g > 0.04045) g = Math.pow((g + 0.055) / 1.055, 2.4);else g /= 12.92;
    if (b > 0.04045) b = Math.pow((b + 0.055) / 1.055, 2.4);else b /= 12.92; // Observer. = 2 deg, Illuminant = D65

    xyz[0] = r * 0.4124 + g * 0.3576 + b * 0.1805;
    xyz[1] = r * 0.2126 + g * 0.7152 + b * 0.0722;
    xyz[2] = r * 0.0193 + g * 0.1192 + b * 0.9505;
  }
  function rgb2lab(rgb, lab) {
    var xyz = [0, 0, 0];
    rgb2xyz(rgb, xyz);
    xyz2lab(xyz, lab);
  }
  function lab2rgb(lab, rgb) {
    var xyz = [0, 0, 0];
    lab2xyz(lab, xyz);
    xyz2rgb(xyz, rgb);
  }
  function uninitializeBounds(bounds) {
    bounds[0] = 1.0;
    bounds[1] = -1.0;
    bounds[2] = 1.0;
    bounds[3] = -1.0;
    bounds[4] = 1.0;
    bounds[5] = -1.0;
    return bounds;
  }
  function areBoundsInitialized(bounds) {
    return !(bounds[1] - bounds[0] < 0.0);
  }
  function computeBoundsFromPoints(point1, point2, bounds) {
    bounds[0] = Math.min(point1[0], point2[0]);
    bounds[1] = Math.max(point1[0], point2[0]);
    bounds[2] = Math.min(point1[1], point2[1]);
    bounds[3] = Math.max(point1[1], point2[1]);
    bounds[4] = Math.min(point1[2], point2[2]);
    bounds[5] = Math.max(point1[2], point2[2]);
    return bounds;
  }
  function clampValue(value, minValue, maxValue) {
    if (value < minValue) {
      return minValue;
    }

    if (value > maxValue) {
      return maxValue;
    }

    return value;
  }
  function clampVector(vector, minVector, maxVector) {
    var out = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0, 0, 0];
    out[0] = clampValue(vector[0], minVector[0], maxVector[0]);
    out[1] = clampValue(vector[1], minVector[1], maxVector[1]);
    out[2] = clampValue(vector[2], minVector[2], maxVector[2]);
    return out;
  }
  function clampAndNormalizeValue(value, range) {
    var result = 0;

    if (range[0] !== range[1]) {
      // clamp
      if (value < range[0]) {
        result = range[0];
      } else if (value > range[1]) {
        result = range[1];
      } else {
        result = value;
      } // normalize


      result = (result - range[0]) / (range[1] - range[0]);
    }

    return result;
  }
  var getScalarTypeFittingRange = notImplemented$5('GetScalarTypeFittingRange');
  var getAdjustedScalarRange = notImplemented$5('GetAdjustedScalarRange');
  function extentIsWithinOtherExtent(extent1, extent2) {
    if (!extent1 || !extent2) {
      return 0;
    }

    for (var i = 0; i < 6; i += 2) {
      if (extent1[i] < extent2[i] || extent1[i] > extent2[i + 1] || extent1[i + 1] < extent2[i] || extent1[i + 1] > extent2[i + 1]) {
        return 0;
      }
    }

    return 1;
  }
  function boundsIsWithinOtherBounds(bounds1_6, bounds2_6, delta_3) {
    if (!bounds1_6 || !bounds2_6) {
      return 0;
    }

    for (var i = 0; i < 6; i += 2) {
      if (bounds1_6[i] + delta_3[i / 2] < bounds2_6[i] || bounds1_6[i] - delta_3[i / 2] > bounds2_6[i + 1] || bounds1_6[i + 1] + delta_3[i / 2] < bounds2_6[i] || bounds1_6[i + 1] - delta_3[i / 2] > bounds2_6[i + 1]) {
        return 0;
      }
    }

    return 1;
  }
  function pointIsWithinBounds(point_3, bounds_6, delta_3) {
    if (!point_3 || !bounds_6 || !delta_3) {
      return 0;
    }

    for (var i = 0; i < 3; i++) {
      if (point_3[i] + delta_3[i] < bounds_6[2 * i] || point_3[i] - delta_3[i] > bounds_6[2 * i + 1]) {
        return 0;
      }
    }

    return 1;
  }
  function solve3PointCircle(p1, p2, p3, center) {
    var v21 = createArray(3);
    var v32 = createArray(3);
    var v13 = createArray(3);
    var v12 = createArray(3);
    var v23 = createArray(3);
    var v31 = createArray(3);

    for (var i = 0; i < 3; ++i) {
      v21[i] = p1[i] - p2[i];
      v32[i] = p2[i] - p3[i];
      v13[i] = p3[i] - p1[i];
      v12[i] = -v21[i];
      v23[i] = -v32[i];
      v31[i] = -v13[i];
    }

    var norm12 = norm(v12);
    var norm23 = norm(v23);
    var norm13 = norm(v13);
    var crossv21v32 = createArray(3);
    cross(v21, v32, crossv21v32);
    var normCross = norm(crossv21v32);
    var radius = norm12 * norm23 * norm13 / (2 * normCross);
    var normCross22 = 2 * normCross * normCross;
    var alpha = norm23 * norm23 * dot(v21, v31) / normCross22;
    var beta = norm13 * norm13 * dot(v12, v32) / normCross22;
    var gamma = norm12 * norm12 * dot(v13, v23) / normCross22;

    for (var _i6 = 0; _i6 < 3; ++_i6) {
      center[_i6] = alpha * p1[_i6] + beta * p2[_i6] + gamma * p3[_i6];
    }

    return radius;
  }
  var inf = Infinity;
  var negInf = -Infinity;
  var isInf = function isInf(value) {
    return !Number.isFinite(value);
  };
  var isFinite$1 = Number.isFinite,
      isNaN$1 = Number.isNaN;
  var isNan = isNaN$1; // JavaScript - add-on ----------------------

  function createUninitializedBounds() {
    return [].concat([Number.MAX_VALUE, -Number.MAX_VALUE, // X
    Number.MAX_VALUE, -Number.MAX_VALUE, // Y
    Number.MAX_VALUE, -Number.MAX_VALUE // Z
    ]);
  }
  function getMajorAxisIndex(vector) {
    var maxValue = -1;
    var axisIndex = -1;

    for (var i = 0; i < vector.length; i++) {
      var value = Math.abs(vector[i]);

      if (value > maxValue) {
        axisIndex = i;
        maxValue = value;
      }
    }

    return axisIndex;
  }
  function floatToHex2(value) {
    var integer = Math.floor(value * 255);

    if (integer > 15) {
      return integer.toString(16);
    }

    return "0".concat(integer.toString(16));
  }
  function floatRGB2HexCode(rgbArray) {
    var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '#';
    return "".concat(prefix).concat(rgbArray.map(floatToHex2).join(''));
  }

  function floatToChar(f) {
    return Math.round(f * 255);
  }

  function float2CssRGBA(rgbArray) {
    if (rgbArray.length === 3) {
      return "rgb(".concat(rgbArray.map(floatToChar).join(', '), ")");
    }

    return "rgba(".concat(floatToChar(rgbArray[0] || 0), ", ").concat(floatToChar(rgbArray[1] || 0), ", ").concat(floatToChar(rgbArray[2] || 0), ", ").concat(rgbArray[3] || 0, ")");
  } // ----------------------------------------------------------------------------
  // Only Static API
  // ----------------------------------------------------------------------------

  var vtkMath = {
    Pi: Pi,
    radiansFromDegrees: radiansFromDegrees,
    degreesFromRadians: degreesFromRadians,
    round: round,
    floor: floor,
    ceil: ceil,
    ceilLog2: ceilLog2,
    min: min,
    max: max,
    arrayMin: arrayMin,
    arrayMax: arrayMax,
    arrayRange: arrayRange,
    isPowerOfTwo: isPowerOfTwo,
    nearestPowerOfTwo: nearestPowerOfTwo,
    factorial: factorial,
    binomial: binomial,
    beginCombination: beginCombination,
    nextCombination: nextCombination,
    randomSeed: randomSeed,
    getSeed: getSeed,
    random: random,
    gaussian: gaussian,
    add: add,
    subtract: subtract,
    multiplyScalar: multiplyScalar,
    multiplyScalar2D: multiplyScalar2D,
    multiplyAccumulate: multiplyAccumulate,
    multiplyAccumulate2D: multiplyAccumulate2D,
    dot: dot,
    outer: outer,
    cross: cross,
    norm: norm,
    normalize: normalize,
    perpendiculars: perpendiculars,
    projectVector: projectVector$1,
    projectVector2D: projectVector2D,
    distance2BetweenPoints: distance2BetweenPoints,
    angleBetweenVectors: angleBetweenVectors,
    gaussianAmplitude: gaussianAmplitude,
    gaussianWeight: gaussianWeight,
    dot2D: dot2D,
    outer2D: outer2D,
    norm2D: norm2D,
    normalize2D: normalize2D,
    determinant2x2: determinant2x2,
    LUFactor3x3: LUFactor3x3,
    LUSolve3x3: LUSolve3x3,
    linearSolve3x3: linearSolve3x3,
    multiply3x3_vect3: multiply3x3_vect3,
    multiply3x3_mat3: multiply3x3_mat3,
    multiplyMatrix: multiplyMatrix,
    transpose3x3: transpose3x3,
    invert3x3: invert3x3,
    identity3x3: identity3x3,
    determinant3x3: determinant3x3,
    quaternionToMatrix3x3: quaternionToMatrix3x3,
    areEquals: areEquals,
    areMatricesEqual: areMatricesEqual,
    roundNumber: roundNumber,
    roundVector: roundVector,
    matrix3x3ToQuaternion: matrix3x3ToQuaternion,
    multiplyQuaternion: multiplyQuaternion,
    orthogonalize3x3: orthogonalize3x3,
    diagonalize3x3: diagonalize3x3,
    singularValueDecomposition3x3: singularValueDecomposition3x3,
    solveLinearSystem: solveLinearSystem,
    invertMatrix: invertMatrix,
    luFactorLinearSystem: luFactorLinearSystem,
    luSolveLinearSystem: luSolveLinearSystem,
    estimateMatrixCondition: estimateMatrixCondition,
    jacobi: jacobi,
    jacobiN: jacobiN,
    solveHomogeneousLeastSquares: solveHomogeneousLeastSquares,
    solveLeastSquares: solveLeastSquares,
    hex2float: hex2float,
    rgb2hsv: rgb2hsv,
    hsv2rgb: hsv2rgb,
    lab2xyz: lab2xyz,
    xyz2lab: xyz2lab,
    xyz2rgb: xyz2rgb,
    rgb2xyz: rgb2xyz,
    rgb2lab: rgb2lab,
    lab2rgb: lab2rgb,
    uninitializeBounds: uninitializeBounds,
    areBoundsInitialized: areBoundsInitialized,
    computeBoundsFromPoints: computeBoundsFromPoints,
    clampValue: clampValue,
    clampVector: clampVector,
    clampAndNormalizeValue: clampAndNormalizeValue,
    getScalarTypeFittingRange: getScalarTypeFittingRange,
    getAdjustedScalarRange: getAdjustedScalarRange,
    extentIsWithinOtherExtent: extentIsWithinOtherExtent,
    boundsIsWithinOtherBounds: boundsIsWithinOtherBounds,
    pointIsWithinBounds: pointIsWithinBounds,
    solve3PointCircle: solve3PointCircle,
    inf: inf,
    negInf: negInf,
    isInf: isInf,
    isNan: isNaN$1,
    isNaN: isNaN$1,
    isFinite: isFinite$1,
    // JS add-on
    createUninitializedBounds: createUninitializedBounds,
    getMajorAxisIndex: getMajorAxisIndex,
    floatToHex2: floatToHex2,
    floatRGB2HexCode: floatRGB2HexCode,
    float2CssRGBA: float2CssRGBA
  };

  // vtkAbstractMapper methods
  // ----------------------------------------------------------------------------

  function vtkAbstractMapper3D(publicAPI, model) {
    publicAPI.getBounds = function () {
      return 0;
    };

    publicAPI.getBounds = function (bounds) {
      publicAPI.getBounds();

      for (var i = 0; i < 6; i++) {
        bounds[i] = model.bounds[i];
      }
    };

    publicAPI.getCenter = function () {
      publicAPI.getBounds();

      for (var i = 0; i < 3; i++) {
        model.center[i] = (model.bounds[2 * i + 1] + model.bounds[2 * i]) / 2.0;
      }

      return model.center.slice();
    };

    publicAPI.getLength = function () {
      var diff = 0.0;
      var l = 0.0;
      publicAPI.getBounds();

      for (var i = 0; i < 3; i++) {
        diff = model.bounds[2 * i + 1] - model.bounds[2 * i];
        l += diff * diff;
      }

      return Math.sqrt(l);
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$17 = {
    bounds: [1, -1, 1, -1, 1, -1],
    center: [0, 0, 0]
  }; // ----------------------------------------------------------------------------

  function extend$19(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$17, initialValues); // Inheritance

    vtkAbstractMapper$1.extend(publicAPI, model, initialValues);

    if (!model.bounds) {
      uninitializeBounds(model.bounds);
    }

    if (!model.center) {
      model.center = [0.0, 0.0, 0.0];
    }

    vtkAbstractMapper3D(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var vtkAbstractMapper3D$1 = {
    extend: extend$19
  };

  var DataTypeByteSize = {
    Int8Array: 1,
    Uint8Array: 1,
    Uint8ClampedArray: 1,
    Int16Array: 2,
    Uint16Array: 2,
    Int32Array: 4,
    Uint32Array: 4,
    Float32Array: 4,
    Float64Array: 8
  };
  var VtkDataTypes$3 = {
    VOID: '',
    // not sure to know what that should be
    CHAR: 'Int8Array',
    SIGNED_CHAR: 'Int8Array',
    UNSIGNED_CHAR: 'Uint8Array',
    SHORT: 'Int16Array',
    UNSIGNED_SHORT: 'Uint16Array',
    INT: 'Int32Array',
    UNSIGNED_INT: 'Uint32Array',
    FLOAT: 'Float32Array',
    DOUBLE: 'Float64Array'
  };
  var DefaultDataType$1 = VtkDataTypes$3.FLOAT;
  var Constants$a = {
    DefaultDataType: DefaultDataType$1,
    DataTypeByteSize: DataTypeByteSize,
    VtkDataTypes: VtkDataTypes$3
  };

  function ownKeys$l(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$l(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$l(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$l(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  var DefaultDataType = Constants$a.DefaultDataType;
  var TUPLE_HOLDER = []; // ----------------------------------------------------------------------------
  // Global methods
  // ----------------------------------------------------------------------------

  function createRangeHelper() {
    var min = Number.MAX_VALUE;
    var max = -Number.MAX_VALUE;
    var count = 0;
    var sum = 0;
    return {
      add: function add(value) {
        if (min > value) {
          min = value;
        }

        if (max < value) {
          max = value;
        }

        count++;
        sum += value;
      },
      get: function get() {
        return {
          min: min,
          max: max,
          count: count,
          sum: sum,
          mean: sum / count
        };
      },
      getRange: function getRange() {
        return {
          min: min,
          max: max
        };
      }
    };
  }

  function computeRange(values) {
    var component = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var numberOfComponents = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    var helper = createRangeHelper();
    var size = values.length;
    var value = 0;

    if (component < 0 && numberOfComponents > 1) {
      // Compute magnitude
      for (var i = 0; i < size; i += numberOfComponents) {
        value = 0;

        for (var j = 0; j < numberOfComponents; j++) {
          value += values[i + j] * values[i + j];
        }

        value = Math.pow(value, 0.5);
        helper.add(value);
      }

      return helper.getRange();
    }

    var offset = component < 0 ? 0 : component;

    for (var _i = offset; _i < size; _i += numberOfComponents) {
      helper.add(values[_i]);
    }

    return helper.getRange();
  }

  function ensureRangeSize(rangeArray) {
    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var ranges = rangeArray || []; // Pad ranges with null value to get the

    while (ranges.length <= size) {
      ranges.push(null);
    }

    return ranges;
  }

  function getDataType(typedArray) {
    // Expects toString() to return "[object ...Array]"
    return Object.prototype.toString.call(typedArray).slice(8, -1);
  }

  function getMaxNorm(normArray) {
    var numComps = normArray.getNumberOfComponents();
    var maxNorm = 0.0;

    for (var i = 0; i < normArray.getNumberOfTuples(); ++i) {
      var norm$1 = norm(normArray.getTuple(i), numComps);

      if (norm$1 > maxNorm) {
        maxNorm = norm$1;
      }
    }

    return maxNorm;
  } // ----------------------------------------------------------------------------
  // Static API
  // ----------------------------------------------------------------------------


  var STATIC$8 = {
    computeRange: computeRange,
    createRangeHelper: createRangeHelper,
    getDataType: getDataType,
    getMaxNorm: getMaxNorm
  }; // ----------------------------------------------------------------------------
  // vtkDataArray methods
  // ----------------------------------------------------------------------------

  function vtkDataArray(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkDataArray');

    function dataChange() {
      model.ranges = null;
      publicAPI.modified();
    }

    publicAPI.getElementComponentSize = function () {
      return model.values.BYTES_PER_ELEMENT;
    }; // Description:
    // Return the data component at the location specified by tupleIdx and
    // compIdx.


    publicAPI.getComponent = function (tupleIdx) {
      var compIdx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return model.values[tupleIdx * model.numberOfComponents + compIdx];
    }; // Description:
    // Set the data component at the location specified by tupleIdx and compIdx
    // to value.
    // Note that i is less than NumberOfTuples and j is less than
    //  NumberOfComponents. Make sure enough memory has been allocated
    // (use SetNumberOfTuples() and SetNumberOfComponents()).


    publicAPI.setComponent = function (tupleIdx, compIdx, value) {
      if (value !== model.values[tupleIdx * model.numberOfComponents + compIdx]) {
        model.values[tupleIdx * model.numberOfComponents + compIdx] = value;
        dataChange();
      }
    };

    publicAPI.getData = function () {
      return model.values;
    };

    publicAPI.getRange = function () {
      var componentIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
      var rangeIdx = componentIndex < 0 ? model.numberOfComponents : componentIndex;
      var range = null;

      if (!model.ranges) {
        model.ranges = ensureRangeSize(model.ranges, model.numberOfComponents);
      }

      range = model.ranges[rangeIdx];

      if (range) {
        model.rangeTuple[0] = range.min;
        model.rangeTuple[1] = range.max;
        return model.rangeTuple;
      } // Need to compute ranges...


      range = computeRange(model.values, componentIndex, model.numberOfComponents);
      model.ranges[rangeIdx] = range;
      model.rangeTuple[0] = range.min;
      model.rangeTuple[1] = range.max;
      return model.rangeTuple;
    };

    publicAPI.setRange = function (rangeValue, componentIndex) {
      if (!model.ranges) {
        model.ranges = ensureRangeSize(model.ranges, model.numberOfComponents);
      }

      var range = {
        min: rangeValue.min,
        max: rangeValue.max
      };
      model.ranges[componentIndex] = range;
      model.rangeTuple[0] = range.min;
      model.rangeTuple[1] = range.max;
      return model.rangeTuple;
    };

    publicAPI.setTuple = function (idx, tuple) {
      var offset = idx * model.numberOfComponents;

      for (var i = 0; i < model.numberOfComponents; i++) {
        model.values[offset + i] = tuple[i];
      }
    };

    publicAPI.getTuple = function (idx) {
      var tupleToFill = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TUPLE_HOLDER;
      var numberOfComponents = model.numberOfComponents || 1;

      if (tupleToFill.length !== numberOfComponents) {
        tupleToFill.length = numberOfComponents;
      }

      var offset = idx * numberOfComponents; // Check most common component sizes first
      // to avoid doing a for loop if possible

      if (numberOfComponents === 1) {
        tupleToFill[0] = model.values[offset];
      } else if (numberOfComponents === 2) {
        tupleToFill[0] = model.values[offset];
        tupleToFill[1] = model.values[offset + 1];
      } else if (numberOfComponents === 3) {
        tupleToFill[0] = model.values[offset];
        tupleToFill[1] = model.values[offset + 1];
        tupleToFill[2] = model.values[offset + 2];
      } else if (numberOfComponents === 4) {
        tupleToFill[0] = model.values[offset];
        tupleToFill[1] = model.values[offset + 1];
        tupleToFill[2] = model.values[offset + 2];
        tupleToFill[3] = model.values[offset + 3];
      } else {
        for (var i = 0; i < numberOfComponents; i++) {
          tupleToFill[i] = model.values[offset + i];
        }
      }

      return tupleToFill;
    };

    publicAPI.getTupleLocation = function () {
      var idx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      return idx * model.numberOfComponents;
    };

    publicAPI.getNumberOfComponents = function () {
      return model.numberOfComponents;
    };

    publicAPI.getNumberOfValues = function () {
      return model.values.length;
    };

    publicAPI.getNumberOfTuples = function () {
      return model.values.length / model.numberOfComponents;
    };

    publicAPI.getDataType = function () {
      return model.dataType;
    };
    /* eslint-disable no-use-before-define */


    publicAPI.newClone = function () {
      return newInstance$15({
        empty: true,
        name: model.name,
        dataType: model.dataType,
        numberOfComponents: model.numberOfComponents
      });
    };
    /* eslint-enable no-use-before-define */


    publicAPI.getName = function () {
      if (!model.name) {
        publicAPI.modified();
        model.name = "vtkDataArray".concat(publicAPI.getMTime());
      }

      return model.name;
    };

    publicAPI.setData = function (typedArray, numberOfComponents) {
      model.values = typedArray;
      model.size = typedArray.length;
      model.dataType = getDataType(typedArray);

      if (numberOfComponents) {
        model.numberOfComponents = numberOfComponents;
      }

      if (model.size % model.numberOfComponents !== 0) {
        model.numberOfComponents = 1;
      }

      dataChange();
    }; // Override serialization support


    publicAPI.getState = function () {
      var jsonArchive = _objectSpread$l(_objectSpread$l({}, model), {}, {
        vtkClass: publicAPI.getClassName()
      }); // Convert typed array to regular array


      jsonArchive.values = Array.from(jsonArchive.values);
      delete jsonArchive.buffer; // Clean any empty data

      Object.keys(jsonArchive).forEach(function (keyName) {
        if (!jsonArchive[keyName]) {
          delete jsonArchive[keyName];
        }
      }); // Sort resulting object by key name

      var sortedObj = {};
      Object.keys(jsonArchive).sort().forEach(function (name) {
        sortedObj[name] = jsonArchive[name];
      }); // Remove mtime

      if (sortedObj.mtime) {
        delete sortedObj.mtime;
      }

      return sortedObj;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$16 = {
    name: '',
    numberOfComponents: 1,
    size: 0,
    dataType: DefaultDataType,
    rangeTuple: [0, 0] // values: null,
    // ranges: null,

  }; // ----------------------------------------------------------------------------

  function extend$18(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$16, initialValues);

    if (!model.empty && !model.values && !model.size) {
      throw new TypeError('Cannot create vtkDataArray object without: size > 0, values');
    }

    if (!model.values) {
      model.values = newTypedArray(model.dataType, model.size);
    } else if (Array.isArray(model.values)) {
      model.values = newTypedArrayFrom(model.dataType, model.values);
    }

    if (model.values) {
      model.size = model.values.length;
      model.dataType = getDataType(model.values);
    } // Object methods


    obj(publicAPI, model);
    set(publicAPI, model, ['name', 'numberOfComponents']); // Object specific methods

    vtkDataArray(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$15 = newInstance$1j(extend$18, 'vtkDataArray'); // ----------------------------------------------------------------------------

  var vtkDataArray$1 = _objectSpread$l(_objectSpread$l({
    newInstance: newInstance$15,
    extend: extend$18
  }, STATIC$8), Constants$a);

  function ownKeys$k(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$k(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$k(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$k(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  var PLANE_TOLERANCE = 1.0e-6;
  var COINCIDE = 'coincide';
  var DISJOINT = 'disjoint'; // ----------------------------------------------------------------------------
  // Global methods
  // ----------------------------------------------------------------------------

  function evaluate(normal, origin, x) {
    return normal[0] * (x[0] - origin[0]) + normal[1] * (x[1] - origin[1]) + normal[2] * (x[2] - origin[2]);
  }

  function distanceToPlane(x, origin, normal) {
    var distance = normal[0] * (x[0] - origin[0]) + normal[1] * (x[1] - origin[1]) + normal[2] * (x[2] - origin[2]);
    return Math.abs(distance);
  }

  function projectPoint(x, origin, normal, xproj) {
    var xo = [];
    subtract(x, origin, xo);
    var t = dot(normal, xo);
    xproj[0] = x[0] - t * normal[0];
    xproj[1] = x[1] - t * normal[1];
    xproj[2] = x[2] - t * normal[2];
  }

  function projectVector(v, normal, vproj) {
    var t = dot(v, normal);
    var n2 = dot(normal, normal);

    if (n2 === 0) {
      n2 = 1.0;
    }

    vproj[0] = v[0] - t * normal[0] / n2;
    vproj[1] = v[1] - t * normal[1] / n2;
    vproj[2] = v[2] - t * normal[2] / n2;
    return vproj;
  }

  function generalizedProjectPoint(x, origin, normal, xproj) {
    var xo = [];
    subtract(x, origin, xo);
    var t = dot(normal, xo);
    var n2 = dot(normal, normal);

    if (n2 !== 0) {
      xproj[0] = x[0] - t * normal[0] / n2;
      xproj[1] = x[1] - t * normal[1] / n2;
      xproj[2] = x[2] - t * normal[2] / n2;
    } else {
      xproj[0] = x[0];
      xproj[1] = x[1];
      xproj[2] = x[2];
    }
  }

  function intersectWithLine(p1, p2, origin, normal) {
    var outObj = {
      intersection: false,
      betweenPoints: false,
      t: Number.MAX_VALUE,
      x: []
    };
    var p21 = [];
    var p1Origin = []; // Compute line vector

    subtract(p2, p1, p21);
    subtract(origin, p1, p1Origin); // Compute denominator.  If ~0, line and plane are parallel.
    // const num = vtkMath.dot(normal, origin) - vtkMath.dot(normal, p1);

    var num = dot(normal, p1Origin);
    var den = dot(normal, p21); // If denominator with respect to numerator is "zero", then the line and
    // plane are considered parallel.

    var fabsden;
    var fabstolerance; // Trying to avoid an expensive call to fabs()

    if (den < 0.0) {
      fabsden = -den;
    } else {
      fabsden = den;
    }

    if (num < 0.0) {
      fabstolerance = -num * PLANE_TOLERANCE;
    } else {
      fabstolerance = num * PLANE_TOLERANCE;
    }

    if (fabsden <= fabstolerance) {
      return outObj;
    } // Where on the line between p1 and p2 is the intersection
    // If between 0 and 1, it is between the two points. If < 0 it's before p1, if > 1 it's after p2


    outObj.t = num / den;
    outObj.x[0] = p1[0] + outObj.t * p21[0];
    outObj.x[1] = p1[1] + outObj.t * p21[1];
    outObj.x[2] = p1[2] + outObj.t * p21[2];
    outObj.intersection = true;
    outObj.betweenPoints = outObj.t >= 0.0 && outObj.t <= 1.0;
    return outObj;
  }

  function intersectWithPlane(plane1Origin, plane1Normal, plane2Origin, plane2Normal) {
    var outObj = {
      intersection: false,
      l0: [],
      l1: [],
      error: null
    };
    var cross$1 = [];
    cross(plane1Normal, plane2Normal, cross$1);
    var absCross = cross$1.map(function (n) {
      return Math.abs(n);
    }); // test if the two planes are parallel

    if (absCross[0] + absCross[1] + absCross[2] < PLANE_TOLERANCE) {
      // test if disjoint or coincide
      var v = [];
      subtract(plane1Origin, plane2Origin, v);

      if (dot(plane1Normal, v) === 0) {
        outObj.error = COINCIDE;
      } else {
        outObj.error = DISJOINT;
      }

      return outObj;
    } // Plane1 and Plane2 intersect in a line
    // first determine max abs coordinate of the cross product


    var maxc;

    if (absCross[0] > absCross[1] && absCross[0] > absCross[2]) {
      maxc = 'x';
    } else if (absCross[1] > absCross[2]) {
      maxc = 'y';
    } else {
      maxc = 'z';
    } // To get a point on the intersect line, zero the max coord, and solve for the other two


    var iP = []; // intersectionPoint
    // the constants in the 2 plane equations

    var d1 = -dot(plane1Normal, plane1Origin);
    var d2 = -dot(plane2Normal, plane2Origin); // eslint-disable-next-line default-case

    switch (maxc) {
      case 'x':
        // intersect with x=0
        iP[0] = 0;
        iP[1] = (d2 * plane1Normal[2] - d1 * plane2Normal[2]) / cross$1[0];
        iP[2] = (d1 * plane2Normal[1] - d2 * plane1Normal[1]) / cross$1[0];
        break;

      case 'y':
        // intersect with y=0
        iP[0] = (d1 * plane2Normal[2] - d2 * plane1Normal[2]) / cross$1[1];
        iP[1] = 0;
        iP[2] = (d2 * plane1Normal[0] - d1 * plane2Normal[0]) / cross$1[1];
        break;

      case 'z':
        // intersect with z=0
        iP[0] = (d2 * plane1Normal[1] - d1 * plane2Normal[1]) / cross$1[2];
        iP[1] = (d1 * plane2Normal[0] - d2 * plane1Normal[0]) / cross$1[2];
        iP[2] = 0;
        break;
    }

    outObj.l0 = iP;
    add(iP, cross$1, outObj.l1);
    outObj.intersection = true;
    return outObj;
  } // ----------------------------------------------------------------------------
  // Static API
  // ----------------------------------------------------------------------------


  var STATIC$7 = {
    evaluate: evaluate,
    distanceToPlane: distanceToPlane,
    projectPoint: projectPoint,
    projectVector: projectVector,
    generalizedProjectPoint: generalizedProjectPoint,
    intersectWithLine: intersectWithLine,
    intersectWithPlane: intersectWithPlane,
    DISJOINT: DISJOINT,
    COINCIDE: COINCIDE
  }; // ----------------------------------------------------------------------------
  // vtkPlane methods
  // ----------------------------------------------------------------------------

  function vtkPlane(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkPlane');

    publicAPI.distanceToPlane = function (x) {
      return distanceToPlane(x, model.origin, model.normal);
    };

    publicAPI.projectPoint = function (x, xproj) {
      projectPoint(x, model.origin, model.normal, xproj);
    };

    publicAPI.projectVector = function (v, vproj) {
      return projectVector(v, model.normal, vproj);
    };

    publicAPI.push = function (distance) {
      if (distance === 0.0) {
        return;
      }

      for (var i = 0; i < 3; i++) {
        model.origin[i] += distance * model.normal[i];
      }
    };

    publicAPI.generalizedProjectPoint = function (x, xproj) {
      generalizedProjectPoint(x, model.origin, model.normal, xproj);
    };

    publicAPI.evaluateFunction = function (x, y, z) {
      if (!Array.isArray(x)) {
        return model.normal[0] * (x - model.origin[0]) + model.normal[1] * (y - model.origin[1]) + model.normal[2] * (z - model.origin[2]);
      }

      return model.normal[0] * (x[0] - model.origin[0]) + model.normal[1] * (x[1] - model.origin[1]) + model.normal[2] * (x[2] - model.origin[2]);
    };

    publicAPI.evaluateGradient = function (xyz) {
      var retVal = [model.normal[0], model.normal[1], model.normal[2]];
      return retVal;
    };

    publicAPI.intersectWithLine = function (p1, p2) {
      return intersectWithLine(p1, p2, model.origin, model.normal);
    };

    publicAPI.intersectWithPlane = function (planeOrigin, planeNormal) {
      return intersectWithPlane(planeOrigin, planeNormal, model.origin, model.normal);
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------

  var DEFAULT_VALUES$15 = {
    normal: [0.0, 0.0, 1.0],
    origin: [0.0, 0.0, 0.0]
  }; // ----------------------------------------------------------------------------

  function extend$17(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$15, initialValues); // Object methods

    macro.obj(publicAPI, model);
    macro.setGetArray(publicAPI, model, ['normal', 'origin'], 3);
    vtkPlane(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$14 = macro.newInstance(extend$17, 'vtkPlane'); // ----------------------------------------------------------------------------

  var vtkPlane$1 = _objectSpread$k({
    newInstance: newInstance$14,
    extend: extend$17
  }, STATIC$7);

  function ownKeys$j(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$j(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$j(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$j(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  var INIT_BOUNDS = [Number.MAX_VALUE, -Number.MAX_VALUE, // X
  Number.MAX_VALUE, -Number.MAX_VALUE, // Y
  Number.MAX_VALUE, -Number.MAX_VALUE // Z
  ]; // ----------------------------------------------------------------------------
  // Global methods
  // ----------------------------------------------------------------------------

  function _equals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];
  }

  function _isValid(bounds) {
    return bounds[0] <= bounds[1] && bounds[2] <= bounds[3] && bounds[4] <= bounds[5];
  }

  function _setBounds(bounds, otherBounds) {
    bounds[0] = otherBounds[0];
    bounds[1] = otherBounds[1];
    bounds[2] = otherBounds[2];
    bounds[3] = otherBounds[3];
    bounds[4] = otherBounds[4];
    bounds[5] = otherBounds[5];
    return bounds;
  }

  function _reset(bounds) {
    return _setBounds(bounds, INIT_BOUNDS);
  }

  function _addPoint(bounds) {
    var _bounds = _slicedToArray(bounds, 6),
        xMin = _bounds[0],
        xMax = _bounds[1],
        yMin = _bounds[2],
        yMax = _bounds[3],
        zMin = _bounds[4],
        zMax = _bounds[5];

    bounds[0] = xMin < (arguments.length <= 1 ? undefined : arguments[1]) ? xMin : arguments.length <= 1 ? undefined : arguments[1];
    bounds[1] = xMax > (arguments.length <= 1 ? undefined : arguments[1]) ? xMax : arguments.length <= 1 ? undefined : arguments[1];
    bounds[2] = yMin < (arguments.length <= 2 ? undefined : arguments[2]) ? yMin : arguments.length <= 2 ? undefined : arguments[2];
    bounds[3] = yMax > (arguments.length <= 2 ? undefined : arguments[2]) ? yMax : arguments.length <= 2 ? undefined : arguments[2];
    bounds[4] = zMin < (arguments.length <= 3 ? undefined : arguments[3]) ? zMin : arguments.length <= 3 ? undefined : arguments[3];
    bounds[5] = zMax > (arguments.length <= 3 ? undefined : arguments[3]) ? zMax : arguments.length <= 3 ? undefined : arguments[3];
  }

  function _addBounds(bounds, xMin, xMax, yMin, yMax, zMin, zMax) {
    var _bounds2 = _slicedToArray(bounds, 6),
        _xMin = _bounds2[0],
        _xMax = _bounds2[1],
        _yMin = _bounds2[2],
        _yMax = _bounds2[3],
        _zMin = _bounds2[4],
        _zMax = _bounds2[5];

    if (zMax === undefined) {
      bounds[0] = Math.min(xMin[0], _xMin);
      bounds[1] = Math.max(xMin[1], _xMax);
      bounds[2] = Math.min(xMin[2], _yMin);
      bounds[3] = Math.max(xMin[3], _yMax);
      bounds[4] = Math.min(xMin[4], _zMin);
      bounds[5] = Math.max(xMin[5], _zMax);
    } else {
      bounds[0] = Math.min(xMin, _xMin);
      bounds[1] = Math.max(xMax, _xMax);
      bounds[2] = Math.min(yMin, _yMin);
      bounds[3] = Math.max(yMax, _yMax);
      bounds[4] = Math.min(zMin, _zMin);
      bounds[5] = Math.max(zMax, _zMax);
    }
  }

  function _setMinPoint(bounds, x, y, z) {
    var _bounds3 = _slicedToArray(bounds, 6),
        xMin = _bounds3[0],
        xMax = _bounds3[1],
        yMin = _bounds3[2],
        yMax = _bounds3[3],
        zMin = _bounds3[4],
        zMax = _bounds3[5];

    bounds[0] = x;
    bounds[1] = x > xMax ? x : xMax;
    bounds[2] = y;
    bounds[3] = y > yMax ? y : yMax;
    bounds[4] = z;
    bounds[5] = z > zMax ? z : zMax;
    return xMin !== x || yMin !== y || zMin !== z;
  }

  function _setMaxPoint(bounds, x, y, z) {
    var _bounds4 = _slicedToArray(bounds, 6),
        xMin = _bounds4[0],
        xMax = _bounds4[1],
        yMin = _bounds4[2],
        yMax = _bounds4[3],
        zMin = _bounds4[4],
        zMax = _bounds4[5];

    bounds[0] = x < xMin ? x : xMin;
    bounds[1] = x;
    bounds[2] = y < yMin ? y : yMin;
    bounds[3] = y;
    bounds[4] = z < zMin ? z : zMin;
    bounds[5] = z;
    return xMax !== x || yMax !== y || zMax !== z;
  }

  function _inflate(bounds, delta) {
    bounds[0] -= delta;
    bounds[1] += delta;
    bounds[2] -= delta;
    bounds[3] += delta;
    bounds[4] -= delta;
    bounds[5] += delta;
  }

  function _scale(bounds, sx, sy, sz) {
    if (!_isValid(bounds)) {
      return false;
    }

    if (sx >= 0.0) {
      bounds[0] *= sx;
      bounds[1] *= sx;
    } else {
      bounds[0] = sx * bounds[1];
      bounds[1] = sx * bounds[0];
    }

    if (sy >= 0.0) {
      bounds[2] *= sy;
      bounds[3] *= sy;
    } else {
      bounds[2] = sy * bounds[3];
      bounds[3] = sy * bounds[2];
    }

    if (sz >= 0.0) {
      bounds[4] *= sz;
      bounds[5] *= sz;
    } else {
      bounds[4] = sz * bounds[5];
      bounds[5] = sz * bounds[4];
    }

    return true;
  }

  function _getCenter(bounds) {
    return [0.5 * (bounds[0] + bounds[1]), 0.5 * (bounds[2] + bounds[3]), 0.5 * (bounds[4] + bounds[5])];
  }

  function _getLength(bounds, index) {
    return bounds[index * 2 + 1] - bounds[index * 2];
  }

  function _getLengths(bounds) {
    return [_getLength(bounds, 0), _getLength(bounds, 1), _getLength(bounds, 2)];
  }

  function _getXRange(bounds) {
    return bounds.slice(0, 2);
  }

  function _getYRange(bounds) {
    return bounds.slice(2, 4);
  }

  function _getZRange(bounds) {
    return bounds.slice(4, 6);
  }

  function _getMaxLength(bounds) {
    var l = _getLengths(bounds);

    if (l[0] > l[1]) {
      if (l[0] > l[2]) {
        return l[0];
      }

      return l[2];
    }

    if (l[1] > l[2]) {
      return l[1];
    }

    return l[2];
  }

  function _getDiagonalLength(bounds) {
    if (_isValid(bounds)) {
      var l = _getLengths(bounds);

      return Math.sqrt(l[0] * l[0] + l[1] * l[1] + l[2] * l[2]);
    }

    return null;
  }

  function _getMinPoint(bounds) {
    return [bounds[0], bounds[2], bounds[4]];
  }

  function _getMaxPoint(bounds) {
    return [bounds[1], bounds[3], bounds[5]];
  }

  function oppositeSign(a, b) {
    return a <= 0 && b >= 0 || a >= 0 && b <= 0;
  }

  function _getCorners(bounds, corners) {
    var count = 0;

    for (var ix = 0; ix < 2; ix++) {
      for (var iy = 2; iy < 4; iy++) {
        for (var iz = 4; iz < 6; iz++) {
          corners[count] = [bounds[ix], bounds[iy], bounds[iz]];
          count++;
        }
      }
    }
  } // Computes the two corners with minimal and miximal coordinates

  function _computeCornerPoints(bounds, point1, point2) {
    point1[0] = bounds[0];
    point1[1] = bounds[2];
    point1[2] = bounds[4];
    point2[0] = bounds[1];
    point2[1] = bounds[3];
    point2[2] = bounds[5];
  }

  function _computeScale(bounds) {
    var scale3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    var center = _getCenter(bounds);

    scale3[0] = bounds[1] - center[0];
    scale3[1] = bounds[3] - center[1];
    scale3[2] = bounds[5] - center[2];
    return scale3;
  }

  function _computeLocalBounds(points, u, v, w) {
    var bounds = [].concat(INIT_BOUNDS);
    var pointsData = points.getData();

    for (var i = 0; i < pointsData.length; i += 3) {
      var point = [pointsData[i], pointsData[i + 1], pointsData[i + 2]];
      var du = dot(point, u);
      bounds[0] = Math.min(du, bounds[0]);
      bounds[1] = Math.max(du, bounds[1]);
      var dv = dot(point, v);
      bounds[2] = Math.min(dv, bounds[2]);
      bounds[3] = Math.max(dv, bounds[3]);
      var dw = dot(point, w);
      bounds[4] = Math.min(dw, bounds[4]);
      bounds[5] = Math.max(dw, bounds[5]);
    }

    return bounds;
  } // The method returns a non-zero value if the bounding box is hit.

  function _intersectBox(bounds, origin, dir, coord, tolerance) {
    var inside = true;
    var quadrant = [];
    var whichPlane = 0;
    var maxT = [];
    var candidatePlane = [0.0, 0.0, 0.0];
    var RIGHT = 0;
    var LEFT = 1;
    var MIDDLE = 2; // First find closest planes

    for (var i = 0; i < 3; i++) {
      if (origin[i] < bounds[2 * i]) {
        quadrant[i] = LEFT;
        candidatePlane[i] = bounds[2 * i];
        inside = false;
      } else if (origin[i] > bounds[2 * i + 1]) {
        quadrant[i] = RIGHT;
        candidatePlane[i] = bounds[2 * i + 1];
        inside = false;
      } else {
        quadrant[i] = MIDDLE;
      }
    } // Check whether origin of ray is inside bbox


    if (inside) {
      coord[0] = origin[0];
      coord[1] = origin[1];
      coord[2] = origin[2];
      tolerance[0] = 0;
      return 1;
    } // Calculate parametric distance to plane


    for (var _i = 0; _i < 3; _i++) {
      if (quadrant[_i] !== MIDDLE && dir[_i] !== 0.0) {
        maxT[_i] = (candidatePlane[_i] - origin[_i]) / dir[_i];
      } else {
        maxT[_i] = -1.0;
      }
    } // Find the largest parametric value of intersection


    for (var _i2 = 0; _i2 < 3; _i2++) {
      if (maxT[whichPlane] < maxT[_i2]) {
        whichPlane = _i2;
      }
    } // Check for valie intersection along line


    if (maxT[whichPlane] > 1.0 || maxT[whichPlane] < 0.0) {
      return 0;
    }

    tolerance[0] = maxT[whichPlane]; // Intersection point along line is okay. Check bbox.

    for (var _i3 = 0; _i3 < 3; _i3++) {
      if (whichPlane !== _i3) {
        coord[_i3] = origin[_i3] + maxT[whichPlane] * dir[_i3];

        if (coord[_i3] < bounds[2 * _i3] || coord[_i3] > bounds[2 * _i3 + 1]) {
          return 0;
        }
      } else {
        coord[_i3] = candidatePlane[_i3];
      }
    }

    return 1;
  } // Plane intersection with box

  function _intersectPlane(bounds, origin, normal) {
    var p = [];
    var d = 0;
    var sign = 1;
    var firstOne = 1; // Evaluate the eight points. If there is a sign change, there is an intersection

    for (var z = 4; z <= 5; ++z) {
      p[2] = bounds[z];

      for (var y = 2; y <= 3; ++y) {
        p[1] = bounds[y];

        for (var x = 0; x <= 1; ++x) {
          p[0] = bounds[x];
          d = vtkPlane$1.evaluate(normal, origin, p);

          if (firstOne) {
            sign = d >= 0 ? 1 : -1;
            firstOne = 0;
          }

          if (d === 0.0 || sign > 0 && d < 0.0 || sign < 0 && d > 0.0) {
            return 1;
          }
        }
      }
    }

    return 0; // no intersection
  }

  function _intersect(bounds, bBounds) {
    if (!(_isValid(bounds) && _isValid(bBounds))) {
      return false;
    }

    var newBounds = [0, 0, 0, 0, 0, 0];
    var intersection;

    for (var i = 0; i < 3; i++) {
      intersection = false;

      if (bBounds[i * 2] >= bounds[i * 2] && bBounds[i * 2] <= bounds[i * 2 + 1]) {
        intersection = true;
        newBounds[i * 2] = bBounds[i * 2];
      } else if (bounds[i * 2] >= bBounds[i * 2] && bounds[i * 2] <= bBounds[i * 2 + 1]) {
        intersection = true;
        newBounds[i * 2] = bounds[i * 2];
      }

      if (bBounds[i * 2 + 1] >= bounds[i * 2] && bBounds[i * 2 + 1] <= bounds[i * 2 + 1]) {
        intersection = true;
        newBounds[i * 2 + 1] = bBounds[2 * i + 1];
      } else if (bounds[i * 2 + 1] >= bBounds[i * 2] && bounds[i * 2 + 1] <= bBounds[i * 2 + 1]) {
        intersection = true;
        newBounds[i * 2 + 1] = bounds[i * 2 + 1];
      }

      if (!intersection) {
        return false;
      }
    } // OK they did intersect - set the box to be the result


    bounds[0] = newBounds[0];
    bounds[1] = newBounds[1];
    bounds[2] = newBounds[2];
    bounds[3] = newBounds[3];
    bounds[4] = newBounds[4];
    bounds[5] = newBounds[5];
    return true;
  }

  function _intersects(bounds, bBounds) {
    if (!(_isValid(bounds) && _isValid(bBounds))) {
      return false;
    }
    /* eslint-disable no-continue */


    for (var i = 0; i < 3; i++) {
      if (bBounds[i * 2] >= bounds[i * 2] && bBounds[i * 2] <= bounds[i * 2 + 1]) {
        continue;
      } else if (bounds[i * 2] >= bBounds[i * 2] && bounds[i * 2] <= bBounds[i * 2 + 1]) {
        continue;
      }

      if (bBounds[i * 2 + 1] >= bounds[i * 2] && bBounds[i * 2 + 1] <= bounds[i * 2 + 1]) {
        continue;
      } else if (bounds[i * 2 + 1] >= bBounds[i * 2] && bounds[i * 2 + 1] <= bBounds[i * 2 + 1]) {
        continue;
      }

      return false;
    }
    /* eslint-enable no-continue */


    return true;
  }

  function _containsPoint(bounds, x, y, z) {
    if (x < bounds[0] || x > bounds[1]) {
      return false;
    }

    if (y < bounds[2] || y > bounds[3]) {
      return false;
    }

    if (z < bounds[4] || z > bounds[5]) {
      return false;
    }

    return true;
  }
  function contains(bounds, otherBounds) {
    // if either box is not valid or they don't intersect
    if (!_intersects(bounds, otherBounds)) {
      return false;
    }

    if (!_containsPoint.apply(void 0, [bounds].concat(_toConsumableArray(_getMinPoint(otherBounds))))) {
      return false;
    }

    if (!_containsPoint.apply(void 0, [bounds].concat(_toConsumableArray(_getMaxPoint(otherBounds))))) {
      return false;
    }

    return true;
  }
  /**
   * Returns true if plane intersects bounding box.
   * If so, the box is cut by the plane
   * @param {array} origin
   * @param {array} normal
   */

  function _cutWithPlane(bounds, origin, normal) {
    // Index[0..2] represents the order of traversing the corners of a cube
    // in (x,y,z), (y,x,z) and (z,x,y) ordering, respectively
    var index = [[0, 1, 2, 3, 4, 5, 6, 7], [0, 1, 4, 5, 2, 3, 6, 7], [0, 2, 4, 6, 1, 3, 5, 7]]; // stores the signed distance to a plane

    var d = [0, 0, 0, 0, 0, 0, 0, 0];
    var idx = 0;

    for (var ix = 0; ix < 2; ix++) {
      for (var iy = 2; iy < 4; iy++) {
        for (var iz = 4; iz < 6; iz++) {
          var x = [bounds[ix], bounds[iy], bounds[iz]];
          d[idx++] = vtkPlane$1.evaluate(normal, origin, x);
        }
      }
    }

    var dir = 2;

    while (dir--) {
      // in each direction, we test if the vertices of two orthogonal faces
      // are on either side of the plane
      if (oppositeSign(d[index[dir][0]], d[index[dir][4]]) && oppositeSign(d[index[dir][1]], d[index[dir][5]]) && oppositeSign(d[index[dir][2]], d[index[dir][6]]) && oppositeSign(d[index[dir][3]], d[index[dir][7]])) {
        break;
      }
    }

    if (dir < 0) {
      return false;
    }

    var sign = Math.sign(normal[dir]);
    var size = Math.abs((bounds[dir * 2 + 1] - bounds[dir * 2]) * normal[dir]);
    var t = sign > 0 ? 1 : 0;
    /* eslint-disable no-continue */

    for (var i = 0; i < 4; i++) {
      if (size === 0) {
        continue; // shouldn't happen
      }

      var ti = Math.abs(d[index[dir][i]]) / size;

      if (sign > 0 && ti < t) {
        t = ti;
      }

      if (sign < 0 && ti > t) {
        t = ti;
      }
    }
    /* eslint-enable no-continue */


    var bound = (1.0 - t) * bounds[dir * 2] + t * bounds[dir * 2 + 1];

    if (sign > 0) {
      bounds[dir * 2] = bound;
    } else {
      bounds[dir * 2 + 1] = bound;
    }

    return true;
  } // ----------------------------------------------------------------------------

  var BoundingBox = /*#__PURE__*/function () {
    function BoundingBox(refBounds) {
      _classCallCheck(this, BoundingBox);

      this.bounds = refBounds;

      if (!this.bounds) {
        this.bounds = new Float64Array(6);

        _setBounds(this.bounds, INIT_BOUNDS);
      }
    }

    _createClass(BoundingBox, [{
      key: "getBounds",
      value: function getBounds() {
        return this.bounds;
      }
    }, {
      key: "equals",
      value: function equals(otherBounds) {
        return _equals(this.bounds, otherBounds);
      }
    }, {
      key: "isValid",
      value: function isValid() {
        return _isValid(this.bounds);
      }
    }, {
      key: "setBounds",
      value: function setBounds(otherBounds) {
        return _setBounds(this.bounds, otherBounds);
      }
    }, {
      key: "reset",
      value: function reset() {
        return _reset(this.bounds);
      }
    }, {
      key: "addPoint",
      value: function addPoint() {
        for (var _len = arguments.length, xyz = new Array(_len), _key = 0; _key < _len; _key++) {
          xyz[_key] = arguments[_key];
        }

        return _addPoint(this.bounds, xyz);
      }
    }, {
      key: "addBounds",
      value: function addBounds(xMin, xMax, yMin, yMax, zMin, zMax) {
        return _addBounds(this.bounds, xMin, xMax, yMin, yMax, zMin, zMax);
      }
    }, {
      key: "setMinPoint",
      value: function setMinPoint(x, y, z) {
        return _setMinPoint(this.bounds, x, y, z);
      }
    }, {
      key: "setMaxPoint",
      value: function setMaxPoint(x, y, z) {
        return _setMaxPoint(this.bounds, x, y, z);
      }
    }, {
      key: "inflate",
      value: function inflate(delta) {
        return _inflate(this.bounds, delta);
      }
    }, {
      key: "scale",
      value: function scale(sx, sy, sz) {
        return _scale(this.bounds, sx, sy, sz);
      }
    }, {
      key: "getCenter",
      value: function getCenter() {
        return _getCenter(this.bounds);
      }
    }, {
      key: "getLength",
      value: function getLength(index) {
        return _getLength(this.bounds, index);
      }
    }, {
      key: "getLengths",
      value: function getLengths() {
        return _getLengths(this.bounds);
      }
    }, {
      key: "getMaxLength",
      value: function getMaxLength() {
        return _getMaxLength(this.bounds);
      }
    }, {
      key: "getDiagonalLength",
      value: function getDiagonalLength() {
        return _getDiagonalLength(this.bounds);
      }
    }, {
      key: "getMinPoint",
      value: function getMinPoint() {
        return _getMinPoint(this.bounds);
      }
    }, {
      key: "getMaxPoint",
      value: function getMaxPoint() {
        return _getMaxPoint(this.bounds);
      }
    }, {
      key: "getXRange",
      value: function getXRange() {
        return _getXRange(this.bounds);
      }
    }, {
      key: "getYRange",
      value: function getYRange() {
        return _getYRange(this.bounds);
      }
    }, {
      key: "getZRange",
      value: function getZRange() {
        return _getZRange(this.bounds);
      }
    }, {
      key: "getCorners",
      value: function getCorners(corners) {
        return _getCorners(this.bounds, corners);
      }
    }, {
      key: "computeCornerPoints",
      value: function computeCornerPoints(point1, point2) {
        return _computeCornerPoints(this.bounds, point1, point2);
      }
    }, {
      key: "computeLocalBounds",
      value: function computeLocalBounds(u, v, w) {
        return _computeLocalBounds(this.bounds, u, v, w);
      }
    }, {
      key: "computeScale3",
      value: function computeScale3(scale3) {
        return _computeScale(this.bounds, scale3);
      }
    }, {
      key: "cutWithPlane",
      value: function cutWithPlane(origin, normal) {
        return _cutWithPlane(this.bounds, origin, normal);
      }
    }, {
      key: "intersectBox",
      value: function intersectBox(origin, dir, coord, tolerance) {
        return _intersectBox(this.bounds, origin, dir, coord, tolerance);
      }
    }, {
      key: "intersectPlane",
      value: function intersectPlane(origin, normal) {
        return _intersectPlane(this.bounds, origin, normal);
      }
    }, {
      key: "intersect",
      value: function intersect(otherBounds) {
        return _intersect(this.bounds, otherBounds);
      }
    }, {
      key: "intersects",
      value: function intersects(otherBounds) {
        return _intersects(this.bounds, otherBounds);
      }
    }, {
      key: "containsPoint",
      value: function containsPoint(x, y, z) {
        return _containsPoint(this.bounds, x, y, z);
      }
    }, {
      key: "contains",
      value: function contains(otherBounds) {
        return _intersects(this.bounds, otherBounds);
      }
    }]);

    return BoundingBox;
  }();

  function newInstance$13(initialValues) {
    var bounds = initialValues && initialValues.bounds;
    return new BoundingBox(bounds);
  } // ----------------------------------------------------------------------------
  // Static API
  // ----------------------------------------------------------------------------


  var STATIC$6 = {
    equals: _equals,
    isValid: _isValid,
    setBounds: _setBounds,
    reset: _reset,
    addPoint: _addPoint,
    addBounds: _addBounds,
    setMinPoint: _setMinPoint,
    setMaxPoint: _setMaxPoint,
    inflate: _inflate,
    scale: _scale,
    getCenter: _getCenter,
    getLength: _getLength,
    getLengths: _getLengths,
    getMaxLength: _getMaxLength,
    getDiagonalLength: _getDiagonalLength,
    getMinPoint: _getMinPoint,
    getMaxPoint: _getMaxPoint,
    getXRange: _getXRange,
    getYRange: _getYRange,
    getZRange: _getZRange,
    getCorners: _getCorners,
    computeCornerPoints: _computeCornerPoints,
    computeLocalBounds: _computeLocalBounds,
    computeScale3: _computeScale,
    cutWithPlane: _cutWithPlane,
    intersectBox: _intersectBox,
    intersectPlane: _intersectPlane,
    intersect: _intersect,
    intersects: _intersects,
    containsPoint: _containsPoint,
    contains: contains,
    INIT_BOUNDS: INIT_BOUNDS
  };
  var vtkBoundingBox = _objectSpread$j({
    newInstance: newInstance$13
  }, STATIC$6);

  // vtkFieldData methods
  // ----------------------------------------------------------------------------

  function vtkFieldData(publicAPI, model) {
    model.classHierarchy.push('vtkFieldData');
    var superGetState = publicAPI.getState; // Decode serialized data if any

    if (model.arrays) {
      model.arrays = model.arrays.map(function (item) {
        return {
          data: vtk(item.data)
        };
      });
    }

    publicAPI.initialize = function () {
      publicAPI.initializeFields();
      publicAPI.copyAllOn();
      publicAPI.clearFieldFlags();
    };

    publicAPI.initializeFields = function () {
      model.arrays = [];
      model.copyFieldFlags = {};
      publicAPI.modified();
    };

    publicAPI.copyStructure = function (other) {
      publicAPI.initializeFields();
      model.copyFieldFlags = other.getCopyFieldFlags().map(function (x) {
        return x;
      }); // Deep-copy

      model.arrays = other.arrays().map(function (x) {
        return {
          array: x
        };
      }); // Deep-copy
      // TODO: Copy array information objects (once we support information objects)
    };

    publicAPI.getNumberOfArrays = function () {
      return model.arrays.length;
    };

    publicAPI.getNumberOfActiveArrays = function () {
      return model.arrays.length;
    };

    publicAPI.addArray = function (arr) {
      model.arrays = [].concat(model.arrays, {
        data: arr
      });
      return model.arrays.length - 1;
    };

    publicAPI.removeAllArrays = function () {
      model.arrays = [];
    };

    publicAPI.removeArray = function (arrayName) {
      model.arrays = model.arrays.filter(function (entry) {
        return arrayName !== entry.data.getName();
      });
    };

    publicAPI.removeArrayByIndex = function (arrayIdx) {
      model.arrays = model.arrays.filter(function (entry, idx) {
        return idx !== arrayIdx;
      });
    };

    publicAPI.getArrays = function () {
      return model.arrays.map(function (entry) {
        return entry.data;
      });
    };

    publicAPI.getArray = function (arraySpec) {
      return typeof arraySpec === 'number' ? publicAPI.getArrayByIndex(arraySpec) : publicAPI.getArrayByName(arraySpec);
    };

    publicAPI.getArrayByName = function (arrayName) {
      return model.arrays.reduce(function (a, b, i) {
        return b.data.getName() === arrayName ? b.data : a;
      }, null);
    };

    publicAPI.getArrayWithIndex = function (arrayName) {
      return model.arrays.reduce(function (a, b, i) {
        return b.data && b.data.getName() === arrayName ? {
          array: b.data,
          index: i
        } : a;
      }, {
        array: null,
        index: -1
      });
    };

    publicAPI.getArrayByIndex = function (idx) {
      return idx >= 0 && idx < model.arrays.length ? model.arrays[idx].data : null;
    };

    publicAPI.hasArray = function (arrayName) {
      return publicAPI.getArrayWithIndex(arrayName).index >= 0;
    };

    publicAPI.getArrayName = function (idx) {
      var arr = model.arrays[idx];
      return arr ? arr.data.getName() : '';
    };

    publicAPI.getCopyFieldFlags = function () {
      return model.copyFieldFlags;
    };

    publicAPI.getFlag = function (arrayName) {
      return model.copyFieldFlags[arrayName];
    };

    publicAPI.passData = function (other) {
      var fromId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
      var toId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
      other.getArrays().forEach(function (arr) {
        var copyFlag = publicAPI.getFlag(arr.getName());

        if (copyFlag !== false && !(model.doCopyAllOff && copyFlag !== true) && arr) {
          var destArr = publicAPI.getArrayByName(arr.getName());

          if (!destArr) {
            if (fromId < 0 || fromId > arr.getNumberOfTuples()) {
              publicAPI.addArray(arr);
            } else {
              var ncomps = arr.getNumberOfComponents();
              var newSize = arr.getNumberOfValues();
              var tId = toId > -1 ? toId : fromId;

              if (newSize < tId * ncomps) {
                newSize = (tId + 1) * ncomps;
              }

              destArr = vtkDataArray$1.newInstance({
                name: arr.getName(),
                dataType: arr.getDataType(),
                numberOfComponents: arr.getNumberOfComponents(),
                size: newSize
              });
              destArr.setTuple(tId, arr.getTuple(fromId));
              publicAPI.addArray(destArr);
            }
          } else if (arr.getNumberOfComponents() === destArr.getNumberOfComponents()) {
            if (fromId > -1 && fromId < arr.getNumberOfTuples()) {
              var _tId = toId > -1 ? toId : fromId;

              destArr.setTuple(_tId, arr.getTuple(fromId));
            } else {
              // if fromId and not provided, just copy all (or as much possible)
              // of arr to destArr.
              for (var i = 0; i < arr.getNumberOfTuples(); ++i) {
                destArr.setTuple(i, arr.getTuple(i));
              }
            }
          }
        }
      });
    };

    publicAPI.copyFieldOn = function (arrayName) {
      model.copyFieldFlags[arrayName] = true;
    };

    publicAPI.copyFieldOff = function (arrayName) {
      model.copyFieldFlags[arrayName] = false;
    };

    publicAPI.copyAllOn = function () {
      if (!model.doCopyAllOn || model.doCopyAllOff) {
        model.doCopyAllOn = true;
        model.doCopyAllOff = false;
        publicAPI.modified();
      }
    };

    publicAPI.copyAllOff = function () {
      if (model.doCopyAllOn || !model.doCopyAllOff) {
        model.doCopyAllOn = false;
        model.doCopyAllOff = true;
        publicAPI.modified();
      }
    };

    publicAPI.clearFieldFlags = function () {
      model.copyFieldFlags = {};
    };

    publicAPI.deepCopy = function (other) {
      model.arrays = other.getArrays().map(function (arr) {
        var arrNew = arr.newClone();
        arrNew.deepCopy(arr);
        return {
          data: arrNew
        };
      });
    };

    publicAPI.copyFlags = function (other) {
      return other.getCopyFieldFlags().map(function (x) {
        return x;
      });
    }; // TODO: publicAPI.squeeze = () => model.arrays.forEach(entry => entry.data.squeeze());


    publicAPI.reset = function () {
      return model.arrays.forEach(function (entry) {
        return entry.data.reset();
      });
    }; // TODO: getActualMemorySize


    publicAPI.getMTime = function () {
      return model.arrays.reduce(function (a, b) {
        return b.data.getMTime() > a ? b.data.getMTime() : a;
      }, model.mtime);
    }; // TODO: publicAPI.getField = (ids, other) => { copy ids from other into this model's arrays }
    // TODO: publicAPI.getArrayContainingComponent = (component) => ...


    publicAPI.getNumberOfComponents = function () {
      return model.arrays.reduce(function (a, b) {
        return a + b.data.getNumberOfComponents();
      }, 0);
    };

    publicAPI.getNumberOfTuples = function () {
      return model.arrays.length > 0 ? model.arrays[0].getNumberOfTuples() : 0;
    };

    publicAPI.getState = function () {
      var result = superGetState();
      result.arrays = model.arrays.map(function (item) {
        return {
          data: item.data.getState()
        };
      });
      return result;
    };
  }

  var DEFAULT_VALUES$14 = {
    arrays: [],
    copyFieldFlags: [],
    // fields not to copy
    doCopyAllOn: true,
    doCopyAllOff: false
  };
  function extend$16(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$14, initialValues);
    macro.obj(publicAPI, model);
    vtkFieldData(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$12 = macro.newInstance(extend$16, 'vtkFieldData'); // ----------------------------------------------------------------------------

  var vtkFieldData$1 = {
    newInstance: newInstance$12,
    extend: extend$16
  };

  var AttributeTypes$1 = {
    SCALARS: 0,
    VECTORS: 1,
    NORMALS: 2,
    TCOORDS: 3,
    TENSORS: 4,
    GLOBALIDS: 5,
    PEDIGREEIDS: 6,
    EDGEFLAG: 7,
    NUM_ATTRIBUTES: 8
  };
  var AttributeLimitTypes = {
    MAX: 0,
    EXACT: 1,
    NOLIMIT: 2
  };
  var CellGhostTypes = {
    DUPLICATECELL: 1,
    // the cell is present on multiple processors
    HIGHCONNECTIVITYCELL: 2,
    // the cell has more neighbors than in a regular mesh
    LOWCONNECTIVITYCELL: 4,
    // the cell has less neighbors than in a regular mesh
    REFINEDCELL: 8,
    // other cells are present that refines it.
    EXTERIORCELL: 16,
    // the cell is on the exterior of the data set
    HIDDENCELL: 32 // the cell is needed to maintain connectivity, but the data values should be ignored.

  };
  var PointGhostTypes = {
    DUPLICATEPOINT: 1,
    // the cell is present on multiple processors
    HIDDENPOINT: 2 // the point is needed to maintain connectivity, but the data values should be ignored.

  };
  var AttributeCopyOperations$1 = {
    COPYTUPLE: 0,
    INTERPOLATE: 1,
    PASSDATA: 2,
    ALLCOPY: 3 // all of the above

  };
  var ghostArrayName = 'vtkGhostType';
  var DesiredOutputPrecision = {
    DEFAULT: 0,
    // use the point type that does not truncate any data
    SINGLE: 1,
    // use Float32Array
    DOUBLE: 2 // use Float64Array

  };
  var Constants$9 = {
    AttributeCopyOperations: AttributeCopyOperations$1,
    AttributeLimitTypes: AttributeLimitTypes,
    AttributeTypes: AttributeTypes$1,
    CellGhostTypes: CellGhostTypes,
    DesiredOutputPrecision: DesiredOutputPrecision,
    PointGhostTypes: PointGhostTypes,
    ghostArrayName: ghostArrayName
  };

  function ownKeys$i(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$i(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$i(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$i(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  var AttributeTypes = Constants$9.AttributeTypes,
      AttributeCopyOperations = Constants$9.AttributeCopyOperations;
  var vtkWarningMacro$4 = macro.vtkWarningMacro; // ----------------------------------------------------------------------------
  // vtkDataSetAttributes methods
  // ----------------------------------------------------------------------------

  function vtkDataSetAttributes(publicAPI, model) {
    var attrTypes = ['Scalars', 'Vectors', 'Normals', 'TCoords', 'Tensors', 'GlobalIds', 'PedigreeIds'];

    function cleanAttributeType(attType) {
      // Given an integer or string, convert the result to one of the
      // strings in the "attrTypes" array above or null (if
      // no match is found)
      var cleanAttType = attrTypes.find(function (ee) {
        return AttributeTypes[ee.toUpperCase()] === attType || typeof attType !== 'number' && ee.toLowerCase() === attType.toLowerCase();
      });

      if (typeof cleanAttType === 'undefined') {
        cleanAttType = null;
      }

      return cleanAttType;
    } // Set our className


    model.classHierarchy.push('vtkDataSetAttributes');

    publicAPI.checkNumberOfComponents = function (x) {
      return true;
    }; // TODO


    publicAPI.setAttribute = function (arr, uncleanAttType) {
      var attType = cleanAttributeType(uncleanAttType);

      if (arr && attType.toUpperCase() === 'PEDIGREEIDS' && !arr.isA('vtkDataArray')) {
        vtkWarningMacro$4("Cannot set attribute ".concat(attType, ". The attribute must be a vtkDataArray."));
        return -1;
      }

      if (arr && !publicAPI.checkNumberOfComponents(arr, attType)) {
        vtkWarningMacro$4("Cannot set attribute ".concat(attType, ". Incorrect number of components."));
        return -1;
      }

      var currentAttribute = model["active".concat(attType)];

      if (currentAttribute >= 0 && currentAttribute < model.arrays.length) {
        if (model.arrays[currentAttribute] === arr) {
          return currentAttribute;
        }

        publicAPI.removeArrayByIndex(currentAttribute);
      }

      if (arr) {
        currentAttribute = publicAPI.addArray(arr);
        model["active".concat(attType)] = currentAttribute;
      } else {
        model["active".concat(attType)] = -1;
      }

      publicAPI.modified();
      return model["active".concat(attType)];
    };

    publicAPI.setActiveAttributeByName = function (arrayName, attType) {
      return publicAPI.setActiveAttributeByIndex(publicAPI.getArrayWithIndex(arrayName).index, attType);
    };

    publicAPI.setActiveAttributeByIndex = function (arrayIdx, uncleanAttType) {
      var attType = cleanAttributeType(uncleanAttType);

      if (arrayIdx >= 0 && arrayIdx < model.arrays.length) {
        if (attType.toUpperCase() !== 'PEDIGREEIDS') {
          var arr = publicAPI.getArrayByIndex(arrayIdx);

          if (!arr.isA('vtkDataArray')) {
            vtkWarningMacro$4("Cannot set attribute ".concat(attType, ". Only vtkDataArray subclasses can be set as active attributes."));
            return -1;
          }

          if (!publicAPI.checkNumberOfComponents(arr, attType)) {
            vtkWarningMacro$4("Cannot set attribute ".concat(attType, ". Incorrect number of components."));
            return -1;
          }
        }

        model["active".concat(attType)] = arrayIdx;
        publicAPI.modified();
        return arrayIdx;
      }

      if (arrayIdx === -1) {
        model["active".concat(attType)] = arrayIdx;
        publicAPI.modified();
      }

      return -1;
    };

    publicAPI.getActiveAttribute = function (attType) {
      // Given an integer enum value or a string (with random capitalization),
      // find the matching string in attrTypes.
      var cleanAttType = cleanAttributeType(attType);
      return publicAPI["get".concat(cleanAttType)]();
    }; // Override to allow proper handling of active attributes


    publicAPI.removeAllArrays = function () {
      model.arrays = [];
      attrTypes.forEach(function (attType) {
        model["active".concat(attType)] = -1;
      });
    }; // Override to allow proper handling of active attributes


    publicAPI.removeArray = function (arrayName) {
      model.arrays = model.arrays.filter(function (entry, idx) {
        if (arrayName === entry.data.getName()) {
          // Found the array to remove, but is it an active attribute?
          attrTypes.forEach(function (attType) {
            if (idx === model["active".concat(attType)]) {
              model["active".concat(attType)] = -1;
            }
          });
          return false;
        }

        return true;
      });
    }; // Override to allow proper handling of active attributes


    publicAPI.removeArrayByIndex = function (arrayIdx) {
      model.arrays = model.arrays.filter(function (entry, idx) {
        return idx !== arrayIdx;
      });
      attrTypes.forEach(function (attType) {
        if (arrayIdx === model["active".concat(attType)]) {
          model["active".concat(attType)] = -1;
        }
      });
    };

    attrTypes.forEach(function (value) {
      var activeVal = "active".concat(value);

      publicAPI["get".concat(value)] = function () {
        return publicAPI.getArrayByIndex(model[activeVal]);
      };

      publicAPI["set".concat(value)] = function (da) {
        return publicAPI.setAttribute(da, value);
      };

      publicAPI["setActive".concat(value)] = function (arrayName) {
        return publicAPI.setActiveAttributeByIndex(publicAPI.getArrayWithIndex(arrayName).index, value);
      };

      publicAPI["copy".concat(value, "Off")] = function () {
        var attType = value.toUpperCase();
        model.copyAttributeFlags[AttributeCopyOperations.PASSDATA][AttributeTypes[attType]] = false;
      };
    });

    publicAPI.initializeAttributeCopyFlags = function () {
      // Default to copying all attributes in every circumstance:
      model.copyAttributeFlags = [];
      Object.keys(AttributeCopyOperations).filter(function (op) {
        return op !== 'ALLCOPY';
      }).forEach(function (attCopyOp) {
        model.copyAttributeFlags[AttributeCopyOperations[attCopyOp]] = Object.keys(AttributeTypes).filter(function (ty) {
          return ty !== 'NUM_ATTRIBUTES';
        }).reduce(function (a, b) {
          a[AttributeTypes[b]] = true;
          return a;
        }, []);
      }); // Override some operations where we don't want to copy:

      model.copyAttributeFlags[AttributeCopyOperations.COPYTUPLE][AttributeTypes.GLOBALIDS] = false;
      model.copyAttributeFlags[AttributeCopyOperations.INTERPOLATE][AttributeTypes.GLOBALIDS] = false;
      model.copyAttributeFlags[AttributeCopyOperations.COPYTUPLE][AttributeTypes.PEDIGREEIDS] = false;
    };

    publicAPI.initialize = macro.chain(publicAPI.initialize, publicAPI.initializeAttributeCopyFlags); // Process dataArrays if any

    if (model.dataArrays && Object.keys(model.dataArrays).length) {
      Object.keys(model.dataArrays).forEach(function (name) {
        if (!model.dataArrays[name].ref && model.dataArrays[name].type === 'vtkDataArray') {
          publicAPI.addArray(vtkDataArray$1.newInstance(model.dataArrays[name]));
        }
      });
    }

    var superShallowCopy = publicAPI.shallowCopy;

    publicAPI.shallowCopy = function (other, debug) {
      superShallowCopy(other, debug);
      model.arrays = other.getArrays().map(function (arr) {
        var arrNew = arr.newClone();
        arrNew.shallowCopy(arr, debug);
        return {
          data: arrNew
        };
      });
    };

    publicAPI.initializeAttributeCopyFlags();
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$13 = {
    activeScalars: -1,
    activeVectors: -1,
    activeTensors: -1,
    activeNormals: -1,
    activeTCoords: -1,
    activeGlobalIds: -1,
    activePedigreeIds: -1
  }; // ----------------------------------------------------------------------------

  function extend$15(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$13, initialValues); // Object methods

    vtkFieldData$1.extend(publicAPI, model, initialValues);
    macro.setGet(publicAPI, model, ['activeScalars', 'activeNormals', 'activeTCoords', 'activeVectors', 'activeTensors', 'activeGlobalIds', 'activePedigreeIds']);

    if (!model.arrays) {
      model.arrays = {};
    } // Object specific methods


    vtkDataSetAttributes(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$11 = macro.newInstance(extend$15, 'vtkDataSetAttributes'); // ----------------------------------------------------------------------------

  var vtkDataSetAttributes$1 = _objectSpread$i({
    newInstance: newInstance$11,
    extend: extend$15
  }, Constants$9);

  // Specify how data arrays can be used by data objects
  var FieldDataTypes = {
    UNIFORM: 0,
    // data that does not vary over points/cells/etc.
    DATA_OBJECT_FIELD: 0,
    // to match VTK
    COORDINATE: 1,
    // data that specifies the location of each point
    POINT_DATA: 1,
    // to match VTK
    POINT: 2,
    // data defined at each point, but that does not specify the point location
    POINT_FIELD_DATA: 2,
    // to match VTK
    CELL: 3,
    // data defined at each cell, but that does not specify the cell
    CELL_FIELD_DATA: 3,
    // to match VTK
    VERTEX: 4,
    // data defined at each graph vertex, but that does not specify the graph vertex
    VERTEX_FIELD_DATA: 4,
    // to match VTK
    EDGE: 5,
    // data defined at each graph edge, but that does not specify the graph edge
    EDGE_FIELD_DATA: 5,
    // to match VTK
    ROW: 6,
    // data specifying a table row
    ROW_DATA: 6 // to match VTK

  };
  var FieldAssociations$2 = {
    FIELD_ASSOCIATION_POINTS: 0,
    FIELD_ASSOCIATION_CELLS: 1,
    FIELD_ASSOCIATION_NONE: 2,
    FIELD_ASSOCIATION_POINTS_THEN_CELLS: 3,
    FIELD_ASSOCIATION_VERTICES: 4,
    FIELD_ASSOCIATION_EDGES: 5,
    FIELD_ASSOCIATION_ROWS: 6,
    NUMBER_OF_ASSOCIATIONS: 7
  };
  var Constants$8 = {
    FieldDataTypes: FieldDataTypes,
    FieldAssociations: FieldAssociations$2
  };

  function ownKeys$h(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$h(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$h(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$h(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  // import * as vtkMath from '../../Core/Math';
  //
  // function getBounds(dataset) {
  //   if (dataset.bounds) {
  //     return dataset.bounds;
  //   }
  //   if (dataset.type && dataset[dataset.type]) {
  //     const ds = dataset[dataset.type];
  //     if (ds.bounds) {
  //       return ds.bounds;
  //     }
  //     if (ds.Points && ds.Points.bounds) {
  //       return ds.Points.bounds;
  //     }
  //     if (ds.Points && ds.Points.values) {
  //       const array = ds.Points.values;
  //       const bbox = [...vtkBoundingBox.INIT_BOUNDS];
  //       const size = array.length;
  //       const delta = ds.Points.numberOfComponents ? ds.Points.numberOfComponents : 3;
  //       for (let idx = 0; idx < size; idx += delta) {
  //         vtkBoundingBox.addPoint(bbox, array[idx * delta], array[(idx * delta) + 1], array[(idx * delta) + 2]);
  //       }
  //       ds.Points.bounds = bbox;
  //       return ds.Points.bounds;
  //     }
  //   }
  //   return vtkMath.createUninitializedBounds();
  // }
  // ----------------------------------------------------------------------------
  // Global methods
  // ----------------------------------------------------------------------------

  var DATASET_FIELDS = ['pointData', 'cellData', 'fieldData']; // ----------------------------------------------------------------------------
  // vtkDataSet methods
  // ----------------------------------------------------------------------------

  function vtkDataSet(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkDataSet'); // Add dataset attributes

    DATASET_FIELDS.forEach(function (fieldName) {
      if (!model[fieldName]) {
        model[fieldName] = vtkDataSetAttributes$1.newInstance();
      } else {
        model[fieldName] = vtk(model[fieldName]);
      }
    });
    var superShallowCopy = publicAPI.shallowCopy;

    publicAPI.shallowCopy = function (other) {
      var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      superShallowCopy(other, debug);
      DATASET_FIELDS.forEach(function (fieldName) {
        model[fieldName] = vtkDataSetAttributes$1.newInstance();
        model[fieldName].shallowCopy(other.getReferenceByName(fieldName));
      });
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$12 = {// pointData: null,
    // cellData: null,
    // fieldData: null,
  }; // ----------------------------------------------------------------------------

  function extend$14(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$12, initialValues); // Object methods

    macro.obj(publicAPI, model);
    macro.setGet(publicAPI, model, DATASET_FIELDS); // Object specific methods

    vtkDataSet(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$10 = macro.newInstance(extend$14, 'vtkDataSet'); // ----------------------------------------------------------------------------

  var vtkDataSet$1 = _objectSpread$h({
    newInstance: newInstance$10,
    extend: extend$14
  }, Constants$8);

  var StructuredType$1 = {
    UNCHANGED: 0,
    SINGLE_POINT: 1,
    X_LINE: 2,
    Y_LINE: 3,
    Z_LINE: 4,
    XY_PLANE: 5,
    YZ_PLANE: 6,
    XZ_PLANE: 7,
    XYZ_GRID: 8,
    EMPTY: 9
  };
  var Constants$7 = {
    StructuredType: StructuredType$1
  };

  function ownKeys$g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$g(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$g(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  var StructuredType = Constants$7.StructuredType;
  function getDataDescriptionFromExtent(inExt) {
    var dataDim = 0;

    for (var i = 0; i < 3; ++i) {
      if (inExt[i * 2] < inExt[i * 2 + 1]) {
        dataDim++;
      }
    }

    if (inExt[0] > inExt[1] || inExt[2] > inExt[3] || inExt[4] > inExt[5]) {
      return StructuredType.EMPTY;
    }

    if (dataDim === 3) {
      return StructuredType.XYZ_GRID;
    }

    if (dataDim === 2) {
      if (inExt[0] === inExt[1]) {
        return StructuredType.YZ_PLANE;
      }

      if (inExt[2] === inExt[3]) {
        return StructuredType.XZ_PLANE;
      }

      return StructuredType.XY_PLANE;
    }

    if (dataDim === 1) {
      if (inExt[0] < inExt[1]) {
        return StructuredType.X_LINE;
      }

      if (inExt[2] < inExt[3]) {
        return StructuredType.Y_LINE;
      }

      return StructuredType.Z_LINE;
    }

    return StructuredType.SINGLE_POINT;
  }
  var vtkStructuredData = _objectSpread$g({
    getDataDescriptionFromExtent: getDataDescriptionFromExtent
  }, Constants$7);

  var vtkErrorMacro$g = macro.vtkErrorMacro; // ----------------------------------------------------------------------------
  // vtkImageData methods
  // ----------------------------------------------------------------------------

  function vtkImageData(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkImageData');

    publicAPI.setExtent = function () {
      if (model.deleted) {
        vtkErrorMacro$g('instance deleted - cannot call any method');
        return false;
      }

      for (var _len = arguments.length, inExtent = new Array(_len), _key = 0; _key < _len; _key++) {
        inExtent[_key] = arguments[_key];
      }

      var extentArray = inExtent.length === 1 ? inExtent[0] : inExtent;

      if (extentArray.length !== 6) {
        return false;
      }

      var changeDetected = false;
      model.extent.forEach(function (item, index) {
        if (item !== extentArray[index]) {
          if (changeDetected) {
            return;
          }

          changeDetected = true;
        }
      });

      if (changeDetected) {
        model.extent = extentArray.slice();
        model.dataDescription = vtkStructuredData.getDataDescriptionFromExtent(model.extent);
        publicAPI.modified();
      }

      return changeDetected;
    };

    publicAPI.setDimensions = function () {
      var i;
      var j;
      var k;

      if (model.deleted) {
        vtkErrorMacro$g('instance deleted - cannot call any method');
        return;
      }

      if (arguments.length === 1) {
        var array = arguments.length <= 0 ? undefined : arguments[0];
        i = array[0];
        j = array[1];
        k = array[2];
      } else if (arguments.length === 3) {
        i = arguments.length <= 0 ? undefined : arguments[0];
        j = arguments.length <= 1 ? undefined : arguments[1];
        k = arguments.length <= 2 ? undefined : arguments[2];
      } else {
        vtkErrorMacro$g('Bad dimension specification');
        return;
      }

      publicAPI.setExtent(0, i - 1, 0, j - 1, 0, k - 1);
    };

    publicAPI.getDimensions = function () {
      return [model.extent[1] - model.extent[0] + 1, model.extent[3] - model.extent[2] + 1, model.extent[5] - model.extent[4] + 1];
    };

    publicAPI.getNumberOfCells = function () {
      var dims = publicAPI.getDimensions();
      var nCells = 1;

      for (var i = 0; i < 3; i++) {
        if (dims[i] === 0) {
          return 0;
        }

        if (dims[i] > 1) {
          nCells *= dims[i] - 1;
        }
      }

      return nCells;
    };

    publicAPI.getNumberOfPoints = function () {
      var dims = publicAPI.getDimensions();
      return dims[0] * dims[1] * dims[2];
    };

    publicAPI.getPoint = function (index) {
      var dims = publicAPI.getDimensions();

      if (dims[0] === 0 || dims[1] === 0 || dims[2] === 0) {
        vtkErrorMacro$g('Requesting a point from an empty image.');
        return null;
      }

      var ijk = new Float64Array(3);

      switch (model.dataDescription) {
        case StructuredType$1.EMPTY:
          return null;

        case StructuredType$1.SINGLE_POINT:
          break;

        case StructuredType$1.X_LINE:
          ijk[0] = index;
          break;

        case StructuredType$1.Y_LINE:
          ijk[1] = index;
          break;

        case StructuredType$1.Z_LINE:
          ijk[2] = index;
          break;

        case StructuredType$1.XY_PLANE:
          ijk[0] = index % dims[0];
          ijk[1] = index / dims[0];
          break;

        case StructuredType$1.YZ_PLANE:
          ijk[1] = index % dims[1];
          ijk[2] = index / dims[1];
          break;

        case StructuredType$1.XZ_PLANE:
          ijk[0] = index % dims[0];
          ijk[2] = index / dims[0];
          break;

        case StructuredType$1.XYZ_GRID:
          ijk[0] = index % dims[0];
          ijk[1] = index / dims[0] % dims[1];
          ijk[2] = index / (dims[0] * dims[1]);
          break;

        default:
          vtkErrorMacro$g('Invalid dataDescription');
          break;
      }

      var coords = [0, 0, 0];
      publicAPI.indexToWorld(ijk, coords);
      return coords;
    }; // vtkCell *GetCell(vtkIdType cellId) VTK_OVERRIDE;
    // void GetCell(vtkIdType cellId, vtkGenericCell *cell) VTK_OVERRIDE;
    // void GetCellBounds(vtkIdType cellId, double bounds[6]) VTK_OVERRIDE;
    // virtual vtkIdType FindPoint(double x, double y, double z)
    // {
    //   return this->vtkDataSet::FindPoint(x, y, z);
    // }
    // vtkIdType FindPoint(double x[3]) VTK_OVERRIDE;
    // vtkIdType FindCell(
    //   double x[3], vtkCell *cell, vtkIdType cellId, double tol2,
    //   int& subId, double pcoords[3], double *weights) VTK_OVERRIDE;
    // vtkIdType FindCell(
    //   double x[3], vtkCell *cell, vtkGenericCell *gencell,
    //   vtkIdType cellId, double tol2, int& subId,
    //   double pcoords[3], double *weights) VTK_OVERRIDE;
    // vtkCell *FindAndGetCell(double x[3], vtkCell *cell, vtkIdType cellId,
    //                                 double tol2, int& subId, double pcoords[3],
    //                                 double *weights) VTK_OVERRIDE;
    // int GetCellType(vtkIdType cellId) VTK_OVERRIDE;
    // void GetCellPoints(vtkIdType cellId, vtkIdList *ptIds) VTK_OVERRIDE
    //   {vtkStructuredData::GetCellPoints(cellId,ptIds,this->DataDescription,
    //                                     this->GetDimensions());}
    // void GetPointCells(vtkIdType ptId, vtkIdList *cellIds) VTK_OVERRIDE
    //   {vtkStructuredData::GetPointCells(ptId,cellIds,this->GetDimensions());}
    // void ComputeBounds() VTK_OVERRIDE;
    // int GetMaxCellSize() VTK_OVERRIDE {return 8;}; //voxel is the largest


    publicAPI.getBounds = function () {
      return publicAPI.extentToBounds(model.extent);
    };

    publicAPI.extentToBounds = function (ex) {
      // prettier-ignore
      var corners = [ex[0], ex[2], ex[4], ex[1], ex[2], ex[4], ex[0], ex[3], ex[4], ex[1], ex[3], ex[4], ex[0], ex[2], ex[5], ex[1], ex[2], ex[5], ex[0], ex[3], ex[5], ex[1], ex[3], ex[5]];
      var idx = new Float64Array([corners[0], corners[1], corners[2]]);
      var vout = new Float64Array(3);
      publicAPI.indexToWorld(idx, vout);
      var bounds = [vout[0], vout[0], vout[1], vout[1], vout[2], vout[2]];

      for (var i = 3; i < 24; i += 3) {
        set$1(idx, corners[i], corners[i + 1], corners[i + 2]);
        publicAPI.indexToWorld(idx, vout);

        if (vout[0] < bounds[0]) {
          bounds[0] = vout[0];
        }

        if (vout[1] < bounds[2]) {
          bounds[2] = vout[1];
        }

        if (vout[2] < bounds[4]) {
          bounds[4] = vout[2];
        }

        if (vout[0] > bounds[1]) {
          bounds[1] = vout[0];
        }

        if (vout[1] > bounds[3]) {
          bounds[3] = vout[1];
        }

        if (vout[2] > bounds[5]) {
          bounds[5] = vout[2];
        }
      }

      return bounds;
    }; // Internal, shouldn't need to call this manually.


    publicAPI.computeTransforms = function () {
      fromTranslation(model.indexToWorld, model.origin);
      model.indexToWorld[0] = model.direction[0];
      model.indexToWorld[1] = model.direction[1];
      model.indexToWorld[2] = model.direction[2];
      model.indexToWorld[4] = model.direction[3];
      model.indexToWorld[5] = model.direction[4];
      model.indexToWorld[6] = model.direction[5];
      model.indexToWorld[8] = model.direction[6];
      model.indexToWorld[9] = model.direction[7];
      model.indexToWorld[10] = model.direction[8];
      scale$1(model.indexToWorld, model.indexToWorld, model.spacing);
      invert(model.worldToIndex, model.indexToWorld);
    }; //
    // The direction matrix is a 3x3 basis for the I, J, K axes
    // of the image. The rows of the matrix correspond to the
    // axes directions in world coordinates. Direction must
    // form an orthonormal basis, results are undefined if
    // it is not.
    //


    publicAPI.setDirection = function () {
      if (model.deleted) {
        vtkErrorMacro$g('instance deleted - cannot call any method');
        return false;
      }

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var array = args; // allow an array passed as a single arg.

      if (array.length === 1 && (Array.isArray(array[0]) || array[0].constructor === Float32Array || array[0].constructor === Float64Array)) {
        array = array[0];
      }

      if (array.length !== 9) {
        throw new RangeError('Invalid number of values for array setter');
      }

      var changeDetected = false;
      model.direction.forEach(function (item, index) {
        if (item !== array[index]) {
          if (changeDetected) {
            return;
          }

          changeDetected = true;
        }
      });

      if (changeDetected) {
        for (var i = 0; i < 9; ++i) {
          model.direction[i] = array[i];
        }

        publicAPI.modified();
      }

      return true;
    };

    publicAPI.indexToWorld = function (ain) {
      var aout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      transformMat4$1(aout, ain, model.indexToWorld);
      return aout;
    };

    publicAPI.indexToWorldVec3 = publicAPI.indexToWorld;

    publicAPI.worldToIndex = function (ain) {
      var aout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      transformMat4$1(aout, ain, model.worldToIndex);
      return aout;
    };

    publicAPI.worldToIndexVec3 = publicAPI.worldToIndex;

    publicAPI.indexToWorldBounds = function (bin) {
      var bout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var in1 = [0, 0, 0];
      var in2 = [0, 0, 0];
      vtkBoundingBox.computeCornerPoints(bin, in1, in2);
      var out1 = [0, 0, 0];
      var out2 = [0, 0, 0];
      transformMat4$1(out1, in1, model.indexToWorld);
      transformMat4$1(out2, in2, model.indexToWorld);
      return computeBoundsFromPoints(out1, out2, bout);
    };

    publicAPI.worldToIndexBounds = function (bin) {
      var bout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var in1 = [0, 0, 0];
      var in2 = [0, 0, 0];
      vtkBoundingBox.computeCornerPoints(bin, in1, in2);
      var out1 = [0, 0, 0];
      var out2 = [0, 0, 0];
      transformMat4$1(out1, in1, model.worldToIndex);
      transformMat4$1(out2, in2, model.worldToIndex);
      return computeBoundsFromPoints(out1, out2, bout);
    }; // Make sure the transform is correct


    publicAPI.onModified(publicAPI.computeTransforms);
    publicAPI.computeTransforms();

    publicAPI.getCenter = function () {
      var bounds = publicAPI.getBounds();
      var center = [];

      for (var i = 0; i < 3; i++) {
        center[i] = (bounds[2 * i + 1] + bounds[2 * i]) / 2;
      }

      return center;
    };

    publicAPI.computeHistogram = function (worldBounds) {
      var voxelFunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var bounds = [0, 0, 0, 0, 0, 0];
      publicAPI.worldToIndexBounds(worldBounds, bounds);
      var point1 = [0, 0, 0];
      var point2 = [0, 0, 0];
      vtkBoundingBox.computeCornerPoints(bounds, point1, point2);
      roundVector(point1, point1);
      roundVector(point2, point2);
      var dimensions = publicAPI.getDimensions();
      clampVector(point1, [0, 0, 0], [dimensions[0] - 1, dimensions[1] - 1, dimensions[2] - 1], point1);
      clampVector(point2, [0, 0, 0], [dimensions[0] - 1, dimensions[1] - 1, dimensions[2] - 1], point2);
      var yStride = dimensions[0];
      var zStride = dimensions[0] * dimensions[1];
      var pixels = publicAPI.getPointData().getScalars().getData();
      var maximum = -Infinity;
      var minimum = Infinity;
      var sumOfSquares = 0;
      var isum = 0;
      var inum = 0;

      for (var z = point1[2]; z <= point2[2]; z++) {
        for (var y = point1[1]; y <= point2[1]; y++) {
          var index = point1[0] + y * yStride + z * zStride;

          for (var x = point1[0]; x <= point2[0]; x++) {
            if (!voxelFunc || voxelFunc([x, y, z], bounds)) {
              var pixel = pixels[index];
              if (pixel > maximum) maximum = pixel;
              if (pixel < minimum) minimum = pixel;
              sumOfSquares += pixel * pixel;
              isum += pixel;
              inum += 1;
            }

            ++index;
          }
        }
      }

      var average = inum > 0 ? isum / inum : 0;
      var variance = inum ? Math.abs(sumOfSquares / inum - average * average) : 0;
      var sigma = Math.sqrt(variance);
      return {
        minimum: minimum,
        maximum: maximum,
        average: average,
        variance: variance,
        sigma: sigma,
        count: inum
      };
    }; // TODO: use the unimplemented `vtkDataSetAttributes` for scalar length, that is currently also a TODO (GetNumberOfComponents).
    // Scalar data could be tuples for color information?


    publicAPI.computeIncrements = function (extent) {
      var numberOfComponents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var increments = [];
      var incr = numberOfComponents; // Calculate array increment offsets
      // similar to c++ vtkImageData::ComputeIncrements

      for (var idx = 0; idx < 3; ++idx) {
        increments[idx] = incr;
        incr *= extent[idx * 2 + 1] - extent[idx * 2] + 1;
      }

      return increments;
    };
    /**
     * @param {Number[]} index the localized `[i,j,k]` pixel array position. Float values will be rounded.
     * @return {Number} the corresponding flattened index in the scalar array
     */


    publicAPI.computeOffsetIndex = function (_ref) {
      var _ref2 = _slicedToArray(_ref, 3),
          i = _ref2[0],
          j = _ref2[1],
          k = _ref2[2];

      var extent = publicAPI.getExtent();
      var numberOfComponents = publicAPI.getPointData().getScalars().getNumberOfComponents();
      var increments = publicAPI.computeIncrements(extent, numberOfComponents); // Use the array increments to find the pixel index
      // similar to c++ vtkImageData::GetArrayPointer
      // Math.floor to catch "practically 0" e^-15 scenarios.

      return Math.floor((Math.round(i) - extent[0]) * increments[0] + (Math.round(j) - extent[2]) * increments[1] + (Math.round(k) - extent[4]) * increments[2]);
    };
    /**
     * @param {Number[]} xyz the [x,y,z] Array in world coordinates
     * @return {Number|NaN} the corresponding pixel's index in the scalar array
     */


    publicAPI.getOffsetIndexFromWorld = function (xyz) {
      var extent = publicAPI.getExtent();
      var index = publicAPI.worldToIndex(xyz); // Confirm indexed i,j,k coords are within the bounds of the volume

      for (var idx = 0; idx < 3; ++idx) {
        if (index[idx] < extent[idx * 2] || index[idx] > extent[idx * 2 + 1]) {
          vtkErrorMacro$g("GetScalarPointer: Pixel ".concat(index, " is not in memory. Current extent = ").concat(extent));
          return NaN;
        }
      } // Assumed the index here is within 0 <-> scalarData.length, but doesn't hurt to check upstream


      return publicAPI.computeOffsetIndex(index);
    };
    /**
     * @param {Number[]} xyz the [x,y,z] Array in world coordinates
     * @param {Number?} comp the scalar component index for multi-component scalars
     * @return {Number|NaN} the corresponding pixel's scalar value
     */


    publicAPI.getScalarValueFromWorld = function (xyz) {
      var comp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var numberOfComponents = publicAPI.getPointData().getScalars().getNumberOfComponents();

      if (comp < 0 || comp >= numberOfComponents) {
        vtkErrorMacro$g("GetScalarPointer: Scalar Component ".concat(comp, " is not within bounds. Current Scalar numberOfComponents: ").concat(numberOfComponents));
        return NaN;
      }

      var offsetIndex = publicAPI.getOffsetIndexFromWorld(xyz);

      if (Number.isNaN(offsetIndex)) {
        // VTK Error Macro will have been tripped already, no need to do it again,
        return offsetIndex;
      }

      return publicAPI.getPointData().getScalars().getComponent(offsetIndex, comp);
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$11 = {
    direction: null,
    // a mat3
    indexToWorld: null,
    // a mat4
    worldToIndex: null,
    // a mat4
    spacing: [1.0, 1.0, 1.0],
    origin: [0.0, 0.0, 0.0],
    extent: [0, -1, 0, -1, 0, -1],
    dataDescription: StructuredType$1.EMPTY
  }; // ----------------------------------------------------------------------------

  function extend$13(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$11, initialValues); // Inheritance

    vtkDataSet$1.extend(publicAPI, model, initialValues);

    if (!model.direction) {
      model.direction = identity$1(new Float64Array(9));
    } else if (Array.isArray(model.direction)) {
      model.direction = new Float64Array(model.direction.slice(0, 9));
    }

    model.indexToWorld = new Float64Array(16);
    model.worldToIndex = new Float64Array(16); // Set/Get methods

    macro.get(publicAPI, model, ['direction', 'indexToWorld', 'worldToIndex']);
    macro.setGetArray(publicAPI, model, ['origin', 'spacing'], 3);
    macro.getArray(publicAPI, model, ['extent'], 6); // Object specific methods

    vtkImageData(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$$ = macro.newInstance(extend$13, 'vtkImageData'); // ----------------------------------------------------------------------------

  var vtkImageData$1 = {
    newInstance: newInstance$$,
    extend: extend$13
  };

  var VectorMode$2 = {
    MAGNITUDE: 0,
    COMPONENT: 1,
    RGBCOLORS: 2
  };
  var ScalarMappingTarget$1 = {
    LUMINANCE: 1,
    LUMINANCE_ALPHA: 2,
    RGB: 3,
    RGBA: 4
  };
  var vtkScalarsToColors$2 = {
    VectorMode: VectorMode$2,
    ScalarMappingTarget: ScalarMappingTarget$1
  };

  var ColorMode$3 = {
    DEFAULT: 0,
    MAP_SCALARS: 1,
    DIRECT_SCALARS: 2
  };
  var ScalarMode$5 = {
    DEFAULT: 0,
    USE_POINT_DATA: 1,
    USE_CELL_DATA: 2,
    USE_POINT_FIELD_DATA: 3,
    USE_CELL_FIELD_DATA: 4,
    USE_FIELD_DATA: 5
  };
  var GetArray$2 = {
    BY_ID: 0,
    BY_NAME: 1
  };
  var Constants$6 = {
    ColorMode: ColorMode$3,
    GetArray: GetArray$2,
    ScalarMode: ScalarMode$5
  };

  function ownKeys$f(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$f(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$f(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$f(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  var ScalarMappingTarget = vtkScalarsToColors$2.ScalarMappingTarget,
      VectorMode$1 = vtkScalarsToColors$2.VectorMode;
  var VtkDataTypes$2 = vtkDataArray$1.VtkDataTypes;
  var ColorMode$2 = Constants$6.ColorMode;
  var vtkErrorMacro$f = macro.vtkErrorMacro; // ----------------------------------------------------------------------------
  // Global methods
  // ----------------------------------------------------------------------------
  // Add module-level functions or api that you want to expose statically via
  // the next section...
  // ----------------------------------------------------------------------------
  // Static API
  // ----------------------------------------------------------------------------

  function intColorToUChar(c) {
    return c;
  }

  function floatColorToUChar(c) {
    return Math.floor(c * 255.0 + 0.5);
  } // ----------------------------------------------------------------------------
  // vtkScalarsToColors methods
  // ----------------------------------------------------------------------------


  function vtkScalarsToColors(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkScalarsToColors');

    publicAPI.setVectorModeToMagnitude = function () {
      return publicAPI.setVectorMode(VectorMode$1.MAGNITUDE);
    };

    publicAPI.setVectorModeToComponent = function () {
      return publicAPI.setVectorMode(VectorMode$1.COMPONENT);
    };

    publicAPI.setVectorModeToRGBColors = function () {
      return publicAPI.setVectorMode(VectorMode$1.RGBCOLORS);
    };

    publicAPI.build = function () {};

    publicAPI.isOpaque = function () {
      return true;
    }; //----------------------------------------------------------------------------


    publicAPI.setAnnotations = function (values, annotations) {
      if (values && !annotations || !values && annotations) {
        return;
      }

      if (values && annotations && values.length !== annotations.length) {
        vtkErrorMacro$f('Values and annotations do not have the same number of tuples so ignoring');
        return;
      }

      model.annotationArray = [];

      if (annotations && values) {
        var num = annotations.length;

        for (var i = 0; i < num; i++) {
          model.annotationArray.push({
            value: values[i],
            annotation: String(annotations[i])
          });
        }
      }

      publicAPI.updateAnnotatedValueMap();
      publicAPI.modified();
    }; //----------------------------------------------------------------------------


    publicAPI.setAnnotation = function (value, annotation) {
      var i = publicAPI.checkForAnnotatedValue(value);
      var modified = false;

      if (i >= 0) {
        if (model.annotationArray[i].annotation !== annotation) {
          model.annotationArray[i].annotation = annotation;
          modified = true;
        }
      } else {
        model.annotationArray.push({
          value: value,
          annotation: annotation
        });
        i = model.annotationArray.length - 1;
        modified = true;
      }

      if (modified) {
        publicAPI.updateAnnotatedValueMap();
        publicAPI.modified();
      }

      return i;
    }; //----------------------------------------------------------------------------


    publicAPI.getNumberOfAnnotatedValues = function () {
      return model.annotationArray.length;
    }; //----------------------------------------------------------------------------


    publicAPI.getAnnotatedValue = function (idx) {
      if (idx < 0 || idx >= model.annotationArray.length) {
        return null;
      }

      return model.annotationArray[idx].value;
    }; //----------------------------------------------------------------------------


    publicAPI.getAnnotation = function (idx) {
      if (model.annotationArray[idx] === undefined) {
        return null;
      }

      return model.annotationArray[idx].annotation;
    }; //----------------------------------------------------------------------------


    publicAPI.getAnnotatedValueIndex = function (val) {
      return model.annotationArray.length ? publicAPI.checkForAnnotatedValue(val) : -1;
    }; //----------------------------------------------------------------------------


    publicAPI.removeAnnotation = function (value) {
      var i = publicAPI.checkForAnnotatedValue(value);
      var needToRemove = i >= 0;

      if (needToRemove) {
        model.annotationArray.splice(i, 1);
        publicAPI.updateAnnotatedValueMap();
        publicAPI.modified();
      }

      return needToRemove;
    }; //----------------------------------------------------------------------------


    publicAPI.resetAnnotations = function () {
      model.annotationArray = [];
      model.annotatedValueMap = [];
      publicAPI.modified();
    }; //----------------------------------------------------------------------------


    publicAPI.getAnnotationColor = function (val, rgba) {
      if (model.indexedLookup) {
        var i = publicAPI.getAnnotatedValueIndex(val);
        publicAPI.getIndexedColor(i, rgba);
      } else {
        publicAPI.getColor(parseFloat(val), rgba);
        rgba[3] = 1.0;
      }
    }; //----------------------------------------------------------------------------


    publicAPI.checkForAnnotatedValue = function (value) {
      return publicAPI.getAnnotatedValueIndexInternal(value);
    }; //----------------------------------------------------------------------------
    // An unsafe version of vtkScalarsToColors::CheckForAnnotatedValue for
    // internal use (no pointer checks performed)


    publicAPI.getAnnotatedValueIndexInternal = function (value) {
      if (model.annotatedValueMap[value] !== undefined) {
        var na = model.annotationArray.length;
        return model.annotatedValueMap[value] % na;
      } // Treat as a NaN


      return -1;
    }; //----------------------------------------------------------------------------


    publicAPI.getIndexedColor = function (val, rgba) {
      rgba[0] = 0.0;
      rgba[1] = 0.0;
      rgba[2] = 0.0;
      rgba[3] = 0.0;
    }; //----------------------------------------------------------------------------


    publicAPI.updateAnnotatedValueMap = function () {
      model.annotatedValueMap = [];
      var na = model.annotationArray.length;

      for (var i = 0; i < na; i++) {
        model.annotatedValueMap[model.annotationArray[i].value] = i;
      }
    }; // Description:
    // Internal methods that map a data array into a 4-component,
    // unsigned char RGBA array. The color mode determines the behavior
    // of mapping. If ColorMode.DEFAULT is set, then unsigned char
    // data arrays are treated as colors (and converted to RGBA if
    // necessary); If ColorMode.DIRECT_SCALARS is set, then all arrays
    // are treated as colors (integer types are clamped in the range 0-255,
    // floating point arrays are clamped in the range 0.0-1.0. Note 'char' does
    // not have enough values to represent a color so mapping this type is
    // considered an error);
    // otherwise, the data is mapped through this instance
    // of ScalarsToColors. The component argument is used for data
    // arrays with more than one component; it indicates which component
    // to use to do the blending.  When the component argument is -1,
    // then the this object uses its own selected technique to change a
    // vector into a scalar to map.


    publicAPI.mapScalars = function (scalars, colorMode, componentIn) {
      var numberOfComponents = scalars.getNumberOfComponents();
      var newColors = null; // map scalars through lookup table only if needed

      if (colorMode === ColorMode$2.DEFAULT && scalars.getDataType() === VtkDataTypes$2.UNSIGNED_CHAR || colorMode === ColorMode$2.DIRECT_SCALARS && scalars) {
        newColors = publicAPI.convertToRGBA(scalars, numberOfComponents, scalars.getNumberOfTuples());
      } else {
        var newscalars = {
          type: 'vtkDataArray',
          name: 'temp',
          numberOfComponents: 4,
          dataType: VtkDataTypes$2.UNSIGNED_CHAR
        };
        var s = macro.newTypedArray(newscalars.dataType, 4 * scalars.getNumberOfTuples());
        newscalars.values = s;
        newscalars.size = s.length;
        newColors = vtkDataArray$1.newInstance(newscalars);
        var component = componentIn; // If mapper did not specify a component, use the VectorMode

        if (component < 0 && numberOfComponents > 1) {
          publicAPI.mapVectorsThroughTable(scalars, newColors, ScalarMappingTarget.RGBA, -1, -1);
        } else {
          if (component < 0) {
            component = 0;
          }

          if (component >= numberOfComponents) {
            component = numberOfComponents - 1;
          } // Map the scalars to colors


          publicAPI.mapScalarsThroughTable(scalars, newColors, ScalarMappingTarget.RGBA, component);
        }
      }

      return newColors;
    };

    publicAPI.mapVectorsToMagnitude = function (input, output, compsToUse) {
      var length = input.getNumberOfTuples();
      var inIncr = input.getNumberOfComponents();
      var outputV = output.getData();
      var inputV = input.getData();

      for (var i = 0; i < length; i++) {
        var sum = 0.0;

        for (var j = 0; j < compsToUse; j++) {
          sum += inputV[i * inIncr + j] * inputV[i * inIncr + j];
        }

        outputV[i] = Math.sqrt(sum);
      }
    }; //----------------------------------------------------------------------------
    // Map a set of vector values through the table


    publicAPI.mapVectorsThroughTable = function (input, output, outputFormat, vectorComponentIn, vectorSizeIn) {
      var vectorMode = publicAPI.getVectorMode();
      var vectorSize = vectorSizeIn;
      var vectorComponent = vectorComponentIn;
      var inComponents = input.getNumberOfComponents();

      if (vectorMode === VectorMode$1.COMPONENT) {
        // make sure vectorComponent is within allowed range
        if (vectorComponent === -1) {
          // if set to -1, use default value provided by table
          vectorComponent = publicAPI.getVectorComponent();
        }

        if (vectorComponent < 0) {
          vectorComponent = 0;
        }

        if (vectorComponent >= inComponents) {
          vectorComponent = inComponents - 1;
        }
      } else {
        // make sure vectorSize is within allowed range
        if (vectorSize === -1) {
          // if set to -1, use default value provided by table
          vectorSize = publicAPI.getVectorSize();
        }

        if (vectorSize <= 0) {
          vectorComponent = 0;
          vectorSize = inComponents;
        } else {
          if (vectorComponent < 0) {
            vectorComponent = 0;
          }

          if (vectorComponent >= inComponents) {
            vectorComponent = inComponents - 1;
          }

          if (vectorComponent + vectorSize > inComponents) {
            vectorSize = inComponents - vectorComponent;
          }
        }

        if (vectorMode === VectorMode$1.MAGNITUDE && (inComponents === 1 || vectorSize === 1)) {
          vectorMode = VectorMode$1.COMPONENT;
        }
      } // increment input pointer to the first component to map


      var inputOffset = 0;

      if (vectorComponent > 0) {
        inputOffset = vectorComponent;
      } // map according to the current vector mode


      switch (vectorMode) {
        case VectorMode$1.COMPONENT:
          {
            publicAPI.mapScalarsThroughTable(input, output, outputFormat, inputOffset);
            break;
          }

        default:
        case VectorMode$1.MAGNITUDE:
          {
            var magValues = vtkDataArray$1.newInstance({
              numberOfComponents: 1,
              values: new Float32Array(input.getNumberOfTuples())
            });
            publicAPI.mapVectorsToMagnitude(input, magValues, vectorSize);
            publicAPI.mapScalarsThroughTable(magValues, output, outputFormat, 0);
            break;
          }

        case VectorMode$1.RGBCOLORS:
          {
            // publicAPI.mapColorsToColors(
            //   input, output, inComponents, vectorSize,
            //   outputFormat);
            break;
          }
      }
    };

    publicAPI.luminanceToRGBA = function (newColors, colors, alpha, convtFun) {
      var a = convtFun(alpha);
      var values = colors.getData();
      var newValues = newColors.getData();
      var size = values.length;
      var component = 0;
      var tuple = 1;
      var count = 0;

      for (var i = component; i < size; i += tuple) {
        var l = convtFun(values[i]);
        newValues[count * 4] = l;
        newValues[count * 4 + 1] = l;
        newValues[count * 4 + 2] = l;
        newValues[count * 4 + 3] = a;
        count++;
      }
    };

    publicAPI.luminanceAlphaToRGBA = function (newColors, colors, alpha, convtFun) {
      var values = colors.getData();
      var newValues = newColors.getData();
      var size = values.length;
      var component = 0;
      var tuple = 2;
      var count = 0;

      for (var i = component; i < size; i += tuple) {
        var l = convtFun(values[i]);
        newValues[count] = l;
        newValues[count + 1] = l;
        newValues[count + 2] = l;
        newValues[count + 3] = convtFun(values[i + 1]) * alpha;
        count += 4;
      }
    };

    publicAPI.rGBToRGBA = function (newColors, colors, alpha, convtFun) {
      var a = floatColorToUChar(alpha);
      var values = colors.getData();
      var newValues = newColors.getData();
      var size = values.length;
      var component = 0;
      var tuple = 3;
      var count = 0;

      for (var i = component; i < size; i += tuple) {
        newValues[count * 4] = convtFun(values[i]);
        newValues[count * 4 + 1] = convtFun(values[i + 1]);
        newValues[count * 4 + 2] = convtFun(values[i + 2]);
        newValues[count * 4 + 3] = a;
        count++;
      }
    };

    publicAPI.rGBAToRGBA = function (newColors, colors, alpha, convtFun) {
      var values = colors.getData();
      var newValues = newColors.getData();
      var size = values.length;
      var component = 0;
      var tuple = 4;
      var count = 0;

      for (var i = component; i < size; i += tuple) {
        newValues[count * 4] = convtFun(values[i]);
        newValues[count * 4 + 1] = convtFun(values[i + 1]);
        newValues[count * 4 + 2] = convtFun(values[i + 2]);
        newValues[count * 4 + 3] = convtFun(values[i + 3]) * alpha;
        count++;
      }
    }; //----------------------------------------------------------------------------


    publicAPI.convertToRGBA = function (colors, numComp, numTuples) {
      var alpha = model.alpha;

      if (numComp === 4 && alpha >= 1.0 && colors.getDataType() === VtkDataTypes$2.UNSIGNED_CHAR) {
        return colors;
      }

      var newColors = vtkDataArray$1.newInstance({
        numberOfComponents: 4,
        empty: true,
        size: 4 * numTuples,
        dataType: VtkDataTypes$2.UNSIGNED_CHAR
      });

      if (numTuples <= 0) {
        return newColors;
      }

      alpha = alpha > 0 ? alpha : 0;
      alpha = alpha < 1 ? alpha : 1;
      var convtFun = intColorToUChar;

      if (colors.getDataType() === VtkDataTypes$2.FLOAT || colors.getDataType() === VtkDataTypes$2.DOUBLE) {
        convtFun = floatColorToUChar;
      }

      switch (numComp) {
        case 1:
          publicAPI.luminanceToRGBA(newColors, colors, alpha, convtFun);
          break;

        case 2:
          publicAPI.luminanceAlphaToRGBA(newColors, colors, convtFun);
          break;

        case 3:
          publicAPI.rGBToRGBA(newColors, colors, alpha, convtFun);
          break;

        case 4:
          publicAPI.rGBAToRGBA(newColors, colors, alpha, convtFun);
          break;

        default:
          vtkErrorMacro$f('Cannot convert colors');
          return null;
      }

      return newColors;
    };

    publicAPI.usingLogScale = function () {
      return false;
    };

    publicAPI.getNumberOfAvailableColors = function () {
      return 256 * 256 * 256;
    };

    publicAPI.setRange = function (min, max) {
      return publicAPI.setMappingRange(min, max);
    };

    publicAPI.getRange = function (min, max) {
      return publicAPI.getMappingRange();
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$10 = {
    alpha: 1.0,
    vectorComponent: 0,
    vectorSize: -1,
    vectorMode: VectorMode$1.COMPONENT,
    mappingRange: null,
    annotationArray: null,
    annotatedValueMap: null,
    indexedLookup: false
  }; // ----------------------------------------------------------------------------

  function extend$12(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$10, initialValues); // Object methods

    macro.obj(publicAPI, model);
    model.mappingRange = [0, 255];
    model.annotationArray = [];
    model.annotatedValueMap = []; // Create get-set macros

    macro.setGet(publicAPI, model, ['vectorSize', 'vectorComponent', 'vectorMode', 'alpha', 'indexedLookup']); // Create set macros for array (needs to know size)

    macro.setArray(publicAPI, model, ['mappingRange'], 2); // Create get macros for array

    macro.getArray(publicAPI, model, ['mappingRange']); // For more macro methods, see "Sources/macros.js"
    // Object specific methods

    vtkScalarsToColors(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$_ = macro.newInstance(extend$12, 'vtkScalarsToColors'); // ----------------------------------------------------------------------------

  var vtkScalarsToColors$1 = _objectSpread$f({
    newInstance: newInstance$_,
    extend: extend$12
  }, vtkScalarsToColors$2);

  var vtkErrorMacro$e = macro.vtkErrorMacro; // ----------------------------------------------------------------------------
  // Global methods
  // ----------------------------------------------------------------------------
  // Add module-level functions or api that you want to expose statically via
  // the next section...
  // ----------------------------------------------------------------------------
  // Static API
  // ----------------------------------------------------------------------------

  var BELOW_RANGE_COLOR_INDEX = 0;
  var ABOVE_RANGE_COLOR_INDEX = 1;
  var NAN_COLOR_INDEX = 2; // ----------------------------------------------------------------------------
  // vtkMyClass methods
  // ----------------------------------------------------------------------------

  function vtkLookupTable(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkLookupTable'); //----------------------------------------------------------------------------
    // Description:
    // Return true if all of the values defining the mapping have an opacity
    // equal to 1. Default implementation return true.

    publicAPI.isOpaque = function () {
      if (model.opaqueFlagBuildTime.getMTime() < publicAPI.getMTime()) {
        var opaque = true;

        if (model.nanColor[3] < 1.0) {
          opaque = 0;
        }

        if (model.useBelowRangeColor && model.belowRangeColor[3] < 1.0) {
          opaque = 0;
        }

        if (model.useAboveRangeColor && model.aboveRangeColor[3] < 1.0) {
          opaque = 0;
        }

        for (var i = 3; i < model.table.length && opaque; i += 4) {
          if (model.table[i] < 255) {
            opaque = false;
          }
        }

        model.opaqueFlag = opaque;
        model.opaqueFlagBuildTime.modified();
      }

      return model.opaqueFlag;
    };

    publicAPI.usingLogScale = function () {
      return false;
    }; //----------------------------------------------------------------------------


    publicAPI.getNumberOfAvailableColors = function () {
      return model.table.length;
    }; //----------------------------------------------------------------------------
    // Apply shift/scale to the scalar value v and return the index.


    publicAPI.linearIndexLookup = function (v, p) {
      var dIndex = 0;

      if (v < p.range[0]) {
        dIndex = p.maxIndex + BELOW_RANGE_COLOR_INDEX + 1.5;
      } else if (v > p.range[1]) {
        dIndex = p.maxIndex + ABOVE_RANGE_COLOR_INDEX + 1.5;
      } else {
        dIndex = (v + p.shift) * p.scale; // This conditional is needed because when v is very close to
        // p.Range[1], it may map above p.MaxIndex in the linear mapping
        // above.

        dIndex = dIndex < p.maxIndex ? dIndex : p.maxIndex;
      }

      return Math.floor(dIndex);
    };

    publicAPI.linearLookup = function (v, table, p) {
      var index = 0;

      if (isNan(v)) {
        index = Math.floor(p.maxIndex + 1.5 + NAN_COLOR_INDEX);
      } else {
        index = publicAPI.linearIndexLookup(v, p);
      }

      var offset = 4 * index;
      return [table[offset], table[offset + 1], table[offset + 2], table[offset + 3]];
    };

    publicAPI.indexedLookupFunction = function (v, table, p) {
      var index = publicAPI.getAnnotatedValueIndexInternal(v);

      if (index === -1) {
        index = model.numberOfColors + NAN_COLOR_INDEX;
      }

      var offset = 4 * index;
      return [table[offset], table[offset + 1], table[offset + 2], table[offset + 3]];
    }; //----------------------------------------------------------------------------


    publicAPI.lookupShiftAndScale = function (range, p) {
      p.shift = -range[0];
      p.scale = Number.MAX_VALUE;

      if (range[1] > range[0]) {
        p.scale = (p.maxIndex + 1) / (range[1] - range[0]);
      }
    }; // Public API methods


    publicAPI.mapScalarsThroughTable = function (input, output, outFormat, inputOffset) {
      var lookupFunc = publicAPI.linearLookup;

      if (model.indexedLookup) {
        lookupFunc = publicAPI.indexedLookupFunction;
      }

      var trange = publicAPI.getMappingRange();
      var p = {
        maxIndex: publicAPI.getNumberOfColors() - 1,
        range: trange,
        shift: 0.0,
        scale: 0.0
      };
      publicAPI.lookupShiftAndScale(trange, p);
      var alpha = publicAPI.getAlpha();
      var length = input.getNumberOfTuples();
      var inIncr = input.getNumberOfComponents();
      var outputV = output.getData();
      var inputV = input.getData();

      if (alpha >= 1.0) {
        if (outFormat === ScalarMappingTarget$1.RGBA) {
          for (var i = 0; i < length; i++) {
            var cptr = lookupFunc(inputV[i * inIncr + inputOffset], model.table, p);
            outputV[i * 4] = cptr[0];
            outputV[i * 4 + 1] = cptr[1];
            outputV[i * 4 + 2] = cptr[2];
            outputV[i * 4 + 3] = cptr[3];
          }
        }
      } else {
        /* eslint-disable no-lonely-if */
        if (outFormat === ScalarMappingTarget$1.RGBA) {
          for (var _i = 0; _i < length; _i++) {
            var _cptr = lookupFunc(inputV[_i * inIncr + inputOffset], model.table, p);

            outputV[_i * 4] = _cptr[0];
            outputV[_i * 4 + 1] = _cptr[1];
            outputV[_i * 4 + 2] = _cptr[2];
            outputV[_i * 4 + 3] = Math.floor(_cptr[3] * alpha + 0.5);
          }
        }
      } // alpha blending

    };

    publicAPI.forceBuild = function () {
      var hinc = 0.0;
      var sinc = 0.0;
      var vinc = 0.0;
      var ainc = 0.0;
      var maxIndex = model.numberOfColors - 1;

      if (maxIndex) {
        hinc = (model.hueRange[1] - model.hueRange[0]) / maxIndex;
        sinc = (model.saturationRange[1] - model.saturationRange[0]) / maxIndex;
        vinc = (model.valueRange[1] - model.valueRange[0]) / maxIndex;
        ainc = (model.alphaRange[1] - model.alphaRange[0]) / maxIndex;
      }

      var hsv = [];
      var rgba = [];

      for (var i = 0; i <= maxIndex; i++) {
        hsv[0] = model.hueRange[0] + i * hinc;
        hsv[1] = model.saturationRange[0] + i * sinc;
        hsv[2] = model.valueRange[0] + i * vinc;
        hsv2rgb(hsv, rgba);
        rgba[3] = model.alphaRange[0] + i * ainc; //  case VTK_RAMP_LINEAR:

        model.table[i * 4] = rgba[0] * 255.0 + 0.5;
        model.table[i * 4 + 1] = rgba[1] * 255.0 + 0.5;
        model.table[i * 4 + 2] = rgba[2] * 255.0 + 0.5;
        model.table[i * 4 + 3] = rgba[3] * 255.0 + 0.5;
      }

      publicAPI.buildSpecialColors();
      model.buildTime.modified();
    };

    publicAPI.setTable = function (table) {
      if (table.getNumberOfComponents() !== 4) {
        vtkErrorMacro$e('Expected 4 components for RGBA colors');
        return;
      }

      if (table.getDataType() !== VtkDataTypes$3.UNSIGNED_CHAR) {
        vtkErrorMacro$e('Expected unsigned char values for RGBA colors');
        return;
      }

      model.numberOfColors = table.getNumberOfTuples();
      var data = table.getData();

      for (var i = 0; i < data.length; i++) {
        model.table[i] = data[i];
      }

      publicAPI.buildSpecialColors();
      model.insertTime.modified();
      publicAPI.modified();
    };

    publicAPI.buildSpecialColors = function () {
      // Add "special" colors (NaN, below range, above range) to table here.
      var numberOfColors = model.numberOfColors;
      var tptr = model.table;
      var base = (numberOfColors + BELOW_RANGE_COLOR_INDEX) * 4; // Below range color

      if (model.useBelowRangeColor || numberOfColors === 0) {
        tptr[base] = model.belowRangeColor[0] * 255.0 + 0.5;
        tptr[base + 1] = model.belowRangeColor[1] * 255.0 + 0.5;
        tptr[base + 2] = model.belowRangeColor[2] * 255.0 + 0.5;
        tptr[base + 3] = model.belowRangeColor[3] * 255.0 + 0.5;
      } else {
        // Duplicate the first color in the table.
        tptr[base] = tptr[0];
        tptr[base + 1] = tptr[1];
        tptr[base + 2] = tptr[2];
        tptr[base + 3] = tptr[3];
      } // Above range color


      base = (numberOfColors + ABOVE_RANGE_COLOR_INDEX) * 4;

      if (model.useAboveRangeColor || numberOfColors === 0) {
        tptr[base] = model.aboveRangeColor[0] * 255.0 + 0.5;
        tptr[base + 1] = model.aboveRangeColor[1] * 255.0 + 0.5;
        tptr[base + 2] = model.aboveRangeColor[2] * 255.0 + 0.5;
        tptr[base + 3] = model.aboveRangeColor[3] * 255.0 + 0.5;
      } else {
        // Duplicate the last color in the table.
        tptr[base] = tptr[4 * (numberOfColors - 1) + 0];
        tptr[base + 1] = tptr[4 * (numberOfColors - 1) + 1];
        tptr[base + 2] = tptr[4 * (numberOfColors - 1) + 2];
        tptr[base + 3] = tptr[4 * (numberOfColors - 1) + 3];
      } // Always use NanColor


      base = (numberOfColors + NAN_COLOR_INDEX) * 4;
      tptr[base] = model.nanColor[0] * 255.0 + 0.5;
      tptr[base + 1] = model.nanColor[1] * 255.0 + 0.5;
      tptr[base + 2] = model.nanColor[2] * 255.0 + 0.5;
      tptr[base + 3] = model.nanColor[3] * 255.0 + 0.5;
    };

    publicAPI.build = function () {
      if (model.table.length < 1 || publicAPI.getMTime() > model.buildTime.getMTime() && model.insertTime.getMTime() <= model.buildTime.getMTime()) {
        publicAPI.forceBuild();
      }
    };

    if (model.table.length > 0) {
      // ensure insertTime is more recently modified than buildTime if
      // a table is provided via the constructor
      model.insertTime.modified();
    }
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$$ = {
    numberOfColors: 256,
    // table: null,
    hueRange: [0.0, 0.66667],
    saturationRange: [1.0, 1.0],
    valueRange: [1.0, 1.0],
    alphaRange: [1.0, 1.0],
    nanColor: [0.5, 0.0, 0.0, 1.0],
    belowRangeColor: [0.0, 0.0, 0.0, 1.0],
    aboveRangeColor: [1.0, 1.0, 1.0, 1.0],
    useAboveRangeColor: false,
    useBelowRangeColor: false,
    alpha: 1.0 // buildTime: null,
    // opaqueFlagBuildTime: null,
    // insertTime: null,

  }; // ----------------------------------------------------------------------------

  function extend$11(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$$, initialValues); // Inheritance

    vtkScalarsToColors$1.extend(publicAPI, model, initialValues); // Internal objects initialization

    if (!model.table) {
      model.table = [];
    }

    model.buildTime = {};
    macro.obj(model.buildTime);
    model.opaqueFlagBuildTime = {};
    macro.obj(model.opaqueFlagBuildTime, {
      mtime: 0
    });
    model.insertTime = {};
    macro.obj(model.insertTime, {
      mtime: 0
    }); // Create get-only macros

    macro.get(publicAPI, model, ['buildTime']); // Create get-set macros

    macro.setGet(publicAPI, model, ['numberOfColors', 'useAboveRangeColor', 'useBelowRangeColor']); // Create set macros for array (needs to know size)

    macro.setArray(publicAPI, model, ['alphaRange', 'hueRange', 'saturationRange', 'valueRange'], 2);
    macro.setArray(publicAPI, model, ['nanColor', 'belowRangeColor', 'aboveRangeColor'], 4); // Create get macros for array

    macro.getArray(publicAPI, model, ['hueRange', 'saturationRange', 'valueRange', 'alphaRange', 'nanColor', 'belowRangeColor', 'aboveRangeColor']); // For more macro methods, see "Sources/macros.js"
    // Object specific methods

    vtkLookupTable(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$Z = macro.newInstance(extend$11, 'vtkLookupTable'); // ----------------------------------------------------------------------------

  var vtkLookupTable$1 = {
    newInstance: newInstance$Z,
    extend: extend$11
  };

  var resolveCoincidentTopologyPolygonOffsetFaces = 1;
  var resolveCoincidentTopology = 0;
  var RESOLVE_COINCIDENT_TOPOLOGY_MODE = ['VTK_RESOLVE_OFF', 'VTK_RESOLVE_POLYGON_OFFSET'];
  function getResolveCoincidentTopologyPolygonOffsetFaces() {
    return resolveCoincidentTopologyPolygonOffsetFaces;
  }
  function setResolveCoincidentTopologyPolygonOffsetFaces(value) {
    resolveCoincidentTopologyPolygonOffsetFaces = value;
  }
  function getResolveCoincidentTopology() {
    return resolveCoincidentTopology;
  }
  function setResolveCoincidentTopology() {
    var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    resolveCoincidentTopology = mode;
  }
  function setResolveCoincidentTopologyToDefault() {
    setResolveCoincidentTopology(0); // VTK_RESOLVE_OFF
  }
  function setResolveCoincidentTopologyToOff() {
    setResolveCoincidentTopology(0); // VTK_RESOLVE_OFF
  }
  function setResolveCoincidentTopologyToPolygonOffset() {
    setResolveCoincidentTopology(1); // VTK_RESOLVE_POLYGON_OFFSET
  }
  function getResolveCoincidentTopologyAsString() {
    return RESOLVE_COINCIDENT_TOPOLOGY_MODE[resolveCoincidentTopology];
  }
  var otherStaticMethods$1 = {
    getResolveCoincidentTopologyAsString: getResolveCoincidentTopologyAsString,
    getResolveCoincidentTopologyPolygonOffsetFaces: getResolveCoincidentTopologyPolygonOffsetFaces,
    getResolveCoincidentTopology: getResolveCoincidentTopology,
    setResolveCoincidentTopology: setResolveCoincidentTopology,
    setResolveCoincidentTopologyPolygonOffsetFaces: setResolveCoincidentTopologyPolygonOffsetFaces,
    setResolveCoincidentTopologyToDefault: setResolveCoincidentTopologyToDefault,
    setResolveCoincidentTopologyToOff: setResolveCoincidentTopologyToOff,
    setResolveCoincidentTopologyToPolygonOffset: setResolveCoincidentTopologyToPolygonOffset
  };

  /* eslint-disable arrow-body-style */

  function addCoincidentTopologyMethods(publicAPI, model, nameList) {
    nameList.forEach(function (item) {
      publicAPI["get".concat(item.method)] = function () {
        return model[item.key];
      };

      publicAPI["set".concat(item.method)] = function (factor, offset) {
        model[item.key] = {
          factor: factor,
          offset: offset
        };
      };
    });
  }

  var CATEGORIES = ['Polygon', 'Line', 'Point']; // CoincidentTopology static methods ------------------------------------------

  var staticOffsetModel = {
    Polygon: {
      factor: 2,
      offset: 0
    },
    Line: {
      factor: 1,
      offset: -1
    },
    Point: {
      factor: 0,
      offset: -2
    }
  };
  var staticOffsetAPI$1 = {};
  addCoincidentTopologyMethods(staticOffsetAPI$1, staticOffsetModel, CATEGORIES.map(function (key) {
    return {
      key: key,
      method: "ResolveCoincidentTopology".concat(key, "OffsetParameters")
    };
  }));

  function implementCoincidentTopologyMethods(publicAPI, model) {
    if (model.resolveCoincidentTopology === undefined) {
      model.resolveCoincidentTopology = false;
    }

    macro.setGet(publicAPI, model, ['resolveCoincidentTopology']); // Relative methods

    model.topologyOffset = {
      Polygon: {
        factor: 0,
        offset: 0
      },
      Line: {
        factor: 0,
        offset: 0
      },
      Point: {
        factor: 0,
        offset: 0
      }
    }; // Add Static methods to our instance

    Object.keys(otherStaticMethods$1).forEach(function (methodName) {
      publicAPI[methodName] = otherStaticMethods$1[methodName];
    });
    Object.keys(staticOffsetAPI$1).forEach(function (methodName) {
      publicAPI[methodName] = staticOffsetAPI$1[methodName];
    });
    addCoincidentTopologyMethods(publicAPI, model.topologyOffset, CATEGORIES.map(function (key) {
      return {
        key: key,
        method: "RelativeCoincidentTopology".concat(key, "OffsetParameters")
      };
    }));

    publicAPI.getCoincidentTopologyPolygonOffsetParameters = function () {
      var globalValue = staticOffsetAPI$1.getResolveCoincidentTopologyPolygonOffsetParameters();
      var localValue = publicAPI.getRelativeCoincidentTopologyPolygonOffsetParameters();
      return {
        factor: globalValue.factor + localValue.factor,
        offset: globalValue.offset + localValue.offset
      };
    };

    publicAPI.getCoincidentTopologyLineOffsetParameters = function () {
      var globalValue = staticOffsetAPI$1.getResolveCoincidentTopologyLineOffsetParameters();
      var localValue = publicAPI.getRelativeCoincidentTopologyLineOffsetParameters();
      return {
        factor: globalValue.factor + localValue.factor,
        offset: globalValue.offset + localValue.offset
      };
    };

    publicAPI.getCoincidentTopologyPointOffsetParameter = function () {
      var globalValue = staticOffsetAPI$1.getResolveCoincidentTopologyPointOffsetParameters();
      var localValue = publicAPI.getRelativeCoincidentTopologyPointOffsetParameters();
      return {
        factor: globalValue.factor + localValue.factor,
        offset: globalValue.offset + localValue.offset
      };
    };
  }

  var CoincidentTopologyHelper = {
    implementCoincidentTopologyMethods: implementCoincidentTopologyMethods,
    staticOffsetAPI: staticOffsetAPI$1,
    otherStaticMethods: otherStaticMethods$1,
    CATEGORIES: CATEGORIES
  };

  function ownKeys$e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$e(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$e(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  var staticOffsetAPI = CoincidentTopologyHelper.staticOffsetAPI,
      otherStaticMethods = CoincidentTopologyHelper.otherStaticMethods;
  var ColorMode$1 = Constants$6.ColorMode,
      ScalarMode$4 = Constants$6.ScalarMode,
      GetArray$1 = Constants$6.GetArray;
  var VectorMode = vtkScalarsToColors$2.VectorMode;
  var VtkDataTypes$1 = vtkDataArray$1.VtkDataTypes; // ----------------------------------------------------------------------------

  function notImplemented$4(method) {
    return function () {
      return macro.vtkErrorMacro("vtkMapper::".concat(method, " - NOT IMPLEMENTED"));
    };
  } // ----------------------------------------------------------------------------
  // vtkMapper methods
  // ----------------------------------------------------------------------------


  function vtkMapper(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkMapper');

    publicAPI.getBounds = function () {
      var input = publicAPI.getInputData();

      if (!input) {
        model.bounds = createUninitializedBounds();
      } else {
        if (!model.static) {
          publicAPI.update();
        }

        model.bounds = input.getBounds();
      }

      return model.bounds;
    };

    publicAPI.setForceCompileOnly = function (v) {
      model.forceCompileOnly = v; // make sure we do NOT call modified()
    };

    publicAPI.createDefaultLookupTable = function () {
      model.lookupTable = vtkLookupTable$1.newInstance();
    };

    publicAPI.getColorModeAsString = function () {
      return macro.enumToString(ColorMode$1, model.colorMode);
    };

    publicAPI.setColorModeToDefault = function () {
      return publicAPI.setColorMode(0);
    };

    publicAPI.setColorModeToMapScalars = function () {
      return publicAPI.setColorMode(1);
    };

    publicAPI.setColorModeToDirectScalars = function () {
      return publicAPI.setColorMode(2);
    };

    publicAPI.getScalarModeAsString = function () {
      return macro.enumToString(ScalarMode$4, model.scalarMode);
    };

    publicAPI.setScalarModeToDefault = function () {
      return publicAPI.setScalarMode(0);
    };

    publicAPI.setScalarModeToUsePointData = function () {
      return publicAPI.setScalarMode(1);
    };

    publicAPI.setScalarModeToUseCellData = function () {
      return publicAPI.setScalarMode(2);
    };

    publicAPI.setScalarModeToUsePointFieldData = function () {
      return publicAPI.setScalarMode(3);
    };

    publicAPI.setScalarModeToUseCellFieldData = function () {
      return publicAPI.setScalarMode(4);
    };

    publicAPI.setScalarModeToUseFieldData = function () {
      return publicAPI.setScalarMode(5);
    };

    publicAPI.getAbstractScalars = function (input, scalarMode, arrayAccessMode, arrayId, arrayName) {
      // make sure we have an input
      if (!input || !model.scalarVisibility) {
        return {
          scalars: null,
          cellFLag: false
        };
      }

      var scalars = null;
      var cellFlag = false; // get and scalar data according to scalar mode

      if (scalarMode === ScalarMode$4.DEFAULT) {
        scalars = input.getPointData().getScalars();

        if (!scalars) {
          scalars = input.getCellData().getScalars();
          cellFlag = true;
        }
      } else if (scalarMode === ScalarMode$4.USE_POINT_DATA) {
        scalars = input.getPointData().getScalars();
      } else if (scalarMode === ScalarMode$4.USE_CELL_DATA) {
        scalars = input.getCellData().getScalars();
        cellFlag = true;
      } else if (scalarMode === ScalarMode$4.USE_POINT_FIELD_DATA) {
        var pd = input.getPointData();

        if (arrayAccessMode === GetArray$1.BY_ID) {
          scalars = pd.getArrayByIndex(arrayId);
        } else {
          scalars = pd.getArrayByName(arrayName);
        }
      } else if (scalarMode === ScalarMode$4.USE_CELL_FIELD_DATA) {
        var cd = input.getCellData();
        cellFlag = true;

        if (arrayAccessMode === GetArray$1.BY_ID) {
          scalars = cd.getArrayByIndex(arrayId);
        } else {
          scalars = cd.getArrayByName(arrayName);
        }
      } else if (scalarMode === ScalarMode$4.USE_FIELD_DATA) {
        var fd = input.getFieldData();

        if (arrayAccessMode === GetArray$1.BY_ID) {
          scalars = fd.getArrayByIndex(arrayId);
        } else {
          scalars = fd.getArrayByName(arrayName);
        }
      }

      return {
        scalars: scalars,
        cellFlag: cellFlag
      };
    };

    publicAPI.mapScalars = function (input, alpha) {
      var scalars = publicAPI.getAbstractScalars(input, model.scalarMode, model.arrayAccessMode, model.arrayId, model.colorByArrayName).scalars;

      if (!scalars) {
        model.colorCoordinates = null;
        model.colorTextureMap = null;
        model.colorMapColors = null;
        return;
      } // we want to only recompute when something has changed


      var toString = "".concat(publicAPI.getMTime()).concat(scalars.getMTime()).concat(alpha);
      if (model.colorBuildString === toString) return;

      if (!model.useLookupTableScalarRange) {
        publicAPI.getLookupTable().setRange(model.scalarRange[0], model.scalarRange[1]);
      } // Decide between texture color or vertex color.
      // Cell data always uses vertex color.
      // Only point data can use both texture and vertex coloring.


      if (publicAPI.canUseTextureMapForColoring(input)) {
        publicAPI.mapScalarsToTexture(scalars, alpha);
      } else {
        model.colorCoordinates = null;
        model.colorTextureMap = null;
        var lut = publicAPI.getLookupTable();

        if (lut) {
          // Ensure that the lookup table is built
          lut.build();
          model.colorMapColors = lut.mapScalars(scalars, model.colorMode, -1);
        }
      }

      model.colorBuildString = "".concat(publicAPI.getMTime()).concat(scalars.getMTime()).concat(alpha);
    }; //-----------------------------------------------------------------------------


    publicAPI.scalarToTextureCoordinate = function (scalarValue, // Input scalar
    rangeMin, // range[0]
    invRangeWidth) {
      // 1/(range[1]-range[0])
      var texCoordS = 0.5; // Scalar value is arbitrary when NaN

      var texCoordT = 1.0; // 1.0 in t coordinate means NaN

      if (!isNan(scalarValue)) {
        // 0.0 in t coordinate means not NaN.  So why am I setting it to 0.49?
        // Because when you are mapping scalars and you have a NaN adjacent to
        // anything else, the interpolation everywhere should be NaN.  Thus, I
        // want the NaN color everywhere except right on the non-NaN neighbors.
        // To simulate this, I set the t coord for the real numbers close to
        // the threshold so that the interpolation almost immediately looks up
        // the NaN value.
        texCoordT = 0.49;
        texCoordS = (scalarValue - rangeMin) * invRangeWidth; // Some implementations apparently don't handle relatively large
        // numbers (compared to the range [0.0, 1.0]) very well. In fact,
        // values above 1122.0f appear to cause texture wrap-around on
        // some systems even when edge clamping is enabled. Why 1122.0f? I
        // don't know. For safety, we'll clamp at +/- 1000. This will
        // result in incorrect images when the texture value should be
        // above or below 1000, but I don't have a better solution.

        if (texCoordS > 1000.0) {
          texCoordS = 1000.0;
        } else if (texCoordS < -1000.0) {
          texCoordS = -1000.0;
        }
      }

      return {
        texCoordS: texCoordS,
        texCoordT: texCoordT
      };
    }; //-----------------------------------------------------------------------------


    publicAPI.createColorTextureCoordinates = function (input, output, numScalars, numComps, component, range, tableRange, tableNumberOfColors, useLogScale) {
      // We have to change the range used for computing texture
      // coordinates slightly to accommodate the special above- and
      // below-range colors that are the first and last texels,
      // respectively.
      var scalarTexelWidth = (range[1] - range[0]) / tableNumberOfColors;
      var paddedRange = [];
      paddedRange[0] = range[0] - scalarTexelWidth;
      paddedRange[1] = range[1] + scalarTexelWidth;
      var invRangeWidth = 1.0 / (paddedRange[1] - paddedRange[0]);
      var outputV = output.getData();
      var inputV = input.getData();
      var count = 0;
      var outputCount = 0;

      if (component < 0 || component >= numComps) {
        for (var scalarIdx = 0; scalarIdx < numScalars; ++scalarIdx) {
          var sum = 0;

          for (var compIdx = 0; compIdx < numComps; ++compIdx) {
            sum += inputV[count] * inputV[count];
            count++;
          }

          var magnitude = Math.sqrt(sum);

          if (useLogScale) {
            magnitude = vtkLookupTable$1.applyLogScale(magnitude, tableRange, range);
          }

          var outputs = publicAPI.scalarToTextureCoordinate(magnitude, paddedRange[0], invRangeWidth);
          outputV[outputCount] = outputs.texCoordS;
          outputV[outputCount + 1] = outputs.texCoordT;
          outputCount += 2;
        }
      } else {
        count += component;

        for (var _scalarIdx = 0; _scalarIdx < numScalars; ++_scalarIdx) {
          var inputValue = inputV[count];

          if (useLogScale) {
            inputValue = vtkLookupTable$1.applyLogScale(inputValue, tableRange, range);
          }

          var _outputs = publicAPI.scalarToTextureCoordinate(inputValue, paddedRange[0], invRangeWidth);

          outputV[outputCount] = _outputs.texCoordS;
          outputV[outputCount + 1] = _outputs.texCoordT;
          outputCount += 2;
          count += numComps;
        }
      }
    };

    publicAPI.mapScalarsToTexture = function (scalars, alpha) {
      var range = model.lookupTable.getRange();
      var useLogScale = model.lookupTable.usingLogScale();

      if (useLogScale) {
        // convert range to log.
        vtkLookupTable$1.getLogRange(range, range);
      }

      var origAlpha = model.lookupTable.getAlpha(); // Get rid of vertex color array.  Only texture or vertex coloring
      // can be active at one time.  The existence of the array is the
      // signal to use that technique.

      model.colorMapColors = null; // If the lookup table has changed, then recreate the color texture map.
      // Set a new lookup table changes this->MTime.

      if (model.colorTextureMap == null || publicAPI.getMTime() > model.colorTextureMap.getMTime() || model.lookupTable.getMTime() > model.colorTextureMap.getMTime() || model.lookupTable.getAlpha() !== alpha) {
        model.lookupTable.setAlpha(alpha);
        model.colorTextureMap = null; // Get the texture map from the lookup table.
        // Create a dummy ramp of scalars.
        // In the future, we could extend vtkScalarsToColors.

        model.lookupTable.build();
        var numberOfColors = model.lookupTable.getNumberOfAvailableColors();

        if (numberOfColors > 4094) {
          numberOfColors = 4094;
        }

        numberOfColors += 2;
        var k = (range[1] - range[0]) / (numberOfColors - 1 - 2);
        var newArray = new Float64Array(numberOfColors * 2);

        for (var i = 0; i < numberOfColors; ++i) {
          newArray[i] = range[0] + i * k - k; // minus k to start at below range color

          if (useLogScale) {
            newArray[i] = Math.pow(10.0, newArray[i]);
          }
        } // Dimension on NaN.


        for (var _i = 0; _i < numberOfColors; ++_i) {
          newArray[_i + numberOfColors] = NaN;
        }

        model.colorTextureMap = vtkImageData$1.newInstance();
        model.colorTextureMap.setExtent(0, numberOfColors - 1, 0, 1, 0, 0);
        var tmp = vtkDataArray$1.newInstance({
          numberOfComponents: 1,
          values: newArray
        });
        model.colorTextureMap.getPointData().setScalars(model.lookupTable.mapScalars(tmp, model.colorMode, 0));
        model.lookupTable.setAlpha(origAlpha);
      } // Create new coordinates if necessary.
      // Need to compare lookup table in case the range has changed.


      if (!model.colorCoordinates || publicAPI.getMTime() > model.colorCoordinates.getMTime() || publicAPI.getInputData(0).getMTime() > model.colorCoordinates.getMTime() || model.lookupTable.getMTime() > model.colorCoordinates.getMTime()) {
        // Get rid of old colors
        model.colorCoordinates = null; // Now create the color texture coordinates.

        var numComps = scalars.getNumberOfComponents();
        var num = scalars.getNumberOfTuples(); // const fArray = new FloatArray(num * 2);

        model.colorCoordinates = vtkDataArray$1.newInstance({
          numberOfComponents: 2,
          values: new Float32Array(num * 2)
        });
        var scalarComponent = model.lookupTable.getVectorComponent(); // Although I like the feature of applying magnitude to single component
        // scalars, it is not how the old MapScalars for vertex coloring works.

        if (model.lookupTable.getVectorMode() === VectorMode.MAGNITUDE && scalars.getNumberOfComponents() > 1) {
          scalarComponent = -1;
        }

        publicAPI.createColorTextureCoordinates(scalars, model.colorCoordinates, num, numComps, scalarComponent, range, model.lookupTable.getRange(), model.colorTextureMap.getPointData().getScalars().getNumberOfTuples() / 2 - 2, useLogScale);
      }
    };

    publicAPI.getIsOpaque = function () {
      var lut = publicAPI.getLookupTable();

      if (lut) {
        // Ensure that the lookup table is built
        lut.build();
        return lut.isOpaque();
      }

      return true;
    };

    publicAPI.canUseTextureMapForColoring = function (input) {
      if (!model.interpolateScalarsBeforeMapping) {
        return false; // user doesn't want us to use texture maps at all.
      } // index color does not use textures


      if (model.lookupTable && model.lookupTable.getIndexedLookup()) {
        return false;
      }

      var gasResult = publicAPI.getAbstractScalars(input, model.scalarMode, model.arrayAccessMode, model.arrayId, model.colorByArrayName);
      var scalars = gasResult.scalars;

      if (!scalars) {
        // no scalars on this dataset, we don't care if texture is used at all.
        return false;
      }

      if (gasResult.cellFlag) {
        return false; // cell data colors, don't use textures.
      }

      if (model.colorMode === ColorMode$1.DEFAULT && scalars.getDataType() === VtkDataTypes$1.UNSIGNED_CHAR || model.colorMode === ColorMode$1.DIRECT_SCALARS) {
        // Don't use texture is direct coloring using RGB unsigned chars is
        // requested.
        return false;
      }

      return true;
    };

    publicAPI.clearColorArrays = function () {
      model.colorMapColors = null;
      model.colorCoordinates = null;
      model.colorTextureMap = null;
    };

    publicAPI.getLookupTable = function () {
      if (!model.lookupTable) {
        publicAPI.createDefaultLookupTable();
      }

      return model.lookupTable;
    };

    publicAPI.getMTime = function () {
      var mt = model.mtime;

      if (model.lookupTable !== null) {
        var time = model.lookupTable.getMTime();
        mt = time > mt ? time : mt;
      }

      return mt;
    };

    publicAPI.getPrimitiveCount = function () {
      var input = publicAPI.getInputData();
      var pcount = {
        points: input.getPoints().getNumberOfValues() / 3,
        verts: input.getVerts().getNumberOfValues() - input.getVerts().getNumberOfCells(),
        lines: input.getLines().getNumberOfValues() - 2 * input.getLines().getNumberOfCells(),
        triangles: input.getPolys().getNumberOfValues() - 3 * input.getLines().getNumberOfCells()
      };
      return pcount;
    };

    publicAPI.acquireInvertibleLookupTable = notImplemented$4('AcquireInvertibleLookupTable');
    publicAPI.valueToColor = notImplemented$4('ValueToColor');
    publicAPI.colorToValue = notImplemented$4('ColorToValue');
    publicAPI.useInvertibleColorFor = notImplemented$4('UseInvertibleColorFor');
    publicAPI.clearInvertibleColor = notImplemented$4('ClearInvertibleColor');
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$_ = {
    colorMapColors: null,
    // Same as this->Colors
    static: false,
    lookupTable: null,
    scalarVisibility: true,
    scalarRange: [0, 1],
    useLookupTableScalarRange: false,
    colorMode: 0,
    scalarMode: 0,
    arrayAccessMode: 1,
    // By_NAME
    renderTime: 0,
    colorByArrayName: null,
    fieldDataTupleId: -1,
    interpolateScalarsBeforeMapping: false,
    colorCoordinates: null,
    colorTextureMap: null,
    forceCompileOnly: 0,
    useInvertibleColors: false,
    invertibleScalars: null,
    viewSpecificProperties: null,
    customShaderAttributes: []
  }; // ----------------------------------------------------------------------------

  function extend$10(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$_, initialValues); // Inheritance

    vtkAbstractMapper3D$1.extend(publicAPI, model, initialValues);
    macro.get(publicAPI, model, ['colorCoordinates', 'colorMapColors', 'colorTextureMap']);
    macro.setGet(publicAPI, model, ['colorByArrayName', 'arrayAccessMode', 'colorMode', 'fieldDataTupleId', 'interpolateScalarsBeforeMapping', 'lookupTable', 'renderTime', 'scalarMode', 'scalarVisibility', 'static', 'useLookupTableScalarRange', 'viewSpecificProperties', 'customShaderAttributes' // point data array names that will be transferred to the VBO
    ]);
    macro.setGetArray(publicAPI, model, ['scalarRange'], 2);

    if (!model.viewSpecificProperties) {
      model.viewSpecificProperties = {};
    }

    CoincidentTopologyHelper.implementCoincidentTopologyMethods(publicAPI, model); // Object methods

    vtkMapper(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$Y = macro.newInstance(extend$10, 'vtkMapper'); // ----------------------------------------------------------------------------

  var vtkMapper$1 = _objectSpread$e(_objectSpread$e(_objectSpread$e({
    newInstance: newInstance$Y,
    extend: extend$10
  }, staticOffsetAPI), otherStaticMethods), Constants$6);

  var Wrap$2 = {
    CLAMP_TO_EDGE: 0,
    REPEAT: 1,
    MIRRORED_REPEAT: 2
  };
  var Filter$2 = {
    NEAREST: 0,
    LINEAR: 1,
    NEAREST_MIPMAP_NEAREST: 2,
    NEAREST_MIPMAP_LINEAR: 3,
    LINEAR_MIPMAP_NEAREST: 4,
    LINEAR_MIPMAP_LINEAR: 5
  };
  var Constants$5 = {
    Wrap: Wrap$2,
    Filter: Filter$2
  };

  /* eslint-disable no-bitwise */
  var floatView = new Float32Array(1);
  var int32View = new Int32Array(floatView.buffer);
  /* eslint-disable no-bitwise */

  /* This method is faster than the OpenEXR implementation (very often
   * used, eg. in Ogre), with the additional benefit of rounding, inspired
   * by James Tursa?s half-precision code. */

  function toHalf(val) {
    floatView[0] = val;
    var x = int32View[0];
    var bits = x >> 16 & 0x8000;
    /* Get the sign */

    var m = x >> 12 & 0x07ff;
    /* Keep one extra bit for rounding */

    var e = x >> 23 & 0xff;
    /* Using int is faster here */

    /* If zero, or denormal, or exponent underflows too much for a denormal
     * half, return signed zero. */

    if (e < 103) {
      return bits;
    }
    /* If NaN, return NaN. If Inf or exponent overflow, return Inf. */


    if (e > 142) {
      bits |= 0x7c00;
      /* If exponent was 0xff and one mantissa bit was set, it means NaN,
       * not Inf, so make sure we set one mantissa bit too. */

      bits |= (e === 255 ? 0 : 1) && x & 0x007fffff;
      return bits;
    }
    /* If exponent underflows but not too much, return a denormal */


    if (e < 113) {
      m |= 0x0800;
      /* Extra rounding may overflow and set mantissa to 0 and exponent
       * to 1, which is OK. */

      bits |= (m >> 114 - e) + (m >> 113 - e & 1);
      return bits;
    }

    bits |= e - 112 << 10 | m >> 1;
    /* Extra rounding. An overflow will set mantissa to 0 and increment
     * the exponent, which is OK. */

    bits += m & 1;
    return bits;
  }

  function fromHalf(h) {
    var s = (h & 0x8000) >> 15;
    var e = (h & 0x7c00) >> 10;
    var f = h & 0x03ff;

    if (e === 0) {
      return (s ? -1 : 1) * Math.pow(2, -14) * (f / Math.pow(2, 10));
    }

    if (e === 0x1f) {
      return f ? NaN : (s ? -1 : 1) * Infinity;
    }

    return (s ? -1 : 1) * Math.pow(2, e - 15) * (1 + f / Math.pow(2, 10));
  }

  var HalfFloat = {
    fromHalf: fromHalf,
    toHalf: toHalf
  };

  function ownKeys$d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$d(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$d(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  var Wrap$1 = Constants$5.Wrap,
      Filter$1 = Constants$5.Filter;
  var VtkDataTypes = vtkDataArray$1.VtkDataTypes;
  var vtkDebugMacro$8 = vtkDebugMacro$a,
      vtkErrorMacro$d = vtkErrorMacro$m,
      vtkWarningMacro$3 = vtkWarningMacro$6; // ----------------------------------------------------------------------------
  // vtkOpenGLTexture methods
  // ----------------------------------------------------------------------------

  function vtkOpenGLTexture(publicAPI, model) {
    var _this = this;

    // Set our className
    model.classHierarchy.push('vtkOpenGLTexture'); // Renders myself

    publicAPI.render = function () {
      var renWin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if (renWin) {
        model.openGLRenderWindow = renWin;
      } else {
        model.openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer'); // sync renderable properties

        model.openGLRenderWindow = model.openGLRenderer.getParent();
      }

      model.context = model.openGLRenderWindow.getContext();

      if (model.renderable.getInterpolate()) {
        if (model.generateMipmap) {
          publicAPI.setMinificationFilter(Filter$1.LINEAR_MIPMAP_LINEAR);
        } else {
          publicAPI.setMinificationFilter(Filter$1.LINEAR);
        }

        publicAPI.setMagnificationFilter(Filter$1.LINEAR);
      } else {
        publicAPI.setMinificationFilter(Filter$1.NEAREST);
        publicAPI.setMagnificationFilter(Filter$1.NEAREST);
      }

      if (model.renderable.getRepeat()) {
        publicAPI.setWrapR(Wrap$1.REPEAT);
        publicAPI.setWrapS(Wrap$1.REPEAT);
        publicAPI.setWrapT(Wrap$1.REPEAT);
      } // clear image if input data is set


      if (model.renderable.getInputData()) {
        model.renderable.setImage(null);
      } // create the texture if it is not done already


      if (!model.handle || model.renderable.getMTime() > model.textureBuildTime.getMTime()) {
        // if we have an Image
        if (model.renderable.getImage() !== null) {
          if (model.renderable.getInterpolate()) {
            model.generateMipmap = true;
            publicAPI.setMinificationFilter(Filter$1.LINEAR_MIPMAP_LINEAR);
          } // Have an Image which may not be complete


          if (model.renderable.getImage() && model.renderable.getImageLoaded()) {
            publicAPI.create2DFromImage(model.renderable.getImage());
            publicAPI.activate();
            publicAPI.sendParameters();
            model.textureBuildTime.modified();
          }
        } // if we have Inputdata


        var input = model.renderable.getInputData(0);

        if (input && input.getPointData().getScalars()) {
          var ext = input.getExtent();
          var inScalars = input.getPointData().getScalars(); // do we have a cube map? Six inputs

          var data = [];

          for (var i = 0; i < model.renderable.getNumberOfInputPorts(); ++i) {
            var indata = model.renderable.getInputData(i);
            var scalars = indata ? indata.getPointData().getScalars().getData() : null;

            if (scalars) {
              data.push(scalars);
            }
          }

          if (model.renderable.getInterpolate() && inScalars.getNumberOfComponents() === 4) {
            model.generateMipmap = true;
            publicAPI.setMinificationFilter(Filter$1.LINEAR_MIPMAP_LINEAR);
          }

          if (data.length % 6 === 0) {
            publicAPI.createCubeFromRaw(ext[1] - ext[0] + 1, ext[3] - ext[2] + 1, inScalars.getNumberOfComponents(), inScalars.getDataType(), data);
          } else {
            publicAPI.create2DFromRaw(ext[1] - ext[0] + 1, ext[3] - ext[2] + 1, inScalars.getNumberOfComponents(), inScalars.getDataType(), inScalars.getData());
          }

          publicAPI.activate();
          publicAPI.sendParameters();
          model.textureBuildTime.modified();
        }
      }

      if (model.handle) {
        publicAPI.activate();
      }
    }; //----------------------------------------------------------------------------


    publicAPI.destroyTexture = function () {
      // deactivate it first
      publicAPI.deactivate();

      if (model.context && model.handle) {
        model.context.deleteTexture(model.handle);
      }

      model.handle = 0;
      model.numberOfDimensions = 0;
      model.target = 0;
      model.components = 0;
      model.width = 0;
      model.height = 0;
      model.depth = 0;
      publicAPI.resetFormatAndType();
    }; //----------------------------------------------------------------------------


    publicAPI.createTexture = function () {
      // reuse the existing handle if we have one
      if (!model.handle) {
        model.handle = model.context.createTexture();

        if (model.target) {
          model.context.bindTexture(model.target, model.handle); // See: http://www.openmodel.context..org/wiki/Common_Mistakes#Creating_a_complete_texture
          // turn off mip map filter or set the base and max level correctly. here
          // both are done.

          model.context.texParameteri(model.target, model.context.TEXTURE_MIN_FILTER, publicAPI.getOpenGLFilterMode(model.minificationFilter));
          model.context.texParameteri(model.target, model.context.TEXTURE_MAG_FILTER, publicAPI.getOpenGLFilterMode(model.magnificationFilter));
          model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_S, publicAPI.getOpenGLWrapMode(model.wrapS));
          model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_T, publicAPI.getOpenGLWrapMode(model.wrapT));

          if (model.openGLRenderWindow.getWebgl2()) {
            model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_R, publicAPI.getOpenGLWrapMode(model.wrapR));
          }

          model.context.bindTexture(model.target, null);
        }
      }
    }; //---------------------------------------------------------------------------


    publicAPI.getTextureUnit = function () {
      if (model.openGLRenderWindow) {
        return model.openGLRenderWindow.getTextureUnitForTexture(publicAPI);
      }

      return -1;
    }; //---------------------------------------------------------------------------


    publicAPI.activate = function () {
      // activate a free texture unit for this texture
      model.openGLRenderWindow.activateTexture(publicAPI);
      publicAPI.bind();
    }; //---------------------------------------------------------------------------


    publicAPI.deactivate = function () {
      if (model.openGLRenderWindow) {
        model.openGLRenderWindow.deactivateTexture(publicAPI);
      }
    }; //---------------------------------------------------------------------------


    publicAPI.releaseGraphicsResources = function (rwin) {
      if (rwin && model.handle) {
        rwin.activateTexture(publicAPI);
        rwin.deactivateTexture(publicAPI);
        model.context.deleteTexture(model.handle);
        model.handle = 0;
        model.numberOfDimensions = 0;
        model.target = 0;
        model.internalFormat = 0;
        model.format = 0;
        model.openGLDataType = 0;
        model.components = 0;
        model.width = 0;
        model.height = 0;
        model.depth = 0;
      }

      if (model.shaderProgram) {
        model.shaderProgram.releaseGraphicsResources(rwin);
        model.shaderProgram = null;
      }
    }; //----------------------------------------------------------------------------


    publicAPI.bind = function () {
      model.context.bindTexture(model.target, model.handle);

      if (model.autoParameters && publicAPI.getMTime() > model.sendParametersTime.getMTime()) {
        publicAPI.sendParameters();
      }
    }; //----------------------------------------------------------------------------


    publicAPI.isBound = function () {
      var result = false;

      if (model.context && model.handle) {
        var target = 0;

        switch (model.target) {
          case model.context.TEXTURE_2D:
            target = model.context.TEXTURE_BINDING_2D;
            break;

          default:
            vtkWarningMacro$3('impossible case');
            break;
        }

        var oid = model.context.getIntegerv(target);
        result = oid === model.handle;
      }

      return result;
    }; //----------------------------------------------------------------------------


    publicAPI.sendParameters = function () {
      model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_S, publicAPI.getOpenGLWrapMode(model.wrapS));
      model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_T, publicAPI.getOpenGLWrapMode(model.wrapT));

      if (model.openGLRenderWindow.getWebgl2()) {
        model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_R, publicAPI.getOpenGLWrapMode(model.wrapR));
      }

      model.context.texParameteri(model.target, model.context.TEXTURE_MIN_FILTER, publicAPI.getOpenGLFilterMode(model.minificationFilter));
      model.context.texParameteri(model.target, model.context.TEXTURE_MAG_FILTER, publicAPI.getOpenGLFilterMode(model.magnificationFilter));

      if (model.openGLRenderWindow.getWebgl2()) {
        model.context.texParameteri(model.target, model.context.TEXTURE_BASE_LEVEL, model.baseLevel);
        model.context.texParameteri(model.target, model.context.TEXTURE_MAX_LEVEL, model.maxLevel);
      } // model.context.texParameterf(model.target, model.context.TEXTURE_MIN_LOD, model.minLOD);
      // model.context.texParameterf(model.target, model.context.TEXTURE_MAX_LOD, model.maxLOD);


      model.sendParametersTime.modified();
    }; //----------------------------------------------------------------------------


    publicAPI.getInternalFormat = function (vtktype, numComps) {
      if (!model.internalFormat) {
        model.internalFormat = publicAPI.getDefaultInternalFormat(vtktype, numComps);
      }

      if (!model.internalFormat) {
        vtkDebugMacro$8("Unable to find suitable internal format for T=".concat(vtktype, " NC= ").concat(numComps));
      }

      return model.internalFormat;
    }; //----------------------------------------------------------------------------


    publicAPI.getDefaultInternalFormat = function (vtktype, numComps) {
      var result = 0; // try default next

      result = model.openGLRenderWindow.getDefaultTextureInternalFormat(vtktype, numComps, false);

      if (result) {
        return result;
      } // try floating point


      result = _this.openGLRenderWindow.getDefaultTextureInternalFormat(vtktype, numComps, true);

      if (!result) {
        vtkDebugMacro$8('Unsupported internal texture type!');
        vtkDebugMacro$8("Unable to find suitable internal format for T=".concat(vtktype, " NC= ").concat(numComps));
      }

      return result;
    }; //----------------------------------------------------------------------------


    publicAPI.setInternalFormat = function (iFormat) {
      if (iFormat !== model.internalFormat) {
        model.internalFormat = iFormat;
        publicAPI.modified();
      }
    }; //----------------------------------------------------------------------------


    publicAPI.getFormat = function (vtktype, numComps) {
      model.format = publicAPI.getDefaultFormat(vtktype, numComps);
      return model.format;
    }; //----------------------------------------------------------------------------


    publicAPI.getDefaultFormat = function (vtktype, numComps) {
      if (model.openGLRenderWindow.getWebgl2()) {
        switch (numComps) {
          case 1:
            return model.context.RED;

          case 2:
            return model.context.RG;

          case 3:
            return model.context.RGB;

          case 4:
            return model.context.RGBA;

          default:
            return model.context.RGB;
        }
      } else {
        // webgl1
        switch (numComps) {
          case 1:
            return model.context.LUMINANCE;

          case 2:
            return model.context.LUMINANCE_ALPHA;

          case 3:
            return model.context.RGB;

          case 4:
            return model.context.RGBA;

          default:
            return model.context.RGB;
        }
      }
    }; //----------------------------------------------------------------------------


    publicAPI.resetFormatAndType = function () {
      model.format = 0;
      model.internalFormat = 0;
      model.openGLDataType = 0;
    }; //----------------------------------------------------------------------------


    publicAPI.getDefaultDataType = function (vtkScalarType) {
      var useHalfFloatType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      // DON'T DEAL with VTK_CHAR as this is platform dependent.
      if (model.openGLRenderWindow.getWebgl2()) {
        switch (vtkScalarType) {
          // case VtkDataTypes.SIGNED_CHAR:
          //   return model.context.BYTE;
          case VtkDataTypes.UNSIGNED_CHAR:
            return model.context.UNSIGNED_BYTE;

          case useHalfFloatType && VtkDataTypes.SHORT:
            return model.context.HALF_FLOAT;

          case useHalfFloatType && VtkDataTypes.UNSIGNED_SHORT:
            return model.context.HALF_FLOAT;
          // case VtkDataTypes.INT:
          //   return model.context.INT;
          // case VtkDataTypes.UNSIGNED_INT:
          //   return model.context.UNSIGNED_INT;

          case VtkDataTypes.FLOAT:
          case VtkDataTypes.VOID: // used for depth component textures.

          default:
            return model.context.FLOAT;
        }
      }

      switch (vtkScalarType) {
        // case VtkDataTypes.SIGNED_CHAR:
        //   return model.context.BYTE;
        case VtkDataTypes.UNSIGNED_CHAR:
          return model.context.UNSIGNED_BYTE;
        // case VtkDataTypes.SHORT:
        //   return model.context.SHORT;
        // case VtkDataTypes.UNSIGNED_SHORT:
        //   return model.context.UNSIGNED_SHORT;
        // case VtkDataTypes.INT:
        //   return model.context.INT;
        // case VtkDataTypes.UNSIGNED_INT:
        //   return model.context.UNSIGNED_INT;

        case VtkDataTypes.FLOAT:
        case VtkDataTypes.VOID: // used for depth component textures.

        default:
          if (model.context.getExtension('OES_texture_float') && model.context.getExtension('OES_texture_float_linear')) {
            return model.context.FLOAT;
          }

          {
            var halfFloat = model.context.getExtension('OES_texture_half_float');

            if (halfFloat && model.context.getExtension('OES_texture_half_float_linear')) {
              return halfFloat.HALF_FLOAT_OES;
            }
          }
          return model.context.UNSIGNED_BYTE;
      }
    }; //----------------------------------------------------------------------------


    publicAPI.getOpenGLDataType = function (vtkScalarType) {
      var useHalfFloatType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      model.openGLDataType = publicAPI.getDefaultDataType(vtkScalarType, useHalfFloatType);
      return model.openGLDataType;
    };

    publicAPI.getShiftAndScale = function () {
      var shift = 0.0;
      var scale = 1.0; // for all float type internal formats

      switch (model.openGLDataType) {
        case model.context.BYTE:
          scale = 127.5;
          shift = scale - 128.0;
          break;

        case model.context.UNSIGNED_BYTE:
          scale = 255.0;
          shift = 0.0;
          break;

        case model.context.SHORT:
          scale = 32767.5;
          shift = scale - 32768.0;
          break;

        case model.context.UNSIGNED_SHORT:
          scale = 65536.0;
          shift = 0.0;
          break;

        case model.context.INT:
          scale = 2147483647.5;
          shift = scale - 2147483648.0;
          break;

        case model.context.UNSIGNED_INT:
          scale = 4294967295.0;
          shift = 0.0;
          break;

        case model.context.FLOAT:
      }

      return {
        shift: shift,
        scale: scale
      };
    }; //----------------------------------------------------------------------------


    publicAPI.getOpenGLFilterMode = function (emode) {
      switch (emode) {
        case Filter$1.NEAREST:
          return model.context.NEAREST;

        case Filter$1.LINEAR:
          return model.context.LINEAR;

        case Filter$1.NEAREST_MIPMAP_NEAREST:
          return model.context.NEAREST_MIPMAP_NEAREST;

        case Filter$1.NEAREST_MIPMAP_LINEAR:
          return model.context.NEAREST_MIPMAP_LINEAR;

        case Filter$1.LINEAR_MIPMAP_NEAREST:
          return model.context.LINEAR_MIPMAP_NEAREST;

        case Filter$1.LINEAR_MIPMAP_LINEAR:
          return model.context.LINEAR_MIPMAP_LINEAR;

        default:
          return model.context.NEAREST;
      }
    }; //----------------------------------------------------------------------------


    publicAPI.getOpenGLWrapMode = function (vtktype) {
      switch (vtktype) {
        case Wrap$1.CLAMP_TO_EDGE:
          return model.context.CLAMP_TO_EDGE;

        case Wrap$1.REPEAT:
          return model.context.REPEAT;

        case Wrap$1.MIRRORED_REPEAT:
          return model.context.MIRRORED_REPEAT;

        default:
          return model.context.CLAMP_TO_EDGE;
      }
    }; //----------------------------------------------------------------------------


    function updateArrayDataType(dataType, data) {
      var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var pixData = [];
      var pixCount = model.width * model.height * model.components;

      if (depth) {
        pixCount *= model.depth;
      } // if the opengl data type is float
      // then the data array must be float


      if (dataType !== VtkDataTypes.FLOAT && model.openGLDataType === model.context.FLOAT) {
        for (var idx = 0; idx < data.length; idx++) {
          var newArray = new Float32Array(pixCount);

          for (var i = 0; i < pixCount; i++) {
            newArray[i] = data[idx][i];
          }

          pixData.push(newArray);
        }
      } // if the opengl data type is ubyte
      // then the data array must be u8, we currently simply truncate the data


      if (dataType !== VtkDataTypes.UNSIGNED_CHAR && model.openGLDataType === model.context.UNSIGNED_BYTE) {
        for (var _idx = 0; _idx < data.length; _idx++) {
          var _newArray = new Uint8Array(pixCount);

          for (var _i = 0; _i < pixCount; _i++) {
            _newArray[_i] = data[_idx][_i];
          }

          pixData.push(_newArray);
        }
      } // if the opengl data type is half float
      // then the data array must be u16


      var halfFloatExt = model.context.getExtension('OES_texture_half_float');
      var halfFloat = model.openGLRenderWindow.getWebgl2() ? model.openGLDataType === model.context.HALF_FLOAT : halfFloatExt && model.openGLDataType === halfFloatExt.HALF_FLOAT_OES;

      if (halfFloat) {
        for (var _idx2 = 0; _idx2 < data.length; _idx2++) {
          var _newArray2 = new Uint16Array(pixCount);

          for (var _i2 = 0; _i2 < pixCount; _i2++) {
            _newArray2[_i2] = HalfFloat.toHalf(data[_idx2][_i2]);
          }

          pixData.push(_newArray2);
        }
      } // The output has to be filled


      if (pixData.length === 0) {
        for (var _i3 = 0; _i3 < data.length; _i3++) {
          pixData.push(data[_i3]);
        }
      }

      return pixData;
    } //----------------------------------------------------------------------------


    function scaleTextureToHighestPowerOfTwo(data) {
      if (model.openGLRenderWindow.getWebgl2()) {
        // No need if webGL2
        return data;
      }

      var pixData = [];
      var width = model.width;
      var height = model.height;
      var numComps = model.components;

      if (data && (!isPowerOfTwo(width) || !isPowerOfTwo(height))) {
        // Scale up the texture to the next highest power of two dimensions.
        var halfFloat = model.context.getExtension('OES_texture_half_float');
        var newWidth = nearestPowerOfTwo(width);
        var newHeight = nearestPowerOfTwo(height);
        var pixCount = newWidth * newHeight * model.components;

        for (var idx = 0; idx < data.length; idx++) {
          if (data[idx] !== null) {
            var newArray = null;
            var jFactor = height / newHeight;
            var iFactor = width / newWidth;
            var usingHalf = false;

            if (model.openGLDataType === model.context.FLOAT) {
              newArray = new Float32Array(pixCount);
            } else if (halfFloat && model.openGLDataType === halfFloat.HALF_FLOAT_OES) {
              newArray = new Uint16Array(pixCount);
              usingHalf = true;
            } else {
              newArray = new Uint8Array(pixCount);
            }

            for (var j = 0; j < newHeight; j++) {
              var joff = j * newWidth * numComps;
              var jidx = j * jFactor;
              var jlow = Math.floor(jidx);
              var jhi = Math.ceil(jidx);

              if (jhi >= height) {
                jhi = height - 1;
              }

              var jmix = jidx - jlow;
              var jmix1 = 1.0 - jmix;
              jlow = jlow * width * numComps;
              jhi = jhi * width * numComps;

              for (var i = 0; i < newWidth; i++) {
                var ioff = i * numComps;
                var iidx = i * iFactor;
                var ilow = Math.floor(iidx);
                var ihi = Math.ceil(iidx);

                if (ihi >= width) {
                  ihi = width - 1;
                }

                var imix = iidx - ilow;
                ilow *= numComps;
                ihi *= numComps;

                for (var c = 0; c < numComps; c++) {
                  if (usingHalf) {
                    newArray[joff + ioff + c] = HalfFloat.toHalf(HalfFloat.fromHalf(data[idx][jlow + ilow + c]) * jmix1 * (1.0 - imix) + HalfFloat.fromHalf(data[idx][jlow + ihi + c]) * jmix1 * imix + HalfFloat.fromHalf(data[idx][jhi + ilow + c]) * jmix * (1.0 - imix) + HalfFloat.fromHalf(data[idx][jhi + ihi + c]) * jmix * imix);
                  } else {
                    newArray[joff + ioff + c] = data[idx][jlow + ilow + c] * jmix1 * (1.0 - imix) + data[idx][jlow + ihi + c] * jmix1 * imix + data[idx][jhi + ilow + c] * jmix * (1.0 - imix) + data[idx][jhi + ihi + c] * jmix * imix;
                  }
                }
              }
            }

            pixData.push(newArray);
            model.width = newWidth;
            model.height = newHeight;
          } else {
            pixData.push(null);
          }
        }
      } // The output has to be filled


      if (pixData.length === 0) {
        for (var _i4 = 0; _i4 < data.length; _i4++) {
          pixData.push(data[_i4]);
        }
      }

      return pixData;
    } //----------------------------------------------------------------------------


    publicAPI.create2DFromRaw = function (width, height, numComps, dataType, data) {
      // Now determine the texture parameters using the arguments.
      publicAPI.getOpenGLDataType(dataType);
      publicAPI.getInternalFormat(dataType, numComps);
      publicAPI.getFormat(dataType, numComps);

      if (!model.internalFormat || !model.format || !model.openGLDataType) {
        vtkErrorMacro$d('Failed to determine texture parameters.');
        return false;
      }

      model.target = model.context.TEXTURE_2D;
      model.components = numComps;
      model.width = width;
      model.height = height;
      model.depth = 1;
      model.numberOfDimensions = 2;
      model.openGLRenderWindow.activateTexture(publicAPI);
      publicAPI.createTexture();
      publicAPI.bind(); // Create an array of texture with one texture

      var dataArray = [data];
      var pixData = updateArrayDataType(dataType, dataArray);
      var scaledData = scaleTextureToHighestPowerOfTwo(pixData); // Source texture data from the PBO.
      // model.context.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);

      model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1);
      model.context.texImage2D(model.target, 0, model.internalFormat, model.width, model.height, 0, model.format, model.openGLDataType, scaledData[0]);

      if (model.generateMipmap) {
        model.context.generateMipmap(model.target);
      }

      publicAPI.deactivate();
      return true;
    }; //----------------------------------------------------------------------------


    publicAPI.createCubeFromRaw = function (width, height, numComps, dataType, data) {
      // Now determine the texture parameters using the arguments.
      publicAPI.getOpenGLDataType(dataType);
      publicAPI.getInternalFormat(dataType, numComps);
      publicAPI.getFormat(dataType, numComps);

      if (!model.internalFormat || !model.format || !model.openGLDataType) {
        vtkErrorMacro$d('Failed to determine texture parameters.');
        return false;
      }

      model.target = model.context.TEXTURE_CUBE_MAP;
      model.components = numComps;
      model.width = width;
      model.height = height;
      model.depth = 1;
      model.numberOfDimensions = 2;
      model.openGLRenderWindow.activateTexture(publicAPI);
      model.maxLevel = data.length / 6 - 1;
      publicAPI.createTexture();
      publicAPI.bind();
      var pixData = updateArrayDataType(dataType, data);
      var scaledData = scaleTextureToHighestPowerOfTwo(pixData); // invert the data because opengl is messed up with cube maps
      // and uses the old renderman standard with Y going down
      // even though it is completely at odds with OpenGL standards

      var invertedData = [];
      var widthLevel = model.width;
      var heightLevel = model.height;

      for (var i = 0; i < scaledData.length; i++) {
        if (i % 6 === 0 && i !== 0) {
          widthLevel /= 2;
          heightLevel /= 2;
        }

        invertedData[i] = newTypedArray(dataType, heightLevel * widthLevel * model.components);

        for (var y = 0; y < heightLevel; ++y) {
          var row1 = y * widthLevel * model.components;
          var row2 = (heightLevel - y - 1) * widthLevel * model.components;
          invertedData[i].set(scaledData[i].slice(row2, row2 + widthLevel * model.components), row1);
        }
      } // Source texture data from the PBO.


      model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1); // We get the 6 images

      for (var _i5 = 0; _i5 < 6; _i5++) {
        // For each mipmap level
        var j = 0;
        var w = model.width;
        var h = model.height;

        while (w >= 1 && h >= 1) {
          // In webgl 1, all levels need to be defined. So if the latest level size is
          // 8x8, we have to add 3 more null textures (4x4, 2x2, 1x1)
          // In webgl 2, the attribute maxLevel will be use.
          var tempData = null;

          if (j <= model.maxLevel) {
            tempData = invertedData[6 * j + _i5];
          }

          model.context.texImage2D(model.context.TEXTURE_CUBE_MAP_POSITIVE_X + _i5, j, model.internalFormat, w, h, 0, model.format, model.openGLDataType, tempData);
          j++;
          w /= 2;
          h /= 2;
        }
      } // generateMipmap must not be called here because we manually upload all levels
      // if it is called, all levels will be overwritten


      publicAPI.deactivate();
      return true;
    }; //----------------------------------------------------------------------------


    publicAPI.createDepthFromRaw = function (width, height, dataType, data) {
      // Now determine the texture parameters using the arguments.
      publicAPI.getOpenGLDataType(dataType);
      model.format = model.context.DEPTH_COMPONENT;

      if (model.openGLRenderWindow.getWebgl2()) {
        if (dataType === VtkDataTypes.FLOAT) {
          model.internalFormat = model.context.DEPTH_COMPONENT32F;
        } else {
          model.internalFormat = model.context.DEPTH_COMPONENT16;
        }
      } else {
        model.internalFormat = model.context.DEPTH_COMPONENT;
      }

      if (!model.internalFormat || !model.format || !model.openGLDataType) {
        vtkErrorMacro$d('Failed to determine texture parameters.');
        return false;
      }

      model.target = model.context.TEXTURE_2D;
      model.components = 1;
      model.width = width;
      model.height = height;
      model.depth = 1;
      model.numberOfDimensions = 2;
      model.openGLRenderWindow.activateTexture(publicAPI);
      publicAPI.createTexture();
      publicAPI.bind(); // Source texture data from the PBO.
      // model.context.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);

      model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1);
      model.context.texImage2D(model.target, 0, model.internalFormat, model.width, model.height, 0, model.format, model.openGLDataType, data);

      if (model.generateMipmap) {
        model.context.generateMipmap(model.target);
      }

      publicAPI.deactivate();
      return true;
    }; //----------------------------------------------------------------------------


    publicAPI.create2DFromImage = function (image) {
      // Now determine the texture parameters using the arguments.
      publicAPI.getOpenGLDataType(VtkDataTypes.UNSIGNED_CHAR);
      publicAPI.getInternalFormat(VtkDataTypes.UNSIGNED_CHAR, 4);
      publicAPI.getFormat(VtkDataTypes.UNSIGNED_CHAR, 4);

      if (!model.internalFormat || !model.format || !model.openGLDataType) {
        vtkErrorMacro$d('Failed to determine texture parameters.');
        return false;
      }

      model.target = model.context.TEXTURE_2D;
      model.components = 4;
      model.width = image.width;
      model.height = image.height;
      model.depth = 1;
      model.numberOfDimensions = 2;
      model.openGLRenderWindow.activateTexture(publicAPI);
      publicAPI.createTexture();
      publicAPI.bind(); // Source texture data from the PBO.
      // model.context.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);

      model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1); // Scale up the texture to the next highest power of two dimensions (if needed) and flip y.

      var needNearestPowerOfTwo = !isPowerOfTwo(image.width) || !isPowerOfTwo(image.height);
      var canvas = document.createElement('canvas');
      canvas.width = needNearestPowerOfTwo ? nearestPowerOfTwo(image.width) : image.width;
      canvas.height = needNearestPowerOfTwo ? nearestPowerOfTwo(image.height) : image.height;
      var ctx = canvas.getContext('2d');
      ctx.translate(0, canvas.height);
      ctx.scale(1, -1);
      ctx.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height); // In Chrome 69 on Windows and Ubuntu, there is a bug that prevents some
      // canvases from working properly with webGL textures.  By getting any
      // image data from the canvas, this works around the bug.  See
      // https://bugs.chromium.org/p/chromium/issues/detail?id=896307

      if (navigator.userAgent.indexOf('Chrome/69') >= 0) {
        ctx.getImageData(0, 0, 1, 1);
      }

      var safeImage = canvas;
      model.context.texImage2D(model.target, 0, model.internalFormat, model.format, model.openGLDataType, safeImage);

      if (model.generateMipmap) {
        model.context.generateMipmap(model.target);
      }

      publicAPI.deactivate();
      return true;
    };

    function computeScaleOffsets(numComps, numPixelsIn, data) {
      // compute min and max values per component
      var min = [];
      var max = [];

      for (var c = 0; c < numComps; ++c) {
        min[c] = data[c];
        max[c] = data[c];
      }

      var count = 0;

      for (var i = 0; i < numPixelsIn; ++i) {
        for (var _c = 0; _c < numComps; ++_c) {
          if (data[count] < min[_c]) {
            min[_c] = data[count];
          }

          if (data[count] > max[_c]) {
            max[_c] = data[count];
          }

          count++;
        }
      }

      var offset = [];
      var scale = [];

      for (var _c2 = 0; _c2 < numComps; ++_c2) {
        if (min[_c2] === max[_c2]) {
          max[_c2] = min[_c2] + 1.0;
        }

        offset[_c2] = min[_c2];
        scale[_c2] = max[_c2] - min[_c2];
      }

      return {
        scale: scale,
        offset: offset
      };
    } // HalfFloat only represents numbers between [-2048, 2048] exactly accurate,
    // for numbers outside of this range there is a precision limitation


    function hasExactHalfFloat(offset, scale) {
      // Per Component
      for (var c = 0; c < offset.length; c++) {
        var min = offset[c];
        var max = scale[c] + min;

        if (min < -2048 || min > 2048 || max < -2048 || max > 2048) {
          return false;
        }
      }

      return true;
    }

    function checkUseHalfFloat(dataType, offset, scale, preferSizeOverAccuracy) {
      var useHalfFloatType = true;
      publicAPI.getOpenGLDataType(dataType, useHalfFloatType);
      var halfFloatExt = model.context.getExtension('OES_texture_half_float');
      var useHalfFloat = model.openGLRenderWindow.getWebgl2() ? model.openGLDataType === model.context.HALF_FLOAT : halfFloatExt && model.openGLDataType === halfFloatExt.HALF_FLOAT_OES;

      if (!useHalfFloat) {
        return false;
      } // Don't consider halfFloat and convert back to Float when the range of data does not generate an accurate halfFloat
      // AND it is not preferable to have a smaller texture than an exact texture.


      if (!hasExactHalfFloat(offset, scale) && !preferSizeOverAccuracy) {
        return false;
      }

      return true;
    } //----------------------------------------------------------------------------


    publicAPI.create3DFromRaw = function (width, height, depth, numComps, dataType, data) {
      // Permit OpenGLDataType to be half float, if applicable, for 3D
      var useHalfFloatType = true;
      publicAPI.getOpenGLDataType(dataType, useHalfFloatType); // Now determine the texture parameters using the arguments.

      publicAPI.getInternalFormat(dataType, numComps);
      publicAPI.getFormat(dataType, numComps);

      if (!model.internalFormat || !model.format || !model.openGLDataType) {
        vtkErrorMacro$d('Failed to determine texture parameters.');
        return false;
      }

      model.target = model.context.TEXTURE_3D;
      model.components = numComps;
      model.width = width;
      model.height = height;
      model.depth = depth;
      model.numberOfDimensions = 3;
      model.openGLRenderWindow.activateTexture(publicAPI);
      publicAPI.createTexture();
      publicAPI.bind(); // Create an array of texture with one texture

      var dataArray = [data];
      var is3DArray = true;
      var pixData = updateArrayDataType(dataType, dataArray, is3DArray);
      var scaledData = scaleTextureToHighestPowerOfTwo(pixData); // Source texture data from the PBO.
      // model.context.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
      // model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1);

      model.context.texImage3D(model.target, 0, model.internalFormat, model.width, model.height, model.depth, 0, model.format, model.openGLDataType, scaledData[0]);

      if (model.generateMipmap) {
        model.context.generateMipmap(model.target);
      }

      publicAPI.deactivate();
      return true;
    }; //----------------------------------------------------------------------------
    // This method simulates a 3D texture using 2D


    publicAPI.create3DFilterableFromRaw = function (width, height, depth, numComps, dataType, data) {
      var preferSizeOverAccuracy = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
      var numPixelsIn = width * height * depth; // initialize offset/scale

      var offset = [];
      var scale = [];

      for (var c = 0; c < numComps; ++c) {
        offset[c] = 0.0;
        scale[c] = 1.0;
      } // store the information, we will need it later
      // offset and scale are the offset and scale required to get
      // the texture value back to data values ala
      // data = texture * scale + offset
      // and texture = (data - offset)/scale


      model.volumeInfo = {
        scale: scale,
        offset: offset,
        width: width,
        height: height,
        depth: depth
      }; // Check if we can accurately use halfFloat or whether it is preferred to have a smaller size texture
      // compute min and max values

      var _computeScaleOffsets = computeScaleOffsets(numComps, numPixelsIn, data),
          computedOffset = _computeScaleOffsets.offset,
          computedScale = _computeScaleOffsets.scale;

      model.volumeInfo.dataComputedScale = computedScale;
      model.volumeInfo.dataComputedOffset = computedOffset;
      var useHalfFloat = checkUseHalfFloat(dataType, computedOffset, computedScale, preferSizeOverAccuracy); // WebGL2 path, we have 3d textures etc

      if (model.openGLRenderWindow.getWebgl2()) {
        if (dataType === VtkDataTypes.FLOAT || useHalfFloat && (dataType === VtkDataTypes.SHORT || dataType === VtkDataTypes.UNSIGNED_SHORT)) {
          return publicAPI.create3DFromRaw(width, height, depth, numComps, dataType, data);
        }

        if (dataType === VtkDataTypes.UNSIGNED_CHAR) {
          for (var _c3 = 0; _c3 < numComps; ++_c3) {
            model.volumeInfo.scale[_c3] = 255.0;
          }

          return publicAPI.create3DFromRaw(width, height, depth, numComps, dataType, data);
        } // otherwise convert to float


        var _newArray3 = new Float32Array(numPixelsIn * numComps); // compute min and max values


        model.volumeInfo.offset = computedOffset;
        model.volumeInfo.scale = computedScale;
        var count = 0;
        var scaleInverse = computedScale.map(function (s) {
          return 1 / s;
        });

        for (var i = 0; i < numPixelsIn; i++) {
          for (var nc = 0; nc < numComps; nc++) {
            _newArray3[count] = (data[count] - computedOffset[nc]) * scaleInverse[nc];
            count++;
          }
        }

        return publicAPI.create3DFromRaw(width, height, depth, numComps, VtkDataTypes.FLOAT, _newArray3);
      } // not webgl2, deal with webgl1, no 3d textures
      // and maybe no float textures
      // compute min and max values


      var res = computeScaleOffsets(numComps, numPixelsIn, data);

      var volCopyData = function volCopyData(outArray, outIdx, inValue, smin, smax) {
        outArray[outIdx] = inValue;
      };

      var dataTypeToUse = VtkDataTypes.UNSIGNED_CHAR; // unsigned char gets used as is

      if (dataType === VtkDataTypes.UNSIGNED_CHAR) {
        for (var _c4 = 0; _c4 < numComps; ++_c4) {
          res.offset[_c4] = 0.0;
          res.scale[_c4] = 255.0;
        }
      } else if (model.context.getExtension('OES_texture_float') && model.context.getExtension('OES_texture_float_linear')) {
        // use float textures scaled to 0.0 to 1.0
        dataTypeToUse = VtkDataTypes.FLOAT;

        volCopyData = function volCopyData(outArray, outIdx, inValue, soffset, sscale) {
          outArray[outIdx] = (inValue - soffset) / sscale;
        };
      } else {
        // worst case, scale data to uchar
        dataTypeToUse = VtkDataTypes.UNSIGNED_CHAR;

        volCopyData = function volCopyData(outArray, outIdx, inValue, soffset, sscale) {
          outArray[outIdx] = 255.0 * (inValue - soffset) / sscale;
        };
      } // Now determine the texture parameters using the arguments.


      publicAPI.getOpenGLDataType(dataTypeToUse);
      publicAPI.getInternalFormat(dataTypeToUse, numComps);
      publicAPI.getFormat(dataTypeToUse, numComps);

      if (!model.internalFormat || !model.format || !model.openGLDataType) {
        vtkErrorMacro$d('Failed to determine texture parameters.');
        return false;
      } // have to pack this 3D texture into pot 2D texture


      model.target = model.context.TEXTURE_2D;
      model.components = numComps;
      model.depth = 1;
      model.numberOfDimensions = 2; // MAX_TEXTURE_SIZE gives the max dimensions that can be supported by the GPU,
      // but it doesn't mean it will fit in memory. If we have to use a float data type
      // or 4 components, there are good chances that the texture size will blow up
      // and could not fit in the GPU memory. Use a smaller texture size in that case,
      // which will force a downsampling of the dataset.
      // That problem does not occur when using webGL2 since we can pack the data in
      // denser textures based on our data type.
      // TODO: try to fit in the biggest supported texture, catch the gl error if it
      // does not fix (OUT_OF_MEMORY), then attempt with smaller texture

      var maxTexDim = model.context.getParameter(model.context.MAX_TEXTURE_SIZE);

      if (maxTexDim > 4096 && (dataTypeToUse === VtkDataTypes.FLOAT || numComps >= 3)) {
        maxTexDim = 4096;
      } // compute estimate for XY subsample


      var xstride = 1;
      var ystride = 1;

      if (numPixelsIn > maxTexDim * maxTexDim) {
        xstride = Math.ceil(Math.sqrt(numPixelsIn / (maxTexDim * maxTexDim)));
        ystride = xstride;
      }

      var targetWidth = Math.sqrt(numPixelsIn) / xstride;
      targetWidth = nearestPowerOfTwo(targetWidth); // determine X reps

      var xreps = Math.floor(targetWidth * xstride / width);
      var yreps = Math.ceil(depth / xreps);
      var targetHeight = nearestPowerOfTwo(height * yreps / ystride);
      model.width = targetWidth;
      model.height = targetHeight;
      model.openGLRenderWindow.activateTexture(publicAPI);
      publicAPI.createTexture();
      publicAPI.bind(); // store the information, we will need it later

      model.volumeInfo.xreps = xreps;
      model.volumeInfo.yreps = yreps;
      model.volumeInfo.xstride = xstride;
      model.volumeInfo.ystride = ystride;
      model.volumeInfo.offset = res.offset;
      model.volumeInfo.scale = res.scale; // OK stuff the data into the 2d TEXTURE
      // first allocate the new texture

      var newArray;
      var pixCount = targetWidth * targetHeight * numComps;

      if (dataTypeToUse === VtkDataTypes.FLOAT) {
        newArray = new Float32Array(pixCount);
      } else {
        newArray = new Uint8Array(pixCount);
      } // then stuff the data into it, nothing fancy right now
      // for stride


      var outIdx = 0;
      var tileWidth = Math.floor(width / xstride);
      var tileHeight = Math.floor(height / ystride);

      for (var yRep = 0; yRep < yreps; yRep++) {
        var xrepsThisRow = Math.min(xreps, depth - yRep * xreps);
        var outXContIncr = numComps * (model.width - xrepsThisRow * Math.floor(width / xstride));

        for (var tileY = 0; tileY < tileHeight; tileY++) {
          for (var xRep = 0; xRep < xrepsThisRow; xRep++) {
            var inOffset = numComps * ((yRep * xreps + xRep) * width * height + ystride * tileY * width);

            for (var tileX = 0; tileX < tileWidth; tileX++) {
              // copy value
              for (var _nc = 0; _nc < numComps; _nc++) {
                volCopyData(newArray, outIdx, data[inOffset + xstride * tileX * numComps + _nc], res.offset[_nc], res.scale[_nc]);
                outIdx++;
              }
            }
          }

          outIdx += outXContIncr;
        }
      } // Source texture data from the PBO.
      // model.context.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);


      model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1);
      model.context.texImage2D(model.target, 0, model.internalFormat, model.width, model.height, 0, model.format, model.openGLDataType, newArray);
      publicAPI.deactivate();
      return true;
    };

    publicAPI.setOpenGLRenderWindow = function (rw) {
      if (model.openGLRenderWindow === rw) {
        return;
      }

      publicAPI.releaseGraphicsResources();
      model.openGLRenderWindow = rw;
      model.context = null;

      if (rw) {
        model.context = model.openGLRenderWindow.getContext();
      }
    }; //----------------------------------------------------------------------------


    publicAPI.getMaximumTextureSize = function (ctx) {
      if (ctx && ctx.isCurrent()) {
        return ctx.getIntegerv(ctx.MAX_TEXTURE_SIZE);
      }

      return -1;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$Z = {
    openGLRenderWindow: null,
    context: null,
    handle: 0,
    sendParametersTime: null,
    textureBuildTime: null,
    numberOfDimensions: 0,
    target: 0,
    format: 0,
    openGLDataType: 0,
    components: 0,
    width: 0,
    height: 0,
    depth: 0,
    autoParameters: true,
    wrapS: Wrap$1.CLAMP_TO_EDGE,
    wrapT: Wrap$1.CLAMP_TO_EDGE,
    wrapR: Wrap$1.CLAMP_TO_EDGE,
    minificationFilter: Filter$1.NEAREST,
    magnificationFilter: Filter$1.NEAREST,
    minLOD: -1000.0,
    maxLOD: 1000.0,
    baseLevel: 0,
    maxLevel: 1000,
    generateMipmap: false
  }; // ----------------------------------------------------------------------------

  function extend$$(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$Z, initialValues); // Inheritance

    vtkViewNode$1.extend(publicAPI, model, initialValues);
    model.sendParametersTime = {};
    obj(model.sendParametersTime, {
      mtime: 0
    });
    model.textureBuildTime = {};
    obj(model.textureBuildTime, {
      mtime: 0
    }); // Build VTK API

    set(publicAPI, model, ['format', 'openGLDataType']);
    setGet(publicAPI, model, ['keyMatrixTime', 'minificationFilter', 'magnificationFilter', 'wrapS', 'wrapT', 'wrapR', 'generateMipmap']);
    get$1(publicAPI, model, ['width', 'height', 'volumeInfo', 'components', 'handle', 'target']); // Object methods

    vtkOpenGLTexture(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$X = newInstance$1j(extend$$, 'vtkOpenGLTexture'); // ----------------------------------------------------------------------------

  var vtkOpenGLTexture$1 = _objectSpread$d({
    newInstance: newInstance$X,
    extend: extend$$
  }, Constants$5); // Register ourself to OpenGL backend if imported

  registerOverride$1('vtkTexture', newInstance$X);

  function ownKeys$c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$c(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$c(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  var Representation$3 = PropertyConst.Representation,
      Interpolation = PropertyConst.Interpolation;

  function notImplemented$3(method) {
    return function () {
      return macro.vtkErrorMacro("vtkProperty::".concat(method, " - NOT IMPLEMENTED"));
    };
  } // ----------------------------------------------------------------------------
  // vtkProperty methods
  // ----------------------------------------------------------------------------


  function vtkProperty(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkProperty');

    publicAPI.setColor = function (r, g, b) {
      if (Array.isArray(r)) {
        if (model.color[0] !== r[0] || model.color[1] !== r[1] || model.color[2] !== r[2]) {
          model.color[0] = r[0];
          model.color[1] = r[1];
          model.color[2] = r[2];
          publicAPI.modified();
        }
      } else if (model.color[0] !== r || model.color[1] !== g || model.color[2] !== b) {
        model.color[0] = r;
        model.color[1] = g;
        model.color[2] = b;
        publicAPI.modified();
      }

      publicAPI.setDiffuseColor(model.color);
      publicAPI.setAmbientColor(model.color);
      publicAPI.setSpecularColor(model.color);
    };

    publicAPI.computeCompositeColor = notImplemented$3('ComputeCompositeColor');

    publicAPI.getColor = function () {
      // Inline computeCompositeColor
      var norm = 0.0;

      if (model.ambient + model.diffuse + model.specular > 0) {
        norm = 1.0 / (model.ambient + model.diffuse + model.specular);
      }

      for (var i = 0; i < 3; i++) {
        model.color[i] = norm * (model.ambient * model.ambientColor[i] + model.diffuse * model.diffuseColor[i] + model.specular * model.specularColor[i]);
      }

      return [].concat(model.color);
    };

    publicAPI.addShaderVariable = notImplemented$3('AddShaderVariable');

    publicAPI.setInterpolationToFlat = function () {
      return publicAPI.setInterpolation(Interpolation.FLAT);
    };

    publicAPI.setInterpolationToGouraud = function () {
      return publicAPI.setInterpolation(Interpolation.GOURAUD);
    };

    publicAPI.setInterpolationToPhong = function () {
      return publicAPI.setInterpolation(Interpolation.PHONG);
    };

    publicAPI.getInterpolationAsString = function () {
      return macro.enumToString(Interpolation, model.interpolation);
    };

    publicAPI.setRepresentationToWireframe = function () {
      return publicAPI.setRepresentation(Representation$3.WIREFRAME);
    };

    publicAPI.setRepresentationToSurface = function () {
      return publicAPI.setRepresentation(Representation$3.SURFACE);
    };

    publicAPI.setRepresentationToPoints = function () {
      return publicAPI.setRepresentation(Representation$3.POINTS);
    };

    publicAPI.getRepresentationAsString = function () {
      return macro.enumToString(Representation$3, model.representation);
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$Y = {
    color: [1, 1, 1],
    ambientColor: [1, 1, 1],
    diffuseColor: [1, 1, 1],
    specularColor: [1, 1, 1],
    edgeColor: [0, 0, 0],
    ambient: 0,
    diffuse: 1,
    specular: 0,
    specularPower: 1,
    opacity: 1,
    interpolation: Interpolation.GOURAUD,
    representation: Representation$3.SURFACE,
    edgeVisibility: false,
    backfaceCulling: false,
    frontfaceCulling: false,
    pointSize: 1,
    lineWidth: 1,
    lighting: true,
    shading: false,
    materialName: null
  }; // ----------------------------------------------------------------------------

  function extend$_(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$Y, initialValues); // Build VTK API

    macro.obj(publicAPI, model);
    macro.setGet(publicAPI, model, ['lighting', 'interpolation', 'ambient', 'diffuse', 'specular', 'specularPower', 'opacity', 'edgeVisibility', 'lineWidth', 'pointSize', 'backfaceCulling', 'frontfaceCulling', 'representation']);
    macro.setGetArray(publicAPI, model, ['ambientColor', 'specularColor', 'diffuseColor', 'edgeColor'], 3); // Object methods

    vtkProperty(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$W = macro.newInstance(extend$_, 'vtkProperty'); // ----------------------------------------------------------------------------

  var vtkProperty$1 = _objectSpread$c({
    newInstance: newInstance$W,
    extend: extend$_
  }, PropertyConst);

  var vtkPolyDataVS = "//VTK::System::Dec\n\n/*=========================================================================\n\n  Program:   Visualization Toolkit\n  Module:    vtkPolyDataVS.glsl\n\n  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\n  All rights reserved.\n  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\n\n     This software is distributed WITHOUT ANY WARRANTY; without even\n     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n     PURPOSE.  See the above copyright notice for more information.\n\n=========================================================================*/\n\nattribute vec4 vertexMC;\n\n// frag position in VC\n//VTK::PositionVC::Dec\n\n// optional normal declaration\n//VTK::Normal::Dec\n\n// extra lighting parameters\n//VTK::Light::Dec\n\n// Texture coordinates\n//VTK::TCoord::Dec\n\n// material property values\n//VTK::Color::Dec\n\n// clipping plane vars\n//VTK::Clip::Dec\n\n// camera and actor matrix values\n//VTK::Camera::Dec\n\n// Apple Bug\n//VTK::PrimID::Dec\n\n// picking support\n//VTK::Picking::Dec\n\nvoid main()\n{\n  //VTK::Color::Impl\n\n  //VTK::Normal::Impl\n\n  //VTK::TCoord::Impl\n\n  //VTK::Clip::Impl\n\n  //VTK::PrimID::Impl\n\n  //VTK::PositionVC::Impl\n\n  //VTK::Light::Impl\n\n  //VTK::Picking::Impl\n}\n";

  var vtkPolyDataFS = "//VTK::System::Dec\n\n/*=========================================================================\n\n  Program:   Visualization Toolkit\n  Module:    vtkPolyDataFS.glsl\n\n  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\n  All rights reserved.\n  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\n\n     This software is distributed WITHOUT ANY WARRANTY; without even\n     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n     PURPOSE.  See the above copyright notice for more information.\n\n=========================================================================*/\n// Template for the polydata mappers fragment shader\n\nuniform int PrimitiveIDOffset;\n\n// VC position of this fragment\n//VTK::PositionVC::Dec\n\n// optional color passed in from the vertex shader, vertexColor\n//VTK::Color::Dec\n\n// optional surface normal declaration\n//VTK::Normal::Dec\n\n// extra lighting parameters\n//VTK::Light::Dec\n\n// Texture coordinates\n//VTK::TCoord::Dec\n\n// picking support\n//VTK::Picking::Dec\n\n// Depth Peeling Support\n//VTK::DepthPeeling::Dec\n\n// clipping plane vars\n//VTK::Clip::Dec\n\n// the output of this shader\n//VTK::Output::Dec\n\n// Apple Bug\n//VTK::PrimID::Dec\n\n// handle coincident offsets\n//VTK::Coincident::Dec\n\n//VTK::ZBuffer::Dec\n\nvoid main()\n{\n  // VC position of this fragment. This should not branch/return/discard.\n  //VTK::PositionVC::Impl\n\n  // Place any calls that require uniform flow (e.g. dFdx) here.\n  //VTK::UniformFlow::Impl\n\n  // Set gl_FragDepth here (gl_FragCoord.z by default)\n  //VTK::Depth::Impl\n\n  // Early depth peeling abort:\n  //VTK::DepthPeeling::PreColor\n\n  // Apple Bug\n  //VTK::PrimID::Impl\n\n  //VTK::Clip::Impl\n\n  //VTK::Color::Impl\n\n  // Generate the normal if we are not passed in one\n  //VTK::Normal::Impl\n\n  //VTK::TCoord::Impl\n\n  //VTK::Light::Impl\n\n  if (gl_FragData[0].a <= 0.0)\n    {\n    discard;\n    }\n\n  //VTK::DepthPeeling::Impl\n\n  //VTK::Picking::Impl\n\n  // handle coincident offsets\n  //VTK::Coincident::Impl\n\n  //VTK::ZBuffer::Impl\n}\n";

  function implementReplaceShaderCoincidentOffset(publicAPI, model) {

    publicAPI.replaceShaderCoincidentOffset = function (shaders, ren, actor) {
      var cp = publicAPI.getCoincidentParameters(ren, actor); // if we need an offset handle it here
      // The value of .000016 is suitable for depth buffers
      // of at least 16 bit depth. We do not query the depth
      // right now because we would need some mechanism to
      // cache the result taking into account FBO changes etc.

      if (cp && (cp.factor !== 0.0 || cp.offset !== 0.0)) {
        var FSSource = shaders.Fragment;
        FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Coincident::Dec', ['uniform float cfactor;', 'uniform float coffset;']).result;

        if (model.context.getExtension('EXT_frag_depth')) {
          if (cp.factor !== 0.0) {
            FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::UniformFlow::Impl', ['float cscale = length(vec2(dFdx(gl_FragCoord.z),dFdy(gl_FragCoord.z)));', '//VTK::UniformFlow::Impl'], false).result;
            FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Depth::Impl', 'gl_FragDepthEXT = gl_FragCoord.z + cfactor*cscale + 0.000016*coffset;').result;
          } else {
            FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Depth::Impl', 'gl_FragDepthEXT = gl_FragCoord.z + 0.000016*coffset;').result;
          }
        }

        if (model.openGLRenderWindow.getWebgl2()) {
          if (cp.factor !== 0.0) {
            FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::UniformFlow::Impl', ['float cscale = length(vec2(dFdx(gl_FragCoord.z),dFdy(gl_FragCoord.z)));', '//VTK::UniformFlow::Impl'], false).result;
            FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Depth::Impl', 'gl_FragDepth = gl_FragCoord.z + cfactor*cscale + 0.000016*coffset;').result;
          } else {
            FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Depth::Impl', 'gl_FragDepth = gl_FragCoord.z + 0.000016*coffset;').result;
          }
        }

        shaders.Fragment = FSSource;
      }
    };
  }

  var vtkReplacementShaderMapper = {
    implementReplaceShaderCoincidentOffset: implementReplaceShaderCoincidentOffset
  };

  /* eslint-disable no-lonely-if */

  var primTypes$1 = {
    Start: 0,
    Points: 0,
    Lines: 1,
    Tris: 2,
    TriStrips: 3,
    TrisEdges: 4,
    TriStripsEdges: 5,
    End: 6
  };
  var Representation$2 = vtkProperty$1.Representation,
      Shading = vtkProperty$1.Shading;
  var ScalarMode$3 = vtkMapper$1.ScalarMode;
  var Filter = vtkOpenGLTexture$1.Filter,
      Wrap = vtkOpenGLTexture$1.Wrap;
  var vtkErrorMacro$c = vtkErrorMacro$m;
  var StartEvent$2 = {
    type: 'StartEvent'
  };
  var EndEvent$2 = {
    type: 'EndEvent'
  }; // ----------------------------------------------------------------------------
  // vtkOpenGLPolyDataMapper methods
  // ----------------------------------------------------------------------------

  function vtkOpenGLPolyDataMapper(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkOpenGLPolyDataMapper');

    publicAPI.buildPass = function (prepass) {
      if (prepass) {
        model.openGLActor = publicAPI.getFirstAncestorOfType('vtkOpenGLActor');
        model.openGLRenderer = model.openGLActor.getFirstAncestorOfType('vtkOpenGLRenderer');
        model.openGLRenderWindow = model.openGLRenderer.getParent();
        model.openGLCamera = model.openGLRenderer.getViewNodeFor(model.openGLRenderer.getRenderable().getActiveCamera());
      }
    }; // Renders myself


    publicAPI.translucentPass = function (prepass) {
      if (prepass) {
        publicAPI.render();
      }
    };

    publicAPI.opaqueZBufferPass = function (prepass) {
      if (prepass) {
        model.haveSeenDepthRequest = true;
        model.renderDepth = true;
        publicAPI.render();
        model.renderDepth = false;
      }
    };

    publicAPI.opaquePass = function (prepass) {
      if (prepass) {
        publicAPI.render();
      }
    };

    publicAPI.render = function () {
      var ctx = model.openGLRenderWindow.getContext();

      if (model.context !== ctx) {
        model.context = ctx;

        for (var i = primTypes$1.Start; i < primTypes$1.End; i++) {
          model.primitives[i].setOpenGLRenderWindow(model.openGLRenderWindow);
        }
      }

      var actor = model.openGLActor.getRenderable();
      var ren = model.openGLRenderer.getRenderable();
      publicAPI.renderPiece(ren, actor);
    };

    publicAPI.buildShaders = function (shaders, ren, actor) {
      publicAPI.getShaderTemplate(shaders, ren, actor); // user specified pre replacements

      var openGLSpec = model.renderable.getViewSpecificProperties().OpenGL;
      var shaderReplacements = null;

      if (openGLSpec) {
        shaderReplacements = openGLSpec.ShaderReplacements;
      }

      if (shaderReplacements) {
        for (var i = 0; i < shaderReplacements.length; i++) {
          var currReplacement = shaderReplacements[i];

          if (currReplacement.replaceFirst) {
            var shaderType = currReplacement.shaderType;
            var ssrc = shaders[shaderType];
            var substituteRes = vtkShaderProgram$1.substitute(ssrc, currReplacement.originalValue, currReplacement.replacementValue, currReplacement.replaceAll);
            shaders[shaderType] = substituteRes.result;
          }
        }
      }

      publicAPI.replaceShaderValues(shaders, ren, actor); // user specified post replacements

      if (shaderReplacements) {
        for (var _i = 0; _i < shaderReplacements.length; _i++) {
          var _currReplacement = shaderReplacements[_i];

          if (!_currReplacement.replaceFirst) {
            var _shaderType = _currReplacement.shaderType;
            var _ssrc = shaders[_shaderType];

            var _substituteRes = vtkShaderProgram$1.substitute(_ssrc, _currReplacement.originalValue, _currReplacement.replacementValue, _currReplacement.replaceAll);

            shaders[_shaderType] = _substituteRes.result;
          }
        }
      }
    };

    publicAPI.getShaderTemplate = function (shaders, ren, actor) {
      var openGLSpecProp = model.renderable.getViewSpecificProperties().OpenGL;
      var vertexShaderCode = vtkPolyDataVS;

      if (openGLSpecProp) {
        var vertexSpecProp = openGLSpecProp.VertexShaderCode;

        if (vertexSpecProp !== undefined && vertexSpecProp !== '') {
          vertexShaderCode = vertexSpecProp;
        }
      }

      shaders.Vertex = vertexShaderCode;
      var fragmentShaderCode = vtkPolyDataFS;

      if (openGLSpecProp) {
        var fragmentSpecProp = openGLSpecProp.FragmentShaderCode;

        if (fragmentSpecProp !== undefined && fragmentSpecProp !== '') {
          fragmentShaderCode = fragmentSpecProp;
        }
      }

      shaders.Fragment = fragmentShaderCode;
      var geometryShaderCode = '';

      if (openGLSpecProp) {
        var geometrySpecProp = openGLSpecProp.GeometryShaderCode;

        if (geometrySpecProp !== undefined) {
          geometryShaderCode = geometrySpecProp;
        }
      }

      shaders.Geometry = geometryShaderCode;
    };

    publicAPI.replaceShaderColor = function (shaders, ren, actor) {
      var VSSource = shaders.Vertex;
      var GSSource = shaders.Geometry;
      var FSSource = shaders.Fragment;
      var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity'); // create the material/color property declarations, and VS implementation
      // these are always defined

      var colorDec = ['uniform float ambient;', 'uniform float diffuse;', 'uniform float specular;', 'uniform float opacityUniform; // the fragment opacity', 'uniform vec3 ambientColorUniform;', 'uniform vec3 diffuseColorUniform;']; // add more for specular

      if (lastLightComplexity) {
        colorDec = colorDec.concat(['uniform vec3 specularColorUniform;', 'uniform float specularPowerUniform;']);
      } // now handle the more complex fragment shader implementation
      // the following are always defined variables.  We start
      // by assigning a default value from the uniform


      var colorImpl = ['vec3 ambientColor;', '  vec3 diffuseColor;', '  float opacity;'];

      if (lastLightComplexity) {
        colorImpl = colorImpl.concat(['  vec3 specularColor;', '  float specularPower;']);
      }

      colorImpl = colorImpl.concat(['  ambientColor = ambientColorUniform;', '  diffuseColor = diffuseColorUniform;', '  opacity = opacityUniform;']);

      if (lastLightComplexity) {
        colorImpl = colorImpl.concat(['  specularColor = specularColorUniform;', '  specularPower = specularPowerUniform;']);
      } // add scalar vertex coloring


      if (model.lastBoundBO.getCABO().getColorComponents() !== 0 && !model.drawingEdges) {
        colorDec = colorDec.concat(['varying vec4 vertexColorVSOutput;']);
        VSSource = vtkShaderProgram$1.substitute(VSSource, '//VTK::Color::Dec', ['attribute vec4 scalarColor;', 'varying vec4 vertexColorVSOutput;']).result;
        VSSource = vtkShaderProgram$1.substitute(VSSource, '//VTK::Color::Impl', ['vertexColorVSOutput =  scalarColor;']).result;
        GSSource = vtkShaderProgram$1.substitute(GSSource, '//VTK::Color::Dec', ['in vec4 vertexColorVSOutput[];', 'out vec4 vertexColorGSOutput;']).result;
        GSSource = vtkShaderProgram$1.substitute(GSSource, '//VTK::Color::Impl', ['vertexColorGSOutput = vertexColorVSOutput[i];']).result;
      }

      if (model.lastBoundBO.getCABO().getColorComponents() !== 0 && !model.drawingEdges) {
        FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Color::Impl', colorImpl.concat(['  diffuseColor = vertexColorVSOutput.rgb;', '  ambientColor = vertexColorVSOutput.rgb;', '  opacity = opacity*vertexColorVSOutput.a;'])).result;
      } else {
        if (model.renderable.getInterpolateScalarsBeforeMapping() && model.renderable.getColorCoordinates() && !model.drawingEdges) {
          FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Color::Impl', colorImpl.concat(['  vec4 texColor = texture2D(texture1, tcoordVCVSOutput.st);', '  diffuseColor = texColor.rgb;', '  ambientColor = texColor.rgb;', '  opacity = opacity*texColor.a;'])).result;
        } else {
          if (actor.getBackfaceProperty() && !model.drawingEdges) {
            colorDec = colorDec.concat(['uniform float opacityUniformBF; // the fragment opacity', 'uniform float ambientIntensityBF; // the material ambient', 'uniform float diffuseIntensityBF; // the material diffuse', 'uniform vec3 ambientColorUniformBF; // ambient material color', 'uniform vec3 diffuseColorUniformBF; // diffuse material color']);

            if (lastLightComplexity) {
              colorDec = colorDec.concat(['uniform float specularIntensityBF; // the material specular intensity', 'uniform vec3 specularColorUniformBF; // intensity weighted color', 'uniform float specularPowerUniformBF;']);
              colorImpl = colorImpl.concat(['if (gl_FrontFacing == false) {', '  ambientColor = ambientIntensityBF * ambientColorUniformBF;', '  diffuseColor = diffuseIntensityBF * diffuseColorUniformBF;', '  specularColor = specularIntensityBF * specularColorUniformBF;', '  specularPower = specularPowerUniformBF;', '  opacity = opacityUniformBF; }']);
            } else {
              colorImpl = colorImpl.concat(['if (gl_FrontFacing == false) {', '  ambientColor = ambientIntensityBF * ambientColorUniformBF;', '  diffuseColor = diffuseIntensityBF * diffuseColorUniformBF;', '  opacity = opacityUniformBF; }']);
            }
          }

          if (model.haveCellScalars && !model.drawingEdges) {
            colorDec = colorDec.concat(['uniform samplerBuffer texture1;']);
          }

          FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Color::Impl', colorImpl).result;
        }
      }

      FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Color::Dec', colorDec).result;
      shaders.Vertex = VSSource;
      shaders.Geometry = GSSource;
      shaders.Fragment = FSSource;
    };

    publicAPI.replaceShaderLight = function (shaders, ren, actor) {
      var FSSource = shaders.Fragment; // check for shadow maps

      var shadowFactor = '';
      var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');
      var lastLightCount = model.lastBoundBO.getReferenceByName('lastLightCount');
      var sstring = [];

      switch (lastLightComplexity) {
        case 0:
          // no lighting or RENDER_VALUES
          FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Light::Impl', ['  gl_FragData[0] = vec4(ambientColor * ambient + diffuseColor * diffuse, opacity);', '  //VTK::Light::Impl'], false).result;
          break;

        case 1:
          // headlight
          FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Light::Impl', ['  float df = max(0.0, normalVCVSOutput.z);', '  float sf = pow(df, specularPower);', '  vec3 diffuseL = df * diffuseColor;', '  vec3 specularL = sf * specularColor;', '  gl_FragData[0] = vec4(ambientColor * ambient + diffuseL * diffuse + specularL * specular, opacity);', '  //VTK::Light::Impl'], false).result;
          break;

        case 2:
          // light kit
          for (var lc = 0; lc < lastLightCount; ++lc) {
            sstring = sstring.concat(["uniform vec3 lightColor".concat(lc, ";"), "uniform vec3 lightDirectionVC".concat(lc, "; // normalized"), "uniform vec3 lightHalfAngleVC".concat(lc, "; // normalized")]);
          }

          FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Light::Dec', sstring).result;
          sstring = ['vec3 diffuseL = vec3(0,0,0);', '  vec3 specularL = vec3(0,0,0);', '  float df;'];

          for (var _lc = 0; _lc < lastLightCount; ++_lc) {
            sstring = sstring.concat(["  df = max(0.0, dot(normalVCVSOutput, -lightDirectionVC".concat(_lc, "));"), "  diffuseL += ((df".concat(shadowFactor, ") * lightColor").concat(_lc, ");"), "  if (dot(normalVCVSOutput, lightDirectionVC".concat(_lc, ") < 0.0)"), '    {', "    float sf = pow( max(0.0, dot(lightHalfAngleVC".concat(_lc, ",normalVCVSOutput)), specularPower);"), "    specularL += ((sf".concat(shadowFactor, ") * lightColor").concat(_lc, ");"), '    }']);
          }

          sstring = sstring.concat(['  diffuseL = diffuseL * diffuseColor;', '  specularL = specularL * specularColor;', '  gl_FragData[0] = vec4(ambientColor * ambient + diffuseL * diffuse + specularL * specular, opacity);', '  //VTK::Light::Impl']);
          FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Light::Impl', sstring, false).result;
          break;

        case 3:
          // positional
          for (var _lc2 = 0; _lc2 < lastLightCount; ++_lc2) {
            sstring = sstring.concat(["uniform vec3 lightColor".concat(_lc2, ";"), "uniform vec3 lightDirectionVC".concat(_lc2, "; // normalized"), "uniform vec3 lightHalfAngleVC".concat(_lc2, "; // normalized"), "uniform vec3 lightPositionVC".concat(_lc2, ";"), "uniform vec3 lightAttenuation".concat(_lc2, ";"), "uniform float lightConeAngle".concat(_lc2, ";"), "uniform float lightExponent".concat(_lc2, ";"), "uniform int lightPositional".concat(_lc2, ";")]);
          }

          FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Light::Dec', sstring).result;
          sstring = ['vec3 diffuseL = vec3(0,0,0);', '  vec3 specularL = vec3(0,0,0);', '  vec3 vertLightDirectionVC;', '  float attenuation;', '  float df;'];

          for (var _lc3 = 0; _lc3 < lastLightCount; ++_lc3) {
            sstring = sstring.concat(['  attenuation = 1.0;', "  if (lightPositional".concat(_lc3, " == 0)"), '    {', "      vertLightDirectionVC = lightDirectionVC".concat(_lc3, ";"), '    }', '  else', '    {', "    vertLightDirectionVC = vertexVC.xyz - lightPositionVC".concat(_lc3, ";"), '    float distanceVC = length(vertLightDirectionVC);', '    vertLightDirectionVC = normalize(vertLightDirectionVC);', '    attenuation = 1.0 /', "      (lightAttenuation".concat(_lc3, ".x"), "       + lightAttenuation".concat(_lc3, ".y * distanceVC"), "       + lightAttenuation".concat(_lc3, ".z * distanceVC * distanceVC);"), '    // per OpenGL standard cone angle is 90 or less for a spot light', "    if (lightConeAngle".concat(_lc3, " <= 90.0)"), '      {', "      float coneDot = dot(vertLightDirectionVC, lightDirectionVC".concat(_lc3, ");"), '      // if inside the cone', "      if (coneDot >= cos(radians(lightConeAngle".concat(_lc3, ")))"), '        {', "        attenuation = attenuation * pow(coneDot, lightExponent".concat(_lc3, ");"), '        }', '      else', '        {', '        attenuation = 0.0;', '        }', '      }', '    }', '    df = max(0.0, attenuation*dot(normalVCVSOutput, -vertLightDirectionVC));', "    diffuseL += ((df".concat(shadowFactor, ") * lightColor").concat(_lc3, ");"), '    if (dot(normalVCVSOutput, vertLightDirectionVC) < 0.0)', '      {', "      float sf = attenuation*pow( max(0.0, dot(lightHalfAngleVC".concat(_lc3, ",normalVCVSOutput)), specularPower);"), "    specularL += ((sf".concat(shadowFactor, ") * lightColor").concat(_lc3, ");"), '    }']);
          }

          sstring = sstring.concat(['  diffuseL = diffuseL * diffuseColor;', '  specularL = specularL * specularColor;', '  gl_FragData[0] = vec4(ambientColor * ambient + diffuseL * diffuse + specularL * specular, opacity);', '  //VTK::Light::Impl']);
          FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Light::Impl', sstring, false).result;
          break;

        default:
          vtkErrorMacro$c('bad light complexity');
      }

      shaders.Fragment = FSSource;
    };

    publicAPI.replaceShaderNormal = function (shaders, ren, actor) {
      var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');

      if (lastLightComplexity > 0) {
        var VSSource = shaders.Vertex;
        var GSSource = shaders.Geometry;
        var FSSource = shaders.Fragment;

        if (model.lastBoundBO.getCABO().getNormalOffset()) {
          VSSource = vtkShaderProgram$1.substitute(VSSource, '//VTK::Normal::Dec', ['attribute vec3 normalMC;', 'uniform mat3 normalMatrix;', 'varying vec3 normalVCVSOutput;']).result;
          VSSource = vtkShaderProgram$1.substitute(VSSource, '//VTK::Normal::Impl', ['normalVCVSOutput = normalMatrix * normalMC;']).result;
          GSSource = vtkShaderProgram$1.substitute(GSSource, '//VTK::Normal::Dec', ['in vec3 normalVCVSOutput[];', 'out vec3 normalVCGSOutput;']).result;
          GSSource = vtkShaderProgram$1.substitute(GSSource, '//VTK::Normal::Impl', ['normalVCGSOutput = normalVCVSOutput[i];']).result;
          FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Normal::Dec', ['varying vec3 normalVCVSOutput;']).result;
          FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Normal::Impl', ['vec3 normalVCVSOutput = normalize(normalVCVSOutput);', //  if (!gl_FrontFacing) does not work in intel hd4000 mac
          //  if (int(gl_FrontFacing) == 0) does not work on mesa
          '  if (gl_FrontFacing == false) { normalVCVSOutput = -normalVCVSOutput; }']).result;
        } else {
          if (model.haveCellNormals) {
            FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Normal::Dec', ['uniform mat3 normalMatrix;', 'uniform samplerBuffer textureN;']).result;
            FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Normal::Impl', ['vec3 normalVCVSOutput = normalize(normalMatrix *', '    texelFetchBuffer(textureN, gl_PrimitiveID + PrimitiveIDOffset).xyz);', '  if (gl_FrontFacing == false) { normalVCVSOutput = -normalVCVSOutput; }']).result;
          } else {
            if (publicAPI.getOpenGLMode(actor.getProperty().getRepresentation(), model.lastBoundBO.getPrimitiveType()) === model.context.LINES) {
              // generate a normal for lines, it will be perpendicular to the line
              // and maximally aligned with the camera view direction
              // no clue if this is the best way to do this.
              // the code below has been optimized a bit so what follows is
              // an explanation of the basic approach. Compute the gradient of the line
              // with respect to x and y, the the larger of the two
              // cross that with the camera view direction. That gives a vector
              // orthogonal to the camera view and the line. Note that the line and the camera
              // view are probably not orthogonal. Which is why when we cross result that with
              // the line gradient again we get a reasonable normal. It will be othogonal to
              // the line (which is a plane but maximally aligned with the camera view.
              FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::UniformFlow::Impl', ['  vec3 fdx = dFdx(vertexVC.xyz);', '  vec3 fdy = dFdy(vertexVC.xyz);', '  //VTK::UniformFlow::Impl'] // For further replacements
              ).result;
              FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Normal::Impl', ['vec3 normalVCVSOutput;', '  if (abs(fdx.x) > 0.0)', '    { fdx = normalize(fdx); normalVCVSOutput = normalize(cross(vec3(fdx.y, -fdx.x, 0.0), fdx)); }', '  else { fdy = normalize(fdy); normalVCVSOutput = normalize(cross(vec3(fdy.y, -fdy.x, 0.0), fdy));}']).result;
            } else {
              FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Normal::Dec', ['uniform int cameraParallel;']).result;
              FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::UniformFlow::Impl', [// '  vec3 fdx = vec3(dFdx(vertexVC.x),dFdx(vertexVC.y),dFdx(vertexVC.z));',
              // '  vec3 fdy = vec3(dFdy(vertexVC.x),dFdy(vertexVC.y),dFdy(vertexVC.z));',
              '  vec3 fdx = dFdx(vertexVC.xyz);', '  vec3 fdy = dFdy(vertexVC.xyz);', '  //VTK::UniformFlow::Impl'] // For further replacements
              ).result;
              FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Normal::Impl', ['  fdx = normalize(fdx);', '  fdy = normalize(fdy);', '  vec3 normalVCVSOutput = normalize(cross(fdx,fdy));', // the code below is faster, but does not work on some devices
              // 'vec3 normalVC = normalize(cross(dFdx(vertexVC.xyz), dFdy(vertexVC.xyz)));',
              '  if (cameraParallel == 1 && normalVCVSOutput.z < 0.0) { normalVCVSOutput = -1.0*normalVCVSOutput; }', '  if (cameraParallel == 0 && dot(normalVCVSOutput,vertexVC.xyz) > 0.0) { normalVCVSOutput = -1.0*normalVCVSOutput; }']).result;
            }
          }
        }

        shaders.Vertex = VSSource;
        shaders.Geometry = GSSource;
        shaders.Fragment = FSSource;
      }
    };

    publicAPI.replaceShaderPositionVC = function (shaders, ren, actor) {
      var VSSource = shaders.Vertex;
      var GSSource = shaders.Geometry;
      var FSSource = shaders.Fragment; // for points make sure to add in the point size

      if (actor.getProperty().getRepresentation() === Representation$2.POINTS || model.lastBoundBO.getPrimitiveType() === primTypes$1.Points) {
        VSSource = vtkShaderProgram$1.substitute(VSSource, '//VTK::PositionVC::Impl', ['//VTK::PositionVC::Impl', "  gl_PointSize = ".concat(actor.getProperty().getPointSize(), ".0;")], false).result;
      } // do we need the vertex in the shader in View Coordinates


      var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');

      if (lastLightComplexity > 0) {
        VSSource = vtkShaderProgram$1.substitute(VSSource, '//VTK::PositionVC::Dec', ['varying vec4 vertexVCVSOutput;']).result;
        VSSource = vtkShaderProgram$1.substitute(VSSource, '//VTK::PositionVC::Impl', ['vertexVCVSOutput = MCVCMatrix * vertexMC;', '  gl_Position = MCPCMatrix * vertexMC;']).result;
        VSSource = vtkShaderProgram$1.substitute(VSSource, '//VTK::Camera::Dec', ['uniform mat4 MCPCMatrix;', 'uniform mat4 MCVCMatrix;']).result;
        GSSource = vtkShaderProgram$1.substitute(GSSource, '//VTK::PositionVC::Dec', ['in vec4 vertexVCVSOutput[];', 'out vec4 vertexVCGSOutput;']).result;
        GSSource = vtkShaderProgram$1.substitute(GSSource, '//VTK::PositionVC::Impl', ['vertexVCGSOutput = vertexVCVSOutput[i];']).result;
        FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::PositionVC::Dec', ['varying vec4 vertexVCVSOutput;']).result;
        FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::PositionVC::Impl', ['vec4 vertexVC = vertexVCVSOutput;']).result;
      } else {
        VSSource = vtkShaderProgram$1.substitute(VSSource, '//VTK::Camera::Dec', ['uniform mat4 MCPCMatrix;']).result;
        VSSource = vtkShaderProgram$1.substitute(VSSource, '//VTK::PositionVC::Impl', ['  gl_Position = MCPCMatrix * vertexMC;']).result;
      }

      shaders.Vertex = VSSource;
      shaders.Geometry = GSSource;
      shaders.Fragment = FSSource;
    };

    publicAPI.replaceShaderTCoord = function (shaders, ren, actor) {
      if (model.lastBoundBO.getCABO().getTCoordOffset()) {
        var VSSource = shaders.Vertex;
        var GSSource = shaders.Geometry;
        var FSSource = shaders.Fragment;

        if (model.drawingEdges) {
          return;
        }

        VSSource = vtkShaderProgram$1.substitute(VSSource, '//VTK::TCoord::Impl', 'tcoordVCVSOutput = tcoordMC;').result; // we only handle the first texture by default
        // additional textures are activated and we set the uniform
        // for the texture unit they are assigned to, but you have to
        // add in the shader code to do something with them

        var tus = model.openGLActor.getActiveTextures();
        var tNumComp = 2;
        var tcdim = 2;

        if (tus && tus.length > 0) {
          tNumComp = tus[0].getComponents();

          if (tus[0].getTarget() === model.context.TEXTURE_CUBE_MAP) {
            tcdim = 3;
          }
        }

        if (model.renderable.getColorTextureMap()) {
          tNumComp = model.renderable.getColorTextureMap().getPointData().getScalars().getNumberOfComponents();
          tcdim = 2;
        }

        if (tcdim === 2) {
          VSSource = vtkShaderProgram$1.substitute(VSSource, '//VTK::TCoord::Dec', 'attribute vec2 tcoordMC; varying vec2 tcoordVCVSOutput;').result;
          GSSource = vtkShaderProgram$1.substitute(GSSource, '//VTK::TCoord::Dec', ['in vec2 tcoordVCVSOutput[];', 'out vec2 tcoordVCGSOutput;']).result;
          GSSource = vtkShaderProgram$1.substitute(GSSource, '//VTK::TCoord::Impl', 'tcoordVCGSOutput = tcoordVCVSOutput[i];').result;
          FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::TCoord::Dec', ['varying vec2 tcoordVCVSOutput;', 'uniform sampler2D texture1;']).result;

          if (tus && tus.length >= 1) {
            switch (tNumComp) {
              case 1:
                FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::TCoord::Impl', ['  vec4 tcolor = texture2D(texture1, tcoordVCVSOutput);', '  ambientColor = ambientColor*tcolor.r;', '  diffuseColor = diffuseColor*tcolor.r;']).result;
                break;

              case 2:
                FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::TCoord::Impl', ['  vec4 tcolor = texture2D(texture1, tcoordVCVSOutput);', '  ambientColor = ambientColor*tcolor.r;', '  diffuseColor = diffuseColor*tcolor.r;', '  opacity = opacity * tcolor.g;']).result;
                break;

              default:
                FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::TCoord::Impl', ['  vec4 tcolor = texture2D(texture1, tcoordVCVSOutput);', '  ambientColor = ambientColor*tcolor.rgb;', '  diffuseColor = diffuseColor*tcolor.rgb;', '  opacity = opacity * tcolor.a;']).result;
            }
          }
        } else {
          VSSource = vtkShaderProgram$1.substitute(VSSource, '//VTK::TCoord::Dec', 'attribute vec3 tcoordMC; varying vec3 tcoordVCVSOutput;').result;
          GSSource = vtkShaderProgram$1.substitute(GSSource, '//VTK::TCoord::Dec', ['in vec3 tcoordVCVSOutput[];', 'out vec3 tcoordVCGSOutput;']).result;
          GSSource = vtkShaderProgram$1.substitute(GSSource, '//VTK::TCoord::Impl', 'tcoordVCGSOutput = tcoordVCVSOutput[i];').result;
          FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::TCoord::Dec', ['varying vec3 tcoordVCVSOutput;', 'uniform samplerCube texture1;']).result;

          switch (tNumComp) {
            case 1:
              FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::TCoord::Impl', ['  vec4 tcolor = textureCube(texture1, tcoordVCVSOutput);', '  ambientColor = ambientColor*tcolor.r;', '  diffuseColor = diffuseColor*tcolor.r;']).result;
              break;

            case 2:
              FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::TCoord::Impl', ['  vec4 tcolor = textureCube(texture1, tcoordVCVSOutput);', '  ambientColor = ambientColor*tcolor.r;', '  diffuseColor = diffuseColor*tcolor.r;', '  opacity = opacity * tcolor.g;']).result;
              break;

            default:
              FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::TCoord::Impl', ['  vec4 tcolor = textureCube(texture1, tcoordVCVSOutput);', '  ambientColor = ambientColor*tcolor.rgb;', '  diffuseColor = diffuseColor*tcolor.rgb;', '  opacity = opacity * tcolor.a;']).result;
          }
        }

        shaders.Vertex = VSSource;
        shaders.Geometry = GSSource;
        shaders.Fragment = FSSource;
      }
    };

    publicAPI.replaceShaderClip = function (shaders, ren, actor) {
      var VSSource = shaders.Vertex;
      var FSSource = shaders.Fragment;

      if (model.renderable.getNumberOfClippingPlanes()) {
        var numClipPlanes = model.renderable.getNumberOfClippingPlanes();
        VSSource = vtkShaderProgram$1.substitute(VSSource, '//VTK::Clip::Dec', ['uniform int numClipPlanes;', "uniform vec4 clipPlanes[".concat(numClipPlanes, "];"), "varying float clipDistancesVSOutput[".concat(numClipPlanes, "];")]).result;
        VSSource = vtkShaderProgram$1.substitute(VSSource, '//VTK::Clip::Impl', ["for (int planeNum = 0; planeNum < ".concat(numClipPlanes, "; planeNum++)"), '    {', '    if (planeNum >= numClipPlanes)', '        {', '        break;', '        }', '    clipDistancesVSOutput[planeNum] = dot(clipPlanes[planeNum], vertexMC);', '    }']).result;
        FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Clip::Dec', ['uniform int numClipPlanes;', "varying float clipDistancesVSOutput[".concat(numClipPlanes, "];")]).result;
        FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Clip::Impl', ["for (int planeNum = 0; planeNum < ".concat(numClipPlanes, "; planeNum++)"), '    {', '    if (planeNum >= numClipPlanes)', '        {', '        break;', '        }', '    if (clipDistancesVSOutput[planeNum] < 0.0) discard;', '    }']).result;
      }

      shaders.Vertex = VSSource;
      shaders.Fragment = FSSource;
    };

    publicAPI.getCoincidentParameters = function (ren, actor) {
      // 1. ResolveCoincidentTopology is On and non zero for this primitive
      // type
      var cp = null;
      var prop = actor.getProperty();

      if (model.renderable.getResolveCoincidentTopology() || prop.getEdgeVisibility() && prop.getRepresentation() === Representation$2.SURFACE) {
        var primType = model.lastBoundBO.getPrimitiveType();

        if (primType === primTypes$1.Points || prop.getRepresentation() === Representation$2.POINTS) {
          cp = model.renderable.getCoincidentTopologyPointOffsetParameter();
        } else if (primType === primTypes$1.Lines || prop.getRepresentation() === Representation$2.WIREFRAME) {
          cp = model.renderable.getCoincidentTopologyLineOffsetParameters();
        } else if (primType === primTypes$1.Tris || primType === primTypes$1.TriStrips) {
          cp = model.renderable.getCoincidentTopologyPolygonOffsetParameters();
        }

        if (primType === primTypes$1.TrisEdges || primType === primTypes$1.TriStripsEdges) {
          cp = model.renderable.getCoincidentTopologyPolygonOffsetParameters();
          cp.factor /= 2.0;
          cp.offset /= 2.0;
        }
      } // hardware picking always offset due to saved zbuffer
      // This gets you above the saved surface depth buffer.
      // vtkHardwareSelector* selector = ren->GetSelector();
      // if (selector &&
      //     selector->GetFieldAssociation() == vtkDataObject::FIELD_ASSOCIATION_POINTS)
      // {
      //   offset -= 2.0;
      //   return;
      // }


      return cp;
    };

    publicAPI.replaceShaderPicking = function (shaders, ren, actor) {
      var FSSource = shaders.Fragment;
      FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Picking::Dec', ['uniform vec3 mapperIndex;', 'uniform int picking;']).result;
      FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Picking::Impl', '  gl_FragData[0] = picking != 0 ? vec4(mapperIndex,1.0) : gl_FragData[0];').result;
      shaders.Fragment = FSSource;
    };

    publicAPI.replaceShaderValues = function (shaders, ren, actor) {
      publicAPI.replaceShaderColor(shaders, ren, actor);
      publicAPI.replaceShaderNormal(shaders, ren, actor);
      publicAPI.replaceShaderLight(shaders, ren, actor);
      publicAPI.replaceShaderTCoord(shaders, ren, actor);
      publicAPI.replaceShaderPicking(shaders, ren, actor);
      publicAPI.replaceShaderClip(shaders, ren, actor);
      publicAPI.replaceShaderCoincidentOffset(shaders, ren, actor);
      publicAPI.replaceShaderPositionVC(shaders, ren, actor);

      if (model.haveSeenDepthRequest) {
        var FSSource = shaders.Fragment;
        FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::ZBuffer::Dec', 'uniform int depthRequest;').result;
        FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::ZBuffer::Impl', ['if (depthRequest == 1) {', 'float iz = floor(gl_FragCoord.z*65535.0 + 0.1);', 'float rf = floor(iz/256.0)/255.0;', 'float gf = mod(iz,256.0)/255.0;', 'gl_FragData[0] = vec4(rf, gf, 0.0, 1.0); }']).result;
        shaders.Fragment = FSSource;
      }
    };

    publicAPI.getNeedToRebuildShaders = function (cellBO, ren, actor) {
      var lightComplexity = 0;
      var numberOfLights = 0;
      var primType = cellBO.getPrimitiveType();
      var poly = model.currentInput; // different algo from C++ as of 5/2019

      var needLighting = false;
      var pointNormals = poly.getPointData().getNormals();
      var cellNormals = poly.getCellData().getNormals();
      var flat = actor.getProperty().getInterpolation() === Shading.FLAT;
      var representation = actor.getProperty().getRepresentation();
      var mode = publicAPI.getOpenGLMode(representation, primType); // 1) all surfaces need lighting

      if (mode === model.context.TRIANGLES) {
        needLighting = true; // 2) all cell normals without point normals need lighting
      } else if (cellNormals && !pointNormals) {
        needLighting = true; // 3) Phong + pointNormals need lighting
      } else if (!flat && pointNormals) {
        needLighting = true; // 4) Phong Lines need lighting
      } else if (!flat && mode === model.context.LINES) {
        needLighting = true;
      } // 5) everything else is unlit
      // do we need lighting?


      if (actor.getProperty().getLighting() && needLighting) {
        // consider the lighting complexity to determine which case applies
        // simple headlight, Light Kit, the whole feature set of VTK
        lightComplexity = 0;
        var lights = ren.getLightsByReference();

        for (var index = 0; index < lights.length; ++index) {
          var light = lights[index];
          var status = light.getSwitch();

          if (status > 0) {
            numberOfLights++;

            if (lightComplexity === 0) {
              lightComplexity = 1;
            }
          }

          if (lightComplexity === 1 && (numberOfLights > 1 || light.getIntensity() !== 1.0 || !light.lightTypeIsHeadLight())) {
            lightComplexity = 2;
          }

          if (lightComplexity < 3 && light.getPositional()) {
            lightComplexity = 3;
          }
        }
      }

      var needRebuild = false;
      var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');
      var lastLightCount = model.lastBoundBO.getReferenceByName('lastLightCount');

      if (lastLightComplexity !== lightComplexity || lastLightCount !== numberOfLights) {
        model.lastBoundBO.set({
          lastLightComplexity: lightComplexity
        }, true);
        model.lastBoundBO.set({
          lastLightCount: numberOfLights
        }, true);
        needRebuild = true;
      } // has something changed that would require us to recreate the shader?
      // candidates are
      // property modified (representation interpolation and lighting)
      // input modified
      // light complexity changed


      if (model.lastHaveSeenDepthRequest !== model.haveSeenDepthRequest || cellBO.getProgram() === 0 || cellBO.getShaderSourceTime().getMTime() < publicAPI.getMTime() || cellBO.getShaderSourceTime().getMTime() < actor.getMTime() || cellBO.getShaderSourceTime().getMTime() < model.renderable.getMTime() || cellBO.getShaderSourceTime().getMTime() < model.currentInput.getMTime() || needRebuild) {
        model.lastHaveSeenDepthRequest = model.haveSeenDepthRequest;
        return true;
      }

      return false;
    };

    publicAPI.updateShaders = function (cellBO, ren, actor) {
      model.lastBoundBO = cellBO; // has something changed that would require us to recreate the shader?

      if (publicAPI.getNeedToRebuildShaders(cellBO, ren, actor)) {
        var shaders = {
          Vertex: null,
          Fragment: null,
          Geometry: null
        };
        publicAPI.buildShaders(shaders, ren, actor); // compile and bind the program if needed

        var newShader = model.openGLRenderWindow.getShaderCache().readyShaderProgramArray(shaders.Vertex, shaders.Fragment, shaders.Geometry); // if the shader changed reinitialize the VAO

        if (newShader !== cellBO.getProgram()) {
          cellBO.setProgram(newShader); // reset the VAO as the shader has changed

          cellBO.getVAO().releaseGraphicsResources();
        }

        cellBO.getShaderSourceTime().modified();
      } else {
        model.openGLRenderWindow.getShaderCache().readyShaderProgram(cellBO.getProgram());
      }

      cellBO.getVAO().bind();
      publicAPI.setMapperShaderParameters(cellBO, ren, actor);
      publicAPI.setPropertyShaderParameters(cellBO, ren, actor);
      publicAPI.setCameraShaderParameters(cellBO, ren, actor);
      publicAPI.setLightingShaderParameters(cellBO, ren, actor);
      var listCallbacks = model.renderable.getViewSpecificProperties().ShadersCallbacks;

      if (listCallbacks) {
        listCallbacks.forEach(function (object) {
          object.callback(object.userData, cellBO, ren, actor);
        });
      }
    };

    publicAPI.setMapperShaderParameters = function (cellBO, ren, actor) {
      // Now to update the VAO too, if necessary.
      if (cellBO.getProgram().isUniformUsed('PrimitiveIDOffset')) {
        cellBO.getProgram().setUniformi('PrimitiveIDOffset', model.primitiveIDOffset);
      }

      if (cellBO.getCABO().getElementCount() && (model.VBOBuildTime.getMTime() > cellBO.getAttributeUpdateTime().getMTime() || cellBO.getShaderSourceTime().getMTime() > cellBO.getAttributeUpdateTime().getMTime())) {
        var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');

        if (cellBO.getProgram().isAttributeUsed('vertexMC')) {
          if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'vertexMC', cellBO.getCABO().getVertexOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, 3, false)) {
            vtkErrorMacro$c('Error setting vertexMC in shader VAO.');
          }
        }

        if (cellBO.getProgram().isAttributeUsed('normalMC') && cellBO.getCABO().getNormalOffset() && lastLightComplexity > 0) {
          if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'normalMC', cellBO.getCABO().getNormalOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, 3, false)) {
            vtkErrorMacro$c('Error setting normalMC in shader VAO.');
          }
        } else {
          cellBO.getVAO().removeAttributeArray('normalMC');
        }

        model.renderable.getCustomShaderAttributes().forEach(function (attrName, idx) {
          if (cellBO.getProgram().isAttributeUsed("".concat(attrName, "MC"))) {
            if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), "".concat(attrName, "MC"), cellBO.getCABO().getCustomData()[idx].offset, cellBO.getCABO().getStride(), model.context.FLOAT, cellBO.getCABO().getCustomData()[idx].components, false)) {
              vtkErrorMacro$c("Error setting ".concat(attrName, "MC in shader VAO."));
            }
          }
        });

        if (cellBO.getProgram().isAttributeUsed('tcoordMC') && cellBO.getCABO().getTCoordOffset()) {
          if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'tcoordMC', cellBO.getCABO().getTCoordOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, cellBO.getCABO().getTCoordComponents(), false)) {
            vtkErrorMacro$c('Error setting tcoordMC in shader VAO.');
          }
        } else {
          cellBO.getVAO().removeAttributeArray('tcoordMC');
        }

        if (cellBO.getProgram().isAttributeUsed('scalarColor') && cellBO.getCABO().getColorComponents()) {
          if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO().getColorBO(), 'scalarColor', cellBO.getCABO().getColorOffset(), cellBO.getCABO().getColorBOStride(), model.context.UNSIGNED_BYTE, 4, true)) {
            vtkErrorMacro$c('Error setting scalarColor in shader VAO.');
          }
        } else {
          cellBO.getVAO().removeAttributeArray('scalarColor');
        }

        cellBO.getAttributeUpdateTime().modified();
      }

      if (model.renderable.getNumberOfClippingPlanes()) {
        // add all the clipping planes
        var numClipPlanes = model.renderable.getNumberOfClippingPlanes();
        var planeEquations = [];

        for (var i = 0; i < numClipPlanes; i++) {
          var planeEquation = [];
          model.renderable.getClippingPlaneInDataCoords(actor.getMatrix(), i, planeEquation);

          for (var j = 0; j < 4; j++) {
            planeEquations.push(planeEquation[j]);
          }
        }

        cellBO.getProgram().setUniformi('numClipPlanes', numClipPlanes);
        cellBO.getProgram().setUniform4fv('clipPlanes', planeEquations);
      }

      if (model.internalColorTexture && cellBO.getProgram().isUniformUsed('texture1')) {
        cellBO.getProgram().setUniformi('texture1', model.internalColorTexture.getTextureUnit());
      }

      var tus = model.openGLActor.getActiveTextures();

      if (tus) {
        for (var index = 0; index < tus.length; ++index) {
          var tex = tus[index];
          var texUnit = tex.getTextureUnit();
          var tname = "texture".concat(texUnit + 1);

          if (cellBO.getProgram().isUniformUsed(tname)) {
            cellBO.getProgram().setUniformi(tname, texUnit);
          }
        }
      } // handle depth requests


      if (model.haveSeenDepthRequest) {
        cellBO.getProgram().setUniformi('depthRequest', model.renderDepth ? 1 : 0);
      } // handle coincident


      if (cellBO.getProgram().isUniformUsed('coffset')) {
        var cp = publicAPI.getCoincidentParameters(ren, actor);
        cellBO.getProgram().setUniformf('coffset', cp.offset); // cfactor isn't always used when coffset is.

        if (cellBO.getProgram().isUniformUsed('cfactor')) {
          cellBO.getProgram().setUniformf('cfactor', cp.factor);
        }
      }

      var selector = model.openGLRenderer.getSelector();
      cellBO.getProgram().setUniform3fArray('mapperIndex', selector ? selector.getPropColorValue() : [0.0, 0.0, 0.0]);
      cellBO.getProgram().setUniformi('picking', selector ? selector.getCurrentPass() + 1 : 0);
    };

    publicAPI.setLightingShaderParameters = function (cellBO, ren, actor) {
      // for unlit and headlight there are no lighting parameters
      var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');

      if (lastLightComplexity < 2) {
        return;
      }

      var program = cellBO.getProgram(); // bind some light settings

      var numberOfLights = 0;
      var lights = ren.getLightsByReference();

      for (var index = 0; index < lights.length; ++index) {
        var light = lights[index];
        var status = light.getSwitch();

        if (status > 0.0) {
          var dColor = light.getColorByReference();
          var intensity = light.getIntensity();
          model.lightColor[0] = dColor[0] * intensity;
          model.lightColor[1] = dColor[1] * intensity;
          model.lightColor[2] = dColor[2] * intensity; // get required info from light

          var ld = light.getDirection();
          var transform = ren.getActiveCamera().getViewMatrix();

          var newLightDirection = _toConsumableArray(ld);

          if (light.lightTypeIsSceneLight()) {
            newLightDirection[0] = transform[0] * ld[0] + transform[1] * ld[1] + transform[2] * ld[2];
            newLightDirection[1] = transform[4] * ld[0] + transform[5] * ld[1] + transform[6] * ld[2];
            newLightDirection[2] = transform[8] * ld[0] + transform[9] * ld[1] + transform[10] * ld[2];
            normalize(newLightDirection);
          }

          model.lightDirection[0] = newLightDirection[0];
          model.lightDirection[1] = newLightDirection[1];
          model.lightDirection[2] = newLightDirection[2];
          model.lightHalfAngle[0] = -model.lightDirection[0];
          model.lightHalfAngle[1] = -model.lightDirection[1];
          model.lightHalfAngle[2] = -model.lightDirection[2] + 1.0;
          normalize(model.lightDirection);
          program.setUniform3fArray("lightColor".concat(numberOfLights), model.lightColor);
          program.setUniform3fArray("lightDirectionVC".concat(numberOfLights), model.lightDirection);
          program.setUniform3fArray("lightHalfAngleVC".concat(numberOfLights), model.lightHalfAngle);
          numberOfLights++;
        }
      } // we are done unless we have positional lights


      if (lastLightComplexity < 3) {
        return;
      } // for lightkit case there are some parameters to set


      var cam = ren.getActiveCamera();
      var viewTF = cam.getViewMatrix();
      transpose(viewTF, viewTF);
      numberOfLights = 0;

      for (var _index = 0; _index < lights.length; ++_index) {
        var _light = lights[_index];

        var _status = _light.getSwitch();

        if (_status > 0.0) {
          var lp = _light.getTransformedPosition();

          var np = new Float64Array(3);
          transformMat4$1(np, lp, viewTF);
          program.setUniform3fArray("lightAttenuation".concat(numberOfLights), _light.getAttenuationValuesByReference());
          program.setUniformi("lightPositional".concat(numberOfLights), _light.getPositional());
          program.setUniformf("lightExponent".concat(numberOfLights), _light.getExponent());
          program.setUniformf("lightConeAngle".concat(numberOfLights), _light.getConeAngle());
          program.setUniform3fArray("lightPositionVC".concat(numberOfLights), [np[0], np[1], np[2]]);
          numberOfLights++;
        }
      }
    };

    function safeMatrixMultiply(matrixArray, matrixType, tmpMat) {
      matrixType.identity(tmpMat);
      return matrixArray.reduce(function (res, matrix, index) {
        if (index === 0) {
          return matrix ? matrixType.copy(res, matrix) : matrixType.identity(res);
        }

        return matrix ? matrixType.multiply(res, res, matrix) : res;
      }, tmpMat);
    }

    publicAPI.setCameraShaderParameters = function (cellBO, ren, actor) {
      var program = cellBO.getProgram(); // [WMVP]C == {world, model, view, projection} coordinates
      // E.g., WCPC == world to projection coordinate transformation

      var keyMats = model.openGLCamera.getKeyMatrices(ren);
      var cam = ren.getActiveCamera();
      var camm = model.openGLCamera.getKeyMatrixTime().getMTime();
      var progm = program.getLastCameraMTime();
      var shiftScaleEnabled = cellBO.getCABO().getCoordShiftAndScaleEnabled();
      var inverseShiftScaleMatrix = shiftScaleEnabled ? cellBO.getCABO().getInverseShiftAndScaleMatrix() : null;
      var actorIsIdentity = actor.getIsIdentity();
      var actMats = actorIsIdentity ? {
        mcwc: null,
        normalMatrix: null
      } : model.openGLActor.getKeyMatrices();
      program.setUniformMatrix('MCPCMatrix', safeMatrixMultiply([keyMats.wcpc, actMats.mcwc, inverseShiftScaleMatrix], mat4, model.tmpMat4));

      if (program.isUniformUsed('MCVCMatrix')) {
        program.setUniformMatrix('MCVCMatrix', safeMatrixMultiply([keyMats.wcvc, actMats.mcwc, inverseShiftScaleMatrix], mat4, model.tmpMat4));
      }

      if (program.isUniformUsed('normalMatrix')) {
        program.setUniformMatrix3x3('normalMatrix', safeMatrixMultiply([keyMats.normalMatrix, actMats.normalMatrix], mat3, model.tmpMat3));
      }

      if (progm !== camm) {
        if (program.isUniformUsed('cameraParallel')) {
          program.setUniformi('cameraParallel', cam.getParallelProjection());
        }

        program.setLastCameraMTime(camm);
      }

      if (!actorIsIdentity) {
        // reset the cam mtime as actor modified the shader values
        program.setLastCameraMTime(0);
      }
    };

    publicAPI.setPropertyShaderParameters = function (cellBO, ren, actor) {
      var program = cellBO.getProgram();
      var ppty = actor.getProperty();
      var opacity = ppty.getOpacity();
      var aColor = model.drawingEdges ? ppty.getEdgeColorByReference() : ppty.getAmbientColorByReference();
      var dColor = model.drawingEdges ? ppty.getEdgeColorByReference() : ppty.getDiffuseColorByReference();
      var aIntensity = model.drawingEdges ? 1.0 : ppty.getAmbient();
      var dIntensity = model.drawingEdges ? 0.0 : ppty.getDiffuse();
      var sIntensity = model.drawingEdges ? 0.0 : ppty.getSpecular();
      var specularPower = ppty.getSpecularPower();
      program.setUniformf('opacityUniform', opacity);
      program.setUniform3fArray('ambientColorUniform', aColor);
      program.setUniform3fArray('diffuseColorUniform', dColor);
      program.setUniformf('ambient', aIntensity);
      program.setUniformf('diffuse', dIntensity); // we are done unless we have lighting

      var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');

      if (lastLightComplexity < 1) {
        return;
      }

      var sColor = ppty.getSpecularColorByReference();
      program.setUniform3fArray('specularColorUniform', sColor);
      program.setUniformf('specularPowerUniform', specularPower);
      program.setUniformf('specular', sIntensity); // now set the backface properties if we have them

      if (program.isUniformUsed('ambientIntensityBF')) {
        ppty = actor.getBackfaceProperty();
        opacity = ppty.getOpacity();
        aColor = ppty.getAmbientColor();
        aIntensity = ppty.getAmbient();
        dColor = ppty.getDiffuseColor();
        dIntensity = ppty.getDiffuse();
        sColor = ppty.getSpecularColor();
        sIntensity = ppty.getSpecular();
        program.setUniformf('ambientIntensityBF', aIntensity);
        program.setUniformf('diffuseIntensityBF', dIntensity);
        program.setUniformf('opacityUniformBF', opacity);
        program.setUniform3fArray('ambientColorUniformBF', aColor);
        program.setUniform3fArray('diffuseColorUniformBF', dColor); // we are done unless we have lighting

        if (lastLightComplexity < 1) {
          return;
        }

        program.setUniformf('specularIntensityBF', sIntensity);
        program.setUniform3fArray('specularColorUniformBF', sColor);
        program.setUniformf('specularPowerUniformBF', specularPower);
      }
    };

    publicAPI.renderPieceStart = function (ren, actor) {
      model.primitiveIDOffset = 0;

      if (model.openGLRenderer.getSelector()) {
        switch (model.openGLRenderer.getSelector().getCurrentPass()) {
          default:
            model.openGLRenderer.getSelector().renderProp(actor);
        }
      } // make sure the BOs are up to date


      publicAPI.updateBufferObjects(ren, actor); // If we are coloring by texture, then load the texture map.
      // Use Map as indicator, because texture hangs around.

      if (model.renderable.getColorTextureMap()) {
        model.internalColorTexture.activate();
      } // Bind the OpenGL, this is shared between the different primitive/cell types.


      model.lastBoundBO = null;
    };

    publicAPI.renderPieceDraw = function (ren, actor) {
      var representation = actor.getProperty().getRepresentation();
      var gl = model.context;
      var drawSurfaceWithEdges = actor.getProperty().getEdgeVisibility() && representation === Representation$2.SURFACE;
      gl.lineWidth(actor.getProperty().getLineWidth()); // for every primitive type

      for (var i = primTypes$1.Start; i < primTypes$1.End; i++) {
        // if there are entries
        var cabo = model.primitives[i].getCABO();

        if (cabo.getElementCount()) {
          // are we drawing edges
          model.drawingEdges = drawSurfaceWithEdges && (i === primTypes$1.TrisEdges || i === primTypes$1.TriStripsEdges);
          var mode = publicAPI.getOpenGLMode(representation, i);

          if (!model.drawingEdges || !model.renderDepth) {
            publicAPI.updateShaders(model.primitives[i], ren, actor);
            gl.drawArrays(mode, 0, cabo.getElementCount());
          }

          var stride = (mode === gl.POINTS ? 1 : 0) || (mode === gl.LINES ? 2 : 3);
          model.primitiveIDOffset += cabo.getElementCount() / stride;
        }
      } // reset the line width


      gl.lineWidth(1);
    };

    publicAPI.getOpenGLMode = function (rep, type) {
      if (rep === Representation$2.POINTS || type === primTypes$1.Points) {
        return model.context.POINTS;
      }

      if (rep === Representation$2.WIREFRAME || type === primTypes$1.Lines || type === primTypes$1.TrisEdges || type === primTypes$1.TriStripsEdges) {
        return model.context.LINES;
      }

      return model.context.TRIANGLES;
    };

    publicAPI.renderPieceFinish = function (ren, actor) {
      if (model.LastBoundBO) {
        model.LastBoundBO.getVAO().release();
      }

      if (model.renderable.getColorTextureMap()) {
        model.internalColorTexture.deactivate();
      }
    };

    publicAPI.renderPiece = function (ren, actor) {
      // Make sure that we have been properly initialized.
      // if (ren.getRenderWindow().checkAbortStatus()) {
      //   return;
      // }
      publicAPI.invokeEvent(StartEvent$2);

      if (!model.renderable.getStatic()) {
        model.renderable.update();
      }

      model.currentInput = model.renderable.getInputData();
      publicAPI.invokeEvent(EndEvent$2);

      if (!model.currentInput) {
        vtkErrorMacro$c('No input!');
        return;
      } // if there are no points then we are done


      if (!model.currentInput.getPoints || !model.currentInput.getPoints().getNumberOfValues()) {
        return;
      } // apply faceCulling


      var gl = model.context;
      var backfaceCulling = actor.getProperty().getBackfaceCulling();
      var frontfaceCulling = actor.getProperty().getFrontfaceCulling();

      if (!backfaceCulling && !frontfaceCulling) {
        model.openGLRenderWindow.disableCullFace();
      } else if (frontfaceCulling) {
        model.openGLRenderWindow.enableCullFace();
        gl.cullFace(gl.FRONT);
      } else {
        model.openGLRenderWindow.enableCullFace();
        gl.cullFace(gl.BACK);
      }

      publicAPI.renderPieceStart(ren, actor);
      publicAPI.renderPieceDraw(ren, actor);
      publicAPI.renderPieceFinish(ren, actor);
    };

    publicAPI.computeBounds = function (ren, actor) {
      if (!publicAPI.getInput()) {
        uninitializeBounds(model.bounds);
        return;
      }

      model.bounds = publicAPI.getInput().getBounds();
    };

    publicAPI.updateBufferObjects = function (ren, actor) {
      // Rebuild buffers if needed
      if (publicAPI.getNeedToRebuildBufferObjects(ren, actor)) {
        publicAPI.buildBufferObjects(ren, actor);
      }
    };

    publicAPI.getNeedToRebuildBufferObjects = function (ren, actor) {
      // first do a coarse check
      // Note that the actor's mtime includes it's properties mtime
      var vmtime = model.VBOBuildTime.getMTime();

      if (vmtime < publicAPI.getMTime() || vmtime < model.renderable.getMTime() || vmtime < actor.getMTime() || vmtime < model.currentInput.getMTime()) {
        return true;
      }

      return false;
    };

    publicAPI.buildBufferObjects = function (ren, actor) {
      var poly = model.currentInput;

      if (poly === null) {
        return;
      }

      model.renderable.mapScalars(poly, 1.0);
      var c = model.renderable.getColorMapColors();
      model.haveCellScalars = false;
      var scalarMode = model.renderable.getScalarMode();

      if (model.renderable.getScalarVisibility()) {
        // We must figure out how the scalars should be mapped to the polydata.
        if ((scalarMode === ScalarMode$3.USE_CELL_DATA || scalarMode === ScalarMode$3.USE_CELL_FIELD_DATA || scalarMode === ScalarMode$3.USE_FIELD_DATA || !poly.getPointData().getScalars()) && scalarMode !== ScalarMode$3.USE_POINT_FIELD_DATA && c) {
          model.haveCellScalars = true;
        }
      } // Do we have normals?


      var n = actor.getProperty().getInterpolation() !== Shading.FLAT ? poly.getPointData().getNormals() : null;

      if (n === null && poly.getCellData().getNormals()) {
        model.haveCellNormals = true;
        n = poly.getCellData().getNormals();
      } // rebuild the VBO if the data has changed we create a string for the VBO what
      // can change the VBO? points normals tcoords colors so what can change those?
      // the input data is clearly one as it can change all four items tcoords may
      // haveTextures or not colors may change based on quite a few mapping
      // parameters in the mapper


      var representation = actor.getProperty().getRepresentation();
      var tcoords = poly.getPointData().getTCoords();

      if (!model.openGLActor.getActiveTextures()) {
        tcoords = null;
      } // handle color mapping via texture


      if (model.renderable.getColorCoordinates()) {
        tcoords = model.renderable.getColorCoordinates();

        if (!model.internalColorTexture) {
          model.internalColorTexture = vtkOpenGLTexture$1.newInstance();
        }

        var tex = model.internalColorTexture; // the following 4 lines allow for NPOT textures

        tex.setMinificationFilter(Filter.NEAREST);
        tex.setMagnificationFilter(Filter.NEAREST);
        tex.setWrapS(Wrap.CLAMP_TO_EDGE);
        tex.setWrapT(Wrap.CLAMP_TO_EDGE);
        tex.setOpenGLRenderWindow(model.openGLRenderWindow);
        var input = model.renderable.getColorTextureMap();
        var ext = input.getExtent();
        var inScalars = input.getPointData().getScalars();
        tex.create2DFromRaw(ext[1] - ext[0] + 1, ext[3] - ext[2] + 1, inScalars.getNumberOfComponents(), inScalars.getDataType(), inScalars.getData());
        tex.activate();
        tex.sendParameters();
        tex.deactivate();
      }

      var toString = "".concat(poly.getMTime(), "A").concat(representation, "B").concat(poly.getMTime()) + "C".concat(n ? n.getMTime() : 1, "D").concat(c ? c.getMTime() : 1) + "E".concat(actor.getProperty().getEdgeVisibility()) + "F".concat(tcoords ? tcoords.getMTime() : 1);

      if (model.VBOBuildString !== toString) {
        // Build the VBOs
        var points = poly.getPoints();
        var options = {
          points: points,
          normals: n,
          tcoords: tcoords,
          colors: c,
          cellOffset: 0,
          haveCellScalars: model.haveCellScalars,
          haveCellNormals: model.haveCellNormals,
          customAttributes: model.renderable.getCustomShaderAttributes().map(function (arrayName) {
            return poly.getPointData().getArrayByName(arrayName);
          })
        };
        options.cellOffset += model.primitives[primTypes$1.Points].getCABO().createVBO(poly.getVerts(), 'verts', representation, options);
        options.cellOffset += model.primitives[primTypes$1.Lines].getCABO().createVBO(poly.getLines(), 'lines', representation, options);
        options.cellOffset += model.primitives[primTypes$1.Tris].getCABO().createVBO(poly.getPolys(), 'polys', representation, options);
        options.cellOffset += model.primitives[primTypes$1.TriStrips].getCABO().createVBO(poly.getStrips(), 'strips', representation, options);
        var drawSurfaceWithEdges = actor.getProperty().getEdgeVisibility() && representation === Representation$2.SURFACE; // if we have edge visibility build the edge VBOs

        if (drawSurfaceWithEdges) {
          model.primitives[primTypes$1.TrisEdges].getCABO().createVBO(poly.getPolys(), 'polys', Representation$2.WIREFRAME, {
            points: points,
            normals: n,
            tcoords: null,
            colors: null,
            cellOffset: 0,
            haveCellScalars: false,
            haveCellNormals: false
          });
          model.primitives[primTypes$1.TriStripsEdges].getCABO().createVBO(poly.getStrips(), 'strips', Representation$2.WIREFRAME, {
            points: points,
            normals: n,
            tcoords: null,
            colors: null,
            cellOffset: 0,
            haveCellScalars: false,
            haveCellNormals: false
          });
        } else {
          // otherwise free them
          model.primitives[primTypes$1.TrisEdges].releaseGraphicsResources(model.openGLRenderWindow);
          model.primitives[primTypes$1.TriStripsEdges].releaseGraphicsResources(model.openGLRenderWindow);
        }

        model.VBOBuildTime.modified();
        model.VBOBuildString = toString;
      }
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$X = {
    context: null,
    VBOBuildTime: 0,
    VBOBuildString: null,
    primitives: null,
    primTypes: null,
    shaderRebuildString: null,
    tmpMat4: null,
    ambientColor: [],
    // used internally
    diffuseColor: [],
    // used internally
    specularColor: [],
    // used internally
    lightColor: [],
    // used internally
    lightHalfAngle: [],
    // used internally
    lightDirection: [],
    // used internally
    lastHaveSeenDepthRequest: false,
    haveSeenDepthRequest: false
  }; // ----------------------------------------------------------------------------

  function extend$Z(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$X, initialValues); // Inheritance

    vtkViewNode$1.extend(publicAPI, model, initialValues);
    vtkReplacementShaderMapper.implementReplaceShaderCoincidentOffset(publicAPI, model, initialValues);
    model.primitives = [];
    model.primTypes = primTypes$1;
    model.tmpMat3 = identity$1(new Float64Array(9));
    model.tmpMat4 = identity(new Float64Array(16));

    for (var i = primTypes$1.Start; i < primTypes$1.End; i++) {
      model.primitives[i] = vtkHelper.newInstance();
      model.primitives[i].setPrimitiveType(i);
      model.primitives[i].set({
        lastLightComplexity: 0,
        lastLightCount: 0,
        lastSelectionPass: false
      }, true);
    } // Build VTK API


    setGet(publicAPI, model, ['context']);
    model.VBOBuildTime = {};
    obj(model.VBOBuildTime, {
      mtime: 0
    }); // Object methods

    vtkOpenGLPolyDataMapper(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$V = newInstance$1j(extend$Z, 'vtkOpenGLPolyDataMapper'); // ----------------------------------------------------------------------------

  var vtkOpenGLPolyDataMapper$1 = {
    newInstance: newInstance$V,
    extend: extend$Z,
    primTypes: primTypes$1
  }; // Register ourself to OpenGL backend if imported

  registerOverride$1('vtkMapper', newInstance$V);

  var ColorMode = Constants$6.ColorMode,
      ScalarMode$2 = Constants$6.ScalarMode,
      GetArray = Constants$6.GetArray; // ---------------------------------------------------------------------------
  // vtkMapper2D methods
  // ---------------------------------------------------------------------------

  function vtkMapper2D(publicAPI, model) {
    // Set out className
    model.classHierarchy.push('vtkMapper2D');

    publicAPI.createDefaultLookupTable = function () {
      model.lookupTable = vtkLookupTable$1.newInstance();
    };

    publicAPI.getColorModeAsString = function () {
      return macro.enumToString(ColorMode, model.colorMode);
    };

    publicAPI.setColorModeToDefault = function () {
      return publicAPI.setColorMode(0);
    };

    publicAPI.setColorModeToMapScalars = function () {
      return publicAPI.setColorMode(1);
    };

    publicAPI.setColorModeToDirectScalars = function () {
      return publicAPI.setColorMode(2);
    };

    publicAPI.getScalarModeAsString = function () {
      return macro.enumToString(ScalarMode$2, model.scalarMode);
    };

    publicAPI.setScalarModeToDefault = function () {
      return publicAPI.setScalarMode(0);
    };

    publicAPI.setScalarModeToUsePointData = function () {
      return publicAPI.setScalarMode(1);
    };

    publicAPI.setScalarModeToUseCellData = function () {
      return publicAPI.setScalarMode(2);
    };

    publicAPI.setScalarModeToUsePointFieldData = function () {
      return publicAPI.setScalarMode(3);
    };

    publicAPI.setScalarModeToUseCellFieldData = function () {
      return publicAPI.setScalarMode(4);
    };

    publicAPI.setScalarModeToUseFieldData = function () {
      return publicAPI.setScalarMode(5);
    };

    publicAPI.getAbstractScalars = function (input, scalarMode, arrayAccessMode, arrayId, arrayName) {
      // make sure we have an input
      if (!input || !model.scalarVisibility) {
        return {
          scalars: null,
          cellFLag: false
        };
      }

      var scalars = null;
      var cellFlag = false; // get scalar data and point/cell attribute according to scalar mode

      if (scalarMode === ScalarMode$2.DEFAULT) {
        scalars = input.getPointData().getScalars();

        if (!scalars) {
          scalars = input.getCellData().getScalars();
          cellFlag = true;
        }
      } else if (scalarMode === ScalarMode$2.USE_POINT_DATA) {
        scalars = input.getPointData().getScalars();
      } else if (scalarMode === ScalarMode$2.USE_CELL_DATA) {
        scalars = input.getCellData().getScalars();
        cellFlag = true;
      } else if (scalarMode === ScalarMode$2.USE_POINT_FIELD_DATA) {
        var pd = input.getPointData();

        if (arrayAccessMode === GetArray.BY_ID) {
          scalars = pd.getArrayByIndex(arrayId);
        } else {
          scalars = pd.getArrayByName(arrayName);
        }
      } else if (scalarMode === ScalarMode$2.USE_CELL_FIELD_DATA) {
        var cd = input.getCellData();
        cellFlag = true;

        if (arrayAccessMode === GetArray.BY_ID) {
          scalars = cd.getArrayByIndex(arrayId);
        } else {
          scalars = cd.getArrayByName(arrayName);
        }
      } else if (scalarMode === ScalarMode$2.USE_FIELD_DATA) {
        var fd = input.getFieldData();

        if (arrayAccessMode === GetArray.BY_ID) {
          scalars = fd.getArrayByIndex(arrayId);
        } else {
          scalars = fd.getArrayByName(arrayName);
        }
      }

      return {
        scalars: scalars,
        cellFlag: cellFlag
      };
    };

    publicAPI.getLookupTable = function () {
      if (!model.lookupTable) {
        publicAPI.createDefaultLookupTable();
      }

      return model.lookupTable;
    };

    publicAPI.getMTime = function () {
      var mt = model.mtime;

      if (model.lookupTable !== null) {
        var time = model.lookupTable.getMTime();
        mt = time > mt ? time : mt;
      }

      return mt;
    };

    publicAPI.mapScalars = function (input, alpha) {
      var scalars = publicAPI.getAbstractScalars(input, model.scalarMode, model.arrayAccessMode, model.arrayId, model.colorByArrayName).scalars;

      if (!scalars) {
        model.colorMapColors = null;
        return;
      } // we want to only recompute when something has changed


      var toString = "".concat(publicAPI.getMTime()).concat(scalars.getMTime()).concat(alpha);
      if (model.colorBuildString === toString) return;

      if (!model.useLookupTableScalarRange) {
        publicAPI.getLookupTable().setRange(model.scalarRange[0], model.scalarRange[1]);
      }

      var lut = publicAPI.getLookupTable();

      if (lut) {
        // Ensure that the lookup table is built
        lut.build();
        model.colorMapColors = lut.mapScalars(scalars, model.colorMode, -1);
      }

      model.colorBuildString = "".concat(publicAPI.getMTime()).concat(scalars.getMTime()).concat(alpha);
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$W = {
    static: false,
    lookupTable: null,
    scalarVisibility: false,
    scalarRange: [0, 1],
    useLookupTableScalarRange: false,
    colorMode: 0,
    scalarMode: 0,
    arrayAccessMode: 1,
    // By_NAME
    renderTime: 0,
    colorByArrayName: null,
    transformCoordinate: null,
    viewSpecificProperties: null,
    customShaderAttributes: []
  }; // ----------------------------------------------------------------------------

  function extend$Y(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$W, initialValues); // Inheritance

    vtkAbstractMapper$1.extend(publicAPI, model, initialValues);
    macro.get(publicAPI, model, ['colorMapColors']);
    macro.setGet(publicAPI, model, ['arrayAccessMode', 'colorByArrayName', 'colorMode', 'lookupTable', 'renderTime', 'scalarMode', 'scalarVisibility', 'static', 'transformCoordinate', 'useLookupTableScalarRange', 'viewSpecificProperties', 'customShaderAttributes' // point data array names that will be transferred to the VBO
    ]);
    macro.setGetArray(publicAPI, model, ['scalarRange'], 2);

    if (!model.viewSpecificProperties) {
      model.viewSpecificProperties = {};
    } // Object methods


    vtkMapper2D(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$U = macro.newInstance(extend$Y, 'vtkMapper2D'); // ----------------------------------------------------------------------------

  var vtkMapper2D$1 = {
    newInstance: newInstance$U,
    extend: extend$Y
  };

  var vtkErrorMacro$b = macro.vtkErrorMacro;
  var INVALID_BOUNDS = [1, -1, 1, -1, 1, -1]; // ----------------------------------------------------------------------------
  // vtkPoints methods
  // ----------------------------------------------------------------------------

  function vtkPoints(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkPoints'); // Forwarding methods

    publicAPI.getNumberOfPoints = publicAPI.getNumberOfTuples;

    publicAPI.setNumberOfPoints = function (nbPoints) {
      var dimension = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;

      if (publicAPI.getNumberOfPoints() !== nbPoints) {
        model.size = nbPoints * dimension;
        model.values = macro.newTypedArray(model.dataType, model.size);
        publicAPI.setNumberOfComponents(dimension);
        publicAPI.modified();
      }
    };

    publicAPI.setPoint = function (idx) {
      var offset = idx * model.numberOfComponents;

      for (var i = 0; i < model.numberOfComponents; i++) {
        model.values[offset + i] = i + 1 < 1 || arguments.length <= i + 1 ? undefined : arguments[i + 1];
      }
    };

    publicAPI.getPoint = publicAPI.getTuple;

    publicAPI.getBounds = function () {
      if (publicAPI.getNumberOfComponents() === 3) {
        var _xRange = publicAPI.getRange(0);

        model.bounds[0] = _xRange[0];
        model.bounds[1] = _xRange[1];

        var _yRange = publicAPI.getRange(1);

        model.bounds[2] = _yRange[0];
        model.bounds[3] = _yRange[1];
        var zRange = publicAPI.getRange(2);
        model.bounds[4] = zRange[0];
        model.bounds[5] = zRange[1];
        return model.bounds;
      }

      if (publicAPI.getNumberOfComponents() !== 2) {
        vtkErrorMacro$b("getBounds called on an array with components of\n        ".concat(publicAPI.getNumberOfComponents()));
        return INVALID_BOUNDS;
      }

      var xRange = publicAPI.getRange(0);
      model.bounds[0] = xRange[0];
      model.bounds[1] = xRange[1];
      var yRange = publicAPI.getRange(1);
      model.bounds[2] = yRange[0];
      model.bounds[3] = yRange[1];
      model.bounds[4] = 0;
      model.bounds[5] = 0;
      return model.bounds;
    }; // Trigger the computation of bounds


    publicAPI.computeBounds = publicAPI.getBounds; // Initialize

    publicAPI.setNumberOfComponents(model.numberOfComponents < 2 ? 3 : model.numberOfComponents);
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$V = {
    empty: true,
    numberOfComponents: 3,
    dataType: VtkDataTypes$3.FLOAT,
    bounds: [1, -1, 1, -1, 1, -1]
  }; // ----------------------------------------------------------------------------

  function extend$X(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$V, initialValues);
    vtkDataArray$1.extend(publicAPI, model, initialValues);
    vtkPoints(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$T = macro.newInstance(extend$X, 'vtkPoints'); // ----------------------------------------------------------------------------

  var vtkPoints$1 = {
    newInstance: newInstance$T,
    extend: extend$X
  };

  var vtkPolyData2DFS = "//VTK::System::Dec\n\n/*=========================================================================\n\n  Program:   Visualization Toolkit\n  Module:    vtkPolyData2DFS.glsl\n\n  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\n  All rights reserved.\n  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\n\n     This software is distributed WITHOUT ANY WARRANTY; without even\n     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n     PURPOSE.  See the above copyright notice for more information.\n\n=========================================================================*/\n\nuniform int PrimitiveIDOffset;\n\n// Texture coordinates\n//VTK::TCoord::Dec\n\n// Scalar coloring\n//VTK::Color::Dec\n\n// Depth Peeling\n//VTK::DepthPeeling::Dec\n\n// picking support\n//VTK::Picking::Dec\n\n// the output of this shader\n//VTK::Output::Dec\n\n// Apple Bug\n//VTK::PrimID::Dec\n\nvoid main()\n{\n  // Apple Bug\n  //VTK::PrimID::Impl\n\n  //VTK::Color::Impl\n  //VTK::TCoord::Impl\n\n  //VTK::DepthPeeling::Impl\n  //VTK::Picking::Impl\n\n  if (gl_FragData[0].a <= 0.0)\n    {\n    discard;\n    }\n}\n";

  var vtkPolyData2DVS = "//VTK::System::Dec\n\n/*=========================================================================\n\n  Program:   Visualization Toolkit\n  Module:    vtkPolyData2DVS.glsl\n\n  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\n  All rights reserved.\n  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\n\n     This software is distributed WITHOUT ANY WARRANTY; without even\n     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n     PURPOSE.  See the above copyright notice for more information.\n\n=========================================================================*/\n\n// all variables that represent positions or directions have a suffix\n// indicating the coordinate system they are in. The possible values are\n// MC - Model Coordinates\n// WC - WC world coordinates\n// VC - View Coordinates\n// DC - Display Coordinates\n\nin vec4 vertexWC;\n\n// frag position in VC\n//VTK::PositionVC::Dec\n\n// material property values\n//VTK::Color::Dec\n\n// Texture coordinates\n//VTK::TCoord::Dec\n\n// Apple Bug\n//VTK::PrimID::Dec\n\nuniform mat4 WCVCMatrix;  // World to view matrix\n\nvoid main()\n{\n  // Apple Bug\n  //VTK::PrimID::Impl\n\n  gl_Position = WCVCMatrix*vertexWC;\n\n  //VTK::TCoord::Impl\n\n  //VTK::Color::Impl\n\n  //VTK::PositionVC::Impl\n}\n";

  var DisplayLocation = {
    BACKGROUND: 0,
    FOREGROUND: 1
  };

  // import { mat3, mat4, vec3 } from 'gl-matrix';
  var primTypes = vtkOpenGLPolyDataMapper$1.primTypes;
  var ScalarMode$1 = vtkMapper2D$1.ScalarMode;
  var vtkErrorMacro$a = vtkErrorMacro$m;
  var StartEvent$1 = {
    type: 'StartEvent'
  };
  var EndEvent$1 = {
    type: 'EndEvent'
  }; // ----------------------------------------------------------------------------
  // vtkOpenGLPolyDataMapper2D methods
  // ----------------------------------------------------------------------------

  function vtkOpenGLPolyDataMapper2D(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkOpenGLPolyDataMapper2D');

    publicAPI.buildPass = function (prepass) {
      if (prepass) {
        model.openGLActor2D = publicAPI.getFirstAncestorOfType('vtkOpenGLActor2D');
        model.openGLRenderer = model.openGLActor2D.getFirstAncestorOfType('vtkOpenGLRenderer');
        model.openGLRenderWindow = model.openGLRenderer.getParent();
        model.openGLCamera = model.openGLRenderer.getViewNodeFor(model.openGLRenderer.getRenderable().getActiveCamera());
      }
    };

    publicAPI.overlayPass = function (prepass) {
      if (prepass) {
        publicAPI.render();
      }
    };

    publicAPI.getShaderTemplate = function (shaders, ren, actor) {
      var openGLSpecProp = model.renderable.getViewSpecificProperties().OpenGL;
      var vertexShaderCode = vtkPolyData2DVS;

      if (openGLSpecProp) {
        var vertexSpecProp = openGLSpecProp.VertexShaderCode;

        if (vertexSpecProp !== undefined && vertexSpecProp !== '') {
          vertexShaderCode = vertexSpecProp;
        }
      }

      shaders.Vertex = vertexShaderCode;
      var fragmentShaderCode = vtkPolyData2DFS;

      if (openGLSpecProp) {
        var fragmentSpecProp = openGLSpecProp.FragmentShaderCode;

        if (fragmentSpecProp !== undefined && fragmentSpecProp !== '') {
          fragmentShaderCode = fragmentSpecProp;
        }
      }

      shaders.Fragment = fragmentShaderCode;
      var geometryShaderCode = '';

      if (openGLSpecProp) {
        var geometrySpecProp = openGLSpecProp.GeometryShaderCode;

        if (geometrySpecProp !== undefined) {
          geometryShaderCode = geometrySpecProp;
        }
      }

      shaders.Geometry = geometryShaderCode;
    };

    publicAPI.render = function () {
      var ctx = model.openGLRenderWindow.getContext();

      if (model.context !== ctx) {
        model.context = ctx;

        for (var i = primTypes.Start; i < primTypes.End; i++) {
          model.primitives[i].setOpenGLRenderWindow(model.openGLRenderWindow);
        }
      }

      var actor = model.openGLActor2D.getRenderable();
      var ren = model.openGLRenderer.getRenderable();
      publicAPI.renderPiece(ren, actor);
    };

    publicAPI.renderPiece = function (ren, actor) {
      publicAPI.invokeEvent(StartEvent$1);

      if (!model.renderable.getStatic()) {
        model.renderable.update();
      }

      model.currentInput = model.renderable.getInputData();
      publicAPI.invokeEvent(EndEvent$1);

      if (!model.currentInput) {
        vtkErrorMacro$a('No input!');
        return;
      } // if there are no points then we are done


      if (!model.currentInput.getPoints || !model.currentInput.getPoints().getNumberOfValues()) {
        return;
      }

      publicAPI.renderPieceStart(ren, actor);
      publicAPI.renderPieceDraw(ren, actor);
      publicAPI.renderPieceFinish(ren, actor);
    };

    publicAPI.renderPieceStart = function (ren, actor) {
      model.primitiveIDOffset = 0;

      if (model.openGLRenderer.getSelector()) {
        switch (model.openGLRenderer.getSelector().getCurrentPass()) {
          default:
            model.openGLRenderer.getSelector().renderProp(actor);
        }
      } // make sure the BOs are up to date


      publicAPI.updateBufferObjects(ren, actor); // Bind the OpenGL, this is shared between the different primitive/cell types.

      model.lastBoundBO = null;
    };

    publicAPI.getNeedToRebuildShaders = function (cellBO, ren, actor) {
      // has something changed that would require us to recreate the shader?
      // candidates are
      // property modified (representation interpolation and lighting)
      // input modified
      // light complexity changed
      if (cellBO.getProgram() === 0 || cellBO.getShaderSourceTime().getMTime() < publicAPI.getMTime() || cellBO.getShaderSourceTime().getMTime() < actor.getMTime() || cellBO.getShaderSourceTime().getMTime() < model.renderable.getMTime() || cellBO.getShaderSourceTime().getMTime() < model.currentInput.getMTime()) {
        return true;
      }

      return false;
    };

    publicAPI.updateBufferObjects = function (ren, actor) {
      // Rebuild buffers if needed
      if (publicAPI.getNeedToRebuildBufferObjects(ren, actor)) {
        publicAPI.buildBufferObjects(ren, actor);
      }
    };

    publicAPI.getNeedToRebuildBufferObjects = function (ren, actor) {
      // first do a coarse check
      // Note that the actor's mtime includes it's properties mtime
      var vmtime = model.VBOBuildTime.getMTime();

      if (vmtime < publicAPI.getMTime() || vmtime < model.renderable.getMTime() || vmtime < actor.getMTime() || vmtime < model.currentInput.getMTime() || model.renderable.getTransformCoordinate() && vmtime < ren.getMTime()) {
        return true;
      }

      return false;
    };

    publicAPI.getOpenGLMode = function (rep, type) {
      if (rep === Representation$4.POINTS || type === primTypes.Points) {
        return model.context.POINTS;
      }

      if (rep === Representation$4.WIREFRAME || type === primTypes.Lines || type === primTypes.TrisEdges || type === primTypes.TriStripsEdges) {
        return model.context.LINES;
      }

      return model.context.TRIANGLES;
    };

    publicAPI.buildBufferObjects = function (ren, actor) {
      var poly = model.currentInput;

      if (poly === null) {
        return;
      }

      model.renderable.mapScalars(poly, actor.getProperty().getOpacity());
      var c = model.renderable.getColorMapColors();
      model.haveCellScalars = false;
      var scalarMode = model.renderable.getScalarMode();

      if (model.renderable.getScalarVisibility()) {
        // We must figure out how the scalars should be mapped to the polydata.
        if ((scalarMode === ScalarMode$1.USE_CELL_DATA || scalarMode === ScalarMode$1.USE_CELL_FIELD_DATA || scalarMode === ScalarMode$1.USE_FIELD_DATA || !poly.getPointData().getScalars()) && scalarMode !== ScalarMode$1.USE_POINT_FIELD_DATA && c) {
          model.haveCellScalars = true;
        }
      }

      var representation = actor.getProperty().getRepresentation();
      var tcoords = poly.getPointData().getTCoords();

      if (!model.openGLActor2D.getActiveTextures()) {
        tcoords = null;
      }

      var transformCoordinate = model.renderable.getTransformCoordinate();
      var toString = "".concat(poly.getMTime(), "A").concat(representation, "B").concat(poly.getMTime()) + "C".concat(c ? c.getMTime() : 1) + "D".concat(tcoords ? tcoords.getMTime() : 1) + "E".concat(transformCoordinate ? ren.getMTime() : 1);

      if (model.VBOBuildString !== toString) {
        // Build the VBOs
        var points = poly.getPoints();

        if (transformCoordinate) {
          var p = vtkPoints$1.newInstance();
          var numPts = points.getNumberOfPoints();
          p.setNumberOfPoints(numPts);

          for (var i = 0; i < numPts; ++i) {
            transformCoordinate.setValue(points.getPoint(i));
            var v = transformCoordinate.getComputedDoubleViewportValue(ren);
            p.setPoint(i, v[0], v[1], 0.0);
          }

          points = p;
        }

        var options = {
          points: points,
          tcoords: tcoords,
          colors: c,
          cellOffset: 0,
          haveCellScalars: model.haveCellSCalars,
          customAttributes: model.renderable.getCustomShaderAttributes().map(function (arrayName) {
            return poly.getPointData().getArrayByName(arrayName);
          })
        };
        options.cellOffset += model.primitives[primTypes.Points].getCABO().createVBO(poly.getVerts(), 'verts', representation, options);
        options.cellOffset += model.primitives[primTypes.Lines].getCABO().createVBO(poly.getLines(), 'lines', representation, options);
        options.cellOffset += model.primitives[primTypes.Tris].getCABO().createVBO(poly.getPolys(), 'polys', representation, options);
        options.cellOffset += model.primitives[primTypes.TriStrips].getCABO().createVBO(poly.getStrips(), 'strips', representation, options);
        model.VBOBuildTime.modified();
        model.VBOBuildString = toString;
      }
    };

    publicAPI.renderPieceDraw = function (ren, actor) {
      var representation = actor.getProperty().getRepresentation();
      var drawSurfaceWithEdges = false;
      var gl = model.context;
      gl.lineWidth(actor.getProperty().getLineWidth());
      gl.depthMask(true); // for every primitive type

      for (var i = primTypes.Start; i < primTypes.End; i++) {
        // if there are entries
        var cabo = model.primitives[i].getCABO();

        if (cabo.getElementCount()) {
          // are we drawing edges
          model.drawingEdges = drawSurfaceWithEdges ;
          var mode = publicAPI.getOpenGLMode(representation, i);

          if (!model.drawingEdges || !model.renderDepth) {
            publicAPI.updateShaders(model.primitives[i], ren, actor);
            gl.drawArrays(mode, 0, cabo.getElementCount());
          }

          var stride = (mode === gl.POINTS ? 1 : 0) || (mode === gl.LINES ? 2 : 3);
          model.primitiveIDOffset += cabo.getElementCount() / stride;
        }
      } // reset the line width


      gl.lineWidth(1);
    };

    publicAPI.renderPieceFinish = function (ren, actor) {
      if (model.LastBoundBO) {
        model.LastBoundBO.getVAO().release();
      }
    };

    publicAPI.buildShaders = function (shaders, ren, actor) {
      publicAPI.getShaderTemplate(shaders, ren, actor); // user specified pre replacements

      var openGLSpec = model.renderable.getViewSpecificProperties().OpenGL;
      var shaderReplacements = null;

      if (openGLSpec) {
        shaderReplacements = openGLSpec.ShaderReplacements;
      }

      if (shaderReplacements) {
        for (var i = 0; i < shaderReplacements.length; i++) {
          var currReplacement = shaderReplacements[i];

          if (currReplacement.replaceFirst) {
            var shaderType = currReplacement.shaderType;
            var ssrc = shaders[shaderType];
            var substituteRes = vtkShaderProgram$1.substitute(ssrc, currReplacement.originalValue, currReplacement.replacementValue, currReplacement.replaceAll);
            shaders[shaderType] = substituteRes.result;
          }
        }
      }

      publicAPI.replaceShaderValues(shaders, ren, actor); // user specified post replacements

      if (shaderReplacements) {
        for (var _i = 0; _i < shaderReplacements.length; _i++) {
          var _currReplacement = shaderReplacements[_i];

          if (!_currReplacement.replaceFirst) {
            var _shaderType = _currReplacement.shaderType;
            var _ssrc = shaders[_shaderType];

            var _substituteRes = vtkShaderProgram$1.substitute(_ssrc, _currReplacement.originalValue, _currReplacement.replacementValue, _currReplacement.replaceAll);

            shaders[_shaderType] = _substituteRes.result;
          }
        }
      }
    };

    publicAPI.replaceShaderValues = function (shaders, ren, actor) {
      publicAPI.replaceShaderColor(shaders, ren, actor);
      publicAPI.replaceShaderTCoord(shaders, ren, actor);
      publicAPI.replaceShaderPicking(shaders, ren, actor);
      publicAPI.replaceShaderPositionVC(shaders, ren, actor);
    };

    publicAPI.replaceShaderColor = function (shaders, ren, actor) {
      var VSSource = shaders.Vertex;
      var GSSource = shaders.Geometry;
      var FSSource = shaders.Fragment;

      if (model.haveCellScalars) {
        FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Color::Dec', ['uniform samplerBuffer texture1;']).result;
        FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Color::Impl', ['gl_FragData[0] = texelFetchBuffer(texture1, gl_PrimitiveID + PrimitiveIDOffset);']).result;
      }

      if (model.lastBoundBO.getCABO().getColorComponents() !== 0) {
        VSSource = vtkShaderProgram$1.substitute(VSSource, '//VTK::Color::Dec', ['in vec4 diffuseColor;', 'out vec4 fcolorVSOutput;']).result;
        VSSource = vtkShaderProgram$1.substitute(VSSource, '//VTK::Color::Impl', ['fcolorVSOutput = diffuseColor;']).result;
        GSSource = vtkShaderProgram$1.substitute(GSSource, '//VTK::Color::Dec', ['in vec4 fcolorVSOutput[];\n', 'out vec4 fcolorGSOutput;']).result;
        GSSource = vtkShaderProgram$1.substitute(GSSource, '//VTK::Color::Impl', ['fcolorGSOutput = fcolorVSOutput[i];']).result;
        FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Color::Dec', ['in vec4 fcolorVSOutput;']).result;
        FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Color::Impl', ['gl_FragData[0] = fcolorVSOutput;']).result;
      } else {
        FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Color::Dec', ['uniform vec4 diffuseColor;']).result;
        FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Color::Impl', ['gl_FragData[0] = diffuseColor;']).result;
      }

      shaders.Vertex = VSSource;
      shaders.Geometry = GSSource;
      shaders.Fragment = FSSource;
    };

    publicAPI.replaceShaderTCoord = function (shaders, ren, actor) {
      if (model.lastBoundBO.getCABO().getTCoordOffset()) {
        var VSSource = shaders.Vertex;
        var GSSource = shaders.Geometry;
        var FSSource = shaders.Fragment;
        var tcdim = model.lastBoundBO.getCABO().getTCoordComponents();

        if (tcdim === 1) {
          VSSource = vtkShaderProgram$1.substitute(VSSource, '//VTK::TCoord::Dec', ['in float tcoordMC;', 'out float tcoordVCVSOutput;']).result;
          VSSource = vtkShaderProgram$1.substitute(VSSource, '//VTK::TCoord::Impl', ['tcoordVCVSOutput = tcoordMC;']).result;
          GSSource = vtkShaderProgram$1.substitute(GSSource, '//VTK::TCoord::Dec', ['in float tcoordVCVSOutput[];\n', 'out float tcoordVCGSOutput;']).result;
          GSSource = vtkShaderProgram$1.substitute(GSSource, ['//VTK::TCoord::Impl', 'tcoordVCGSOutput = tcoordVCVSOutput[i];']).result;
          FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::TCoord::Dec', ['in float tcoordVCVSOutput;', 'uniform sampler2D texture1;']).result;
          FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::TCoord::Impl', ['gl_FragData[0] = gl_FragData[0]*texture2D(texture1, vec2(tcoordVCVSOutput,0));']).result;
        } else if (tcdim === 2) {
          VSSource = vtkShaderProgram$1.substitute(VSSource, '//VTK::TCoord::Dec', ['in vec2 tcoordMC;', 'out vec2 tcoordVCVSOutput;']).result;
          VSSource = vtkShaderProgram$1.substitute(VSSource, '//VTK::TCoord::Impl', ['tcoordVCVSOutput = tcoordMC;']).result;
          GSSource = vtkShaderProgram$1.substitute(GSSource, '//VTK::TCoord::Dec', ['in vec2 tcoordVCVSOutput[];\n', 'out vec2 tcoordVCGSOutput;']).result;
          GSSource = vtkShaderProgram$1.substitute(GSSource, '//VTK::TCoord::Impl', ['tcoordVCGSOutput = tcoordVCVSOutput[i];']).result;
          FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::TCoord::Dec', ['in vec2 tcoordVCVSOutput;', 'uniform sampler2D texture1;']).result;
          FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::TCoord::Impl', ['gl_FragData[0] = gl_FragData[0]*texture2D(texture1, tcoordVCVSOutput.st);']).result;
        }

        if (model.haveCellScalars) {
          GSSource = vtkShaderProgram$1.substitute(GSSource, '//VTK::PrimID::Impl', ['gl_PrimitiveID = gl_PrimitiveIDIn;']).result;
        }

        shaders.Vertex = VSSource;
        shaders.Geometry = GSSource;
        shaders.Fragment = FSSource;
      }
    };

    publicAPI.replaceShaderPicking = function (shaders, ren, actor) {
      var FSSource = shaders.Fragment;
      FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Picking::Dec', ['uniform vec3 mapperIndex;', 'uniform int picking;']).result;
      FSSource = vtkShaderProgram$1.substitute(FSSource, '//VTK::Picking::Impl', '  gl_FragData[0] = picking != 0 ? vec4(mapperIndex,1.0) : gl_FragData[0];').result;
      shaders.Fragment = FSSource;
    };

    publicAPI.replaceShaderPositionVC = function (shaders, ren, actor) {
      var VSSource = shaders.Vertex;
      var GSSource = shaders.Geometry;
      var FSSource = shaders.Fragment; // for points make sure to add in the point size

      if (actor.getProperty().getRepresentation() === Representation$4.POINTS || model.lastBoundBO.getPrimitiveType() === primTypes.Points) {
        VSSource = vtkShaderProgram$1.substitute(VSSource, '//VTK::PositionVC::Impl', ['//VTK::PositionVC::Impl', "  gl_PointSize = ".concat(actor.getProperty().getPointSize(), ".0;")], false).result;
      }

      shaders.Vertex = VSSource;
      shaders.Geometry = GSSource;
      shaders.Fragment = FSSource;
    };

    publicAPI.updateShaders = function (cellBO, ren, actor) {
      model.lastBoundBO = cellBO; // has something changed that would require us to recreate the shader?

      if (publicAPI.getNeedToRebuildShaders(cellBO, ren, actor)) {
        var shaders = {
          Vertex: null,
          Fragment: null,
          Geometry: null
        };
        publicAPI.buildShaders(shaders, ren, actor); // compile and bind the program if needed

        var newShader = model.openGLRenderWindow.getShaderCache().readyShaderProgramArray(shaders.Vertex, shaders.Fragment, shaders.Geometry); // if the shader changed reinitialize the VAO

        if (newShader !== cellBO.getProgram()) {
          cellBO.setProgram(newShader); // reset the VAO as the shader has changed

          cellBO.getVAO().releaseGraphicsResources();
        }

        cellBO.getShaderSourceTime().modified();
      } else {
        model.openGLRenderWindow.getShaderCache().readyShaderProgram(cellBO.getProgram());
      }

      cellBO.getVAO().bind();
      publicAPI.setMapperShaderParameters(cellBO, ren, actor);
      publicAPI.setPropertyShaderParameters(cellBO, ren, actor);
      publicAPI.setCameraShaderParameters(cellBO, ren, actor);
      var listCallbacks = model.renderable.getViewSpecificProperties().ShadersCallbacks;

      if (listCallbacks) {
        listCallbacks.forEach(function (object) {
          object.callback(object.userData, cellBO, ren, actor);
        });
      }
    };

    publicAPI.setMapperShaderParameters = function (cellBO, ren, actor) {
      // Now to update the VAO too, if necessary.
      if (cellBO.getProgram().isUniformUsed('PrimitiveIDOffset')) {
        cellBO.getProgram().setUniformi('PrimitiveIDOffset', model.primitiveIDOffset);
      }

      if (cellBO.getProgram().isAttributeUsed('vertexWC')) {
        if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'vertexWC', cellBO.getCABO().getVertexOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, 3, false)) {
          vtkErrorMacro$a('Error setting vertexWC in shader VAO.');
        }
      }

      if (cellBO.getCABO().getElementCount() && (model.VBOBuildTime.getMTime() > cellBO.getAttributeUpdateTime().getMTime() || cellBO.getShaderSourceTime().getMTime() > cellBO.getAttributeUpdateTime().getMTime())) {
        model.renderable.getCustomShaderAttributes().forEach(function (attrName, idx) {
          if (cellBO.getProgram().isAttributeUsed("".concat(attrName, "MC"))) {
            if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), "".concat(attrName, "MC"), cellBO.getCABO().getCustomData()[idx].offset, cellBO.getCABO().getStride(), model.context.FLOAT, cellBO.getCABO().getCustomData()[idx].components, false)) {
              vtkErrorMacro$a("Error setting ".concat(attrName, "MC in shader VAO."));
            }
          }
        });

        if (cellBO.getProgram().isAttributeUsed('tcoordMC') && cellBO.getCABO().getTCoordOffset()) {
          if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'tcoordMC', cellBO.getCABO().getTCoordOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, cellBO.getCABO().getTCoordComponents(), false)) {
            vtkErrorMacro$a('Error setting tcoordMC in shader VAO.');
          }
        } else {
          cellBO.getVAO().removeAttributeArray('tcoordMC');
        }

        if (model.internalColorTexture && cellBO.getProgram().isUniformUsed('texture1')) {
          cellBO.getProgram().setUniformi('texture1', model.internalColorTexture.getTextureUnit());
        }

        var tus = model.openGLActor2D.getActiveTextures();

        if (tus) {
          for (var index = 0; index < tus.length; ++index) {
            var tex = tus[index];
            var texUnit = tex.getTextureUnit();
            var tname = "texture".concat(texUnit + 1);

            if (cellBO.getProgram().isUniformUsed(tname)) {
              cellBO.getProgram().setUniformi(tname, texUnit);
            }
          }
        } // handle wide lines


        if (publicAPI.haveWideLines(ren, actor)) {
          var gl = model.context;
          var vp = gl.getParameter(gl.VIEWPORT);
          var lineWidth = [1, 1];
          lineWidth[0] = 2.0 * actor.getProperty().getLineWidth() / vp[2];
          lineWidth[1] = 2.0 * actor.getProperty().getLineWidth() / vp[3];
          cellBO.getProgram().setUniform2f('lineWidthNVC', lineWidth);
        }

        var selector = model.openGLRenderer.getSelector();
        cellBO.getProgram().setUniform3fArray('mapperIndex', selector ? selector.getPropColorValue() : [0.0, 0.0, 0.0]);
        cellBO.getProgram().setUniformi('picking', selector ? selector.getCurrentPass() + 1 : 0);
      }
    };

    publicAPI.setPropertyShaderParameters = function (cellBO, ren, actor) {
      var c = model.renderable.getColorMapColors();

      if (!c || c.getNumberOfComponents() === 0) {
        var program = cellBO.getProgram();
        var ppty = actor.getProperty();
        var opacity = ppty.getOpacity();
        var dColor = ppty.getColor();
        var diffuseColor = [dColor[0], dColor[1], dColor[2], opacity];
        program.setUniform4f('diffuseColor', diffuseColor);
      }
    };

    function safeMatrixMultiply(matrixArray, matrixType, tmpMat) {
      matrixType.identity(tmpMat);
      return matrixArray.reduce(function (res, matrix, index) {
        if (index === 0) {
          return matrix ? matrixType.copy(res, matrix) : matrixType.identity(res);
        }

        return matrix ? matrixType.multiply(res, res, matrix) : res;
      }, tmpMat);
    }

    publicAPI.setCameraShaderParameters = function (cellBO, ren, actor) {
      var program = cellBO.getProgram();
      var shiftScaleEnabled = cellBO.getCABO().getCoordShiftAndScaleEnabled();
      var inverseShiftScaleMatrix = shiftScaleEnabled ? cellBO.getCABO().getInverseShiftAndScaleMatrix() : null; // Get the position of the actor

      var size = model.openGLRenderer.getTiledSizeAndOrigin();
      var vport = ren.getViewport();
      var actorPos = actor.getActualPositionCoordinate().getComputedViewportValue(ren); // Get the window info
      // const tileViewport = ren.getVTKWindow().getTileViewport();
      // Assume tile viewport is 0 1 based on vtkOpenGLRenderer

      var tileViewport = [0.0, 0.0, 1.0, 1.0];
      var visVP = [0, 1, 0, 1];
      visVP[0] = vport[0] >= tileViewport[0] ? vport[0] : tileViewport[0];
      visVP[1] = vport[1] >= tileViewport[1] ? vport[1] : tileViewport[1];
      visVP[2] = vport[2] >= tileViewport[2] ? vport[2] : tileViewport[2];
      visVP[3] = vport[3] >= tileViewport[3] ? vport[3] : tileViewport[3];

      if (visVP[0] >= visVP[2]) {
        return;
      }

      if (visVP[1] >= visVP[3]) {
        return;
      }

      size.usize = round(size.usize * (visVP[2] - visVP[0]) / (vport[2] - vport[0]));
      size.vsize = round(size.vsize * (visVP[3] - visVP[1]) / (vport[3] - vport[1]));
      var winSize = model.openGLRenderer.getParent().getSize();
      var xoff = round(actorPos[0] - (visVP[0] - vport[0]) * winSize[0]);
      var yoff = round(actorPos[1] - (visVP[1] - vport[1]) * winSize[1]); // set ortho projection

      var left = -xoff;
      var right = -xoff + size.usize;
      var bottom = -yoff;
      var top = -yoff + size.vsize; // it's an error to call glOrtho with
      // either left==right or top==bottom

      if (left === right) {
        right = left + 1.0;
      }

      if (bottom === top) {
        top = bottom + 1.0;
      } // compute the combined ModelView matrix and send it down to save time in the shader


      var tmpMat4 = identity(new Float64Array(16));
      tmpMat4[0] = 2.0 / (right - left);
      tmpMat4[1 * 4 + 1] = 2.0 / (top - bottom);
      tmpMat4[0 * 4 + 3] = -1.0 * (right + left) / (right - left);
      tmpMat4[1 * 4 + 3] = -1.0 * (top + bottom) / (top - bottom);
      tmpMat4[2 * 4 + 2] = 0.0;
      tmpMat4[2 * 4 + 3] = actor.getProperty().getDisplayLocation() === DisplayLocation.FOREGROUND ? -1.0 : 1.0;
      tmpMat4[3 * 4 + 3] = 1.0;
      transpose(tmpMat4, tmpMat4);
      program.setUniformMatrix('WCVCMatrix', safeMatrixMultiply([tmpMat4, inverseShiftScaleMatrix], mat4, model.tmpMat4));
    };

    publicAPI.haveWideLines = function (ren, actor) {
      if (model.lastBoundBO === model.lines && actor.getProperty().getLineWidth() > 1.0) {
        // we have wide lines, but the OpenGL implementation may
        // actually support them, check the range to see if we
        // really need have to implement our own wide lines
        // vtkOpenGLRenderWindow* renWin = vtkOpenGLRenderWindow::SafeDownCast(ren->GetVTKWindow());
        // return !(
        //   renWin && renWin->GetMaximumHardwareLineWidth() >= actor->GetProperty()->GetLineWidth());
        return true;
      }

      return false;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$U = {
    context: null,
    VBOBuildTime: 0,
    VBOBuildString: null,
    primitives: null,
    primTypes: null,
    shaderRebuildString: null
  }; // ----------------------------------------------------------------------------

  function extend$W(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$U, initialValues); // Inheritance

    vtkViewNode$1.extend(publicAPI, model, initialValues);
    vtkReplacementShaderMapper.implementReplaceShaderCoincidentOffset(publicAPI, model, initialValues);
    model.primitives = [];
    model.primTypes = primTypes;
    model.tmpMat4 = identity(new Float64Array(16));

    for (var i = primTypes.Start; i < primTypes.End; i++) {
      model.primitives[i] = vtkHelper.newInstance();
      model.primitives[i].setPrimitiveType(i);
      model.primitives[i].set({
        lastLightComplexity: 0,
        lastLightCount: 0,
        lastSelectionPass: false
      }, true);
    } // Build VTK API


    setGet(publicAPI, model, ['context']);
    model.VBOBuildTime = {};
    obj(model.VBOBuildTime, {
      mtime: 0
    }); // Object methods

    vtkOpenGLPolyDataMapper2D(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$S = newInstance$1j(extend$W, 'vtkOpenGLPolyDataMapper2D'); // ----------------------------------------------------------------------------

  registerOverride$1('vtkMapper2D', newInstance$S);

  var vtkErrorMacro$9 = vtkErrorMacro$m; // ----------------------------------------------------------------------------
  // vtkOpenGLSkybox methods
  // ----------------------------------------------------------------------------

  function vtkOpenGLSkybox(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkOpenGLSkybox'); // Builds myself.

    publicAPI.buildPass = function (prepass) {
      if (prepass) {
        model.openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');
        model.openGLRenderWindow = model.openGLRenderer.getParent();
        model.context = model.openGLRenderWindow.getContext();
        model.tris.setOpenGLRenderWindow(model.openGLRenderWindow);
        model.openGLTexture.setOpenGLRenderWindow(model.openGLRenderWindow);
        var ren = model.openGLRenderer.getRenderable();
        model.openGLCamera = model.openGLRenderer.getViewNodeFor(ren.getActiveCamera());
      }
    };

    publicAPI.queryPass = function (prepass, renderPass) {
      if (prepass) {
        if (!model.renderable || !model.renderable.getVisibility()) {
          return;
        }

        renderPass.incrementOpaqueActorCount();
      }
    };

    publicAPI.opaquePass = function (prepass, renderPass) {
      if (prepass && !model.openGLRenderer.getSelector()) {
        publicAPI.updateBufferObjects();
        model.context.depthMask(true);
        model.openGLRenderWindow.getShaderCache().readyShaderProgram(model.tris.getProgram());
        model.openGLTexture.render(model.openGLRenderWindow);
        var texUnit = model.openGLTexture.getTextureUnit();
        model.tris.getProgram().setUniformi('sbtexture', texUnit);
        var ren = model.openGLRenderer.getRenderable();
        var keyMats = model.openGLCamera.getKeyMatrices(ren);
        var imat = new Float64Array(16);
        invert(imat, keyMats.wcpc);
        model.tris.getProgram().setUniformMatrix('IMCPCMatrix', imat);

        if (model.lastFormat === 'box') {
          var camPos = ren.getActiveCamera().getPosition();
          model.tris.getProgram().setUniform3f('camPos', camPos[0], camPos[1], camPos[2]);
        }

        model.tris.getVAO().bind(); // draw polygons

        model.context.drawArrays(model.context.TRIANGLES, 0, model.tris.getCABO().getElementCount());
        model.tris.getVAO().release();
        model.openGLTexture.deactivate();
      }
    };

    publicAPI.updateBufferObjects = function () {
      // build the VBO if needed, only happens once
      if (!model.tris.getCABO().getElementCount()) {
        var ptsArray = new Float32Array(12);

        for (var i = 0; i < 4; i++) {
          ptsArray[i * 3] = i % 2 * 2 - 1.0;
          ptsArray[i * 3 + 1] = i > 1 ? 1.0 : -1.0;
          ptsArray[i * 3 + 2] = 1.0;
        }

        var points = vtkDataArray$1.newInstance({
          numberOfComponents: 3,
          values: ptsArray
        });
        points.setName('points');
        var cellArray = new Uint16Array(8);
        cellArray[0] = 3;
        cellArray[1] = 0;
        cellArray[2] = 1;
        cellArray[3] = 3;
        cellArray[4] = 3;
        cellArray[5] = 0;
        cellArray[6] = 3;
        cellArray[7] = 2;
        var cells = vtkDataArray$1.newInstance({
          numberOfComponents: 1,
          values: cellArray
        });
        model.tris.getCABO().createVBO(cells, 'polys', Representation$4.SURFACE, {
          points: points,
          cellOffset: 0
        });
      } // update the program?


      if (model.renderable.getFormat() !== model.lastFormat) {
        model.lastFormat = model.renderable.getFormat();

        if (model.lastFormat === 'box') {
          // we invert Y below because opengl is messed up!
          // Cube Maps have been specified to follow the RenderMan
          // specification (for whatever reason), and RenderMan
          // assumes the images' origin being in the upper left,
          // contrary to the usual OpenGL behaviour of having the
          // image origin in the lower left. That's why things get
          // swapped in the Y direction. It totally breaks with the usual
          // OpenGL semantics and doesn't make sense at all.
          // But now we're stuck with it.  From
          // https://stackoverflow.com/questions/11685608/convention-of-faces-in-opengl-cubemapping
          //
          model.tris.setProgram(model.openGLRenderWindow.getShaderCache().readyShaderProgramArray("//VTK::System::Dec\n             attribute vec3 vertexMC;\n             uniform mat4 IMCPCMatrix;\n             varying vec3 TexCoords;\n             void main () {\n              gl_Position = vec4(vertexMC.xyz, 1.0);\n              vec4 wpos = IMCPCMatrix * gl_Position;\n              TexCoords = wpos.xyz/wpos.w;\n             }", "//VTK::System::Dec\n             //VTK::Output::Dec\n             varying vec3 TexCoords;\n             uniform samplerCube sbtexture;\n             uniform vec3 camPos;\n             void main () {\n               // skybox looks from inside out\n               // which means we have to adjust\n               // our tcoords. Otherwise text would\n               // be flipped\n               vec3 tc = normalize(TexCoords - camPos);\n               if (abs(tc.z) < max(abs(tc.x),abs(tc.y)))\n               {\n                 tc = vec3(1.0, 1.0, -1.0) * tc;\n               }\n               else\n               {\n                 tc = vec3(-1.0, 1.0, 1.0) * tc;\n               }\n               gl_FragData[0] = textureCube(sbtexture, tc);\n             }", ''));
        }

        if (model.lastFormat === 'background') {
          // maps the texture to the window
          model.tris.setProgram(model.openGLRenderWindow.getShaderCache().readyShaderProgramArray("//VTK::System::Dec\n             attribute vec3 vertexMC;\n             uniform mat4 IMCPCMatrix;\n             varying vec2 TexCoords;\n             void main () {\n              gl_Position = vec4(vertexMC.xyz, 1.0);\n              vec4 wpos = IMCPCMatrix * gl_Position;\n              TexCoords = vec2(vertexMC.x, vertexMC.y)*0.5 + 0.5;\n             }", "//VTK::System::Dec\n             //VTK::Output::Dec\n             varying vec2 TexCoords;\n             uniform sampler2D sbtexture;\n             void main () {\n               gl_FragData[0] = texture2D(sbtexture, TexCoords);\n             }", ''));
        }

        model.tris.getShaderSourceTime().modified();
        model.tris.getVAO().bind();

        if (!model.tris.getVAO().addAttributeArray(model.tris.getProgram(), model.tris.getCABO(), 'vertexMC', model.tris.getCABO().getVertexOffset(), model.tris.getCABO().getStride(), model.context.FLOAT, 3, model.context.FALSE)) {
          vtkErrorMacro$9('Error setting vertexMC in shader VAO.');
        }
      } // set/update the texture map if needed


      var tmaps = model.renderable.getTextures();

      if (!tmaps.length) {
        vtkErrorMacro$9('vtkSkybox requires a texture map');
      }

      if (model.openGLTexture.getRenderable() !== tmaps[0]) {
        model.openGLTexture.releaseGraphicsResources(model.openGLRenderWindow);
        model.openGLTexture.setRenderable(tmaps[0]);
      }
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$T = {
    context: null
  }; // ----------------------------------------------------------------------------

  function extend$V(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$T, initialValues); // Inheritance

    vtkViewNode$1.extend(publicAPI, model, initialValues);
    model.openGLTexture = vtkOpenGLTexture$1.newInstance();
    model.tris = vtkHelper.newInstance();
    model.keyMatrixTime = {};
    obj(model.keyMatrixTime, {
      mtime: 0
    });
    model.keyMatrices = {
      normalMatrix: identity$1(new Float64Array(9)),
      mcwc: identity(new Float64Array(16))
    }; // Build VTK API

    setGet(publicAPI, model, ['context']);
    get$1(publicAPI, model, ['activeTextures']); // Object methods

    vtkOpenGLSkybox(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$R = newInstance$1j(extend$V); // ----------------------------------------------------------------------------

  registerOverride$1('vtkSkybox', newInstance$R);

  // import { mat4, vec3 }     from 'gl-matrix';
  var vtkDebugMacro$7 = vtkDebugMacro$a; // ----------------------------------------------------------------------------
  // vtkOpenGLPixelSpaceCallbackMapper methods
  // ----------------------------------------------------------------------------

  function vtkOpenGLPixelSpaceCallbackMapper(publicAPI, model) {
    model.classHierarchy.push('vtkOpenGLPixelSpaceCallbackMapper');

    publicAPI.opaquePass = function (prepass, renderPass) {
      model.openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');
      model.openGLRenderWindow = model.openGLRenderer.getParent();
      var aspectRatio = model.openGLRenderer.getAspectRatio();
      var camera = model.openGLRenderer ? model.openGLRenderer.getRenderable().getActiveCamera() : null;
      var tsize = model.openGLRenderer.getTiledSizeAndOrigin();
      var texels = null;

      if (model.renderable.getUseZValues()) {
        var zbt = renderPass.getZBufferTexture();
        var width = Math.floor(zbt.getWidth());
        var height = Math.floor(zbt.getHeight());
        var gl = model.openGLRenderWindow.getContext();
        zbt.bind(); // Here we need to use vtkFramebuffer to save current settings (bindings/buffers)

        var fb = renderPass.getFramebuffer();

        if (!fb) {
          vtkDebugMacro$7('No framebuffer to save/restore');
        } else {
          // save framebuffer settings
          fb.saveCurrentBindingsAndBuffers();
        }

        var framebuffer = gl.createFramebuffer();
        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, zbt.getHandle(), 0);

        if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE) {
          texels = new Uint8Array(width * height * 4);
          gl.viewport(0, 0, width, height);
          gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, texels);
        } // Now we need to restore framebuffer bindings/buffers


        if (fb) {
          fb.restorePreviousBindingsAndBuffers();
        }

        gl.deleteFramebuffer(framebuffer);
      }

      model.renderable.invokeCallback(model.renderable.getInputData(), camera, aspectRatio, tsize, texels);
    };

    publicAPI.queryPass = function (prepass, renderPass) {
      if (prepass) {
        if (model.renderable.getUseZValues()) {
          renderPass.requestDepth();
        }
      }
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$S = {}; // ----------------------------------------------------------------------------

  function extend$U(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$S, initialValues); // Inheritance

    vtkViewNode$1.extend(publicAPI, model, initialValues); // Object methods

    vtkOpenGLPixelSpaceCallbackMapper(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$Q = newInstance$1j(extend$U, 'vtkOpenGLPixelSpaceCallbackMapper'); // ----------------------------------------------------------------------------

  registerOverride$1('vtkPixelSpaceCallbackMapper', newInstance$Q);

  var CLASS_MAPPING = Object.create(null);
  function registerOverride(className, fn) {
    CLASS_MAPPING[className] = fn;
  } // ----------------------------------------------------------------------------
  // vtkWebGPUViewNodeFactory methods
  // ----------------------------------------------------------------------------

  function vtkWebGPUViewNodeFactory(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkWebGPUViewNodeFactory');
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$R = {}; // ----------------------------------------------------------------------------

  function extend$T(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$R, initialValues); // Static class mapping shared across instances

    model.overrides = CLASS_MAPPING; // Inheritance

    vtkViewNodeFactory$1$1.extend(publicAPI, model, initialValues); // Object methods

    vtkWebGPUViewNodeFactory(publicAPI, model);
  } // ----------------------------------------------------------------------------

  macro.newInstance(extend$T, 'vtkWebGPUViewNodeFactory'); // ----------------------------------------------------------------------------

  // vtkWebGPUCamera methods
  // ----------------------------------------------------------------------------

  function vtkWebGPUCamera(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkWebGPUCamera');

    publicAPI.getProjectionMatrix = function (outMat, aspect, cRange, windowCenter) {
      identity(outMat);

      if (model.renderable.getParallelProjection()) {
        // set up a rectangular parallelipiped
        var parallelScale = model.renderable.getParallelScale();
        var width = parallelScale * aspect;
        var height = parallelScale;
        var xmin = (windowCenter[0] - 1.0) * width;
        var xmax = (windowCenter[0] + 1.0) * width;
        var ymin = (windowCenter[1] - 1.0) * height;
        var ymax = (windowCenter[1] + 1.0) * height;
        var xr = 1.0 / (xmax - xmin);
        var yr = 1.0 / (ymax - ymin);
        outMat[0] = 2.0 * xr;
        outMat[5] = 2.0 * yr;
        outMat[10] = 1.0 / (cRange[1] - cRange[0]);
        outMat[12] = (xmax + xmin) * xr;
        outMat[13] = (ymax + ymin) * yr;
        outMat[14] = cRange[1] / (cRange[1] - cRange[0]);
      } else {
        var tmp = Math.tan(Math.PI * model.renderable.getViewAngle() / 360.0);

        var _width;

        var _height;

        if (model.renderable.getUseHorizontalViewAngle() === true) {
          _width = cRange[0] * tmp;
          _height = cRange[0] * tmp / aspect;
        } else {
          _width = cRange[0] * tmp * aspect;
          _height = cRange[0] * tmp;
        }

        var _xmin = (windowCenter[0] - 1.0) * _width;

        var _xmax = (windowCenter[0] + 1.0) * _width;

        var _ymin = (windowCenter[1] - 1.0) * _height;

        var _ymax = (windowCenter[1] + 1.0) * _height;

        outMat[0] = 2.0 * cRange[0] / (_xmax - _xmin);
        outMat[5] = 2.0 * cRange[0] / (_ymax - _ymin);
        outMat[12] = (_xmin + _xmax) / (_xmax - _xmin);
        outMat[13] = (_ymin + _ymax) / (_ymax - _ymin);
        outMat[10] = 0.0;
        outMat[14] = cRange[0];
        outMat[11] = -1.0;
        outMat[15] = 0.0;
      }
    };

    publicAPI.convertToOpenGLDepth = function (val) {
      if (model.renderable.getParallelProjection()) {
        return 1.0 - val;
      }

      var cRange = model.renderable.getClippingRangeByReference();
      var zval = -cRange[0] / val;
      zval = (cRange[0] + cRange[1]) / (cRange[1] - cRange[0]) + 2.0 * cRange[0] * cRange[1] / (zval * (cRange[1] - cRange[0]));
      return 0.5 * zval + 0.5;
    };

    publicAPI.getKeyMatrices = function (webGPURenderer) {
      // has the camera changed?
      var ren = webGPURenderer.getRenderable();
      var webGPURenderWindow = webGPURenderer.getParent();

      if (Math.max(webGPURenderWindow.getMTime(), publicAPI.getMTime(), ren.getMTime(), model.renderable.getMTime(), webGPURenderer.getStabilizedTime()) > model.keyMatrixTime.getMTime()) {
        var wcvc = model.renderable.getViewMatrix();
        copy(model.keyMatrices.normalMatrix, wcvc); // zero out translation

        model.keyMatrices.normalMatrix[3] = 0.0;
        model.keyMatrices.normalMatrix[7] = 0.0;
        model.keyMatrices.normalMatrix[11] = 0.0;
        invert(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);
        transpose(model.keyMatrices.wcvc, wcvc);
        var center = webGPURenderer.getStabilizedCenterByReference();
        translate(model.keyMatrices.scvc, model.keyMatrices.wcvc, center);
        var aspectRatio = webGPURenderer.getAspectRatio();
        var cRange = model.renderable.getClippingRangeByReference();
        publicAPI.getProjectionMatrix(model.keyMatrices.vcpc, aspectRatio, cRange, model.renderable.getWindowCenterByReference());
        multiply$1(model.keyMatrices.scpc, model.keyMatrices.vcpc, model.keyMatrices.scvc);
        invert(model.keyMatrices.pcsc, model.keyMatrices.scpc);
        model.keyMatrixTime.modified();
      }

      return model.keyMatrices;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$Q = {
    keyMatrixTime: null,
    keyMatrices: null
  }; // ----------------------------------------------------------------------------

  function extend$S(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$Q, initialValues); // Inheritance

    vtkViewNode$1.extend(publicAPI, model, initialValues);
    model.keyMatrixTime = {};
    macro.obj(model.keyMatrixTime); // values always get set by the get method

    model.keyMatrices = {
      normalMatrix: new Float64Array(16),
      vcpc: new Float64Array(16),
      pcsc: new Float64Array(16),
      wcvc: new Float64Array(16),
      scpc: new Float64Array(16),
      scvc: new Float64Array(16)
    }; // Build VTK API

    macro.setGet(publicAPI, model, ['keyMatrixTime']); // Object methods

    vtkWebGPUCamera(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$P = macro.newInstance(extend$S); // ----------------------------------------------------------------------------

  registerOverride('vtkCamera', newInstance$P);

  // vtkWebGPUBindGroup methods
  // ----------------------------------------------------------------------------

  function vtkWebGPUBindGroup(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkWebGPUBindGroup');

    publicAPI.setBindables = function (bindables) {
      // is there a difference between the old and new list?
      if (model.bindables.length === bindables.length) {
        var allMatch = true;

        for (var i = 0; i < model.bindables.length; i++) {
          if (model.bindables[i] !== bindables[i]) {
            allMatch = false;
          }
        }

        if (allMatch) {
          return;
        }
      } // there is a difference


      model.bindables = bindables;
      publicAPI.modified();
    };

    publicAPI.getBindGroupLayout = function (device) {
      var entries = [];

      for (var i = 0; i < model.bindables.length; i++) {
        var entry = model.bindables[i].getBindGroupLayoutEntry();
        entry.binding = i;
        entries.push(entry);
      }

      return device.getBindGroupLayout({
        entries: entries
      });
    };

    publicAPI.getBindGroup = function (device) {
      // check mtime
      var mtime = publicAPI.getMTime();

      for (var i = 0; i < model.bindables.length; i++) {
        var tm = model.bindables[i].getBindGroupTime().getMTime();
        mtime = tm > mtime ? tm : mtime;
      }

      if (mtime < model.bindGroupTime.getMTime()) {
        return model.bindGroup;
      }

      var entries = [];

      for (var _i = 0; _i < model.bindables.length; _i++) {
        var entry = model.bindables[_i].getBindGroupEntry();

        entry.binding = _i;
        entries.push(entry);
      }

      model.bindGroup = device.getHandle().createBindGroup({
        layout: publicAPI.getBindGroupLayout(device),
        entries: entries
      });
      model.bindGroupTime.modified();
      return model.bindGroup;
    };

    publicAPI.getShaderCode = function (pipeline) {
      var lines = [];
      var bgroup = pipeline.getBindGroupLayoutCount(model.name);

      for (var i = 0; i < model.bindables.length; i++) {
        lines.push(model.bindables[i].getShaderCode(i, bgroup));
      }

      return lines.join('\n');
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$P = {
    device: null,
    handle: null,
    name: null
  }; // ----------------------------------------------------------------------------

  function extend$R(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$P, initialValues); // Object methods

    macro.obj(publicAPI, model);
    model.bindables = [];
    model.bindGroupTime = {};
    macro.obj(model.bindGroupTime, {
      mtime: 0
    });
    macro.get(publicAPI, model, ['bindGroupTime', 'handle', 'sizeInBytes', 'usage']);
    macro.setGet(publicAPI, model, ['name', 'device', 'arrayInformation', 'sourceTime']);
    vtkWebGPUBindGroup(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$O = macro.newInstance(extend$R); // ----------------------------------------------------------------------------

  var vtkWebGPUBindGroup$1 = {
    newInstance: newInstance$O,
    extend: extend$R
  };

  // vtkWebGPUShaderModule methods
  // ----------------------------------------------------------------------------

  function vtkWebGPUShaderModule(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkWebGPUShaderModule');

    publicAPI.initialize = function (device, shaderDesc) {
      model.device = device; // console.log(shaderDesc.getCode());

      model.handle = model.device.getHandle().createShaderModule({
        code: shaderDesc.getCode()
      });
    }; // publicAPI.setLastCameraMTime = (mtime) => {
    //   model.lastCameraMTime = mtime;
    // };

  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$O = {
    device: null,
    handle: null
  }; // ----------------------------------------------------------------------------

  function extend$Q(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$O, initialValues); // Build VTK API

    macro.obj(publicAPI, model);
    macro.get(publicAPI, model, ['lastCameraMTime']);
    macro.setGet(publicAPI, model, ['device', 'handle']); // Object methods

    vtkWebGPUShaderModule(publicAPI, model);
  } // ----------------------------------------------------------------------------


  var newInstance$N = macro.newInstance(extend$Q, 'vtkWebGPUShaderModule'); // ----------------------------------------------------------------------------

  var vtkWebGPUShaderModule$1 = {
    newInstance: newInstance$N,
    extend: extend$Q
  };

  // this is useful for building up shader strings which typically involve
  // lots of string substitutions. Return true if a substitution was done.

  function substitute(source, search, replace) {
    var all = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    var replaceStr = Array.isArray(replace) ? replace.join('\n') : replace;
    var replaced = false;

    if (source.search(search) !== -1) {
      replaced = true;
    }

    var gflag = '';

    if (all) {
      gflag = 'g';
    }

    var regex = new RegExp(search, gflag);
    var resultstr = source.replace(regex, replaceStr);
    return {
      replace: replaced,
      result: resultstr
    };
  } // ----------------------------------------------------------------------------
  // vtkWebGPUShaderCache methods
  // ----------------------------------------------------------------------------


  function vtkWebGPUShaderCache(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkWebGPUShaderCache');

    publicAPI.getShaderModule = function (shaderDesc) {
      // has it already been created?
      var sType = shaderDesc.getType();
      var sHash = shaderDesc.getHash();

      var keys = model._shaderModules.keys();

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];

        if (key.getHash() === sHash && key.getType() === sType) {
          return model._shaderModules.get(key);
        }
      } // console.log(JSON.stringify(shaderDesc));


      var sm = vtkWebGPUShaderModule$1.newInstance();
      sm.initialize(model.device, shaderDesc);

      model._shaderModules.set(shaderDesc, sm);

      return sm;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$N = {
    shaderModules: null,
    device: null,
    window: null
  }; // ----------------------------------------------------------------------------

  function extend$P(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$N, initialValues); // Internal objects

    model._shaderModules = new Map(); // Build VTK API

    macro.obj(publicAPI, model);
    macro.setGet(publicAPI, model, ['device', 'window']); // Object methods

    vtkWebGPUShaderCache(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$M = macro.newInstance(extend$P, 'vtkWebGPUShaderCache'); // ----------------------------------------------------------------------------

  var vtkWebGPUShaderCache$1 = {
    newInstance: newInstance$M,
    extend: extend$P,
    substitute: substitute
  };

  // vtkWebGPUPipeline methods
  // ----------------------------------------------------------------------------

  function vtkWebGPUPipeline(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkWebGPUPipeline');

    publicAPI.getShaderDescriptions = function () {
      return model.shaderDescriptions;
    };

    publicAPI.initialize = function (device) {
      // start with the renderencoder settings
      model.pipelineDescription = model.renderEncoder.getPipelineSettings();
      model.pipelineDescription.primitive.topology = model.topology;
      model.pipelineDescription.vertex = model.vertexState; // add in bind group layouts

      var bindGroupLayouts = [];

      for (var i = 0; i < model.layouts.length; i++) {
        bindGroupLayouts.push(model.layouts[i].layout);
      }

      model.pipelineLayout = device.getHandle().createPipelineLayout({
        bindGroupLayouts: bindGroupLayouts
      });
      model.pipelineDescription.layout = model.pipelineLayout;

      for (var _i = 0; _i < model.shaderDescriptions.length; _i++) {
        var sd = model.shaderDescriptions[_i];
        var sm = device.getShaderModule(sd);

        if (sd.getType() === 'vertex') {
          model.pipelineDescription.vertex.module = sm.getHandle();
          model.pipelineDescription.vertex.entryPoint = 'main';
        }

        if (sd.getType() === 'fragment') {
          model.pipelineDescription.fragment.module = sm.getHandle();
          model.pipelineDescription.fragment.entryPoint = 'main';
        }
      }

      model.handle = device.getHandle().createRenderPipeline(model.pipelineDescription);
    };

    publicAPI.getShaderDescription = function (stype) {
      for (var i = 0; i < model.shaderDescriptions.length; i++) {
        if (model.shaderDescriptions[i].getType() === stype) return model.shaderDescriptions[i];
      }

      return null;
    };

    publicAPI.addBindGroupLayout = function (bindGroup) {
      if (!bindGroup) {
        return;
      }

      model.layouts.push({
        layout: bindGroup.getBindGroupLayout(model.device),
        name: bindGroup.getName()
      });
    };

    publicAPI.getBindGroupLayout = function (idx) {
      return model.layouts[idx].layout;
    };

    publicAPI.getBindGroupLayoutCount = function (lname) {
      for (var i = 0; i < model.layouts.length; i++) {
        if (model.layouts[i].name === lname) {
          return i;
        }
      }

      return 0;
    };

    publicAPI.bindVertexInput = function (renderEncoder, vInput) {
      vInput.bindBuffers(renderEncoder);
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$M = {
    handle: null,
    layouts: null,
    renderEncoder: null,
    shaderDescriptions: null,
    vertexState: null,
    topology: null,
    pipelineDescription: null
  }; // ----------------------------------------------------------------------------

  function extend$O(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$M, initialValues); // Build VTK API

    obj(publicAPI, model);
    model.layouts = [];
    model.shaderDescriptions = [];
    get$1(publicAPI, model, ['handle', 'pipelineDescription']);
    setGet(publicAPI, model, ['device', 'renderEncoder', 'topology', 'vertexState']); // For more macro methods, see "Sources/macros.js"
    // Object specific methods

    vtkWebGPUPipeline(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$L = newInstance$1j(extend$O, 'vtkWebGPUPipeline'); // ----------------------------------------------------------------------------

  var vtkWebGPUPipeline$1 = {
    newInstance: newInstance$L,
    extend: extend$O
  };

  // vtkWebGPUShaderDescription methods
  // ----------------------------------------------------------------------------
  // shader description

  function vtkWebGPUShaderDescription(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkWebGPUShaderDescription');

    publicAPI.hasOutput = function (name) {
      return model.outputNames.includes(name);
    };

    publicAPI.addOutput = function (type, name) {
      var interpolation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      model.outputTypes.push(type);
      model.outputNames.push(name);
      model.outputInterpolations.push(interpolation);
    };

    publicAPI.addBuiltinOutput = function (type, name) {
      model.builtinOutputTypes.push(type);
      model.builtinOutputNames.push(name);
    };

    publicAPI.addBuiltinInput = function (type, name) {
      model.builtinInputTypes.push(type);
      model.builtinInputNames.push(name);
    }; // perform shader replacements for the input and outputs
    // of this shader. That includes vertex inputs if specified


    publicAPI.replaceShaderCode = function (priorStage, vertexInput) {
      var inputImpl = [];
      var iodec = [];

      if (vertexInput) {
        inputImpl.push(vertexInput.getShaderCode());
      }

      if (priorStage || model.builtinInputNames.length) {
        var inputStruct = [];
        inputStruct.push("struct ".concat(model.type, "Input\n{"));

        if (priorStage) {
          var inputNames = priorStage.getOutputNamesByReference();
          var inputTypes = priorStage.getOutputTypesByReference();
          var inputInterpolations = priorStage.getOutputInterpolationsByReference();

          for (var i = 0; i < inputNames.length; i++) {
            if (inputInterpolations[i] !== undefined) {
              inputStruct.push("  [[location(".concat(i, "), interpolate(").concat(inputInterpolations[i], ")]] ").concat(inputNames[i], " : ").concat(inputTypes[i], ";"));
            } else {
              inputStruct.push("  [[location(".concat(i, ")]] ").concat(inputNames[i], " : ").concat(inputTypes[i], ";"));
            }
          }
        }

        for (var _i = 0; _i < model.builtinInputNames.length; _i++) {
          inputStruct.push("  ".concat(model.builtinInputNames[_i], " : ").concat(model.builtinInputTypes[_i], ";"));
        }

        if (inputStruct.length > 1) {
          inputStruct.push('};');
          iodec = inputStruct;
          inputImpl[inputImpl.length - 1] += ',';
          inputImpl.push("input: ".concat(model.type, "Input"));
        }
      }

      if (inputImpl.length) {
        model.code = vtkWebGPUShaderCache$1.substitute(model.code, '//VTK::IOStructs::Input', inputImpl).result;
      }

      if (model.outputNames.length + model.builtinOutputNames.length) {
        var outputStruct = ["struct ".concat(model.type, "Output\n{")];

        for (var _i2 = 0; _i2 < model.outputNames.length; _i2++) {
          if (model.outputInterpolations[_i2] !== undefined) {
            outputStruct.push("  [[location(".concat(_i2, "), interpolate(").concat(model.outputInterpolations[_i2], ")]] ").concat(model.outputNames[_i2], " : ").concat(model.outputTypes[_i2], ";"));
          } else {
            outputStruct.push("  [[location(".concat(_i2, ")]] ").concat(model.outputNames[_i2], " : ").concat(model.outputTypes[_i2], ";"));
          }
        }

        for (var _i3 = 0; _i3 < model.builtinOutputNames.length; _i3++) {
          outputStruct.push("  ".concat(model.builtinOutputNames[_i3], " : ").concat(model.builtinOutputTypes[_i3], ";"));
        }

        outputStruct.push('};');
        iodec = iodec.concat(outputStruct);
        model.code = vtkWebGPUShaderCache$1.substitute(model.code, '//VTK::IOStructs::Output', ["-> ".concat(model.type, "Output")]).result;
      }

      model.code = vtkWebGPUShaderCache$1.substitute(model.code, '//VTK::IOStructs::Dec', iodec).result;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$L = {
    type: null,
    // 'vertex' or 'fragment'
    hash: null,
    code: null,
    outputNames: null,
    outputTypes: null
  }; // ----------------------------------------------------------------------------

  function extend$N(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$L, initialValues);
    model.outputNames = [];
    model.outputTypes = [];
    model.outputInterpolations = [];
    model.builtinOutputNames = [];
    model.builtinOutputTypes = [];
    model.builtinInputNames = [];
    model.builtinInputTypes = []; // Build VTK API

    macro.obj(publicAPI, model);
    macro.setGet(publicAPI, model, ['type', 'hash', 'code']);
    macro.getArray(publicAPI, model, ['outputTypes', 'outputNames', 'outputInterpolations']); // Object methods

    vtkWebGPUShaderDescription(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$K = macro.newInstance(extend$N, 'vtkWebGPUShaderDescription'); // ----------------------------------------------------------------------------

  var vtkWebGPUShaderDescription$1 = {
    newInstance: newInstance$K,
    extend: extend$N
  };

  // vtkWebGPUDevice static functions
  //
  // WebGPU uses types in a many places and calls, and often those types
  // need to be associated with byte sizes, alignments, native arrays etc.
  // The folowing methods are designed to help vtk.js introspect those types.
  // WebGPU currently tends to use multiple type formats:
  //  - buffer types such as float32x4
  //  - shader types suchs as vec4<f32>
  //  - texture types such as rgba32float
  // ----------------------------------------------------------------------------
  // see https://gpuweb.github.io/gpuweb/#texture-formats
  // for possible formats, there are a lot of them

  var textureDetails = {
    // 8-bit formats
    r8unorm: {
      numComponents: 1,
      nativeType: Uint8Array,
      stride: 1,
      elementSize: 1,
      sampleType: 'float'
    },
    r8snorm: {
      numComponents: 1,
      nativeType: Int8Array,
      stride: 1,
      elementSize: 1,
      sampleType: 'float'
    },
    r8uint: {
      numComponents: 1,
      nativeType: Uint8Array,
      stride: 1,
      elementSize: 1,
      sampleType: 'uint'
    },
    r8sint: {
      numComponents: 1,
      nativeType: Int8Array,
      stride: 1,
      elementSize: 1,
      sampleType: 'sint'
    },
    // 16-bit formats
    r16uint: {
      numComponents: 1,
      nativeType: Uint16Array,
      stride: 2,
      elementSize: 2,
      sampleType: 'uint'
    },
    r16sint: {
      numComponents: 1,
      nativeType: Int16Array,
      stride: 2,
      elementSize: 2,
      sampleType: 'sint'
    },
    r16float: {
      numComponents: 1,
      nativeType: Float32Array,
      stride: 2,
      elementSize: 2,
      sampleType: 'float'
    },
    rg8unorm: {
      numComponents: 2,
      nativeType: Uint8Array,
      stride: 2,
      elementSize: 1,
      sampleType: 'float'
    },
    rg8snorm: {
      numComponents: 2,
      nativeType: Int8Array,
      stride: 2,
      elementSize: 1,
      sampleType: 'float'
    },
    rg8uint: {
      numComponents: 2,
      nativeType: Uint8Array,
      stride: 2,
      elementSize: 1,
      sampleType: 'uint'
    },
    rg8sint: {
      numComponents: 2,
      nativeType: Int8Array,
      stride: 2,
      elementSize: 1,
      sampleType: 'sint'
    },
    // 32-bit formats
    r32uint: {
      numComponents: 1,
      nativeType: Uint32Array,
      stride: 4,
      elementSize: 4,
      sampleType: 'uint'
    },
    r32sint: {
      numComponents: 1,
      nativeType: Int32Array,
      stride: 4,
      elementSize: 4,
      sampleType: 'sint'
    },
    r32float: {
      numComponents: 1,
      nativeType: Float32Array,
      stride: 4,
      elementSize: 4,
      sampleType: 'unfilterable-float'
    },
    rg16uint: {
      numComponents: 2,
      nativeType: Uint16Array,
      stride: 4,
      elementSize: 2,
      sampleType: 'uint'
    },
    rg16sint: {
      numComponents: 2,
      nativeType: Int16Array,
      stride: 4,
      elementSize: 2,
      sampleType: 'sint'
    },
    rg16float: {
      numComponents: 2,
      nativeType: Float32Array,
      stride: 4,
      elementSize: 2,
      sampleType: 'float'
    },
    rgba8unorm: {
      numComponents: 4,
      nativeType: Uint8Array,
      stride: 4,
      elementSize: 1,
      sampleType: 'float'
    },
    'rgba8unorm-srgb': {
      numComponents: 4,
      nativeType: Uint8Array,
      stride: 4,
      elementSize: 1,
      sampleType: 'float'
    },
    rgba8snorm: {
      numComponents: 4,
      nativeType: Int8Array,
      stride: 4,
      elementSize: 1,
      sampleType: 'float'
    },
    rgba8uint: {
      numComponents: 4,
      nativeType: Uint8Array,
      stride: 4,
      elementSize: 1,
      sampleType: 'uint'
    },
    rgba8sint: {
      numComponents: 4,
      nativeType: Int8Array,
      stride: 4,
      elementSize: 1,
      sampleType: 'sint'
    },
    bgra8unorm: {
      numComponents: 4,
      nativeType: Uint8Array,
      stride: 4,
      elementSize: 1,
      sampleType: 'float'
    },
    'bgra8unorm-srgb': {
      numComponents: 4,
      nativeType: Uint8Array,
      stride: 4,
      elementSize: 1,
      sampleType: 'float'
    },
    // Packed 32-bit formats
    rgb9e5ufloat: {
      numComponents: 4,
      nativeType: Uint32Array,
      stride: 4,
      sampleType: 'float'
    },
    rgb10a2unorm: {
      numComponents: 4,
      nativeType: Uint32Array,
      stride: 4,
      sampleType: 'float'
    },
    rg11b10ufloat: {
      numComponents: 4,
      nativeType: Float32Array,
      stride: 4,
      sampleType: 'float'
    },
    // 64-bit formats
    rg32uint: {
      numComponents: 2,
      nativeType: Uint32Array,
      stride: 8,
      elementSize: 4,
      sampleType: 'uint'
    },
    rg32sint: {
      numComponents: 2,
      nativeType: Int32Array,
      stride: 8,
      elementSize: 4,
      sampleType: 'sint'
    },
    rg32float: {
      numComponents: 2,
      nativeType: Float32Array,
      stride: 8,
      elementSize: 4,
      sampleType: 'unfilterable-float'
    },
    rgba16uint: {
      numComponents: 4,
      nativeType: Uint16Array,
      stride: 8,
      elementSize: 2,
      sampleType: 'uint'
    },
    rgba16sint: {
      numComponents: 4,
      nativeType: Int16Array,
      stride: 8,
      elementSize: 2,
      sampleType: 'sint'
    },
    rgba16float: {
      numComponents: 4,
      nativeType: Float32Array,
      stride: 8,
      elementSize: 2,
      sampleType: 'float'
    },
    // 128-bit formats
    rgba32uint: {
      numComponents: 4,
      nativeType: Uint32Array,
      stride: 16,
      elementSize: 4,
      sampleType: 'uint'
    },
    rgba32sint: {
      numComponents: 4,
      nativeType: Int32Array,
      stride: 16,
      elementSize: 4,
      sampleType: 'sint'
    },
    rgba32float: {
      numComponents: 4,
      nativeType: Float32Array,
      stride: 16,
      elementSize: 4,
      sampleType: 'unfilterable-float'
    },
    // Depth and stencil formats
    stencil8: {
      numComponents: 1,
      nativeType: Uint8Array,
      stride: 1,
      elementSize: 1,
      sampleType: 'uint'
    },
    depth16unorm: {
      numComponents: 1,
      nativeType: Uint16Array,
      stride: 2,
      elementSize: 2,
      sampleType: 'depth'
    },
    depth24plus: {
      numComponents: 1,
      nativeType: Uint32Array,
      stride: 4,
      elementSize: 3,
      sampleType: 'depth'
    },
    'depth24plus-stencil8': {
      numComponents: 2,
      nativeType: Uint32Array,
      stride: 4,
      sampleType: 'mixed'
    },
    depth32float: {
      numComponents: 1,
      nativeType: Float32Array,
      stride: 4,
      elementSize: 4,
      sampleType: 'depth'
    }
  };

  function getDetailsFromTextureFormat(format) {
    if (!format || format.length < 6) return 0;

    if (format in textureDetails === true) {
      return textureDetails[format];
    }

    vtkErrorMacro$m("unknown format ".concat(format));
    return null;
  } // see https://gpuweb.github.io/gpuweb/#enumdef-gpuvertexformat
  // for possible formats


  function getByteStrideFromBufferFormat(format) {
    if (!format || format.length < 5) return 0; // options are x2, x3, x4 or nothing

    var numComp = 1;

    if (format[format.length - 2] === 'x') {
      numComp = format[format.length - 1];
    }

    var sizeStart = numComp === 1 ? format.length - 1 : format.length - 3; // options are 8, 16, 32 resulting in 8, 6, 2 as the last char
    // plugged into the formula below gives 1, 2, 4 respectively

    var num = Number(format[sizeStart]);

    if (Number.isNaN(num)) {
      vtkErrorMacro$m("unknown format ".concat(format));
      return 0;
    }

    var typeSize = 5 - num / 2;
    return numComp * typeSize;
  } // see https://gpuweb.github.io/gpuweb/#enumdef-gpuvertexformat
  // for possible formats


  function getNumberOfComponentsFromBufferFormat(format) {
    if (!format || format.length < 5) return 0; // options are x2, x3, x4 or nothing

    var numComp = 1;

    if (format[format.length - 2] === 'x') {
      numComp = format[format.length - 1];
    }

    return numComp;
  } // see https://gpuweb.github.io/gpuweb/#enumdef-gpuvertexformat
  // for possible formats


  function getNativeTypeFromBufferFormat(format) {
    if (!format || format.length < 5) return 0; // raw types are Uint Int or Float as follows

    var result;

    if (format[0] === 'f') {
      result = 'Float';
    } else if (format[0] === 's') {
      result = 'Int';
    } else if (format[0] === 'u') {
      result = 'Uint';
    } else {
      vtkErrorMacro$m("unknown format ".concat(format));
      return undefined;
    } // options are 8, 16, 32 resulting in 8, 6, 2 as the last char
    // plugged into the formula below gives 1, 2, 4 respectively


    var base = format.split('x')[0];
    var num = Number(base[base.length - 1]);

    if (Number.isNaN(num)) {
      vtkErrorMacro$m("unknown format ".concat(format));
      return undefined;
    }

    result += 8 * (5 - num / 2);
    result += 'Array';
    return result;
  }

  function getShaderTypeFromBufferFormat(format) {
    var dataType;

    if (format[0] === 'f' || format[1] === 'n') {
      dataType = 'f32';
    } else if (format[0] === 's' && format[1] === 'i') {
      dataType = 'i32';
    } else if (format[0] === 'u' && format[1] === 'i') {
      dataType = 'u32';
    } else {
      vtkErrorMacro$m("unknown format ".concat(format));
      return undefined;
    } // options are x2, x3, x4 or nothing


    var numComp = 1;

    if (format[format.length - 2] === 'x') {
      numComp = Number(format[format.length - 1]);
    }

    if (numComp === 4) return "vec4<".concat(dataType, ">");
    if (numComp === 3) return "vec3<".concat(dataType, ">");
    if (numComp === 2) return "vec2<".concat(dataType, ">");
    return dataType;
  }

  function getByteStrideFromShaderFormat(format) {
    if (!format) return 0;
    var numComp = 1;

    if (format.substring(0, 3) === 'vec') {
      numComp = format[3];
    } else if (format.substring(0, 3) === 'mat') {
      numComp = format[3] * format[5];
    }

    var typeSize = 4;
    return numComp * typeSize;
  }

  function getNativeTypeFromShaderFormat(format) {
    if (!format) return undefined;
    if (format.includes('f32')) return 'Float32Array';
    if (format.includes('i32')) return 'Int32Array';
    if (format.includes('u32')) return 'Uint32Array';
    vtkErrorMacro$m("unknown format ".concat(format));
    return undefined;
  }

  var vtkWebGPUTypes = {
    getDetailsFromTextureFormat: getDetailsFromTextureFormat,
    getByteStrideFromBufferFormat: getByteStrideFromBufferFormat,
    getNumberOfComponentsFromBufferFormat: getNumberOfComponentsFromBufferFormat,
    getNativeTypeFromBufferFormat: getNativeTypeFromBufferFormat,
    getShaderTypeFromBufferFormat: getShaderTypeFromBufferFormat,
    getByteStrideFromShaderFormat: getByteStrideFromShaderFormat,
    getNativeTypeFromShaderFormat: getNativeTypeFromShaderFormat
  };

  function arraysEqual(a, b) {
    if (a === b) return true;
    if (a == null || b == null) return false;
    if (a.length !== b.length) return false;

    for (var i = 0; i < a.length; ++i) {
      if (!b.includes(a[i])) return false;
    }

    return true;
  } // ----------------------------------------------------------------------------
  // vtkWebGPUVertexInput methods
  // ----------------------------------------------------------------------------


  function vtkWebGPUVertexInput(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkWebGPUVertexInput');

    publicAPI.addBuffer = function (buffer, inames) {
      var stepMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'vertex';
      var names = inames;

      if (!Array.isArray(names)) {
        names = [names];
      } // only add if it is a new setting


      for (var i = 0; i < model.inputs.length; i++) {
        if (arraysEqual(model.inputs[i].names, names)) {
          if (model.inputs[i].buffer === buffer) {
            return;
          }

          model.inputs[i].buffer = buffer;
          return;
        }
      } // when adding a new entry, make sure we sort the array
      // as the order is important to the shader and must always
      // be the same, so alphabetical is an easy option


      model.inputs.push({
        buffer: buffer,
        stepMode: stepMode,
        names: names
      });
      model.inputs = model.inputs.sort(function (v1, v2) {
        if (v1.names[0] < v2.names[0]) {
          return -1;
        }

        if (v1.names[0] > v2.names[0]) {
          return 1;
        }

        return 0;
      });
    };

    publicAPI.removeBufferIfPresent = function (name) {
      for (var i = 0; i < model.inputs.length; i++) {
        if (model.inputs[i].names.includes(name)) {
          model.inputs.splice(i, 1);
        }
      }
    };

    publicAPI.getBuffer = function (name) {
      for (var i = 0; i < model.inputs.length; i++) {
        if (model.inputs[i].names.includes(name)) {
          return model.inputs[i].buffer;
        }
      }

      return null;
    };

    publicAPI.hasAttribute = function (name) {
      for (var i = 0; i < model.inputs.length; i++) {
        if (model.inputs[i].names.includes(name)) {
          return true;
        }
      }

      return false;
    };

    publicAPI.getAttributeTime = function (name) {
      for (var i = 0; i < model.inputs.length; i++) {
        if (model.inputs[i].names.includes(name)) {
          return model.inputs[i].buffer.getSourceTime();
        }
      }

      return 0;
    };

    publicAPI.getShaderCode = function () {
      var result = '';
      var nameCount = 0;

      for (var i = 0; i < model.inputs.length; i++) {
        for (var nm = 0; nm < model.inputs[i].names.length; nm++) {
          var arrayInfo = model.inputs[i].buffer.getArrayInformation()[nm];
          var type = vtkWebGPUTypes.getShaderTypeFromBufferFormat(arrayInfo.format);

          if (nameCount > 0) {
            result += ',\n';
          }

          result = "".concat(result, "  [[location(").concat(nameCount, ")]] ").concat(model.inputs[i].names[nm], " : ").concat(type);
          nameCount++;
        }
      }

      return result;
    };

    publicAPI.getVertexInputInformation = function () {
      var info = {};

      if (model.inputs.length) {
        var vertexBuffers = [];
        var nameCount = 0;

        for (var i = 0; i < model.inputs.length; i++) {
          var buf = model.inputs[i].buffer;
          var buffer = {
            arrayStride: buf.getStrideInBytes(),
            stepMode: model.inputs[i].stepMode,
            attributes: []
          };
          var arrayInfo = buf.getArrayInformation();

          for (var nm = 0; nm < model.inputs[i].names.length; nm++) {
            buffer.attributes.push({
              shaderLocation: nameCount,
              offset: arrayInfo[nm].offset,
              format: arrayInfo[nm].format
            });
            nameCount++;
          }

          vertexBuffers.push(buffer);
        }

        info.buffers = vertexBuffers;
      }

      return info;
    };

    publicAPI.bindBuffers = function (renderEncoder) {
      for (var i = 0; i < model.inputs.length; i++) {
        renderEncoder.setVertexBuffer(i, model.inputs[i].buffer.getHandle());
      }
    };

    publicAPI.getReady = function () {};

    publicAPI.releaseGraphicsResources = function () {
      if (model.created) {
        model.inputs = [];
        model.bindingDescriptions = [];
        model.attributeDescriptions = [];
      }
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$K = {
    inputs: null,
    bindingDescriptions: false,
    attributeDescriptions: null
  }; // ----------------------------------------------------------------------------

  function extend$M(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$K, initialValues); // Build VTK API

    obj(publicAPI, model);
    model.bindingDescriptions = [];
    model.attributeDescriptions = [];
    model.inputs = [];
    setGet(publicAPI, model, ['created', 'device', 'handle']); // For more macro methods, see "Sources/macros.js"
    // Object specific methods

    vtkWebGPUVertexInput(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$J = newInstance$1j(extend$M, 'vtkWebGPUVertexInput'); // ----------------------------------------------------------------------------

  var vtkWebGPUVertexInput$1 = {
    newInstance: newInstance$J,
    extend: extend$M
  };

  var vtkWebGPUMapperHelperVS = "\n//VTK::Renderer::Dec\n\n//VTK::Color::Dec\n\n//VTK::Normal::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::Select::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::IOStructs::Dec\n\n[[stage(vertex)]]\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output : vertexOutput;\n\n  // var vertex: vec4<f32> = vertexBC;\n\n  //VTK::Color::Impl\n\n  //VTK::Normal::Impl\n\n  //VTK::TCoord::Impl\n\n  //VTK::Select::Impl\n\n  //VTK::Position::Impl\n\n  return output;\n}\n";
  var vtkWebGPUMapperHelperFS = "\n//VTK::Renderer::Dec\n\n//VTK::Color::Dec\n\n//VTK::Normal::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::Select::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::IOStructs::Dec\n\n[[stage(fragment)]]\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output : fragmentOutput;\n\n  //VTK::Color::Impl\n\n  //VTK::Normal::Impl\n\n  //VTK::Light::Impl\n\n  //VTK::TCoord::Impl\n\n  //VTK::Select::Impl\n\n  // var computedColor:vec4<f32> = vec4<f32>(1.0,0.5,0.5,1.0);\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n"; // ----------------------------------------------------------------------------
  // vtkWebGPUMapperHelper methods
  // ----------------------------------------------------------------------------

  function vtkWebGPUMapperHelper(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkWebGPUMapperHelper');

    publicAPI.generateShaderDescriptions = function (hash, pipeline, vertexInput) {
      // create the shader descriptions
      var vDesc = vtkWebGPUShaderDescription$1.newInstance({
        type: 'vertex',
        hash: hash,
        code: model.vertexShaderTemplate
      });
      var fDesc = vtkWebGPUShaderDescription$1.newInstance({
        type: 'fragment',
        hash: hash,
        code: model.fragmentShaderTemplate
      }); // add them to the pipeline

      var sdrs = pipeline.getShaderDescriptions();
      sdrs.push(vDesc);
      sdrs.push(fDesc); // look for replacements to invoke

      var scode = model.vertexShaderTemplate + model.fragmentShaderTemplate;
      var re = new RegExp('//VTK::[^:]*::', 'g');
      var unique = scode.match(re).filter(function (v, i, a) {
        return a.indexOf(v) === i;
      });
      var fnames = unique.map(function (v) {
        return "replaceShader".concat(v.substring(7, v.length - 2));
      }); // now invoke shader replacement functions

      for (var i = 0; i < fnames.length; i++) {
        var fname = fnames[i];

        if (fname !== 'replaceShaderIOStructs' && model.shaderReplacements.has(fname)) {
          model.shaderReplacements.get(fname)(hash, pipeline, vertexInput);
        }
      } // always replace the IOStructs last as other replacement funcs may
      // add inputs or outputs


      publicAPI.replaceShaderIOStructs(hash, pipeline, vertexInput); // console.log(vDesc.getCode());
      // console.log(fDesc.getCode());
    };

    publicAPI.replaceShaderIOStructs = function (hash, pipeline, vertexInput) {
      var vDesc = pipeline.getShaderDescription('vertex');
      vDesc.replaceShaderCode(null, vertexInput);
      var fDesc = pipeline.getShaderDescription('fragment');
      fDesc.replaceShaderCode(vDesc);
    };

    publicAPI.replaceShaderRenderEncoder = function (hash, pipeline, vertexInput) {
      model.renderEncoder.replaceShaderCode(pipeline);
    };

    model.shaderReplacements.set('replaceShaderRenderEncoder', publicAPI.replaceShaderRenderEncoder);

    publicAPI.replaceShaderRenderer = function (hash, pipeline, vertexInput) {
      if (!model.WebGPURenderer) {
        return;
      }

      var ubocode = model.WebGPURenderer.getBindGroup().getShaderCode(pipeline);
      var vDesc = pipeline.getShaderDescription('vertex');
      var code = vDesc.getCode();
      code = vtkWebGPUShaderCache$1.substitute(code, '//VTK::Renderer::Dec', [ubocode]).result;
      vDesc.setCode(code);
      var fDesc = pipeline.getShaderDescription('fragment');
      code = fDesc.getCode();
      code = vtkWebGPUShaderCache$1.substitute(code, '//VTK::Renderer::Dec', [ubocode]).result;
      fDesc.setCode(code);
    };

    model.shaderReplacements.set('replaceShaderRenderer', publicAPI.replaceShaderRenderer);

    publicAPI.replaceShaderMapper = function (hash, pipeline, vertexInput) {
      var ubocode = model.bindGroup.getShaderCode(pipeline);
      var vDesc = pipeline.getShaderDescription('vertex');
      var code = vDesc.getCode();
      code = vtkWebGPUShaderCache$1.substitute(code, '//VTK::Mapper::Dec', [ubocode]).result;
      vDesc.setCode(code);
      var fDesc = pipeline.getShaderDescription('fragment');
      fDesc.addBuiltinInput('bool', '[[builtin(front_facing)]] frontFacing');
      code = fDesc.getCode();
      code = vtkWebGPUShaderCache$1.substitute(code, '//VTK::Mapper::Dec', [ubocode]).result;
      fDesc.setCode(code);
    };

    model.shaderReplacements.set('replaceShaderMapper', publicAPI.replaceShaderMapper);

    publicAPI.replaceShaderPosition = function (hash, pipeline, vertexInput) {
      var vDesc = pipeline.getShaderDescription('vertex');
      vDesc.addBuiltinOutput('vec4<f32>', '[[builtin(position)]] Position');
      var code = vDesc.getCode();
      code = vtkWebGPUShaderCache$1.substitute(code, '//VTK::Position::Impl', ['    output.Position = rendererUBO.SCPCMatrix*vertexBC;']).result;
      vDesc.setCode(code);
    };

    model.shaderReplacements.set('replaceShaderPosition', publicAPI.replaceShaderPosition);

    publicAPI.replaceShaderTCoord = function (hash, pipeline, vertexInput) {
      var vDesc = pipeline.getShaderDescription('vertex');
      vDesc.addOutput('vec2<f32>', 'tcoordVS');
    };

    model.shaderReplacements.set('replaceShaderTCoord', publicAPI.replaceShaderTCoord);

    publicAPI.addTextureView = function (view) {
      // is it already there?
      if (model.textureViews.includes(view)) {
        return;
      }

      model.textureViews.push(view);
    };

    publicAPI.renderForPipeline = function (renderEncoder) {
      var pipeline = renderEncoder.getBoundPipeline(); // bind the mapper bind group

      renderEncoder.activateBindGroup(model.bindGroup); // bind the vertex input

      pipeline.bindVertexInput(renderEncoder, model.vertexInput);
      renderEncoder.draw(model.numberOfVertices, model.numberOfInstances, 0, 0);
    };

    publicAPI.registerToDraw = function () {
      if (model.pipeline) {
        model.WebGPURenderer.registerPipelineCallback(model.pipeline, publicAPI.renderForPipeline);
      }
    };

    publicAPI.render = function (renderEncoder, device) {
      publicAPI.build(renderEncoder, device);
      renderEncoder.setPipeline(model.pipeline);

      if (model.WebGPURenderer) {
        model.WebGPURenderer.bindUBO(renderEncoder);
      }

      publicAPI.renderForPipeline(renderEncoder);
    };

    publicAPI.getBindables = function () {
      var bindables = _toConsumableArray(model.additionalBindables);

      if (model.UBO) {
        bindables.push(model.UBO);
      }

      if (model.SSBO) {
        bindables.push(model.SSBO);
      } // add texture BindGroupLayouts


      for (var t = 0; t < model.textureViews.length; t++) {
        bindables.push(model.textureViews[t]);
        var samp = model.textureViews[t].getSampler();

        if (samp) {
          bindables.push(samp);
        }
      }

      return bindables;
    };

    publicAPI.build = function (renderEncoder, device) {
      // handle per primitive type
      model.renderEncoder = renderEncoder;
      model.pipeline = device.getPipeline(model.pipelineHash);
      model.bindGroup.setBindables(publicAPI.getBindables()); // build VBO for this primitive
      // build the pipeline if needed

      if (!model.pipeline) {
        model.pipeline = vtkWebGPUPipeline$1.newInstance();
        model.pipeline.setDevice(device);

        if (model.WebGPURenderer) {
          model.pipeline.addBindGroupLayout(model.WebGPURenderer.getBindGroup());
        }

        model.pipeline.addBindGroupLayout(model.bindGroup);
        publicAPI.generateShaderDescriptions(model.pipelineHash, model.pipeline, model.vertexInput);
        model.pipeline.setTopology(model.topology);
        model.pipeline.setRenderEncoder(renderEncoder);
        model.pipeline.setVertexState(model.vertexInput.getVertexInputInformation());
        device.createPipeline(model.pipelineHash, model.pipeline);
      }
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$J = {
    additionalBindables: undefined,
    bindGroup: null,
    device: null,
    fragmentShaderTemplate: null,
    numberOfInstances: 1,
    numberOfVertices: 0,
    pipelineHash: null,
    shaderReplacements: null,
    SSBO: null,
    textureViews: null,
    topology: 'triangle-list',
    UBO: null,
    vertexShaderTemplate: null,
    WebGPURenderer: null
  }; // ----------------------------------------------------------------------------

  function extend$L(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$J, initialValues); // Inheritance

    macro.obj(publicAPI, model);
    model.textureViews = [];
    model.vertexInput = vtkWebGPUVertexInput$1.newInstance();
    model.bindGroup = vtkWebGPUBindGroup$1.newInstance();
    model.bindGroup.setName('mapperBG');
    model.additionalBindables = [];
    model.fragmentShaderTemplate = model.fragmentShaderTemplate || vtkWebGPUMapperHelperFS;
    model.vertexShaderTemplate = model.vertexShaderTemplate || vtkWebGPUMapperHelperVS;
    model.shaderReplacements = new Map(); // Build VTK API

    macro.get(publicAPI, model, ['vertexInput']);
    macro.setGet(publicAPI, model, ['additionalBindables', 'device', 'fragmentShaderTemplate', 'interpolate', 'numberOfInstances', 'numberOfVertices', 'pipelineHash', 'shaderReplacements', 'SSBO', 'textureViews', 'topology', 'UBO', 'vertexShaderTemplate', 'WebGPURenderer']); // Object methods

    vtkWebGPUMapperHelper(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$I = macro.newInstance(extend$L, 'vtkWebGPUMapperHelper'); // ----------------------------------------------------------------------------

  var vtkWebGPUMapperHelper$1 = {
    newInstance: newInstance$I,
    extend: extend$L
  };

  // vtkWebGPUFullScreenQuad methods
  // ----------------------------------------------------------------------------

  function vtkWebGPUFullScreenQuad(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkWebGPUFullScreenQuad');

    publicAPI.replaceShaderPosition = function (hash, pipeline, vertexInput) {
      var vDesc = pipeline.getShaderDescription('vertex');
      vDesc.addBuiltinOutput('vec4<f32>', '[[builtin(position)]] Position');
      var code = vDesc.getCode();
      code = vtkWebGPUShaderCache$1.substitute(code, '//VTK::Position::Impl', ['output.tcoordVS = vec2<f32>(vertexBC.x * 0.5 + 0.5, 1.0 - vertexBC.y * 0.5 - 0.5);', 'output.Position = vec4<f32>(vertexBC, 1.0);']).result;
      vDesc.setCode(code);
    };

    model.shaderReplacements.set('replaceShaderPosition', publicAPI.replaceShaderPosition);
    var superclassBuild = publicAPI.build;

    publicAPI.build = function (renderEncoder, device) {
      var buff = device.getBufferManager().getFullScreenQuadBuffer();
      model.vertexInput.addBuffer(buff, ['vertexBC']);
      model.numberOfVertices = 6;
      superclassBuild(renderEncoder, device);
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$I = {}; // ----------------------------------------------------------------------------

  function extend$K(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$I, initialValues); // Inheritance

    vtkWebGPUMapperHelper$1.extend(publicAPI, model, initialValues); // Object methods

    vtkWebGPUFullScreenQuad(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$H = macro.newInstance(extend$K, 'vtkWebGPUFullScreenQuad'); // ----------------------------------------------------------------------------

  var vtkWebGPUFullScreenQuad$1 = {
    newInstance: newInstance$H,
    extend: extend$K
  };

  var BufferUsage$4 = {
    Verts: 0,
    Lines: 1,
    Triangles: 2,
    Strips: 3,
    LinesFromStrips: 4,
    LinesFromTriangles: 5,
    Points: 6,
    UniformArray: 7,
    PointArray: 8,
    NormalsFromPoints: 9,
    Texture: 10,
    RawVertex: 11,
    Storage: 12
  };
  var PrimitiveTypes$2 = {
    Start: 0,
    Points: 0,
    Lines: 1,
    Triangles: 2,
    TriangleStrips: 3,
    TriangleEdges: 4,
    TriangleStripEdges: 5,
    End: 6
  };
  var Constants$4 = {
    BufferUsage: BufferUsage$4,
    PrimitiveTypes: PrimitiveTypes$2
  };

  function ownKeys$b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$b(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$b(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  var forwarded = ['getMappedRange', 'mapAsync', 'unmap'];

  function bufferSubData(device, destBuffer, destOffset, srcArrayBuffer) {
    var byteCount = srcArrayBuffer.byteLength;
    var srcBuffer = device.createBuffer({
      size: byteCount,

      /* eslint-disable no-undef */
      usage: GPUBufferUsage.COPY_SRC,

      /* eslint-enable no-undef */
      mappedAtCreation: true
    });
    var arrayBuffer = srcBuffer.getMappedRange(0, byteCount);
    new Uint8Array(arrayBuffer).set(new Uint8Array(srcArrayBuffer)); // memcpy

    srcBuffer.unmap();
    var encoder = device.createCommandEncoder();
    encoder.copyBufferToBuffer(srcBuffer, 0, destBuffer, destOffset, byteCount);
    var commandBuffer = encoder.finish();
    var queue = device.queue;
    queue.submit([commandBuffer]);
    srcBuffer.destroy();
  } // ----------------------------------------------------------------------------
  // vtkWebGPUBufferManager methods
  // ----------------------------------------------------------------------------


  function vtkWebGPUBuffer(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkWebGPUBuffer');

    publicAPI.create = function (sizeInBytes, usage) {
      model.handle = model.device.getHandle().createBuffer({
        size: sizeInBytes,
        usage: usage
      });
      model.sizeInBytes = sizeInBytes;
      model.usage = usage;
    };

    publicAPI.write = function (data) {
      bufferSubData(model.device.getHandle(), model.handle, 0, data.buffer);
    };

    publicAPI.createAndWrite = function (data, usage) {
      model.handle = model.device.getHandle().createBuffer({
        size: data.byteLength,
        usage: usage,
        mappedAtCreation: true
      });
      model.sizeInBytes = data.byteLength;
      model.usage = usage;
      new Uint8Array(model.handle.getMappedRange()).set(new Uint8Array(data.buffer)); // memcpy

      model.handle.unmap();
    }; // simple forwarders


    var _loop = function _loop(i) {
      publicAPI[forwarded[i]] = function () {
        var _model$handle;

        return (_model$handle = model.handle)[forwarded[i]].apply(_model$handle, arguments);
      };
    };

    for (var i = 0; i < forwarded.length; i++) {
      _loop(i);
    }
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$H = {
    device: null,
    handle: null,
    sizeInBytes: 0,
    strideInBytes: 0,
    arrayInformation: null,
    usage: null,
    sourceTime: null
  }; // ----------------------------------------------------------------------------

  function extend$J(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$H, initialValues); // Object methods

    macro.obj(publicAPI, model);
    macro.get(publicAPI, model, ['handle', 'sizeInBytes', 'usage']);
    macro.setGet(publicAPI, model, ['strideInBytes', 'device', 'arrayInformation', 'sourceTime']);
    vtkWebGPUBuffer(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$G = macro.newInstance(extend$J); // ----------------------------------------------------------------------------

  var vtkWebGPUBuffer$1 = _objectSpread$b({
    newInstance: newInstance$G,
    extend: extend$J
  }, Constants$4);

  function ownKeys$a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$a(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$a(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  var BufferUsage$3 = Constants$4.BufferUsage,
      PrimitiveTypes$1 = Constants$4.PrimitiveTypes;
  var Representation$1 = vtkProperty$1.Representation;
  var vtkDebugMacro$6 = vtkDebugMacro$a; // the webgpu constants all show up as undefined

  /* eslint-disable no-undef */
  // ----------------------------------------------------------------------------
  // Static API
  // ----------------------------------------------------------------------------

  var STATIC$5 = {};

  function requestMatches(req1, req2) {
    if (req1.time !== req2.time) return false;
    if (req1.format !== req2.format) return false;
    if (req1.usage !== req2.usage) return false;
    if (req1.hash !== req2.hash) return false;
    return true;
  }

  var cellCounters = {
    // easy, every input point becomes an output point
    anythingToPoints: function anythingToPoints(numPoints, cellPts) {
      return numPoints;
    },
    linesToWireframe: function linesToWireframe(numPoints, cellPts) {
      if (numPoints > 1) {
        return (numPoints - 1) * 2;
      }

      return 0;
    },
    polysToWireframe: function polysToWireframe(numPoints, cellPts) {
      if (numPoints > 2) {
        return numPoints * 2;
      }

      return 0;
    },
    stripsToWireframe: function stripsToWireframe(numPoints, cellPts) {
      if (numPoints > 2) {
        return numPoints * 4 - 6;
      }

      return 0;
    },
    polysToSurface: function polysToSurface(npts, cellPts) {
      if (npts > 2) {
        return (npts - 2) * 3;
      }

      return 0;
    },
    stripsToSurface: function stripsToSurface(npts, cellPts, offset) {
      if (numPoints > 2) {
        return (npts - 2) * 3;
      }

      return 0;
    }
  };

  function getPrimitiveName(primType) {
    switch (primType) {
      case PrimitiveTypes$1.Points:
        return 'points';

      case PrimitiveTypes$1.Lines:
        return 'lines';

      case PrimitiveTypes$1.Triangles:
      case PrimitiveTypes$1.TriangleEdges:
        return 'polys';

      case PrimitiveTypes$1.TriangleStripEdges:
      case PrimitiveTypes$1.TriangleStrips:
        return 'strips';

      default:
        return '';
    }
  }

  function getOutputSize(cellArray, representation, inRepName) {
    var countFunc = null;

    if (representation === Representation$1.POINTS || inRepName === 'points') {
      countFunc = cellCounters.anythingToPoints;
    } else if (representation === Representation$1.WIREFRAME || inRepName === 'lines') {
      countFunc = cellCounters["".concat(inRepName, "ToWireframe")];
    } else {
      countFunc = cellCounters["".concat(inRepName, "ToSurface")];
    }

    var array = cellArray.getData();
    var size = array.length;
    var caboCount = 0;

    for (var index = 0; index < size;) {
      caboCount += countFunc(array[index], array);
      index += array[index] + 1;
    }

    return caboCount;
  }

  function packArray(cellArray, primType, representation, inArray, outputType, options) {
    var result = {
      elementCount: 0,
      blockSize: 0,
      stride: 0
    };

    if (!cellArray.getData() || !cellArray.getData().length) {
      return result;
    } // setup shift and scale


    var shift = [0.0, 0.0, 0.0, 0.0];

    if (options.shift) {
      if (options.shift.length) {
        shift = options.shift;
      } else {
        shift.fill(options.shift);
      }
    }

    var scale = [1.0, 1.0, 1.0, 1.0];

    if (options.scale) {
      if (options.scale.length) {
        scale = options.scale;
      } else {
        scale.fill(options.scale);
      }
    }

    var packExtra = Object.prototype.hasOwnProperty.call(options, 'packExtra') ? options.packExtra : false;
    var pointData = inArray.getData();
    var addAPoint;
    var cellBuilders = {
      // easy, every input point becomes an output point
      anythingToPoints: function anythingToPoints(numPoints, cellPts, offset, cellId) {
        for (var i = 0; i < numPoints; ++i) {
          addAPoint(cellPts[offset + i], cellId);
        }
      },
      linesToWireframe: function linesToWireframe(numPoints, cellPts, offset, cellId) {
        // for lines we add a bunch of segments
        for (var i = 0; i < numPoints - 1; ++i) {
          addAPoint(cellPts[offset + i], cellId);
          addAPoint(cellPts[offset + i + 1], cellId);
        }
      },
      polysToWireframe: function polysToWireframe(numPoints, cellPts, offset, cellId) {
        // for polys we add a bunch of segments and close it
        if (numPoints > 2) {
          for (var i = 0; i < numPoints; ++i) {
            addAPoint(cellPts[offset + i], cellId);
            addAPoint(cellPts[offset + (i + 1) % numPoints], cellId);
          }
        }
      },
      stripsToWireframe: function stripsToWireframe(numPoints, cellPts, offset, cellId) {
        if (numPoints > 2) {
          // for strips we add a bunch of segments and close it
          for (var i = 0; i < numPoints - 1; ++i) {
            addAPoint(cellPts[offset + i], cellId);
            addAPoint(cellPts[offset + i + 1], cellId);
          }

          for (var _i = 0; _i < numPoints - 2; _i++) {
            addAPoint(cellPts[offset + _i], cellId);
            addAPoint(cellPts[offset + _i + 2], cellId);
          }
        }
      },
      polysToSurface: function polysToSurface(npts, cellPts, offset, cellId) {
        for (var i = 0; i < npts - 2; i++) {
          addAPoint(cellPts[offset + 0], cellId);
          addAPoint(cellPts[offset + i + 1], cellId);
          addAPoint(cellPts[offset + i + 2], cellId);
        }
      },
      stripsToSurface: function stripsToSurface(npts, cellPts, offset, cellId) {
        for (var i = 0; i < npts - 2; i++) {
          addAPoint(cellPts[offset + i], cellId);
          addAPoint(cellPts[offset + i + 1 + i % 2], cellId);
          addAPoint(cellPts[offset + i + 1 + (i + 1) % 2], cellId);
        }
      }
    };
    var inRepName = getPrimitiveName(primType);
    var func = null;

    if (representation === Representation$1.POINTS || primType === PrimitiveTypes$1.Points) {
      func = cellBuilders.anythingToPoints;
    } else if (representation === Representation$1.WIREFRAME || primType === PrimitiveTypes$1.Lines) {
      func = cellBuilders["".concat(inRepName, "ToWireframe")];
    } else {
      func = cellBuilders["".concat(inRepName, "ToSurface")];
    }

    var array = cellArray.getData();
    var size = array.length;
    var caboCount = getOutputSize(cellArray, representation, inRepName);
    var vboidx = 0;
    var numComp = inArray.getNumberOfComponents();
    var packedVBO = newTypedArray(outputType, caboCount * (numComp + (packExtra ? 1 : 0))); // pick the right function based on point versus cell data

    var getData = function getData(ptId, cellId) {
      return pointData[ptId];
    };

    if (options.cellData) {
      getData = function getData(ptId, cellId) {
        return pointData[cellId];
      };
    } // add data based on number of components


    if (numComp === 1) {
      addAPoint = function addAPointFunc(i, cellid) {
        packedVBO[vboidx++] = scale[0] * getData(i, cellid) + shift[0];
      };
    } else if (numComp === 2) {
      addAPoint = function addAPointFunc(i, cellid) {
        packedVBO[vboidx++] = scale[0] * getData(i * 2, cellid * 2) + shift[0];
        packedVBO[vboidx++] = scale[1] * getData(i * 2 + 1, cellid * 2 + 1) + shift[1];
      };
    } else if (numComp === 3 && !packExtra) {
      addAPoint = function addAPointFunc(i, cellid) {
        packedVBO[vboidx++] = scale[0] * getData(i * 3, cellid * 3) + shift[0];
        packedVBO[vboidx++] = scale[1] * getData(i * 3 + 1, cellid * 3 + 1) + shift[1];
        packedVBO[vboidx++] = scale[2] * getData(i * 3 + 2, cellid * 3 + 2) + shift[2];
      };
    } else if (numComp === 3 && packExtra) {
      addAPoint = function addAPointFunc(i, cellid) {
        packedVBO[vboidx++] = scale[0] * getData(i * 3, cellid * 3) + shift[0];
        packedVBO[vboidx++] = scale[1] * getData(i * 3 + 1, cellid * 3 + 1) + shift[1];
        packedVBO[vboidx++] = scale[2] * getData(i * 3 + 2, cellid * 3 + 2) + shift[2];
        packedVBO[vboidx++] = scale[3] * 1.0 + shift[3];
      };
    } else if (numComp === 4) {
      addAPoint = function addAPointFunc(i, cellid) {
        packedVBO[vboidx++] = scale[0] * getData(i * 4, cellid * 4) + shift[0];
        packedVBO[vboidx++] = scale[1] * getData(i * 4 + 1, cellid * 4 + 1) + shift[1];
        packedVBO[vboidx++] = scale[2] * getData(i * 4 + 2, cellid * 4 + 2) + shift[2];
        packedVBO[vboidx++] = scale[3] * getData(i * 4 + 3, cellid * 4 + 3) + shift[3];
      };
    }

    var cellId = options.cellOffset;

    for (var index = 0; index < size;) {
      func(array[index], array, index + 1, cellId);
      index += array[index] + 1;
      cellId++;
    }

    result.nativeArray = packedVBO;
    result.elementCount = caboCount;
    return result;
  }

  function getNormal(pointData, i0, i1, i2) {
    var v1 = [pointData[i2 * 3] - pointData[i1 * 3], pointData[i2 * 3 + 1] - pointData[i1 * 3 + 1], pointData[i2 * 3 + 2] - pointData[i1 * 3 + 2]];
    var v2 = [pointData[i0 * 3] - pointData[i1 * 3], pointData[i0 * 3 + 1] - pointData[i1 * 3 + 1], pointData[i0 * 3 + 2] - pointData[i1 * 3 + 2]];
    var result = [];
    cross(v1, v2, result);
    normalize(result);
    return result;
  }

  function generateNormals(cellArray, primType, representation, inArray) {
    if (!cellArray.getData() || !cellArray.getData().length) {
      return null;
    }

    var pointData = inArray.getData();
    var addAPoint;
    var cellBuilders = {
      polysToPoints: function polysToPoints(numPoints, cellPts, offset) {
        var normal = getNormal(pointData, cellPts[offset], cellPts[offset + 1], cellPts[offset + 2]);

        for (var i = 0; i < numPoints; ++i) {
          addAPoint(normal);
        }
      },
      polysToWireframe: function polysToWireframe(numPoints, cellPts, offset) {
        // for polys we add a bunch of segments and close it
        // compute the normal
        var normal = getNormal(pointData, cellPts[offset], cellPts[offset + 1], cellPts[offset + 2]);

        for (var i = 0; i < numPoints; ++i) {
          addAPoint(normal);
          addAPoint(normal);
        }
      },
      polysToSurface: function polysToSurface(npts, cellPts, offset) {
        if (npts < 3) {
          // ignore degenerate triangles
          vtkDebugMacro$6('skipping degenerate triangle');
        } else {
          // compute the normal
          var normal = getNormal(pointData, cellPts[offset], cellPts[offset + 1], cellPts[offset + 2]);

          for (var i = 0; i < npts - 2; i++) {
            addAPoint(normal);
            addAPoint(normal);
            addAPoint(normal);
          }
        }
      }
    };
    var primName = getPrimitiveName(primType);
    var func = null;

    if (representation === Representation$1.POINTS) {
      func = cellBuilders["".concat(primName, "ToPoints")];
    } else if (representation === Representation$1.WIREFRAME) {
      func = cellBuilders["".concat(primName, "ToWireframe")];
    } else {
      func = cellBuilders["".concat(primName, "ToSurface")];
    }

    var caboCount = getOutputSize(cellArray, representation, primName);
    var vboidx = 0;
    var packedVBO = new Int8Array(caboCount * 4);

    addAPoint = function addAPointFunc(normal) {
      packedVBO[vboidx++] = 127 * normal[0];
      packedVBO[vboidx++] = 127 * normal[1];
      packedVBO[vboidx++] = 127 * normal[2];
      packedVBO[vboidx++] = 127;
    };

    var array = cellArray.getData();
    var size = array.length;

    for (var index = 0; index < size;) {
      func(array[index], array, index + 1);
      index += array[index] + 1;
    }

    return packedVBO;
  } // ----------------------------------------------------------------------------
  // vtkWebGPUBufferManager methods
  // ----------------------------------------------------------------------------


  function vtkWebGPUBufferManager(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkWebGPUBufferManager'); // is the buffer already present?

    publicAPI.hasBuffer = function (req) {
      if (req.source) {
        // if a matching buffer already exists then return true
        if (model.buffers.has(req.source)) {
          var dabuffers = model.buffers.get(req.source);

          for (var i = 0; i < dabuffers.length; i++) {
            if (requestMatches(dabuffers[i].request, req)) {
              return true;
            }
          }
        }
      }

      return false;
    }; // we cache based on the passed in source, when the source is
    // garbage collected then the cache entry is removed. If a source
    // is not provided then the buffer is NOT cached and you are on your own
    // if you want to share it etc


    publicAPI.getBuffer = function (req) {
      if (req.source) {
        // if a matching buffer already exists then return it
        if (model.buffers.has(req.source)) {
          var dabuffers = model.buffers.get(req.source);

          for (var i = 0; i < dabuffers.length; i++) {
            if (requestMatches(dabuffers[i].request, req)) {
              return dabuffers[i].buffer;
            }
          }
        }
      } // if a dataArray is provided set the nativeArray


      if (req.dataArray && !req.nativeArray) {
        req.nativeArray = req.dataArray.getData();
      } // create one


      var buffer = vtkWebGPUBuffer$1.newInstance();
      buffer.setDevice(model.device);
      var gpuUsage = null; // handle uniform buffers

      if (req.usage === BufferUsage$3.UniformArray) {
        /* eslint-disable no-bitwise */
        gpuUsage = GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST;
        /* eslint-enable no-bitwise */

        buffer.createAndWrite(req.nativeArray, gpuUsage);
      } // handle storage buffers


      if (req.usage === BufferUsage$3.Storage) {
        /* eslint-disable no-bitwise */
        gpuUsage = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST;
        /* eslint-enable no-bitwise */

        buffer.createAndWrite(req.nativeArray, gpuUsage);
      } // handle textures


      if (req.usage === BufferUsage$3.Texture) {
        /* eslint-disable no-bitwise */
        gpuUsage = GPUBufferUsage.COPY_SRC;
        /* eslint-enable no-bitwise */

        buffer.createAndWrite(req.nativeArray, gpuUsage);
      } // all of the below types that have gpuUsage = VERTEX require format
      // to be provided.
      // handle point data


      if (req.usage === BufferUsage$3.PointArray) {
        gpuUsage = GPUBufferUsage.VERTEX;
        var arrayType = vtkWebGPUTypes.getNativeTypeFromBufferFormat(req.format);
        var result = packArray(req.cells, req.primitiveType, req.representation, req.dataArray, arrayType, {
          packExtra: req.packExtra,
          shift: req.shift,
          scale: req.scale,
          cellData: req.cellData,
          cellOffset: req.cellOffset
        }); // console.log(result);

        buffer.createAndWrite(result.nativeArray, gpuUsage);
        buffer.setStrideInBytes(vtkWebGPUTypes.getByteStrideFromBufferFormat(req.format));
        buffer.setArrayInformation([{
          offset: 0,
          format: req.format
        }]);
      } // handle normals from points, snorm8x4


      if (req.usage === BufferUsage$3.NormalsFromPoints) {
        gpuUsage = GPUBufferUsage.VERTEX;
        var normals = generateNormals(req.cells, req.primitiveType, req.representation, req.dataArray);
        buffer.createAndWrite(normals, gpuUsage);
        buffer.setStrideInBytes(vtkWebGPUTypes.getByteStrideFromBufferFormat(req.format));
        buffer.setArrayInformation([{
          offset: 0,
          format: req.format
        }]);
      }

      if (req.usage === BufferUsage$3.RawVertex) {
        gpuUsage = GPUBufferUsage.VERTEX;
        buffer.createAndWrite(req.nativeArray, gpuUsage);
        buffer.setStrideInBytes(vtkWebGPUTypes.getByteStrideFromBufferFormat(req.format));
        buffer.setArrayInformation([{
          offset: 0,
          format: req.format
        }]);
      }

      buffer.setSourceTime(req.time); // cache the buffer if we have a dataArray.
      // We create a new req that only has the 4 fields required for
      // a comparison to avoid GC cycles

      if (req.source) {
        if (!model.buffers.has(req.source)) {
          model.buffers.set(req.source, []);
        }

        var _dabuffers = model.buffers.get(req.source);

        _dabuffers.push({
          request: {
            time: req.time,
            format: req.format,
            usage: req.usage,
            hash: req.hash
          },
          buffer: buffer
        });
      }

      return buffer;
    };

    publicAPI.getFullScreenQuadBuffer = function () {
      if (model.fullScreenQuadBuffer) {
        return model.fullScreenQuadBuffer;
      }

      model.fullScreenQuadBuffer = vtkWebGPUBuffer$1.newInstance();
      model.fullScreenQuadBuffer.setDevice(model.device); // prettier-ignore

      var array = new Float32Array([-1.0, -1.0, 0.0, 1.0, -1.0, 0.0, 1.0, 1.0, 0.0, -1.0, -1.0, 0.0, 1.0, 1.0, 0.0, -1.0, 1.0, 0.0]);
      model.fullScreenQuadBuffer.createAndWrite(array, GPUBufferUsage.VERTEX);
      model.fullScreenQuadBuffer.setStrideInBytes(12);
      model.fullScreenQuadBuffer.setArrayInformation([{
        offset: 0,
        format: 'float32x3'
      }]);
      return model.fullScreenQuadBuffer;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$G = {
    device: null,
    fullScreenQuadBuffer: null
  }; // ----------------------------------------------------------------------------

  function extend$I(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$G, initialValues); // Object methods

    obj(publicAPI, model); // this is a cache, and a cache with GC pretty much means WeakMap

    model.buffers = new WeakMap();
    setGet(publicAPI, model, ['device']);
    vtkWebGPUBufferManager(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$F = newInstance$1j(extend$I); // ----------------------------------------------------------------------------

  var vtkWebGPUBufferManager$1 = _objectSpread$a(_objectSpread$a({
    newInstance: newInstance$F,
    extend: extend$I
  }, STATIC$5), Constants$4);

  var BufferUsage$2 = vtkWebGPUBufferManager$1.BufferUsage;
  var vtkErrorMacro$8 = macro.vtkErrorMacro; // ----------------------------------------------------------------------------
  // vtkWebGPUUniformBuffer methods
  // ----------------------------------------------------------------------------

  function vtkWebGPUUniformBuffer(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkWebGPUUniformBuffer');

    publicAPI.addEntry = function (name, type) {
      if (model._bufferEntryNames.has(name)) {
        vtkErrorMacro$8("entry named ".concat(name, " already exists"));
        return;
      }

      model.sortDirty = true;

      model._bufferEntryNames.set(name, model.bufferEntries.length);

      model.bufferEntries.push({
        name: name,
        type: type,
        sizeInBytes: vtkWebGPUTypes.getByteStrideFromShaderFormat(type),
        offset: -1,
        nativeType: vtkWebGPUTypes.getNativeTypeFromShaderFormat(type),
        packed: false
      });
    }; // UBOs have layout rules in terms of how memory is aligned so we
    // have to be careful how we order the entries. For example a vec4<f32>
    // must be aligned on a 16 byte offset, etc. See
    // https://gpuweb.github.io/gpuweb/wgsl/#memory-layouts
    // for more details. Right now you can create a situation that would fail
    // in the future we could add dummy spacer entries where needed to
    // handle alignment issues


    publicAPI.sortBufferEntries = function () {
      if (!model.sortDirty) {
        return;
      }

      var currOffset = 0;
      var newEntries = []; // pack anything whose size is a multiple of 16 bytes first
      // this includes a couple types that don't require 16 byte alignment
      // such as mat2x2<f32> but that is OK

      for (var i = 0; i < model.bufferEntries.length; i++) {
        var entry = model.bufferEntries[i];

        if (entry.packed === false && entry.sizeInBytes % 16 === 0) {
          entry.packed = true;
          entry.offset = currOffset;
          newEntries.push(entry);
          currOffset += entry.sizeInBytes;
        }
      } // now it gets tough, we have the following common types (f32, i32, u32)
      // - vec2<f32> 8 byte size, 8 byte alignment
      // - vec3<f32> 12 byte size, 16 byte alignment
      // - f32 4 byte size, 4 byte alignment
      // try adding 12 byte, 4 byte pairs


      for (var _i = 0; _i < model.bufferEntries.length; _i++) {
        var _entry = model.bufferEntries[_i];

        if (_entry.packed === false && _entry.sizeInBytes === 12) {
          for (var i2 = 0; i2 < model.bufferEntries.length; i2++) {
            var entry2 = model.bufferEntries[i2];

            if (entry2.packed === false && entry2.sizeInBytes === 4) {
              _entry.packed = true;
              _entry.offset = currOffset;
              newEntries.push(_entry);
              currOffset += _entry.sizeInBytes;
              entry2.packed = true;
              entry2.offset = currOffset;
              newEntries.push(entry2);
              currOffset += entry2.sizeInBytes;
              break;
            }
          }
        }
      } // try adding 8 byte, 8 byte pairs


      for (var _i2 = 0; _i2 < model.bufferEntries.length; _i2++) {
        var _entry2 = model.bufferEntries[_i2];

        if (!_entry2.packed && _entry2.sizeInBytes % 8 === 0) {
          for (var _i3 = _i2 + 1; _i3 < model.bufferEntries.length; _i3++) {
            var _entry3 = model.bufferEntries[_i3];

            if (!_entry3.packed && _entry3.sizeInBytes % 8 === 0) {
              _entry2.packed = true;
              _entry2.offset = currOffset;
              newEntries.push(_entry2);
              currOffset += _entry2.sizeInBytes;
              _entry3.packed = true;
              _entry3.offset = currOffset;
              newEntries.push(_entry3);
              currOffset += _entry3.sizeInBytes;
              break;
            }
          }
        }
      } // try adding 8 byte, 4 byte 4 byte triplets


      for (var _i4 = 0; _i4 < model.bufferEntries.length; _i4++) {
        var _entry4 = model.bufferEntries[_i4];

        if (!_entry4.packed && _entry4.sizeInBytes % 8 === 0) {
          var found = false;

          for (var _i5 = 0; !found && _i5 < model.bufferEntries.length; _i5++) {
            var _entry5 = model.bufferEntries[_i5];

            if (!_entry5.packed && _entry5.sizeInBytes === 4) {
              for (var i3 = _i5 + 1; i3 < model.bufferEntries.length; i3++) {
                var entry3 = model.bufferEntries[i3];

                if (!entry3.packed && entry3.sizeInBytes === 4) {
                  _entry4.packed = true;
                  _entry4.offset = currOffset;
                  newEntries.push(_entry4);
                  currOffset += _entry4.sizeInBytes;
                  _entry5.packed = true;
                  _entry5.offset = currOffset;
                  newEntries.push(_entry5);
                  currOffset += _entry5.sizeInBytes;
                  entry3.packed = true;
                  entry3.offset = currOffset;
                  newEntries.push(entry3);
                  currOffset += entry3.sizeInBytes;
                  found = true;
                  break;
                }
              }
            }
          }
        }
      } // Add anything remaining that is larger than 4 bytes and hope we get lucky.
      // Likely if there is more than one item added here it will result
      // in a failed UBO


      for (var _i6 = 0; _i6 < model.bufferEntries.length; _i6++) {
        var _entry6 = model.bufferEntries[_i6];

        if (!_entry6.packed && _entry6.sizeInBytes > 4) {
          _entry6.packed = true;
          _entry6.offset = currOffset;
          newEntries.push(_entry6);
          currOffset += _entry6.sizeInBytes;
        }
      } // finally add remaining 4 byte items


      for (var _i7 = 0; _i7 < model.bufferEntries.length; _i7++) {
        var _entry7 = model.bufferEntries[_i7];

        if (!_entry7.packed) {
          _entry7.packed = true;
          _entry7.offset = currOffset;
          newEntries.push(_entry7);
          currOffset += _entry7.sizeInBytes;
        }
      } // update entries and entryNames


      model.bufferEntries = newEntries;

      model._bufferEntryNames.clear();

      for (var _i8 = 0; _i8 < model.bufferEntries.length; _i8++) {
        model._bufferEntryNames.set(model.bufferEntries[_i8].name, _i8);
      }

      model.sizeInBytes = currOffset;
      model.sortDirty = false;
    };

    publicAPI.sendIfNeeded = function (device) {
      if (!model.UBO) {
        var req = {
          nativeArray: model.Float32Array,
          time: 0,
          usage: BufferUsage$2.UniformArray
        };
        model.UBO = device.getBufferManager().getBuffer(req);
        model.bindGroupTime.modified();
        model.sendDirty = false;
      } // send data down if needed


      if (model.sendDirty) {
        device.getHandle().queue.writeBuffer(model.UBO.getHandle(), 0, model.arrayBuffer, 0, model.sizeInBytes);
        model.sendDirty = false;
      } // always updated as mappers depend on this time
      // it is more of a sentIfNeededTime


      model.sendTime.modified();
    };

    publicAPI.createView = function (type) {
      if (type in model === false) {
        if (!model.arrayBuffer) {
          model.arrayBuffer = new ArrayBuffer(model.sizeInBytes);
        }

        model[type] = macro.newTypedArray(type, model.arrayBuffer);
      }
    };

    publicAPI.setValue = function (name, val) {
      publicAPI.sortBufferEntries();

      var idx = model._bufferEntryNames.get(name);

      if (idx === undefined) {
        vtkErrorMacro$8("entry named ".concat(name, " not found in UBO"));
        return;
      }

      var entry = model.bufferEntries[idx];
      publicAPI.createView(entry.nativeType);
      var view = model[entry.nativeType];

      if (entry.lastValue !== val) {
        view[entry.offset / view.BYTES_PER_ELEMENT] = val;
        model.sendDirty = true;
      }

      entry.lastValue = val;
    };

    publicAPI.setArray = function (name, arr) {
      publicAPI.sortBufferEntries();

      var idx = model._bufferEntryNames.get(name);

      if (idx === undefined) {
        vtkErrorMacro$8("entry named ".concat(name, " not found in UBO"));
        return;
      }

      var entry = model.bufferEntries[idx];
      publicAPI.createView(entry.nativeType);
      var view = model[entry.nativeType];
      var changed = false;

      for (var i = 0; i < arr.length; i++) {
        if (!entry.lastValue || entry.lastValue[i] !== arr[i]) {
          view[entry.offset / view.BYTES_PER_ELEMENT + i] = arr[i];
          changed = true;
        }
      }

      if (changed) {
        model.sendDirty = true;
        entry.lastValue = _toConsumableArray(arr);
      }
    };

    publicAPI.getBindGroupEntry = function () {
      var foo = {
        resource: {
          buffer: model.UBO.getHandle()
        }
      };
      return foo;
    };

    publicAPI.getSendTime = function () {
      return model.sendTime.getMTime();
    };

    publicAPI.getShaderCode = function (binding, group) {
      // sort the entries
      publicAPI.sortBufferEntries();
      var lines = ["[[block]] struct ".concat(model.name, "Struct\n{")];

      for (var i = 0; i < model.bufferEntries.length; i++) {
        var entry = model.bufferEntries[i];
        lines.push("  ".concat(entry.name, ": ").concat(entry.type, ";"));
      }

      lines.push("};\n[[binding(".concat(binding, "), group(").concat(group, ")]] var<uniform> ").concat(model.name, ": ").concat(model.name, "Struct;"));
      return lines.join('\n');
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$F = {
    bufferEntries: null,
    bufferEntryNames: null,
    sizeInBytes: 0,
    name: null,
    bindGroupLayoutEntry: null,
    bindGroupEntry: null
  }; // ----------------------------------------------------------------------------

  function extend$H(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$F, initialValues); // Build VTK API

    macro.obj(publicAPI, model); // Internal objects

    model._bufferEntryNames = new Map();
    model.bufferEntries = []; // default UBO desc

    model.bindGroupLayoutEntry = model.bindGroupLayoutEntry || {
      buffer: {
        type: 'uniform'
      }
    };
    model.sendTime = {};
    macro.obj(model.sendTime, {
      mtime: 0
    });
    model.bindGroupTime = {};
    macro.obj(model.bindGroupTime, {
      mtime: 0
    });
    model.sendDirty = true;
    model.sortDirty = true;
    macro.get(publicAPI, model, ['binding', 'bindGroupTime']);
    macro.setGet(publicAPI, model, ['bindGroupLayoutEntry', 'device', 'name', 'sizeInBytes']); // Object methods

    vtkWebGPUUniformBuffer(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$E = macro.newInstance(extend$H, 'vtkWebGPUUniformBuffer'); // ----------------------------------------------------------------------------

  var vtkWebGPUUniformBuffer$1 = {
    newInstance: newInstance$E,
    extend: extend$H
  };

  var vtkDebugMacro$5 = vtkDebugMacro$a;
  var clearFragTemplate = "\n//VTK::Renderer::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::IOStructs::Dec\n\n[[stage(fragment)]]\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output: fragmentOutput;\n\n  var computedColor: vec4<f32> = mapperUBO.BackgroundColor;\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n"; // ----------------------------------------------------------------------------
  // vtkWebGPURenderer methods
  // ----------------------------------------------------------------------------

  /* eslint-disable no-bitwise */

  function vtkWebGPURenderer(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkWebGPURenderer'); // Builds myself.

    publicAPI.buildPass = function (prepass) {
      if (prepass) {
        if (!model.renderable) {
          return;
        }

        model.camera = model.renderable.getActiveCamera();
        publicAPI.updateLights();
        publicAPI.prepareNodes();
        publicAPI.addMissingNode(model.camera);
        publicAPI.addMissingNodes(model.renderable.getViewPropsWithNestedProps());
        publicAPI.removeUnusedNodes();
        model.webgpuCamera = publicAPI.getViewNodeFor(model.camera);
        publicAPI.updateStabilizedMatrix();
      }
    };

    publicAPI.updateStabilizedMatrix = function () {
      // This method is designed to help with floating point
      // issues when rendering datasets that push the limits of
      // resolutions on float.
      //
      // One of the most common cases is when the dataset is located far
      // away from the origin relative to the clipping range we are looking
      // at. For that case we want to perform the floating point sensitive
      // multiplications on the CPU in double. To this end we want the
      // vertex rendering ops to look something like
      //
      // Compute shifted points and load those into the VBO
      // pointCoordsSC = WorldToStabilizedMatrix * pointCoords;
      //
      // In the vertex shader do the following
      // positionVC = StabilizedToDeviceMatrix * ModelToStabilizedMatrix*vertexIn;
      //
      // We use two matrices because it is expensive to change the
      // WorldToStabilized matrix as we have to reupload all pointCoords
      // So that matrix (MCSCMatrix) is fairly static, the Stabilized to
      // Device matrix is the one that gets updated every time the camera
      // changes.
      //
      // The basic idea is that we should translate the data so that
      // when the center of the view frustum moves a lot
      // we recenter it. The center of the view frustum is roughly
      // camPos + dirOfProj*(far + near)*0.5
      var clipRange = model.camera.getClippingRange();
      var pos = model.camera.getPositionByReference();
      var dop = model.camera.getDirectionOfProjectionByReference();
      var center = [];
      var offset = [];
      scale(offset, dop, 0.5 * (clipRange[0] + clipRange[1]));
      add$1(center, pos, offset);
      sub(offset, center, model.stabilizedCenter);
      var length = len(offset);

      if (length / (clipRange[1] - clipRange[0]) > model.recenterThreshold) {
        model.stabilizedCenter = center;
        model.stabilizedTime.modified();
      }
    };

    publicAPI.updateLights = function () {
      var count = 0;
      var lights = model.renderable.getLightsByReference();

      for (var index = 0; index < lights.length; ++index) {
        if (lights[index].getSwitch() > 0.0) {
          count++;
        }
      }

      if (!count) {
        vtkDebugMacro$5('No lights are on, creating one.');
        model.renderable.createLight();
      }

      return count;
    }; // register pipeline callbacks from a mapper


    publicAPI.registerPipelineCallback = function (pipeline, cb) {
      // if there is a matching pipeline just add the cb
      for (var i = 0; i < model.pipelineCallbacks.length; i++) {
        if (model.pipelineCallbacks[i].pipeline === pipeline) {
          model.pipelineCallbacks[i].callbacks.push(cb);
          return;
        }
      }

      model.pipelineCallbacks.push({
        pipeline: pipeline,
        callbacks: [cb]
      });
    };

    publicAPI.updateUBO = function () {
      // make sure the data is up to date
      // has the camera changed?
      var utime = model.UBO.getSendTime();

      if (model.parent.getMTime() > utime || publicAPI.getMTime() > utime || model.camera.getMTime() > utime || model.renderable.getMTime() > utime) {
        var keyMats = model.webgpuCamera.getKeyMatrices(publicAPI);
        model.UBO.setArray('WCVCMatrix', keyMats.wcvc);
        model.UBO.setArray('SCPCMatrix', keyMats.scpc);
        model.UBO.setArray('PCSCMatrix', keyMats.pcsc);
        model.UBO.setArray('SCVCMatrix', keyMats.scvc);
        model.UBO.setArray('VCPCMatrix', keyMats.vcpc);
        model.UBO.setArray('WCVCNormals', keyMats.normalMatrix);
        var tsize = publicAPI.getYInvertedTiledSizeAndOrigin();
        model.UBO.setArray('viewportSize', [tsize.usize, tsize.vsize]);
        model.UBO.setValue('cameraParallel', model.camera.getParallelProjection());
        var device = model.parent.getDevice();
        model.UBO.sendIfNeeded(device);
      }
    };

    publicAPI.scissorAndViewport = function (encoder) {
      var tsize = publicAPI.getYInvertedTiledSizeAndOrigin();
      encoder.getHandle().setViewport(tsize.lowerLeftU, tsize.lowerLeftV, tsize.usize, tsize.vsize, 0.0, 1.0); // set scissor

      encoder.getHandle().setScissorRect(tsize.lowerLeftU, tsize.lowerLeftV, tsize.usize, tsize.vsize);
    };

    publicAPI.bindUBO = function (renderEncoder) {
      renderEncoder.activateBindGroup(model.bindGroup);
    }; // Renders myself


    publicAPI.opaquePass = function (prepass) {
      if (prepass) {
        // clear last pipelines
        model.pipelineCallbacks = [];
        model.renderEncoder.begin(model.parent.getCommandEncoder());
        publicAPI.updateUBO();
      } else {
        publicAPI.scissorAndViewport(model.renderEncoder);
        publicAPI.clear(); // loop over registered pipelines

        for (var i = 0; i < model.pipelineCallbacks.length; i++) {
          var pStruct = model.pipelineCallbacks[i];
          var pl = pStruct.pipeline;
          model.renderEncoder.setPipeline(pl);
          publicAPI.bindUBO(model.renderEncoder);

          for (var cb = 0; cb < pStruct.callbacks.length; cb++) {
            pStruct.callbacks[cb](model.renderEncoder);
          }
        }

        model.renderEncoder.end();
      }
    };

    publicAPI.clear = function () {
      if (model.renderable.getTransparent() || model.suppressClear) {
        return;
      }

      var device = model.parent.getDevice();

      if (!model.clearFSQ) {
        model.clearFSQ = vtkWebGPUFullScreenQuad$1.newInstance();
        model.clearFSQ.setDevice(device);
        model.clearFSQ.setPipelineHash('clearfsq');
        model.clearFSQ.setFragmentShaderTemplate(clearFragTemplate);
        var ubo = vtkWebGPUUniformBuffer$1.newInstance();
        ubo.setName('mapperUBO');
        ubo.addEntry('BackgroundColor', 'vec4<f32>');
        model.clearFSQ.setUBO(ubo);
      }

      var background = model.renderable.getBackgroundByReference();
      model.clearFSQ.getUBO().setArray('BackgroundColor', background);
      model.clearFSQ.getUBO().sendIfNeeded(device);
      model.clearFSQ.render(model.renderEncoder, device);
    };

    publicAPI.translucentPass = function (prepass) {
      if (prepass) {
        // clear last pipelines
        model.pipelineCallbacks = [];
        model.renderEncoder.begin(model.parent.getCommandEncoder());
      } else {
        publicAPI.scissorAndViewport(model.renderEncoder); // loop over registered pipelines

        for (var i = 0; i < model.pipelineCallbacks.length; i++) {
          var pStruct = model.pipelineCallbacks[i];
          var pl = pStruct.pipeline;
          model.renderEncoder.setPipeline(pl);
          publicAPI.bindUBO(model.renderEncoder);

          for (var cb = 0; cb < pStruct.callbacks.length; cb++) {
            pStruct.callbacks[cb](model.renderEncoder);
          }
        }

        model.renderEncoder.end();
      }
    };

    publicAPI.volumeDepthRangePass = function (prepass) {
      if (prepass) {
        // clear last pipelines
        model.pipelineCallbacks = [];
        model.renderEncoder.begin(model.parent.getCommandEncoder());
      } else {
        publicAPI.scissorAndViewport(model.renderEncoder); // loop over registered pipelines

        for (var i = 0; i < model.pipelineCallbacks.length; i++) {
          var pStruct = model.pipelineCallbacks[i];
          var pl = pStruct.pipeline;
          model.renderEncoder.setPipeline(pl);
          publicAPI.bindUBO(model.renderEncoder);

          for (var cb = 0; cb < pStruct.callbacks.length; cb++) {
            pStruct.callbacks[cb](model.renderEncoder);
          }
        }

        model.renderEncoder.end();
      }
    };

    publicAPI.getAspectRatio = function () {
      var size = model.parent.getSizeByReference();
      var viewport = model.renderable.getViewportByReference();
      return size[0] * (viewport[2] - viewport[0]) / ((viewport[3] - viewport[1]) * size[1]);
    };

    publicAPI.convertToOpenGLDepth = function (val) {
      return model.webgpuCamera.convertToOpenGLDepth(val);
    };

    publicAPI.getYInvertedTiledSizeAndOrigin = function () {
      var res = publicAPI.getTiledSizeAndOrigin();
      var size = model.parent.getSizeByReference();
      res.lowerLeftV = size[1] - res.vsize - res.lowerLeftV;
      return res;
    };

    publicAPI.getTiledSizeAndOrigin = function () {
      var vport = model.renderable.getViewportByReference(); // if there is no window assume 0 1

      var tileViewPort = [0.0, 0.0, 1.0, 1.0]; // find the lower left corner of the viewport, taking into account the
      // lower left boundary of this tile

      var vpu = vport[0] - tileViewPort[0];
      var vpv = vport[1] - tileViewPort[1]; // store the result as a pixel value

      var ndvp = model.parent.normalizedDisplayToDisplay(vpu, vpv);
      var lowerLeftU = Math.round(ndvp[0]);
      var lowerLeftV = Math.round(ndvp[1]); // find the upper right corner of the viewport, taking into account the
      // lower left boundary of this tile

      var vpu2 = vport[2] - tileViewPort[0];
      var vpv2 = vport[3] - tileViewPort[1];
      var ndvp2 = model.parent.normalizedDisplayToDisplay(vpu2, vpv2); // now compute the size of the intersection of the viewport with the
      // current tile

      var usize = Math.round(ndvp2[0]) - lowerLeftU;
      var vsize = Math.round(ndvp2[1]) - lowerLeftV;

      if (usize < 0) {
        usize = 0;
      }

      if (vsize < 0) {
        vsize = 0;
      }

      return {
        usize: usize,
        vsize: vsize,
        lowerLeftU: lowerLeftU,
        lowerLeftV: lowerLeftV
      };
    };

    publicAPI.getPropFromID = function (id) {
      for (var i = 0; i < model.children.length; i++) {
        var res = model.children[i].getPropID ? model.children[i].getPropID() : -1;

        if (res === id) {
          return model.children[i];
        }
      }

      return null;
    };

    publicAPI.getStabilizedTime = function () {
      return model.stabilizedTime.getMTime();
    };

    publicAPI.releaseGraphicsResources = function () {
      if (model.selector !== null) {
        model.selector.releaseGraphicsResources();
      }
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$E = {
    bindGroup: null,
    selector: null,
    renderEncoder: null,
    recenterThreshold: 20.0,
    suppressClear: false,
    stabilizedCenter: [0.0, 0.0, 0.0]
  }; // ----------------------------------------------------------------------------

  function extend$G(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$E, initialValues); // Inheritance

    vtkViewNode$1.extend(publicAPI, model, initialValues);
    model.UBO = vtkWebGPUUniformBuffer$1.newInstance();
    model.UBO.setName('rendererUBO');
    model.UBO.addEntry('WCVCMatrix', 'mat4x4<f32>');
    model.UBO.addEntry('SCPCMatrix', 'mat4x4<f32>');
    model.UBO.addEntry('PCSCMatrix', 'mat4x4<f32>');
    model.UBO.addEntry('SCVCMatrix', 'mat4x4<f32>');
    model.UBO.addEntry('VCPCMatrix', 'mat4x4<f32>');
    model.UBO.addEntry('WCVCNormals', 'mat4x4<f32>');
    model.UBO.addEntry('viewportSize', 'vec2<f32>');
    model.UBO.addEntry('cameraParallel', 'u32');
    model.bindGroup = vtkWebGPUBindGroup$1.newInstance();
    model.bindGroup.setName('rendererBG');
    model.bindGroup.setBindables([model.UBO]);
    model.tmpMat4 = identity(new Float64Array(16));
    model.stabilizedTime = {};
    obj(model.stabilizedTime, {
      mtime: 0
    }); // Build VTK API

    get$1(publicAPI, model, ['bindGroup', 'stabilizedTime']);
    getArray(publicAPI, model, ['stabilizedCenter']);
    setGet(publicAPI, model, ['renderEncoder', 'selector', 'suppressClear', 'UBO']); // Object methods

    vtkWebGPURenderer(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$D = newInstance$1j(extend$G, 'vtkWebGPURenderer'); // ----------------------------------------------------------------------------

  registerOverride('vtkRenderer', newInstance$D);

  // vtkWebGPUActor methods
  // ----------------------------------------------------------------------------

  function vtkWebGPUActor(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkWebGPUActor'); // Builds myself.

    publicAPI.buildPass = function (prepass) {
      if (prepass) {
        model.WebGPURenderer = publicAPI.getFirstAncestorOfType('vtkWebGPURenderer');
        model.WebGPURenderWindow = model.WebGPURenderer.getFirstAncestorOfType('vtkWebGPURenderWindow');

        if (model.propID === undefined) {
          model.propID = model.WebGPURenderWindow.getUniquePropID();
        }

        publicAPI.prepareNodes();
        publicAPI.addMissingNode(model.renderable.getMapper());
        publicAPI.removeUnusedNodes();
      }
    }; // we draw textures, then mapper, then post pass textures


    publicAPI.traverseOpaquePass = function (renderPass) {
      if (!model.renderable || !model.renderable.getNestedVisibility() || !model.renderable.getIsOpaque() || model.WebGPURenderer.getSelector() && !model.renderable.getNestedPickable()) {
        return;
      }

      publicAPI.apply(renderPass, true);

      if (model.children[0]) {
        model.children[0].traverse(renderPass);
      }

      publicAPI.apply(renderPass, false);
    }; // we draw textures, then mapper, then post pass textures


    publicAPI.traverseTranslucentPass = function (renderPass) {
      if (!model.renderable || !model.renderable.getNestedVisibility() || model.renderable.getIsOpaque() || model.WebGPURenderer.getSelector() && !model.renderable.getNestedPickable()) {
        return;
      }

      publicAPI.apply(renderPass, true);

      if (model.children[0]) {
        model.children[0].traverse(renderPass);
      }

      publicAPI.apply(renderPass, false);
    };

    publicAPI.queryPass = function (prepass, renderPass) {
      if (prepass) {
        if (!model.renderable || !model.renderable.getVisibility()) {
          return;
        }

        if (model.renderable.getIsOpaque()) {
          renderPass.incrementOpaqueActorCount();
        } else {
          renderPass.incrementTranslucentActorCount();
        }
      }
    };

    publicAPI.getBufferShift = function (wgpuRen) {
      publicAPI.getKeyMatrices(wgpuRen);
      return model.bufferShift;
    };

    publicAPI.getKeyMatrices = function (wgpuRen) {
      // has the actor or stabilization center changed?
      if (Math.max(model.renderable.getMTime(), wgpuRen.getStabilizedTime()) > model.keyMatricesTime.getMTime()) {
        model.renderable.computeMatrix();
        var mcwc = model.renderable.getMatrix(); // compute the net shift

        var center = wgpuRen.getStabilizedCenterByReference();
        model.bufferShift[0] = mcwc[3] - center[0];
        model.bufferShift[1] = mcwc[7] - center[1];
        model.bufferShift[2] = mcwc[11] - center[2];
        transpose(model.keyMatrices.bcwc, mcwc);

        if (model.renderable.getIsIdentity()) {
          identity(model.keyMatrices.normalMatrix);
        } else {
          // we use bcwc BEFORE the translate below (just to get transposed mcvc)
          copy(model.keyMatrices.normalMatrix, model.keyMatrices.bcwc); // zero out translation

          model.keyMatrices.normalMatrix[3] = 0.0;
          model.keyMatrices.normalMatrix[7] = 0.0;
          model.keyMatrices.normalMatrix[11] = 0.0;
          invert(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);
          transpose(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);
        } // only meed the buffer shift to get to world


        translate(model.keyMatrices.bcwc, model.keyMatrices.bcwc, [-model.bufferShift[0], -model.bufferShift[1], -model.bufferShift[2]]); // to get to stabilized we also need the center

        translate(model.keyMatrices.bcsc, model.keyMatrices.bcwc, [-center[0], -center[1], -center[2]]);
        model.keyMatricesTime.modified();
      }

      return model.keyMatrices;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$D = {
    keyMatricesTime: null,
    keyMatrices: null,
    propID: undefined,
    bufferShift: undefined
  }; // ----------------------------------------------------------------------------

  function extend$F(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$D, initialValues); // Inheritance

    vtkViewNode$1.extend(publicAPI, model, initialValues);
    model.keyMatricesTime = {};
    macro.obj(model.keyMatricesTime, {
      mtime: 0
    });
    model.keyMatrices = {
      normalMatrix: new Float64Array(16),
      bcwc: new Float64Array(16),
      bcsc: new Float64Array(16)
    };
    macro.get(publicAPI, model, ['propID', 'keyMatricesTime']);
    model.bufferShift = [0, 0, 0, 0]; // Object methods

    vtkWebGPUActor(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$C = macro.newInstance(extend$F); // ----------------------------------------------------------------------------

  registerOverride('vtkActor', newInstance$C);

  // vtkTexture methods
  // ----------------------------------------------------------------------------

  function vtkTexture(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkTexture');

    publicAPI.imageLoaded = function () {
      model.image.removeEventListener('load', publicAPI.imageLoaded);
      model.imageLoaded = true;
      publicAPI.modified();
    };

    publicAPI.setImage = function (image) {
      if (model.image === image) {
        return;
      }

      if (image !== null) {
        publicAPI.setInputData(null);
        publicAPI.setInputConnection(null);
      }

      model.image = image;
      model.imageLoaded = false;

      if (image.complete) {
        publicAPI.imageLoaded();
      } else {
        image.addEventListener('load', publicAPI.imageLoaded);
      }

      publicAPI.modified();
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$C = {
    repeat: false,
    interpolate: false,
    edgeClamp: false,
    image: null,
    imageLoaded: false
  }; // ----------------------------------------------------------------------------

  function extend$E(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$C, initialValues); // Build VTK API

    macro.obj(publicAPI, model);
    macro.algo(publicAPI, model, 6, 0);
    macro.get(publicAPI, model, ['imageLoaded']);
    macro.setGet(publicAPI, model, ['repeat', 'edgeClamp', 'interpolate', 'image']);
    vtkTexture(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$B = macro.newInstance(extend$E, 'vtkTexture'); // ----------------------------------------------------------------------------

  var vtkTexture$1 = {
    newInstance: newInstance$B,
    extend: extend$E
  };

  var BufferUsage$1 = vtkWebGPUBufferManager$1.BufferUsage,
      PrimitiveTypes = vtkWebGPUBufferManager$1.PrimitiveTypes;
  var Representation = vtkProperty$1.Representation;
  var ScalarMode = vtkMapper$1.ScalarMode;
  var StartEvent = {
    type: 'StartEvent'
  };
  var EndEvent = {
    type: 'EndEvent'
  };
  var vtkWebGPUPolyDataVS = "\n//VTK::Renderer::Dec\n\n//VTK::Color::Dec\n\n//VTK::Normal::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::Select::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::IOStructs::Dec\n\n[[stage(vertex)]]\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output : vertexOutput;\n\n  var vertex: vec4<f32> = vertexBC;\n\n  //VTK::Color::Impl\n\n  //VTK::Normal::Impl\n\n  //VTK::TCoord::Impl\n\n  //VTK::Select::Impl\n\n  //VTK::Position::Impl\n\n  return output;\n}\n";
  var vtkWebGPUPolyDataFS = "\n//VTK::Renderer::Dec\n\n//VTK::Color::Dec\n\n// optional surface normal declaration\n//VTK::Normal::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::Select::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::IOStructs::Dec\n\n[[stage(fragment)]]\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output : fragmentOutput;\n\n  var ambientColor: vec4<f32> = mapperUBO.AmbientColor;\n  var diffuseColor: vec4<f32> = mapperUBO.DiffuseColor;\n  var opacity: f32 = mapperUBO.Opacity;\n\n  //VTK::Color::Impl\n\n  //VTK::Normal::Impl\n\n  //VTK::Light::Impl\n\n  var computedColor: vec4<f32> = vec4<f32>(ambientColor.rgb * mapperUBO.AmbientIntensity\n     + diffuse * mapperUBO.DiffuseIntensity\n     + specular * mapperUBO.SpecularIntensity,\n     opacity);\n\n  //VTK::TCoord::Impl\n\n  //VTK::Select::Impl\n\n  if (computedColor.a == 0.0) { discard; };\n\n  //VTK::Position::Impl\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n";

  function isEdges(hash) {
    // edge pipelines have "edge" in them
    return hash.indexOf('edge') >= 0;
  } // ----------------------------------------------------------------------------
  // vtkWebGPUPolyDataMapper methods
  // ----------------------------------------------------------------------------


  function vtkWebGPUPolyDataMapper(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkWebGPUPolyDataMapper');

    publicAPI.buildPass = function (prepass) {
      if (prepass) {
        model.WebGPUActor = publicAPI.getFirstAncestorOfType('vtkWebGPUActor');
        model.WebGPURenderer = model.WebGPUActor.getFirstAncestorOfType('vtkWebGPURenderer');
        model.WebGPURenderWindow = model.WebGPURenderer.getParent();
        model.device = model.WebGPURenderWindow.getDevice();
      }
    }; // Renders myself


    publicAPI.translucentPass = function (prepass) {
      if (prepass) {
        publicAPI.render();
      }
    };

    publicAPI.opaquePass = function (prepass) {
      if (prepass) {
        publicAPI.render();
      }
    };

    publicAPI.updateUBO = function () {
      // make sure the data is up to date
      var actor = model.WebGPUActor.getRenderable();
      var ppty = actor.getProperty();
      var utime = model.UBO.getSendTime();

      if (publicAPI.getMTime() > utime || ppty.getMTime() > utime || model.renderable.getMTime() > utime) {
        var keyMats = model.WebGPUActor.getKeyMatrices(model.WebGPURenderer);
        model.UBO.setArray('BCWCMatrix', keyMats.bcwc);
        model.UBO.setArray('BCSCMatrix', keyMats.bcsc);
        model.UBO.setArray('MCWCNormals', keyMats.normalMatrix);
        var aColor = ppty.getAmbientColorByReference();
        model.UBO.setValue('AmbientIntensity', ppty.getAmbient());
        model.UBO.setArray('AmbientColor', [aColor[0], aColor[1], aColor[2], 1.0]);
        model.UBO.setValue('DiffuseIntensity', ppty.getDiffuse());
        aColor = ppty.getDiffuseColorByReference();
        model.UBO.setArray('DiffuseColor', [aColor[0], aColor[1], aColor[2], 1.0]);
        model.UBO.setValue('SpecularIntensity', ppty.getSpecular());
        model.UBO.setValue('SpecularPower', ppty.getSpecularPower());
        aColor = ppty.getSpecularColorByReference();
        model.UBO.setArray('SpecularColor', [aColor[0], aColor[1], aColor[2], 1.0]);
        aColor = ppty.getEdgeColorByReference();
        model.UBO.setArray('EdgeColor', [aColor[0], aColor[1], aColor[2], 1.0]);
        model.UBO.setValue('Opacity', ppty.getOpacity());
        model.UBO.setValue('PropID', model.WebGPUActor.getPropID());
        var device = model.WebGPURenderWindow.getDevice();
        model.UBO.sendIfNeeded(device);
      }
    };

    publicAPI.render = function () {
      publicAPI.invokeEvent(StartEvent);

      if (!model.renderable.getStatic()) {
        model.renderable.update();
      }

      model.currentInput = model.renderable.getInputData();
      publicAPI.invokeEvent(EndEvent);
      model.renderEncoder = model.WebGPURenderer.getRenderEncoder();
      publicAPI.buildPrimitives(); // update descriptor sets

      publicAPI.updateUBO();
    };

    publicAPI.replaceShaderPosition = function (hash, pipeline, vertexInput) {
      var vDesc = pipeline.getShaderDescription('vertex');
      vDesc.addBuiltinOutput('vec4<f32>', '[[builtin(position)]] Position');
      var code = vDesc.getCode();

      if (isEdges(hash)) {
        vDesc.addBuiltinInput('u32', '[[builtin(instance_index)]] instanceIndex'); // widen the edge

        code = vtkWebGPUShaderCache$1.substitute(code, '//VTK::Position::Impl', ['    var tmpPos: vec4<f32> = rendererUBO.SCPCMatrix*mapperUBO.BCSCMatrix*vertexBC;', '    var tmpPos2: vec3<f32> = tmpPos.xyz / tmpPos.w;', '    tmpPos2.x = tmpPos2.x + 1.4*(f32(input.instanceIndex % 2u) - 0.5)/rendererUBO.viewportSize.x;', '    tmpPos2.y = tmpPos2.y + 1.4*(f32(input.instanceIndex / 2u) - 0.5)/rendererUBO.viewportSize.y;', '    tmpPos2.z = tmpPos2.z + 0.00001;', // could become a setting
        '    output.Position = vec4<f32>(tmpPos2.xyz * tmpPos.w, tmpPos.w);']).result;
      } else {
        code = vtkWebGPUShaderCache$1.substitute(code, '//VTK::Position::Impl', ['    output.Position = rendererUBO.SCPCMatrix*mapperUBO.BCSCMatrix*vertexBC;']).result;
      }

      vDesc.setCode(code);
    };

    publicAPI.replaceShaderNormal = function (hash, pipeline, vertexInput) {
      if (vertexInput.hasAttribute('normalMC')) {
        var vDesc = pipeline.getShaderDescription('vertex');
        vDesc.addOutput('vec3<f32>', 'normalVC');
        var code = vDesc.getCode();
        code = vtkWebGPUShaderCache$1.substitute(code, '//VTK::Normal::Impl', ['  output.normalVC = normalize((rendererUBO.WCVCNormals * mapperUBO.MCWCNormals * normalMC).xyz);']).result;
        vDesc.setCode(code);
        var fDesc = pipeline.getShaderDescription('fragment');
        code = fDesc.getCode();
        code = vtkWebGPUShaderCache$1.substitute(code, '//VTK::Normal::Impl', ['  var normal: vec3<f32> = input.normalVC;', '  if (!input.frontFacing) { normal = -normal; }']).result;
        fDesc.setCode(code);
      }
    }; // we only apply lighting when there is a "var normal" declaration in the
    // fragment shader code. That is the lighting trigger.


    publicAPI.replaceShaderLight = function (hash, pipeline, vertexInput) {
      var fDesc = pipeline.getShaderDescription('fragment');
      var code = fDesc.getCode();

      if (code.includes('var normal')) {
        code = vtkWebGPUShaderCache$1.substitute(code, '//VTK::Light::Impl', ['  var df: f32  = max(0.0, normal.z);', '  var sf: f32 = pow(df, mapperUBO.SpecularPower);', '  var diffuse: vec3<f32> = df * diffuseColor.rgb;', '  var specular: vec3<f32> = sf * mapperUBO.SpecularColor.rgb * mapperUBO.SpecularColor.a;']).result;
        fDesc.setCode(code);
      } else {
        code = vtkWebGPUShaderCache$1.substitute(code, '//VTK::Light::Impl', ['  var diffuse: vec3<f32> = diffuseColor.rgb;', '  var specular: vec3<f32> = mapperUBO.SpecularColor.rgb * mapperUBO.SpecularColor.a;']).result;
        fDesc.setCode(code);
      }
    };

    publicAPI.replaceShaderColor = function (hash, pipeline, vertexInput) {
      if (isEdges(hash)) {
        var _fDesc = pipeline.getShaderDescription('fragment');

        var _code = _fDesc.getCode();

        _code = vtkWebGPUShaderCache$1.substitute(_code, '//VTK::Color::Impl', ['ambientColor = mapperUBO.EdgeColor;', 'diffuseColor = mapperUBO.EdgeColor;']).result;

        _fDesc.setCode(_code);

        return;
      }

      if (!vertexInput.hasAttribute('colorVI')) return;
      var vDesc = pipeline.getShaderDescription('vertex');
      vDesc.addOutput('vec4<f32>', 'color');
      var code = vDesc.getCode();
      code = vtkWebGPUShaderCache$1.substitute(code, '//VTK::Color::Impl', ['  output.color = colorVI;']).result;
      vDesc.setCode(code);
      var fDesc = pipeline.getShaderDescription('fragment');
      code = fDesc.getCode();
      code = vtkWebGPUShaderCache$1.substitute(code, '//VTK::Color::Impl', ['ambientColor = input.color;', 'diffuseColor = input.color;', 'opacity = mapperUBO.Opacity * input.color.a;']).result;
      fDesc.setCode(code);
    };

    publicAPI.replaceShaderTCoord = function (hash, pipeline, vertexInput) {
      if (!vertexInput.hasAttribute('tcoord')) return;
      var vDesc = pipeline.getShaderDescription('vertex');
      vDesc.addOutput('vec2<f32>', 'tcoordVS');
      var code = vDesc.getCode();
      code = vtkWebGPUShaderCache$1.substitute(code, '//VTK::TCoord::Impl', ['  output.tcoordVS = tcoord;']).result;
      vDesc.setCode(code);
      var fDesc = pipeline.getShaderDescription('fragment');
      code = fDesc.getCode(); // todo handle multiple textures? Blend multiply ?

      if (model.textures.length) {
        code = vtkWebGPUShaderCache$1.substitute(code, '//VTK::TCoord::Impl', ['var tcolor: vec4<f32> = textureSample(Texture0, Texture0Sampler, input.tcoordVS);', 'computedColor = computedColor*tcolor;']).result;
      }

      fDesc.setCode(code);
    };

    publicAPI.replaceShaderSelect = function (hash, pipeline, vertexInput) {
      if (hash.includes('sel')) {
        var fDesc = pipeline.getShaderDescription('fragment');
        var code = fDesc.getCode(); // by default there are no composites, so just 0

        code = vtkWebGPUShaderCache$1.substitute(code, '//VTK::Select::Impl', ['  var compositeID: u32 = 0u;']).result;
        fDesc.setCode(code);
      }
    };

    publicAPI.getUsage = function (rep, i) {
      if (rep === Representation.POINTS || i === PrimitiveTypes.Points) {
        return BufferUsage$1.Verts;
      }

      if (i === PrimitiveTypes.Lines) {
        return BufferUsage$1.Lines;
      }

      if (rep === Representation.WIREFRAME) {
        if (i === PrimitiveTypes.Triangles) {
          return BufferUsage$1.LinesFromTriangles;
        }

        return BufferUsage$1.LinesFromStrips;
      }

      if (i === PrimitiveTypes.Triangles) {
        return BufferUsage$1.Triangles;
      }

      if (i === PrimitiveTypes.TriangleStrips) {
        return BufferUsage$1.Strips;
      }

      if (i === PrimitiveTypes.TriangleEdges) {
        return BufferUsage$1.LinesFromTriangles;
      } // only strip edges left which are lines


      return BufferUsage$1.LinesFromStrips;
    };

    publicAPI.getHashFromUsage = function (usage) {
      return "pt".concat(usage);
    };

    publicAPI.getTopologyFromUsage = function (usage) {
      switch (usage) {
        case BufferUsage$1.Triangles:
          return 'triangle-list';

        case BufferUsage$1.Verts:
          return 'point-list';

        default:
        case BufferUsage$1.Lines:
          return 'line-list';
      }
    };

    publicAPI.buildVertexInput = function (pd, cells, primType) {
      var actor = model.WebGPUActor.getRenderable();
      var representation = actor.getProperty().getRepresentation();
      var device = model.WebGPURenderWindow.getDevice();
      var edges = false;

      if (primType === PrimitiveTypes.TriangleEdges) {
        edges = true;
        representation = Representation.WIREFRAME;
      }

      var vertexInput = model.primitives[primType].getVertexInput(); // hash = all things that can change the values on the buffer
      // since mtimes are unique we can use
      // - cells mtime - because cells drive how we pack
      // - rep (point/wireframe/surface) - again because of packing
      // - relevant dataArray mtime - the source data
      // - shift - not currently captured
      // - scale - not currently captured
      // - format
      // - usage
      // - packExtra - covered by format
      // - prim type (vert/lines/polys/strips) - covered by cells mtime

      var hash = cells.getMTime() + representation; // points

      var points = pd.getPoints();

      if (points) {
        var shift = model.WebGPUActor.getBufferShift(model.WebGPURenderer);
        var buffRequest = {
          hash: hash + points.getMTime(),
          dataArray: points,
          source: points,
          cells: cells,
          primitiveType: primType,
          representation: representation,
          time: Math.max(points.getMTime(), cells.getMTime(), model.WebGPUActor.getKeyMatricesTime().getMTime()),
          shift: shift,
          usage: BufferUsage$1.PointArray,
          format: 'float32x4',
          packExtra: true
        };
        var buff = device.getBufferManager().getBuffer(buffRequest);
        vertexInput.addBuffer(buff, ['vertexBC']);
      } else {
        vertexInput.removeBufferIfPresent('vertexBC');
      } // normals, only used for surface rendering


      var usage = publicAPI.getUsage(representation, primType);

      if (usage === BufferUsage$1.Triangles || usage === BufferUsage$1.Strips) {
        var normals = pd.getPointData().getNormals();
        var _buffRequest = {
          cells: cells,
          representation: representation,
          primitiveType: primType,
          format: 'snorm8x4',
          packExtra: true,
          shift: 0,
          scale: 127
        };

        if (normals) {
          _buffRequest.hash = hash + normals.getMTime();
          _buffRequest.dataArray = normals;
          _buffRequest.source = normals;
          _buffRequest.time = Math.max(normals.getMTime(), cells.getMTime());
          _buffRequest.usage = BufferUsage$1.PointArray;

          var _buff = device.getBufferManager().getBuffer(_buffRequest);

          vertexInput.addBuffer(_buff, ['normalMC']);
        } else if (primType === PrimitiveTypes.Triangles) {
          _buffRequest.hash = hash + points.getMTime();
          _buffRequest.dataArray = points;
          _buffRequest.source = points;
          _buffRequest.time = Math.max(points.getMTime(), cells.getMTime());
          _buffRequest.usage = BufferUsage$1.NormalsFromPoints;

          var _buff2 = device.getBufferManager().getBuffer(_buffRequest);

          vertexInput.addBuffer(_buff2, ['normalMC']);
        } else {
          vertexInput.removeBufferIfPresent('normalMC');
        }
      } else {
        vertexInput.removeBufferIfPresent('normalMC');
      } // deal with colors but only if modified


      var haveColors = false;

      if (model.renderable.getScalarVisibility()) {
        var c = model.renderable.getColorMapColors();

        if (c && !edges) {
          var scalarMode = model.renderable.getScalarMode();
          var haveCellScalars = false; // We must figure out how the scalars should be mapped to the polydata.

          if ((scalarMode === ScalarMode.USE_CELL_DATA || scalarMode === ScalarMode.USE_CELL_FIELD_DATA || scalarMode === ScalarMode.USE_FIELD_DATA || !pd.getPointData().getScalars()) && scalarMode !== ScalarMode.USE_POINT_FIELD_DATA && c) {
            haveCellScalars = true;
          }

          var _buffRequest2 = {
            hash: hash + points.getMTime(),
            dataArray: c,
            source: c,
            cells: cells,
            primitiveType: primType,
            representation: representation,
            time: Math.max(c.getMTime(), cells.getMTime()),
            usage: BufferUsage$1.PointArray,
            format: 'unorm8x4',
            cellData: haveCellScalars,
            cellOffset: 0
          };

          var _buff3 = device.getBufferManager().getBuffer(_buffRequest2);

          vertexInput.addBuffer(_buff3, ['colorVI']);
          haveColors = true;
        }
      }

      if (!haveColors) {
        vertexInput.removeBufferIfPresent('colorVI');
      }

      var tcoords = null;

      if (model.renderable.getInterpolateScalarsBeforeMapping() && model.renderable.getColorCoordinates()) {
        tcoords = model.renderable.getColorCoordinates();
      } else {
        tcoords = pd.getPointData().getTCoords();
      }

      if (tcoords && !edges) {
        var _buffRequest3 = {
          hash: hash + tcoords.getMTime(),
          dataArray: tcoords,
          source: tcoords,
          cells: cells,
          primitiveType: primType,
          representation: representation,
          time: Math.max(tcoords.getMTime(), cells.getMTime()),
          usage: BufferUsage$1.PointArray,
          format: 'float32x2'
        };

        var _buff4 = device.getBufferManager().getBuffer(_buffRequest3);

        vertexInput.addBuffer(_buff4, ['tcoord']);
      } else {
        vertexInput.removeBufferIfPresent('tcoord');
      }
    };

    publicAPI.updateTextures = function () {
      // we keep track of new and used textures so
      // that we can clean up any unused textures so we don't hold onto them
      var usedTextures = [];
      var newTextures = []; // do we have a scalar color texture

      var idata = model.renderable.getColorTextureMap(); // returns an imagedata

      if (idata) {
        if (!model.colorTexture) {
          model.colorTexture = vtkTexture$1.newInstance();
        }

        model.colorTexture.setInputData(idata);
        newTextures.push(model.colorTexture);
      } // actor textures?


      var actor = model.WebGPUActor.getRenderable();
      var textures = actor.getTextures();

      for (var i = 0; i < textures.length; i++) {
        if (textures[i].getInputData()) {
          newTextures.push(textures[i]);
        }

        if (textures[i].getImage() && textures[i].getImageLoaded()) {
          newTextures.push(textures[i]);
        }
      }

      var usedCount = 0;

      for (var _i = 0; _i < newTextures.length; _i++) {
        var srcTexture = newTextures[_i];
        var treq = {};

        if (srcTexture.getInputData()) {
          treq.imageData = srcTexture.getInputData();
          treq.source = treq.imageData;
        } else if (srcTexture.getImage()) {
          treq.image = srcTexture.getImage();
          treq.source = treq.image;
        }

        var newTex = model.device.getTextureManager().getTexture(treq);

        if (newTex.getReady()) {
          // is this a new texture
          var found = false;

          for (var t = 0; t < model.textures.length; t++) {
            if (model.textures[t] === newTex) {
              usedCount++;
              found = true;
              usedTextures[t] = true;
            }
          }

          if (!found) {
            usedTextures[model.textures.length] = true;
            var tview = newTex.createView();
            tview.setName("Texture".concat(usedCount++));
            model.textures.push(newTex);
            model.textureViews.push(tview);
            var interpolate = srcTexture.getInterpolate() ? 'linear' : 'nearest';
            tview.addSampler(model.device, {
              minFilter: interpolate,
              magFilter: interpolate
            });
          }
        }
      } // remove unused textures


      for (var _i2 = model.textures.length - 1; _i2 >= 0; _i2--) {
        if (!usedTextures[_i2]) {
          model.textures.splice(_i2, 1);
          model.textureViews.splice(_i2, 1);
        }
      }
    }; // compute a unique hash for a pipeline, this needs to be unique enough to
    // capture any pipeline code changes (which includes shader changes)
    // or vertex input changes/ bind groups/ etc


    publicAPI.computePipelineHash = function (vertexInput, usage, edges) {
      var pipelineHash = 'pd';

      if (edges) {
        pipelineHash += 'edge';
      } else {
        if (vertexInput.hasAttribute("normalMC")) {
          pipelineHash += "n";
        }

        if (vertexInput.hasAttribute("colorVI")) {
          pipelineHash += "c";
        }

        if (vertexInput.hasAttribute("tcoord")) {
          pipelineHash += "t";
        }

        if (model.textures.length) {
          pipelineHash += "tx".concat(model.textures.length);
        }
      }

      if (model.SSBO) {
        pipelineHash += "ssbo";
      }

      var uhash = publicAPI.getHashFromUsage(usage);
      pipelineHash += uhash;
      pipelineHash += model.renderEncoder.getPipelineHash();
      return pipelineHash;
    }; // was originally buildIBOs() but not using IBOs right now


    publicAPI.buildPrimitives = function () {
      var poly = model.currentInput;
      var prims = [poly.getVerts(), poly.getLines(), poly.getPolys(), poly.getStrips()];
      var device = model.WebGPURenderWindow.getDevice();
      model.renderable.mapScalars(poly, 1.0); // handle textures

      publicAPI.updateTextures();
      var actor = model.WebGPUActor.getRenderable();
      var rep = actor.getProperty().getRepresentation();
      var edgeVisibility = actor.getProperty().getEdgeVisibility(); // handle per primitive type

      for (var i = PrimitiveTypes.Points; i <= PrimitiveTypes.Triangles; i++) {
        if (prims[i].getNumberOfValues() > 0) {
          {
            var usage = publicAPI.getUsage(rep, i);
            var primHelper = model.primitives[i];
            publicAPI.buildVertexInput(model.currentInput, prims[i], i);
            primHelper.setPipelineHash(publicAPI.computePipelineHash(primHelper.getVertexInput(), usage, false));
            primHelper.setTextureViews(model.textureViews);
            primHelper.setWebGPURenderer(model.WebGPURenderer);
            primHelper.setNumberOfInstances(1);
            var vbo = primHelper.getVertexInput().getBuffer('vertexBC');
            primHelper.setNumberOfVertices(vbo.getSizeInBytes() / vbo.getStrideInBytes());
            primHelper.setTopology(publicAPI.getTopologyFromUsage(usage));
            primHelper.build(model.renderEncoder, device);
            primHelper.registerToDraw();
          } // also handle edge visibility if turned on

          if (edgeVisibility && rep === Representation.SURFACE && i === PrimitiveTypes.Triangles) {
            var _primHelper = model.primitives[PrimitiveTypes.TriangleEdges];

            var _usage = publicAPI.getUsage(rep, PrimitiveTypes.TriangleEdges);

            publicAPI.buildVertexInput(model.currentInput, prims[PrimitiveTypes.Triangles], PrimitiveTypes.TriangleEdges);

            _primHelper.setPipelineHash(publicAPI.computePipelineHash(_primHelper.getVertexInput(), _usage, true));

            _primHelper.setWebGPURenderer(model.WebGPURenderer);

            _primHelper.setNumberOfInstances(4);

            var _vbo = _primHelper.getVertexInput().getBuffer('vertexBC');

            _primHelper.setNumberOfVertices(_vbo.getSizeInBytes() / _vbo.getStrideInBytes());

            _primHelper.setTopology(publicAPI.getTopologyFromUsage(_usage));

            _primHelper.build(model.renderEncoder, device);

            _primHelper.registerToDraw();
          }
        }
      }
    };

    publicAPI.setShaderReplacement = function (name, func) {
      for (var i = PrimitiveTypes.Start; i < PrimitiveTypes.End; i++) {
        var sr = model.primitives[i].getShaderReplacements();
        sr.set(name, func);
      }
    };

    publicAPI.setFragmentShaderTemplate = function (val) {
      model.fragmentShaderTemplate = val;

      for (var i = PrimitiveTypes.Start; i < PrimitiveTypes.End; i++) {
        model.primitives[i].setFragmentShaderTemplate(val);
      }
    };

    publicAPI.setVertexShaderTemplate = function (val) {
      model.fragmentShaderTemplate = val;

      for (var i = PrimitiveTypes.Start; i < PrimitiveTypes.End; i++) {
        model.primitives[i].setVertexShaderTemplate(val);
      }
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$B = {
    colorTexture: null,
    renderEncoder: null,
    textures: null,
    textureViews: null,
    primitives: null,
    tmpMat4: null,
    fragmentShaderTemplate: null,
    vertexShaderTemplate: null
  }; // ----------------------------------------------------------------------------

  function extend$D(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$B, initialValues); // Inheritance

    vtkViewNode$1.extend(publicAPI, model, initialValues);
    model.tmpMat3 = identity$1(new Float64Array(9));
    model.tmpMat4 = identity(new Float64Array(16));
    model.fragmentShaderTemplate = model.fragmentShaderTemplate || vtkWebGPUPolyDataFS;
    model.vertexShaderTemplate = model.vertexShaderTemplate || vtkWebGPUPolyDataVS;
    model.UBO = vtkWebGPUUniformBuffer$1.newInstance();
    model.UBO.setName('mapperUBO');
    model.UBO.addEntry('BCWCMatrix', 'mat4x4<f32>');
    model.UBO.addEntry('BCSCMatrix', 'mat4x4<f32>');
    model.UBO.addEntry('MCWCNormals', 'mat4x4<f32>');
    model.UBO.addEntry('AmbientColor', 'vec4<f32>');
    model.UBO.addEntry('DiffuseColor', 'vec4<f32>');
    model.UBO.addEntry('EdgeColor', 'vec4<f32>');
    model.UBO.addEntry('AmbientIntensity', 'f32');
    model.UBO.addEntry('DiffuseIntensity', 'f32');
    model.UBO.addEntry('SpecularColor', 'vec4<f32>');
    model.UBO.addEntry('SpecularIntensity', 'f32');
    model.UBO.addEntry('Opacity', 'f32');
    model.UBO.addEntry('SpecularPower', 'f32');
    model.UBO.addEntry('PropID', 'u32'); // Build VTK API

    get$1(publicAPI, model, ['fragmentShaderTemplate', 'vertexShaderTemplate', 'UBO']);
    setGet(publicAPI, model, ['renderEncoder']);
    model.textures = [];
    model.textureViews = [];
    model.primitives = []; // Object methods

    vtkWebGPUPolyDataMapper(publicAPI, model);

    for (var i = PrimitiveTypes.Start; i < PrimitiveTypes.End; i++) {
      model.primitives[i] = vtkWebGPUMapperHelper$1.newInstance();
      model.primitives[i].setUBO(model.UBO);
      model.primitives[i].setVertexShaderTemplate(publicAPI.getVertexShaderTemplate());
      model.primitives[i].setFragmentShaderTemplate(publicAPI.getFragmentShaderTemplate());
    }

    publicAPI.setShaderReplacement('replaceShaderPosition', publicAPI.replaceShaderPosition);
    publicAPI.setShaderReplacement('replaceShaderLight', publicAPI.replaceShaderLight);
    publicAPI.setShaderReplacement('replaceShaderTCoord', publicAPI.replaceShaderTCoord);
    publicAPI.setShaderReplacement('replaceShaderNormal', publicAPI.replaceShaderNormal);
    publicAPI.setShaderReplacement('replaceShaderSelect', publicAPI.replaceShaderSelect);
    publicAPI.setShaderReplacement('replaceShaderColor', publicAPI.replaceShaderColor);
  } // ----------------------------------------------------------------------------

  var newInstance$A = newInstance$1j(extend$D, 'vtkWebGPUPolyDataMapper'); // ----------------------------------------------------------------------------

  registerOverride('vtkMapper', newInstance$A);

  /* eslint-disable no-bitwise */
  // ----------------------------------------------------------------------------
  // vtkWebGPUSampler methods
  // ----------------------------------------------------------------------------

  function vtkWebGPUSampler(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkWebGPUSampler');

    publicAPI.create = function (device) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      model.device = device;
      model.options.magFilter = options.magFilter ? options.magFilter : 'nearest';
      model.options.minFilter = options.minFilter ? options.minFilter : 'nearest';
      model.handle = model.device.getHandle().createSampler(model.options);
      model.bindGroupTime.modified();
    };

    publicAPI.getShaderCode = function (binding, group) {
      var result = "[[binding(".concat(binding, "), group(").concat(group, ")]] var ").concat(model.name, ": sampler;");
      return result;
    };

    publicAPI.getBindGroupEntry = function () {
      var foo = {
        resource: model.handle
      };
      return foo;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$A = {
    device: null,
    handle: null,
    name: null,
    options: null
  }; // ----------------------------------------------------------------------------

  function extend$C(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$A, initialValues); // Object methods

    macro.obj(publicAPI, model);
    model.options = {};
    model.bindGroupLayoutEntry = {
      /* eslint-disable no-undef */
      visibility: GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT,

      /* eslint-enable no-undef */
      sampler: {// type: 'filtering',
      }
    };
    model.bindGroupTime = {};
    macro.obj(model.bindGroupTime, {
      mtime: 0
    });
    macro.get(publicAPI, model, ['bindGroupTime', 'handle', 'options']);
    macro.setGet(publicAPI, model, ['bindGroupLayoutEntry', 'device', 'name']);
    vtkWebGPUSampler(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$z = macro.newInstance(extend$C); // ----------------------------------------------------------------------------

  var vtkWebGPUSampler$1 = {
    newInstance: newInstance$z,
    extend: extend$C
  };

  // vtkWebGPUTextureView methods
  // ----------------------------------------------------------------------------

  /* eslint-disable no-bitwise */

  function vtkWebGPUTextureView(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkWebGPUTextureView');

    publicAPI.create = function (texture, options) {
      model.texture = texture;
      model.options = options;
      model.options.dimension = model.options.dimension || '2d';
      model.textureHandle = texture.getHandle();
      model.handle = model.textureHandle.createView(model.options);
      model.bindGroupLayoutEntry.texture.viewDimension = model.options.dimension;
      var tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.texture.getFormat());
      model.bindGroupLayoutEntry.texture.sampleType = tDetails.sampleType;
    };

    publicAPI.getBindGroupEntry = function () {
      var foo = {
        resource: publicAPI.getHandle()
      };
      return foo;
    };

    publicAPI.getShaderCode = function (binding, group) {
      var ttype = 'f32';

      if (model.bindGroupLayoutEntry.texture.sampleType === 'sint') {
        ttype = 'i32';
      } else if (model.bindGroupLayoutEntry.texture.sampleType === 'uint') {
        ttype = 'u32';
      }

      var result = "[[binding(".concat(binding, "), group(").concat(group, ")]] var ").concat(model.name, ": texture_").concat(model.options.dimension, "<").concat(ttype, ">;");

      if (model.bindGroupLayoutEntry.texture.sampleType === 'depth') {
        result = "[[binding(".concat(binding, "), group(").concat(group, ")]] var ").concat(model.name, ": texture_depth_").concat(model.options.dimension, ";");
      }

      return result;
    };

    publicAPI.addSampler = function (device, options) {
      var newSamp = vtkWebGPUSampler$1.newInstance();
      newSamp.create(device, options);
      publicAPI.setSampler(newSamp);
      model.sampler.setName("".concat(model.name, "Sampler"));
    };

    publicAPI.setName = function (val) {
      if (model.sampler) {
        model.sampler.setName("".concat(val, "Sampler"));
      }

      if (model.name === val) {
        return;
      }

      model.name = val;
      publicAPI.modified();
    };

    publicAPI.getBindGroupTime = function () {
      // check if the handle changed
      if (model.texture.getHandle() !== model.textureHandle) {
        model.textureHandle = model.texture.getHandle();
        model.handle = model.textureHandle.createView(model.options);
        model.bindGroupTime.modified();
      }

      return model.bindGroupTime;
    }; // if the texture has changed then get a new view


    publicAPI.getHandle = function () {
      if (model.texture.getHandle() !== model.textureHandle) {
        model.textureHandle = model.texture.getHandle();
        model.handle = model.textureHandle.createView(model.options);
        model.bindGroupTime.modified();
      }

      return model.handle;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$z = {
    texture: null,
    handle: null,
    name: null,
    sampler: null
  }; // ----------------------------------------------------------------------------

  function extend$B(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$z, initialValues); // Object methods

    macro.obj(publicAPI, model);
    model.bindGroupLayoutEntry = {
      /* eslint-disable no-undef */
      visibility: GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT,

      /* eslint-enable no-undef */
      texture: {
        sampleType: 'float',
        viewDimension: '2d' // multisampled: false,

      }
    };
    model.bindGroupTime = {};
    macro.obj(model.bindGroupTime, {
      mtime: 0
    });
    macro.get(publicAPI, model, ['bindGroupTime', 'name', 'texture']);
    macro.setGet(publicAPI, model, ['bindGroupLayoutEntry', 'sampler']);
    vtkWebGPUTextureView(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$y = macro.newInstance(extend$B); // ----------------------------------------------------------------------------

  var vtkWebGPUTextureView$1 = {
    newInstance: newInstance$y,
    extend: extend$B
  };

  var BufferUsage = vtkWebGPUBufferManager$1.BufferUsage; // ----------------------------------------------------------------------------
  // Global methods
  // ----------------------------------------------------------------------------
  // ----------------------------------------------------------------------------
  // vtkWebGPUTexture methods
  // ----------------------------------------------------------------------------

  function vtkWebGPUTexture(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkWebGPUTexture');

    publicAPI.create = function (device, options) {
      model.device = device;
      model.width = options.width;
      model.height = options.height;
      model.depth = options.depth ? options.depth : 1;
      var dimension = model.depth === 1 ? '2d' : '3d';
      model.format = options.format ? options.format : 'rgbaunorm';
      /* eslint-disable no-undef */

      /* eslint-disable no-bitwise */

      model.usage = options.usage ? options.usage : GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;
      /* eslint-enable no-undef */

      /* eslint-enable no-bitwise */

      model.handle = model.device.getHandle().createTexture({
        size: [model.width, model.height, model.depth],
        format: model.format,
        // 'rgba8unorm',
        usage: model.usage,
        dimension: dimension
      });
    };

    publicAPI.assignFromHandle = function (device, handle, options) {
      model.device = device;
      model.handle = handle;
      model.width = options.width;
      model.height = options.height;
      model.depth = options.depth ? options.depth : 1;
      model.format = options.format ? options.format : 'rgbaunorm';
      /* eslint-disable no-undef */

      /* eslint-disable no-bitwise */

      model.usage = options.usage ? options.usage : GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;
      /* eslint-enable no-undef */

      /* eslint-enable no-bitwise */
    }; // set the data


    publicAPI.writeImageData = function (req) {
      var tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.format);
      var bufferBytesPerRow = model.width * tDetails.stride;

      if (req.nativeArray) {
        // create and write the buffer
        var buffRequest = {
          /* eslint-disable no-undef */
          usage: BufferUsage.Texture
          /* eslint-enable no-undef */

        };

        if (req.dataArray) {
          buffRequest.dataArray = req.dataArray;
          buffRequest.time = req.dataArray.getMTime();
        }

        buffRequest.nativeArray = req.nativeArray; // bytesPerRow must be a multiple of 256 so we might need to rebuild
        // the data here before passing to the buffer. e.g. if it is unorm8x4 then
        // we need to have width be a multiple of 64

        var inWidthInBytes = req.nativeArray.length / (model.height * model.depth) * req.nativeArray.BYTES_PER_ELEMENT; // is this a half float texture?

        var halfFloat = tDetails.elementSize === 2 && tDetails.sampleType === 'float'; // if we need to copy the data

        if (halfFloat || inWidthInBytes % 256) {
          var inArray = req.nativeArray;
          var inWidth = inWidthInBytes / inArray.BYTES_PER_ELEMENT;
          var outBytesPerElement = tDetails.elementSize;
          var outWidthInBytes = 256 * Math.floor((inWidth * outBytesPerElement + 255) / 256);
          var outWidth = outWidthInBytes / outBytesPerElement;
          var outArray = macro.newTypedArray(halfFloat ? 'Uint16Array' : inArray.constructor.name, outWidth * model.height * model.depth);

          for (var v = 0; v < model.height * model.depth; v++) {
            if (halfFloat) {
              for (var i = 0; i < inWidth; i++) {
                outArray[v * outWidth + i] = HalfFloat.toHalf(inArray[v * inWidth + i]);
              }
            } else {
              outArray.set(inArray.subarray(v * inWidth, (v + 1) * inWidth), v * outWidth);
            }
          }

          buffRequest.nativeArray = outArray;
          bufferBytesPerRow = outWidthInBytes;
        }

        var buff = model.device.getBufferManager().getBuffer(buffRequest);
        model.buffer = buff;
      }

      if (req.image) {
        var canvas = document.createElement('canvas');
        canvas.width = req.image.width;
        canvas.height = req.image.height;
        var ctx = canvas.getContext('2d');
        ctx.translate(0, canvas.height);
        ctx.scale(1, -1);
        ctx.drawImage(req.image, 0, 0, req.image.width, req.image.height, 0, 0, canvas.width, canvas.height);
        var imageData = ctx.getImageData(0, 0, req.image.width, req.image.height); // create and write the buffer

        var _buffRequest = {
          nativeArray: imageData.data,
          time: 0,

          /* eslint-disable no-undef */
          usage: BufferUsage.Texture,

          /* eslint-enable no-undef */
          format: 'unorm8x4'
        };

        var _buff = model.device.getBufferManager().getBuffer(_buffRequest);

        model.buffer = _buff;
      } // get a buffer for the image


      var cmdEnc = model.device.createCommandEncoder();
      cmdEnc.copyBufferToTexture({
        buffer: model.buffer.getHandle(),
        offset: 0,
        bytesPerRow: bufferBytesPerRow,
        rowsPerImage: model.height
      }, {
        texture: model.handle
      }, [model.width, model.height, model.depth]);
      model.device.submitCommandEncoder(cmdEnc);
      model.ready = true;
    }; // when data is pulled out of this texture what scale must be applied to
    // get back to the original source data. For formats such as r8unorm we
    // have to multiply by 255.0, for formats such as r16float it is 1.0


    publicAPI.getScale = function () {
      var tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.format);
      var halfFloat = tDetails.elementSize === 2 && tDetails.sampleType === 'float';
      return halfFloat ? 1.0 : 255.0;
    };

    publicAPI.getNumberOfComponents = function () {
      var tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.format);
      return tDetails.numComponents;
    };

    publicAPI.resizeToMatch = function (tex) {
      if (tex.getWidth() !== model.width || tex.getHeight() !== model.height || tex.getDepth() !== model.depth) {
        model.width = tex.getWidth();
        model.height = tex.getHeight();
        model.depth = tex.getDepth();
        model.handle = model.device.getHandle().createTexture({
          size: [model.width, model.height, model.depth],
          format: model.format,
          usage: model.usage
        });
      }
    };

    publicAPI.resize = function (width, height) {
      var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

      if (width !== model.width || height !== model.height || depth !== model.depth) {
        model.width = width;
        model.height = height;
        model.depth = depth;
        model.handle = model.device.getHandle().createTexture({
          size: [model.width, model.height, model.depth],
          format: model.format,
          usage: model.usage
        });
      }
    };

    publicAPI.createView = function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      // if options is missing values try to add them in
      if (!options.dimension) {
        options.dimension = model.depth === 1 ? '2d' : '3d';
      }

      var view = vtkWebGPUTextureView$1.newInstance();
      view.create(publicAPI, options);
      return view;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$y = {
    device: null,
    handle: null,
    buffer: null,
    ready: false
  }; // ----------------------------------------------------------------------------

  function extend$A(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$y, initialValues); // Object methods

    macro.obj(publicAPI, model);
    macro.get(publicAPI, model, ['handle', 'ready', 'width', 'height', 'depth', 'format', 'usage']);
    macro.setGet(publicAPI, model, ['device']);
    vtkWebGPUTexture(publicAPI, model);
  } // ----------------------------------------------------------------------------

  macro.newInstance(extend$A); // ----------------------------------------------------------------------------

  // vtkWebGPUPixelSpaceCallbackMapper methods
  // ----------------------------------------------------------------------------

  function vtkWebGPUPixelSpaceCallbackMapper(publicAPI, model) {
    model.classHierarchy.push('vtkWebGPUPixelSpaceCallbackMapper');

    publicAPI.opaquePass = function (prepass, renderPass) {
      model.WebGPURenderer = publicAPI.getFirstAncestorOfType('vtkWebGPURenderer');
      model.WebGPURenderWindow = model.WebGPURenderer.getParent();
      var aspectRatio = model.WebGPURenderer.getAspectRatio();
      var camera = model.WebGPURenderer ? model.WebGPURenderer.getRenderable().getActiveCamera() : null;
      var tsize = model.WebGPURenderer.getTiledSizeAndOrigin();
      var texels = null;

      if (model.renderable.getUseZValues()) ;

      model.renderable.invokeCallback(model.renderable.getInputData(), camera, aspectRatio, tsize, texels);
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$x = {}; // ----------------------------------------------------------------------------

  function extend$z(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$x, initialValues); // Inheritance

    vtkViewNode$1.extend(publicAPI, model, initialValues); // Object methods

    vtkWebGPUPixelSpaceCallbackMapper(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$x = macro.newInstance(extend$z, 'vtkWebGPUPixelSpaceCallbackMapper'); // ----------------------------------------------------------------------------

  registerOverride('vtkPixelSpaceCallbackMapper', newInstance$x);

  function noop() { }
  function add_location(element, file, line, column, char) {
      element.__svelte_meta = {
          loc: { file, line, column, char }
      };
  }
  function run(fn) {
      return fn();
  }
  function blank_object() {
      return Object.create(null);
  }
  function run_all(fns) {
      fns.forEach(run);
  }
  function is_function(thing) {
      return typeof thing === 'function';
  }
  function safe_not_equal(a, b) {
      return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
  }
  function is_empty(obj) {
      return Object.keys(obj).length === 0;
  }
  function append(target, node) {
      target.appendChild(node);
  }
  function insert(target, node, anchor) {
      target.insertBefore(node, anchor || null);
  }
  function detach(node) {
      node.parentNode.removeChild(node);
  }
  function destroy_each(iterations, detaching) {
      for (let i = 0; i < iterations.length; i += 1) {
          if (iterations[i])
              iterations[i].d(detaching);
      }
  }
  function element(name) {
      return document.createElement(name);
  }
  function text(data) {
      return document.createTextNode(data);
  }
  function space() {
      return text(' ');
  }
  function empty() {
      return text('');
  }
  function listen(node, event, handler, options) {
      node.addEventListener(event, handler, options);
      return () => node.removeEventListener(event, handler, options);
  }
  function attr(node, attribute, value) {
      if (value == null)
          node.removeAttribute(attribute);
      else if (node.getAttribute(attribute) !== value)
          node.setAttribute(attribute, value);
  }
  function children(element) {
      return Array.from(element.childNodes);
  }
  function set_style(node, key, value, important) {
      node.style.setProperty(key, value, important ? 'important' : '');
  }
  function custom_event(type, detail, bubbles = false) {
      const e = document.createEvent('CustomEvent');
      e.initCustomEvent(type, bubbles, false, detail);
      return e;
  }

  let current_component;
  function set_current_component(component) {
      current_component = component;
  }
  function get_current_component() {
      if (!current_component)
          throw new Error('Function called outside component initialization');
      return current_component;
  }
  function onMount(fn) {
      get_current_component().$$.on_mount.push(fn);
  }
  // TODO figure out if we still want to support
  // shorthand events, or if we want to implement
  // a real bubbling mechanism
  function bubble(component, event) {
      const callbacks = component.$$.callbacks[event.type];
      if (callbacks) {
          // @ts-ignore
          callbacks.slice().forEach(fn => fn.call(this, event));
      }
  }

  const dirty_components = [];
  const binding_callbacks = [];
  const render_callbacks = [];
  const flush_callbacks = [];
  const resolved_promise = Promise.resolve();
  let update_scheduled = false;
  function schedule_update() {
      if (!update_scheduled) {
          update_scheduled = true;
          resolved_promise.then(flush);
      }
  }
  function add_render_callback(fn) {
      render_callbacks.push(fn);
  }
  // flush() calls callbacks in this order:
  // 1. All beforeUpdate callbacks, in order: parents before children
  // 2. All bind:this callbacks, in reverse order: children before parents.
  // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
  //    for afterUpdates called during the initial onMount, which are called in
  //    reverse order: children before parents.
  // Since callbacks might update component values, which could trigger another
  // call to flush(), the following steps guard against this:
  // 1. During beforeUpdate, any updated components will be added to the
  //    dirty_components array and will cause a reentrant call to flush(). Because
  //    the flush index is kept outside the function, the reentrant call will pick
  //    up where the earlier call left off and go through all dirty components. The
  //    current_component value is saved and restored so that the reentrant call will
  //    not interfere with the "parent" flush() call.
  // 2. bind:this callbacks cannot trigger new flush() calls.
  // 3. During afterUpdate, any updated components will NOT have their afterUpdate
  //    callback called a second time; the seen_callbacks set, outside the flush()
  //    function, guarantees this behavior.
  const seen_callbacks = new Set();
  let flushidx = 0; // Do *not* move this inside the flush() function
  function flush() {
      const saved_component = current_component;
      do {
          // first, call beforeUpdate functions
          // and update components
          while (flushidx < dirty_components.length) {
              const component = dirty_components[flushidx];
              flushidx++;
              set_current_component(component);
              update(component.$$);
          }
          set_current_component(null);
          dirty_components.length = 0;
          flushidx = 0;
          while (binding_callbacks.length)
              binding_callbacks.pop()();
          // then, once components are updated, call
          // afterUpdate functions. This may cause
          // subsequent updates...
          for (let i = 0; i < render_callbacks.length; i += 1) {
              const callback = render_callbacks[i];
              if (!seen_callbacks.has(callback)) {
                  // ...so guard against infinite loops
                  seen_callbacks.add(callback);
                  callback();
              }
          }
          render_callbacks.length = 0;
      } while (dirty_components.length);
      while (flush_callbacks.length) {
          flush_callbacks.pop()();
      }
      update_scheduled = false;
      seen_callbacks.clear();
      set_current_component(saved_component);
  }
  function update($$) {
      if ($$.fragment !== null) {
          $$.update();
          run_all($$.before_update);
          const dirty = $$.dirty;
          $$.dirty = [-1];
          $$.fragment && $$.fragment.p($$.ctx, dirty);
          $$.after_update.forEach(add_render_callback);
      }
  }
  const outroing = new Set();
  let outros;
  function group_outros() {
      outros = {
          r: 0,
          c: [],
          p: outros // parent group
      };
  }
  function check_outros() {
      if (!outros.r) {
          run_all(outros.c);
      }
      outros = outros.p;
  }
  function transition_in(block, local) {
      if (block && block.i) {
          outroing.delete(block);
          block.i(local);
      }
  }
  function transition_out(block, local, detach, callback) {
      if (block && block.o) {
          if (outroing.has(block))
              return;
          outroing.add(block);
          outros.c.push(() => {
              outroing.delete(block);
              if (callback) {
                  if (detach)
                      block.d(1);
                  callback();
              }
          });
          block.o(local);
      }
  }
  function create_component(block) {
      block && block.c();
  }
  function mount_component(component, target, anchor, customElement) {
      const { fragment, on_mount, on_destroy, after_update } = component.$$;
      fragment && fragment.m(target, anchor);
      if (!customElement) {
          // onMount happens before the initial afterUpdate
          add_render_callback(() => {
              const new_on_destroy = on_mount.map(run).filter(is_function);
              if (on_destroy) {
                  on_destroy.push(...new_on_destroy);
              }
              else {
                  // Edge case - component was destroyed immediately,
                  // most likely as a result of a binding initialising
                  run_all(new_on_destroy);
              }
              component.$$.on_mount = [];
          });
      }
      after_update.forEach(add_render_callback);
  }
  function destroy_component(component, detaching) {
      const $$ = component.$$;
      if ($$.fragment !== null) {
          run_all($$.on_destroy);
          $$.fragment && $$.fragment.d(detaching);
          // TODO null out other refs, including component.$$ (but need to
          // preserve final state?)
          $$.on_destroy = $$.fragment = null;
          $$.ctx = [];
      }
  }
  function make_dirty(component, i) {
      if (component.$$.dirty[0] === -1) {
          dirty_components.push(component);
          schedule_update();
          component.$$.dirty.fill(0);
      }
      component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
  }
  function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
      const parent_component = current_component;
      set_current_component(component);
      const $$ = component.$$ = {
          fragment: null,
          ctx: null,
          // state
          props,
          update: noop,
          not_equal,
          bound: blank_object(),
          // lifecycle
          on_mount: [],
          on_destroy: [],
          on_disconnect: [],
          before_update: [],
          after_update: [],
          context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
          // everything else
          callbacks: blank_object(),
          dirty,
          skip_bound: false,
          root: options.target || parent_component.$$.root
      };
      append_styles && append_styles($$.root);
      let ready = false;
      $$.ctx = instance
          ? instance(component, options.props || {}, (i, ret, ...rest) => {
              const value = rest.length ? rest[0] : ret;
              if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                  if (!$$.skip_bound && $$.bound[i])
                      $$.bound[i](value);
                  if (ready)
                      make_dirty(component, i);
              }
              return ret;
          })
          : [];
      $$.update();
      ready = true;
      run_all($$.before_update);
      // `false` as a special case of no DOM component
      $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
      if (options.target) {
          if (options.hydrate) {
              const nodes = children(options.target);
              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
              $$.fragment && $$.fragment.l(nodes);
              nodes.forEach(detach);
          }
          else {
              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
              $$.fragment && $$.fragment.c();
          }
          if (options.intro)
              transition_in(component.$$.fragment);
          mount_component(component, options.target, options.anchor, options.customElement);
          flush();
      }
      set_current_component(parent_component);
  }
  /**
   * Base class for Svelte components. Used when dev=false.
   */
  class SvelteComponent {
      $destroy() {
          destroy_component(this, 1);
          this.$destroy = noop;
      }
      $on(type, callback) {
          const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
          callbacks.push(callback);
          return () => {
              const index = callbacks.indexOf(callback);
              if (index !== -1)
                  callbacks.splice(index, 1);
          };
      }
      $set($$props) {
          if (this.$$set && !is_empty($$props)) {
              this.$$.skip_bound = true;
              this.$$set($$props);
              this.$$.skip_bound = false;
          }
      }
  }

  function dispatch_dev(type, detail) {
      document.dispatchEvent(custom_event(type, Object.assign({ version: '3.44.3' }, detail), true));
  }
  function append_dev(target, node) {
      dispatch_dev('SvelteDOMInsert', { target, node });
      append(target, node);
  }
  function insert_dev(target, node, anchor) {
      dispatch_dev('SvelteDOMInsert', { target, node, anchor });
      insert(target, node, anchor);
  }
  function detach_dev(node) {
      dispatch_dev('SvelteDOMRemove', { node });
      detach(node);
  }
  function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
      const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
      if (has_prevent_default)
          modifiers.push('preventDefault');
      if (has_stop_propagation)
          modifiers.push('stopPropagation');
      dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
      const dispose = listen(node, event, handler, options);
      return () => {
          dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
          dispose();
      };
  }
  function attr_dev(node, attribute, value) {
      attr(node, attribute, value);
      if (value == null)
          dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
      else
          dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
  }
  function validate_each_argument(arg) {
      if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
          let msg = '{#each} only iterates over array-like objects.';
          if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
              msg += ' You can use a spread to convert this iterable into an array.';
          }
          throw new Error(msg);
      }
  }
  function validate_slots(name, slot, keys) {
      for (const slot_key of Object.keys(slot)) {
          if (!~keys.indexOf(slot_key)) {
              console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
          }
      }
  }
  /**
   * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
   */
  class SvelteComponentDev extends SvelteComponent {
      constructor(options) {
          if (!options || (!options.target && !options.$$inline)) {
              throw new Error("'target' is a required option");
          }
          super();
      }
      $destroy() {
          super.$destroy();
          this.$destroy = () => {
              console.warn('Component was already destroyed'); // eslint-disable-line no-console
          };
      }
      $capture_state() { }
      $inject_state() { }
  }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var runtime_1 = createCommonjsModule(function (module) {
  var runtime = (function (exports) {

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined$1; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }
    try {
      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
      define({}, "");
    } catch (err) {
      define = function(obj, key, value) {
        return obj[key] = value;
      };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);

      // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.
      generator._invoke = makeInvokeMethod(innerFn, self, context);

      return generator;
    }
    exports.wrap = wrap;

    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
      try {
        return { type: "normal", arg: fn.call(obj, arg) };
      } catch (err) {
        return { type: "throw", arg: err };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";

    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};

    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}

    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function () {
      return this;
    });

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype &&
        NativeIteratorPrototype !== Op &&
        hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype =
      Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = GeneratorFunctionPrototype;
    define(Gp, "constructor", GeneratorFunctionPrototype);
    define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
    GeneratorFunction.displayName = define(
      GeneratorFunctionPrototype,
      toStringTagSymbol,
      "GeneratorFunction"
    );

    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function(method) {
        define(prototype, method, function(arg) {
          return this._invoke(method, arg);
        });
      });
    }

    exports.isGeneratorFunction = function(genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor
        ? ctor === GeneratorFunction ||
          // For the native GeneratorFunction constructor, the best we can
          // do is to check its .name property.
          (ctor.displayName || ctor.name) === "GeneratorFunction"
        : false;
    };

    exports.mark = function(genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    exports.awrap = function(arg) {
      return { __await: arg };
    };

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
          if (value &&
              typeof value === "object" &&
              hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function(value) {
              invoke("next", value, resolve, reject);
            }, function(err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return PromiseImpl.resolve(value).then(function(unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function(error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function(resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise =
          // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(
            callInvokeWithMethodAndArg,
            // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg
          ) : callInvokeWithMethodAndArg();
      }

      // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).
      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);
    define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
      return this;
    });
    exports.AsyncIterator = AsyncIterator;

    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0) PromiseImpl = Promise;

      var iter = new AsyncIterator(
        wrap(innerFn, outerFn, self, tryLocsList),
        PromiseImpl
      );

      return exports.isGeneratorFunction(outerFn)
        ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
          });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;

      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;

          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);

          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;

          var record = tryCatch(innerFn, self, context);
          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done
              ? GenStateCompleted
              : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };

          } else if (record.type === "throw") {
            state = GenStateCompleted;
            // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];
      if (method === undefined$1) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
          // Note: ["return"] must be used for ES3 parsing compatibility.
          if (delegate.iterator["return"]) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError(
            "The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (! info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value;

        // Resume execution at the desired location (see delegateYield).
        context.next = delegate.nextLoc;

        // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.
        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined$1;
        }

      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      }

      // The delegate iterator is finished, so forget it and continue with
      // the outer generator.
      context.delegate = null;
      return ContinueSentinel;
    }

    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);

    define(Gp, toStringTagSymbol, "Generator");

    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    define(Gp, iteratorSymbol, function() {
      return this;
    });

    define(Gp, "toString", function() {
      return "[object Generator]";
    });

    function pushTryEntry(locs) {
      var entry = { tryLoc: locs[0] };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{ tryLoc: "root" }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function(object) {
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();

      // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
      return function next() {
        while (keys.length) {
          var key = keys.pop();
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1, next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined$1;
            next.done = true;

            return next;
          };

          return next.next = next;
        }
      }

      // Return an iterator with no values.
      return { next: doneResult };
    }
    exports.values = values;

    function doneResult() {
      return { value: undefined$1, done: true };
    }

    Context.prototype = {
      constructor: Context,

      reset: function(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.
        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;

        this.method = "next";
        this.arg = undefined$1;

        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" &&
                hasOwn.call(this, name) &&
                !isNaN(+name.slice(1))) {
              this[name] = undefined$1;
            }
          }
        }
      },

      stop: function() {
        this.done = true;

        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },

      dispatchException: function(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined$1;
          }

          return !! caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }

            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },

      abrupt: function(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev &&
              hasOwn.call(entry, "finallyLoc") &&
              this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry &&
            (type === "break" ||
             type === "continue") &&
            finallyEntry.tryLoc <= arg &&
            arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },

      complete: function(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" ||
            record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },

      finish: function(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },

      "catch": function(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }

        // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.
        throw new Error("illegal catch attempt");
      },

      delegateYield: function(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined$1;
        }

        return ContinueSentinel;
      }
    };

    // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.
    return exports;

  }(
    // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
    module.exports 
  ));

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, in modern engines
    // we can explicitly access globalThis. In older engines we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    if (typeof globalThis === "object") {
      globalThis.regeneratorRuntime = runtime;
    } else {
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  }
  });

  var regenerator = runtime_1;

  var DEFAULT_VIEW_API = navigator.gpu ? 'WebGPU' : 'WebGL';
  var VIEW_CONSTRUCTORS = Object.create(null); // ----------------------------------------------------------------------------
  // static methods
  // ----------------------------------------------------------------------------

  function registerViewConstructor(name, constructor) {
    VIEW_CONSTRUCTORS[name] = constructor;
  }
  function listViewAPIs() {
    return Object.keys(VIEW_CONSTRUCTORS);
  }
  function newAPISpecificView(name) {
    var initialValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return VIEW_CONSTRUCTORS[name] && VIEW_CONSTRUCTORS[name](initialValues);
  } // ----------------------------------------------------------------------------
  // vtkRenderWindow methods
  // ----------------------------------------------------------------------------

  function vtkRenderWindow$1(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkRenderWindow'); // Add renderer

    publicAPI.addRenderer = function (renderer) {
      if (publicAPI.hasRenderer(renderer)) {
        return;
      }

      renderer.setRenderWindow(publicAPI);
      model.renderers.push(renderer); // for (this->Renderers->InitTraversal(rsit);
      //      (aren = this->Renderers->GetNextRenderer(rsit)); )
      //   {
      //   aren->SetAllocatedRenderTime
      //     (1.0/(this->DesiredUpdateRate*this->Renderers->GetNumberOfItems()));
      //   }

      publicAPI.modified();
    }; // Remove renderer


    publicAPI.removeRenderer = function (renderer) {
      model.renderers = model.renderers.filter(function (r) {
        return r !== renderer;
      });
      publicAPI.modified();
    };

    publicAPI.hasRenderer = function (ren) {
      return model.renderers.indexOf(ren) !== -1;
    }; // get an API specific view of this data


    publicAPI.newAPISpecificView = function (name) {
      var initialValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return newAPISpecificView(name || model.defaultViewAPI, initialValues);
    }; // Add renderer


    publicAPI.addView = function (view) {
      if (publicAPI.hasView(view)) {
        return;
      }

      view.setRenderable(publicAPI);
      model.views.push(view);
      publicAPI.modified();
    }; // Remove renderer


    publicAPI.removeView = function (view) {
      model.views = model.views.filter(function (r) {
        return r !== view;
      });
      publicAPI.modified();
    };

    publicAPI.hasView = function (view) {
      return model.views.indexOf(view) !== -1;
    }; // handle any pre render initializations


    publicAPI.preRender = function () {
      model.renderers.forEach(function (ren) {
        // make sure we have a camera
        if (!ren.isActiveCameraCreated()) {
          ren.resetCamera();
        }
      });
    };

    publicAPI.render = function () {
      publicAPI.preRender();

      if (model.interactor) {
        model.interactor.render();
      } else {
        model.views.forEach(function (view) {
          return view.traverseAllPasses();
        });
      }
    };

    publicAPI.getStatistics = function () {
      var results = {
        propCount: 0,
        invisiblePropCount: 0
      };
      model.renderers.forEach(function (ren) {
        var props = ren.getViewProps();
        props.forEach(function (prop) {
          if (prop.getVisibility()) {
            results.propCount += 1;
            var mpr = prop.getMapper && prop.getMapper();

            if (mpr && mpr.getPrimitiveCount) {
              var pcount = mpr.getPrimitiveCount();
              Object.keys(pcount).forEach(function (keyName) {
                if (!results[keyName]) {
                  results[keyName] = 0;
                }

                results[keyName] += pcount[keyName];
              });
            }
          } else {
            results.invisiblePropCount += 1;
          }
        });
      });
      results.str = Object.keys(results).map(function (keyName) {
        return "".concat(keyName, ": ").concat(results[keyName]);
      }).join('\n');
      return results;
    };

    publicAPI.captureImages = function () {
      var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'image/png';
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      macro.setImmediate(publicAPI.render);
      return model.views.map(function (view) {
        return view.captureNextImage ? view.captureNextImage(format, opts) : undefined;
      }).filter(function (i) {
        return !!i;
      });
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$w = {
    defaultViewAPI: DEFAULT_VIEW_API,
    renderers: [],
    views: [],
    interactor: null,
    neverRendered: true,
    numberOfLayers: 1
  }; // ----------------------------------------------------------------------------

  function extend$y(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$w, initialValues); // Build VTK API

    macro.obj(publicAPI, model);
    macro.setGet(publicAPI, model, ['interactor', 'numberOfLayers', 'views', 'defaultViewAPI']);
    macro.get(publicAPI, model, ['neverRendered']);
    macro.getArray(publicAPI, model, ['renderers']);
    macro.event(publicAPI, model, 'completion'); // Object methods

    vtkRenderWindow$1(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$w = macro.newInstance(extend$y, 'vtkRenderWindow'); // ----------------------------------------------------------------------------

  var vtkRenderWindow$1$1 = {
    newInstance: newInstance$w,
    extend: extend$y,
    registerViewConstructor: registerViewConstructor,
    listViewAPIs: listViewAPIs,
    newAPISpecificView: newAPISpecificView
  };

  // vtkFramebuffer methods
  // ----------------------------------------------------------------------------

  function vtkFramebuffer(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkFramebuffer');

    publicAPI.getBothMode = function () {
      return model.context.FRAMEBUFFER;
    }; // publicAPI.getDrawMode = () => model.context.DRAW_FRAMEBUFFER;
    // publicAPI.getReadMode = () => model.context.READ_FRAMEBUFFER;


    publicAPI.saveCurrentBindingsAndBuffers = function (modeIn) {
      var mode = typeof modeIn !== 'undefined' ? modeIn : publicAPI.getBothMode();
      publicAPI.saveCurrentBindings(mode);
      publicAPI.saveCurrentBuffers(mode);
    };

    publicAPI.saveCurrentBindings = function (modeIn) {
      var gl = model.context;
      model.previousDrawBinding = gl.getParameter(model.context.FRAMEBUFFER_BINDING);
      model.previousActiveFramebuffer = model.openGLRenderWindow.getActiveFramebuffer();
    };

    publicAPI.saveCurrentBuffers = function (modeIn) {// noop on webgl 1
    };

    publicAPI.restorePreviousBindingsAndBuffers = function (modeIn) {
      var mode = typeof modeIn !== 'undefined' ? modeIn : publicAPI.getBothMode();
      publicAPI.restorePreviousBindings(mode);
      publicAPI.restorePreviousBuffers(mode);
    };

    publicAPI.restorePreviousBindings = function (modeIn) {
      var gl = model.context;
      gl.bindFramebuffer(gl.FRAMEBUFFER, model.previousDrawBinding);
      model.openGLRenderWindow.setActiveFramebuffer(model.previousActiveFramebuffer);
    };

    publicAPI.restorePreviousBuffers = function (modeIn) {// currently a noop on webgl1
    };

    publicAPI.bind = function () {
      model.context.bindFramebuffer(model.context.FRAMEBUFFER, model.glFramebuffer);

      if (model.colorTexture) {
        model.colorTexture.bind();
      }

      model.openGLRenderWindow.setActiveFramebuffer(publicAPI);
    };

    publicAPI.create = function (width, height) {
      model.glFramebuffer = model.context.createFramebuffer();
      model.glFramebuffer.width = width;
      model.glFramebuffer.height = height;
    };

    publicAPI.setColorBuffer = function (texture) {
      var attachment = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var gl = model.context;
      var glAttachment = gl.COLOR_ATTACHMENT0;

      if (attachment > 0) {
        if (model.openGLRenderWindow.getWebgl2()) {
          glAttachment += attachment;
        } else {
          vtkErrorMacro$m('Using multiple framebuffer attachments requires WebGL 2');
          return;
        }
      }

      model.colorTexture = texture;
      gl.framebufferTexture2D(gl.FRAMEBUFFER, glAttachment, gl.TEXTURE_2D, texture.getHandle(), 0);
    };

    publicAPI.removeColorBuffer = function () {
      var attachment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var gl = model.context;
      var glAttachment = gl.COLOR_ATTACHMENT0;

      if (attachment > 0) {
        if (model.openGLRenderWindow.getWebgl2()) {
          glAttachment += attachment;
        } else {
          vtkErrorMacro$m('Using multiple framebuffer attachments requires WebGL 2');
          return;
        }
      }

      gl.framebufferTexture2D(gl.FRAMEBUFFER, glAttachment, gl.TEXTURE_2D, null, 0);
    };

    publicAPI.setDepthBuffer = function (texture) {
      if (model.openGLRenderWindow.getWebgl2()) {
        var gl = model.context;
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, texture.getHandle(), 0);
      } else {
        vtkErrorMacro$m('Attaching depth buffer textures to fbo requires WebGL 2');
      }
    };

    publicAPI.removeDepthBuffer = function () {
      if (model.openGLRenderWindow.getWebgl2()) {
        var gl = model.context;
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, null, 0);
      } else {
        vtkErrorMacro$m('Attaching depth buffer textures to framebuffers requires WebGL 2');
      }
    };

    publicAPI.getGLFramebuffer = function () {
      return model.glFramebuffer;
    };

    publicAPI.setOpenGLRenderWindow = function (rw) {
      if (model.openGLRenderWindow === rw) {
        return;
      }

      publicAPI.releaseGraphicsResources();
      model.openGLRenderWindow = rw;
      model.context = null;

      if (rw) {
        model.context = model.openGLRenderWindow.getContext();
      }
    };

    publicAPI.releaseGraphicsResources = function () {
      if (model.glFramebuffer) {
        model.context.deleteFramebuffer(model.glFramebuffer);
      }

      if (model.colorTexture) {
        model.colorTexture.releaseGraphicsResources();
      }
    };

    publicAPI.getSize = function () {
      var size = [0, 0];

      if (model.glFramebuffer !== null) {
        size[0] = model.glFramebuffer.width;
        size[1] = model.glFramebuffer.height;
      }

      return size;
    };

    publicAPI.populateFramebuffer = function () {
      publicAPI.bind();
      var gl = model.context;
      var texture = vtkOpenGLTexture$1.newInstance();
      texture.setOpenGLRenderWindow(model.openGLRenderWindow);
      texture.setMinificationFilter(Filter$2.LINEAR);
      texture.setMagnificationFilter(Filter$2.LINEAR);
      texture.create2DFromRaw(model.glFramebuffer.width, model.glFramebuffer.height, 4, VtkDataTypes$3.UNSIGNED_CHAR, null);
      publicAPI.setColorBuffer(texture); // for now do not count on having a depth buffer texture
      // as they are not standard webgl 1

      model.depthTexture = gl.createRenderbuffer();
      gl.bindRenderbuffer(gl.RENDERBUFFER, model.depthTexture);
      gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, model.glFramebuffer.width, model.glFramebuffer.height);
      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, model.depthTexture);
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$v = {
    openGLRenderWindow: null,
    glFramebuffer: null,
    colorTexture: null,
    depthTexture: null,
    previousDrawBinding: 0,
    previousReadBinding: 0,
    previousDrawBuffer: 0,
    previousReadBuffer: 0,
    previousActiveFramebuffer: null
  }; // ----------------------------------------------------------------------------

  function extend$x(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$v, initialValues); // Build VTK API

    obj(publicAPI, model);
    setGet(publicAPI, model, ['colorTexture']); // For more macro methods, see "Sources/macros.js"
    // Object specific methods

    vtkFramebuffer(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$v = newInstance$1j(extend$x, 'vtkFramebuffer'); // ----------------------------------------------------------------------------

  var vtkOpenGLFramebuffer = {
    newInstance: newInstance$v,
    extend: extend$x
  };

  function vtkRenderPass(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkRenderPass');

    publicAPI.getOperation = function () {
      return model.currentOperation;
    };

    publicAPI.setCurrentOperation = function (val) {
      model.currentOperation = val;
      model.currentTraverseOperation = "traverse".concat(macro.capitalize(model.currentOperation));
    };

    publicAPI.getTraverseOperation = function () {
      return model.currentTraverseOperation;
    }; // by default this class will traverse all of its
    // preDelegateOperations, then call its delegate render passes
    // the traverse all of its postDelegateOperations
    // any of those three arrays can be empty


    publicAPI.traverse = function (viewNode) {
      var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      if (model.deleted) {
        return;
      } // we just render our delegates in order


      model.currentParent = parent;
      model.preDelegateOperations.forEach(function (val) {
        publicAPI.setCurrentOperation(val);
        viewNode.traverse(publicAPI);
      });
      model.delegates.forEach(function (val) {
        val.traverse(viewNode, publicAPI);
      });
      model.postDelegateOperations.forEach(function (val) {
        publicAPI.setCurrentOperation(val);
        viewNode.traverse(publicAPI);
      });
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$u = {
    delegates: [],
    currentOperation: null,
    preDelegateOperations: [],
    postDelegateOperations: [],
    currentParent: null
  }; // ----------------------------------------------------------------------------

  function extend$w(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$u, initialValues); // Build VTK API

    macro.obj(publicAPI, model);
    macro.get(publicAPI, model, ['currentOperation']);
    macro.setGet(publicAPI, model, ['delegates', 'currentParent', 'preDelegateOperations', 'postDelegateOperations']); // Object methods

    vtkRenderPass(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$u = macro.newInstance(extend$w, 'vtkRenderPass'); // ----------------------------------------------------------------------------

  var vtkRenderPass$1 = {
    newInstance: newInstance$u,
    extend: extend$w
  };

  function vtkForwardPass(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkForwardPass'); // this pass implements a forward rendering pipeline
    // if both volumes and opaque geometry are present
    // it will mix the two together by capturing a zbuffer
    // first

    publicAPI.traverse = function (viewNode) {
      var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      if (model.deleted) {
        return;
      } // we just render our delegates in order


      model.currentParent = parent; // build

      publicAPI.setCurrentOperation('buildPass');
      viewNode.traverse(publicAPI);
      var numlayers = viewNode.getRenderable().getNumberOfLayers(); // iterate over renderers

      var renderers = viewNode.getChildren();

      for (var i = 0; i < numlayers; i++) {
        for (var index = 0; index < renderers.length; index++) {
          var renNode = renderers[index];
          var ren = viewNode.getRenderable().getRenderers()[index];

          if (ren.getDraw() && ren.getLayer() === i) {
            // check for both opaque and volume actors
            model.opaqueActorCount = 0;
            model.translucentActorCount = 0;
            model.volumeCount = 0;
            model.overlayActorCount = 0;
            publicAPI.setCurrentOperation('queryPass');
            renNode.traverse(publicAPI); // do we need to capture a zbuffer?

            if (model.opaqueActorCount > 0 && model.volumeCount > 0 || model.depthRequested) {
              var size = viewNode.getFramebufferSize(); // make sure the framebuffer is setup

              if (model.framebuffer === null) {
                model.framebuffer = vtkOpenGLFramebuffer.newInstance();
              }

              model.framebuffer.setOpenGLRenderWindow(viewNode);
              model.framebuffer.saveCurrentBindingsAndBuffers();
              var fbSize = model.framebuffer.getSize();

              if (fbSize === null || fbSize[0] !== size[0] || fbSize[1] !== size[1]) {
                model.framebuffer.create(size[0], size[1]);
                model.framebuffer.populateFramebuffer();
              }

              model.framebuffer.bind();
              publicAPI.setCurrentOperation('opaqueZBufferPass');
              renNode.traverse(publicAPI);
              model.framebuffer.restorePreviousBindingsAndBuffers(); // reset now that we have done it

              model.depthRequested = false;
            }

            publicAPI.setCurrentOperation('cameraPass');
            renNode.traverse(publicAPI);

            if (model.opaqueActorCount > 0) {
              publicAPI.setCurrentOperation('opaquePass');
              renNode.traverse(publicAPI);
            }

            if (model.translucentActorCount > 0) {
              publicAPI.setCurrentOperation('translucentPass');
              renNode.traverse(publicAPI);
            }

            if (model.volumeCount > 0) {
              publicAPI.setCurrentOperation('volumePass');
              renNode.traverse(publicAPI);
            }

            if (model.overlayActorCount > 0) {
              publicAPI.setCurrentOperation('overlayPass');
              renNode.traverse(publicAPI);
            }
          }
        }
      }
    };

    publicAPI.getZBufferTexture = function () {
      if (model.framebuffer) {
        return model.framebuffer.getColorTexture();
      }

      return null;
    };

    publicAPI.requestDepth = function () {
      model.depthRequested = true;
    };

    publicAPI.incrementOpaqueActorCount = function () {
      return model.opaqueActorCount++;
    };

    publicAPI.incrementTranslucentActorCount = function () {
      return model.translucentActorCount++;
    };

    publicAPI.incrementVolumeCount = function () {
      return model.volumeCount++;
    };

    publicAPI.incrementOverlayActorCount = function () {
      return model.overlayActorCount++;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$t = {
    opaqueActorCount: 0,
    translucentActorCount: 0,
    volumeCount: 0,
    overlayActorCount: 0,
    framebuffer: null,
    depthRequested: false
  }; // ----------------------------------------------------------------------------

  function extend$v(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$t, initialValues); // Build VTK API

    vtkRenderPass$1.extend(publicAPI, model, initialValues);
    macro.get(publicAPI, model, ['framebuffer']); // Object methods

    vtkForwardPass(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$t = macro.newInstance(extend$v, 'vtkForwardPass'); // ----------------------------------------------------------------------------

  var vtkForwardPass$1 = {
    newInstance: newInstance$t,
    extend: extend$v
  };

  var PassTypes$1 = {
    MIN_KNOWN_PASS: 0,
    ACTOR_PASS: 0,
    COMPOSITE_INDEX_PASS: 1,
    ID_LOW24: 2,
    MAX_KNOWN_PASS: 2
  };
  var Constants$3 = {
    PassTypes: PassTypes$1
  };

  var FieldAssociations$1 = vtkDataSet$1.FieldAssociations; // ----------------------------------------------------------------------------
  // vtkHardwareSelector methods
  // ----------------------------------------------------------------------------

  function vtkHardwareSelector$1(publicAPI, model) {
    model.classHierarchy.push('vtkHardwareSelector'); // get the source data that is used for generating a selection. This
    // must be called at least once before calling generateSelection. In
    // raster based backends this method will capture the buffers. You can
    // call this once and then make multiple calls to generateSelection.

    publicAPI.getSourceDataAsync = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(renderer, fx1, fy1, fx2, fy2) {
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x, _x2, _x3, _x4, _x5) {
        return _ref.apply(this, arguments);
      };
    }();

    publicAPI.selectAsync = /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(renderer, fx1, fy1, fx2, fy2) {
        var srcData;
        return regenerator.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return publicAPI.getSourceDataAsync(renderer, fx1, fy1, fx2, fy2);

              case 2:
                srcData = _context2.sent;

                if (!srcData) {
                  _context2.next = 5;
                  break;
                }

                return _context2.abrupt("return", srcData.generateSelection(fx1, fy1, fx2, fy2));

              case 5:
                return _context2.abrupt("return", []);

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x6, _x7, _x8, _x9, _x10) {
        return _ref2.apply(this, arguments);
      };
    }();
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$s = {
    fieldAssociation: FieldAssociations$1.FIELD_ASSOCIATION_CELLS,
    captureZValues: false
  }; // ----------------------------------------------------------------------------

  function extend$u(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$s, initialValues); // Inheritance

    macro.obj(publicAPI, model);
    macro.setGet(publicAPI, model, ['fieldAssociation', 'captureZValues']); // Object methods

    vtkHardwareSelector$1(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$s = macro.newInstance(extend$u, 'vtkHardwareSelector'); // ----------------------------------------------------------------------------

  var vtkHardwareSelector$1$1 = {
    newInstance: newInstance$s,
    extend: extend$u
  };

  /**
   * The (primary) property that describes the content of a selection
   * node's data. Other auxiliary description properties follow.
   * GLOBALIDS means that the selection list contains values from the
   * vtkDataSetAttribute array of the same name.
   * PEDIGREEIDS means that the selection list contains values from the
   * vtkDataSetAttribute array of the same name.
   * VALUES means the the selection list contains values from an
   * arbitrary attribute array (ignores any globalids attribute)
   * INDICES means that the selection list contains indexes into the
   * cell or point arrays.
   * FRUSTUM means the set of points and cells inside a frustum
   * LOCATIONS means the set of points and cells near a set of positions
   * THRESHOLDS means the points and cells with values within a set of ranges
   * getContentType() returns -1 if the content type is not set.
   */
  // Specify how data arrays can be used by data objects
  var SelectionContent$1 = {
    GLOBALIDS: 0,
    PEDIGREEIDS: 1,
    VALUES: 2,
    INDICES: 3,
    FRUSTUM: 4,
    LOCATIONS: 5,
    THRESHOLDS: 6,
    BLOCKS: 7,
    QUERY: 8
  };
  var SelectionField$1 = {
    CELL: 0,
    POINT: 1,
    FIELD: 2,
    VERTEX: 3,
    EDGE: 4,
    ROW: 5
  };
  var Constants$2 = {
    SelectionContent: SelectionContent$1,
    SelectionField: SelectionField$1
  };

  function ownKeys$9(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$9(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$9(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$9(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  // vtkSelectionNode methods
  // ----------------------------------------------------------------------------

  function vtkSelectionNode(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkSelectionNode');

    publicAPI.getBounds = function () {
      return model.points.getBounds();
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$r = {
    contentType: -1,
    fieldType: -1,
    properties: null,
    selectionList: []
  }; // ----------------------------------------------------------------------------

  function extend$t(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$r, initialValues); // Inheritance

    macro.obj(publicAPI, model);
    model.properties = {};
    macro.setGet(publicAPI, model, ['contentType', 'fieldType', 'properties', 'selectionList']); // Object specific methods

    vtkSelectionNode(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$r = macro.newInstance(extend$t, 'vtkSelectionNode'); // ----------------------------------------------------------------------------

  var vtkSelectionNode$1 = _objectSpread$9({
    newInstance: newInstance$r,
    extend: extend$t
  }, Constants$2);

  function ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$8(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$8(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  var PassTypes = Constants$3.PassTypes;
  var SelectionContent = vtkSelectionNode$1.SelectionContent,
      SelectionField = vtkSelectionNode$1.SelectionField;
  var FieldAssociations = vtkDataSet$1.FieldAssociations;
  var vtkErrorMacro$7 = macro.vtkErrorMacro;
  var idOffset = 1;

  function getInfoHash(info) {
    return "".concat(info.propID, " ").concat(info.compositeID);
  }

  function convert(xx, yy, pb, area) {
    if (!pb) {
      return 0;
    }

    var offset = (yy * (area[2] - area[0] + 1) + xx) * 4;
    var rgb = [];
    rgb[0] = pb[offset];
    rgb[1] = pb[offset + 1];
    rgb[2] = pb[offset + 2];
    var val = rgb[2];
    val *= 256;
    val += rgb[1];
    val *= 256;
    val += rgb[0];
    return val;
  }

  function getPixelInformationWithData(buffdata, inDisplayPosition, maxDistance, outSelectedPosition) {
    // Base case
    var maxDist = maxDistance < 0 ? 0 : maxDistance;

    if (maxDist === 0) {
      outSelectedPosition[0] = inDisplayPosition[0];
      outSelectedPosition[1] = inDisplayPosition[1];

      if (inDisplayPosition[0] < buffdata.area[0] || inDisplayPosition[0] > buffdata.area[2] || inDisplayPosition[1] < buffdata.area[1] || inDisplayPosition[1] > buffdata.area[3]) {
        return null;
      } // offset inDisplayPosition based on the lower-left-corner of the Area.


      var displayPosition = [inDisplayPosition[0] - buffdata.area[0], inDisplayPosition[1] - buffdata.area[1]];
      var actorid = convert(displayPosition[0], displayPosition[1], buffdata.pixBuffer[PassTypes.ACTOR_PASS], buffdata.area);

      if (actorid <= 0) {
        // the pixel did not hit any actor.
        return null;
      }

      var _info = {};
      _info.valid = true;
      _info.propID = actorid - idOffset;
      _info.prop = buffdata.props[_info.propID];
      var compositeID = convert(displayPosition[0], displayPosition[1], buffdata.pixBuffer[PassTypes.COMPOSITE_INDEX_PASS], buffdata.area);

      if (compositeID < 0 || compositeID > 0xffffff) {
        compositeID = 0;
      }

      _info.compositeID = compositeID - idOffset;

      if (buffdata.captureZValues) {
        var offset = (displayPosition[1] * (buffdata.area[2] - buffdata.area[0] + 1) + displayPosition[0]) * 4;
        _info.zValue = (256 * buffdata.zBuffer[offset] + buffdata.zBuffer[offset + 1]) / 65535.0;
        _info.displayPosition = inDisplayPosition;
      }

      return _info;
    } // Iterate over successively growing boxes.
    // They recursively call the base case to handle single pixels.


    var dispPos = [inDisplayPosition[0], inDisplayPosition[1]];
    var curPos = [0, 0];
    var info = getPixelInformationWithData(buffdata, inDisplayPosition, 0, outSelectedPosition);

    if (info && info.valid) {
      return info;
    }

    for (var dist = 1; dist < maxDist; ++dist) {
      // Vertical sides of box.
      for (var y = dispPos[1] > dist ? dispPos[1] - dist : 0; y <= dispPos[1] + dist; ++y) {
        curPos[1] = y;

        if (dispPos[0] >= dist) {
          curPos[0] = dispPos[0] - dist;
          info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);

          if (info && info.valid) {
            return info;
          }
        }

        curPos[0] = dispPos[0] + dist;
        info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);

        if (info && info.valid) {
          return info;
        }
      } // Horizontal sides of box.


      for (var x = dispPos[0] >= dist ? dispPos[0] - (dist - 1) : 0; x <= dispPos[0] + (dist - 1); ++x) {
        curPos[0] = x;

        if (dispPos[1] >= dist) {
          curPos[1] = dispPos[1] - dist;
          info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);

          if (info && info.valid) {
            return info;
          }
        }

        curPos[1] = dispPos[1] + dist;
        info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);

        if (info && info.valid) {
          return info;
        }
      }
    } // nothing hit.


    outSelectedPosition[0] = inDisplayPosition[0];
    outSelectedPosition[1] = inDisplayPosition[1];
    return null;
  } //-----------------------------------------------------------------------------


  function convertSelection(fieldassociation, dataMap, captureZValues, renderer, openGLRenderWindow) {
    var sel = [];
    var count = 0;
    dataMap.forEach(function (value, key) {
      var child = vtkSelectionNode$1.newInstance();
      child.setContentType(SelectionContent.INDICES);

      switch (fieldassociation) {
        case FieldAssociations.FIELD_ASSOCIATION_CELLS:
          child.setFieldType(SelectionField.CELL);
          break;

        case FieldAssociations.FIELD_ASSOCIATION_POINTS:
          child.setFieldType(SelectionField.POINT);
          break;

        default:
          vtkErrorMacro$7('Unknown field association');
      }

      child.getProperties().propID = value.info.propID;
      child.getProperties().prop = value.info.prop;
      child.getProperties().compositeID = value.info.compositeID;
      child.getProperties().pixelCount = value.pixelCount;

      if (captureZValues) {
        child.getProperties().displayPosition = [value.info.displayPosition[0], value.info.displayPosition[1], value.info.zValue];
        child.getProperties().worldPosition = openGLRenderWindow.displayToWorld(value.info.displayPosition[0], value.info.displayPosition[1], value.info.zValue, renderer);
      }

      child.setSelectionList(value.attributeIDs);
      sel[count] = child;
      count++;
    });
    return sel;
  } //----------------------------------------------------------------------------


  function generateSelectionWithData(buffdata, fx1, fy1, fx2, fy2) {
    var x1 = Math.floor(fx1);
    var y1 = Math.floor(fy1);
    var x2 = Math.floor(fx2);
    var y2 = Math.floor(fy2);
    var dataMap = new Map();
    var outSelectedPosition = [0, 0];

    for (var yy = y1; yy <= y2; yy++) {
      for (var xx = x1; xx <= x2; xx++) {
        var pos = [xx, yy];
        var info = getPixelInformationWithData(buffdata, pos, 0, outSelectedPosition);

        if (info && info.valid) {
          var hash = getInfoHash(info);

          if (!dataMap.has(hash)) {
            dataMap.set(hash, {
              info: info,
              pixelCount: 1,
              attributeIDs: [info.attributeID]
            });
          } else {
            var dmv = dataMap.get(hash);
            dmv.pixelCount++;

            if (buffdata.captureZValues) {
              if (info.zValue < dmv.info.zValue) {
                dmv.info = info;
              }
            }

            if (dmv.attributeIDs.indexOf(info.attributeID) === -1) {
              dmv.attributeIDs.push(info.attributeID);
            }
          }
        }
      }
    }

    return convertSelection(buffdata.fieldAssociation, dataMap, buffdata.captureZValues, buffdata.renderer, buffdata.openGLRenderWindow);
  } // ----------------------------------------------------------------------------
  // vtkOpenGLHardwareSelector methods
  // ----------------------------------------------------------------------------


  function vtkOpenGLHardwareSelector(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkOpenGLHardwareSelector'); //----------------------------------------------------------------------------

    publicAPI.releasePixBuffers = function () {
      model.pixBuffer = [];
      model.zBuffer = null;
    }; //----------------------------------------------------------------------------


    publicAPI.beginSelection = function () {
      model.openGLRenderer = model.openGLRenderWindow.getViewNodeFor(model.renderer);
      model.maxAttributeId = 0;
      var size = model.openGLRenderWindow.getSize();

      if (!model.framebuffer) {
        model.framebuffer = vtkOpenGLFramebuffer.newInstance();
        model.framebuffer.setOpenGLRenderWindow(model.openGLRenderWindow);
        model.framebuffer.saveCurrentBindingsAndBuffers();
        model.framebuffer.create(size[0], size[1]); // this calls model.framebuffer.bind()

        model.framebuffer.populateFramebuffer();
      } else {
        model.framebuffer.setOpenGLRenderWindow(model.openGLRenderWindow);
        model.framebuffer.saveCurrentBindingsAndBuffers();
        var fbSize = model.framebuffer.getSize();

        if (fbSize[0] !== size[0] || fbSize[1] !== size[1]) {
          model.framebuffer.create(size[0], size[1]); // this calls model.framebuffer.bind()

          model.framebuffer.populateFramebuffer();
        } else {
          model.framebuffer.bind();
        }
      }

      model.openGLRenderer.clear();
      model.openGLRenderer.setSelector(publicAPI);
      model.hitProps = {};
      model.props = [];
      publicAPI.releasePixBuffers();
    }; //----------------------------------------------------------------------------


    publicAPI.endSelection = function () {
      model.hitProps = {};
      model.openGLRenderer.setSelector(null);
      model.framebuffer.restorePreviousBindingsAndBuffers();
    };

    publicAPI.preCapturePass = function () {};

    publicAPI.postCapturePass = function () {}; //----------------------------------------------------------------------------


    publicAPI.select = function () {
      var sel = null;

      if (publicAPI.captureBuffers()) {
        sel = publicAPI.generateSelection(model.area[0], model.area[1], model.area[2], model.area[3]);
        publicAPI.releasePixBuffers();
      }

      return sel;
    };

    publicAPI.getSourceDataAsync = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(renderer, fx1, fy1, fx2, fy2) {
        var size, result;
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // assign the renderer
                model.renderer = renderer; // set area to all if no arguments provided

                if (fx1 === undefined) {
                  size = model.openGLRenderWindow.getSize();
                  publicAPI.setArea(0, 0, size[0] - 1, size[1] - 1);
                } else {
                  publicAPI.setArea(fx1, fy1, fx2, fy2);
                } // just do capture buffers and package up the result


                if (publicAPI.captureBuffers()) {
                  _context.next = 4;
                  break;
                }

                return _context.abrupt("return", false);

              case 4:
                result = {
                  area: _toConsumableArray(model.area),
                  pixBuffer: _toConsumableArray(model.pixBuffer),
                  captureZValues: model.captureZValues,
                  zBuffer: model.zBuffer,
                  props: _toConsumableArray(model.props),
                  fieldAssociation: model.fieldAssociation,
                  renderer: renderer,
                  openGLRenderWindow: model.openGLRenderWindow
                };

                result.generateSelection = function () {
                  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                  }

                  return generateSelectionWithData.apply(void 0, [result].concat(args));
                };

                return _context.abrupt("return", result);

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x, _x2, _x3, _x4, _x5) {
        return _ref.apply(this, arguments);
      };
    }(); //----------------------------------------------------------------------------


    publicAPI.captureBuffers = function () {
      if (!model.renderer || !model.openGLRenderWindow) {
        vtkErrorMacro$7('Renderer and view must be set before calling Select.');
        return false;
      }

      model.openGLRenderer = model.openGLRenderWindow.getViewNodeFor(model.renderer); // todo revisit making selection part of core
      // then we can do this in core

      model.openGLRenderWindow.getRenderable().preRender(); // int rgba[4];
      // rwin.getColorBufferSizes(rgba);
      // if (rgba[0] < 8 || rgba[1] < 8 || rgba[2] < 8) {
      //   vtkErrorMacro("Color buffer depth must be at least 8 bit. "
      //     "Currently: " << rgba[0] << ", " << rgba[1] << ", " <<rgba[2]);
      //   return false;
      // }

      publicAPI.invokeEvent({
        type: 'StartEvent'
      }); // Initialize renderer for selection.
      // change the renderer's background to black, which will indicate a miss

      model.originalBackground = model.renderer.getBackgroundByReference();
      model.renderer.setBackground(0.0, 0.0, 0.0);
      var rpasses = model.openGLRenderWindow.getRenderPasses();
      publicAPI.beginSelection();

      for (model.currentPass = PassTypes.MIN_KNOWN_PASS; model.currentPass <= PassTypes.COMPOSITE_INDEX_PASS; model.currentPass++) {
        if (publicAPI.passRequired(model.currentPass)) {
          publicAPI.preCapturePass(model.currentPass);

          if (model.captureZValues && model.currentPass === PassTypes.ACTOR_PASS && typeof rpasses[0].requestDepth === 'function' && typeof rpasses[0].getFramebuffer === 'function') {
            rpasses[0].requestDepth();
            model.openGLRenderWindow.traverseAllPasses();
          } else {
            model.openGLRenderWindow.traverseAllPasses();
          }

          publicAPI.postCapturePass(model.currentPass);
          publicAPI.savePixelBuffer(model.currentPass);
        }
      }

      publicAPI.endSelection(); // restore original background

      model.renderer.setBackground(model.originalBackground);
      publicAPI.invokeEvent({
        type: 'EndEvent'
      }); // restore image, not needed?
      // model.openGLRenderWindow.traverseAllPasses();

      return true;
    }; //----------------------------------------------------------------------------


    publicAPI.passRequired = function (pass) {
      return true;
    }; //----------------------------------------------------------------------------


    publicAPI.savePixelBuffer = function (passNo) {
      model.pixBuffer[passNo] = model.openGLRenderWindow.getPixelData(model.area[0], model.area[1], model.area[2], model.area[3]);

      if (passNo === PassTypes.ACTOR_PASS) {
        if (model.captureZValues) {
          var rpasses = model.openGLRenderWindow.getRenderPasses();

          if (typeof rpasses[0].requestDepth === 'function' && typeof rpasses[0].getFramebuffer === 'function') {
            var fb = rpasses[0].getFramebuffer();
            fb.saveCurrentBindingsAndBuffers();
            fb.bind();
            model.zBuffer = model.openGLRenderWindow.getPixelData(model.area[0], model.area[1], model.area[2], model.area[3]);
            fb.restorePreviousBindingsAndBuffers();
          }
        }

        publicAPI.buildPropHitList(model.pixBuffer[passNo]);
      }
    }; //----------------------------------------------------------------------------


    publicAPI.buildPropHitList = function (pixelbuffer) {
      for (var yy = 0; yy <= model.area[3] - model.area[1]; yy++) {
        for (var xx = 0; xx <= model.area[2] - model.area[0]; xx++) {
          var val = convert(xx, yy, pixelbuffer, model.area);

          if (val > 0) {
            val--;

            if (!(val in model.hitProps)) {
              model.hitProps[val] = true;
            }
          }
        }
      }
    }; //----------------------------------------------------------------------------


    publicAPI.renderProp = function (prop) {
      if (model.currentPass === PassTypes.ACTOR_PASS) {
        publicAPI.setPropColorValueFromInt(model.props.length + idOffset);
        model.props.push(prop);
      }
    }; //----------------------------------------------------------------------------


    publicAPI.renderCompositeIndex = function (index) {
      if (model.currentPass === PassTypes.COMPOSITE_INDEX_PASS) {
        publicAPI.setPropColorValueFromInt(index + idOffset);
      }
    }; //----------------------------------------------------------------------------
    // TODO: make inline


    publicAPI.renderAttributeId = function (attribid) {
      if (attribid < 0) {
        // negative attribid is valid. It happens when rendering higher order
        // elements where new points are added for rendering smooth surfaces.
        return;
      }

      model.maxAttributeId = attribid > model.maxAttributeId ? attribid : model.maxAttributeId; // if (model.currentPass < PassTypes.ID_LOW24) {
      //   return; // useless...
      // }
    }; //----------------------------------------------------------------------------


    publicAPI.passTypeToString = function (type) {
      return macro.enumToString(PassTypes, type);
    }; //----------------------------------------------------------------------------


    publicAPI.isPropHit = function (id) {
      return Boolean(model.hitProps[id]);
    };

    publicAPI.setPropColorValueFromInt = function (val) {
      model.propColorValue[0] = val % 256 / 255.0;
      model.propColorValue[1] = Math.floor(val / 256) % 256 / 255.0;
      model.propColorValue[2] = Math.floor(val / 65536) % 256 / 255.0;
    }; // info has
    //   valid
    //   propId
    //   prop
    //   compositeID
    //   attributeID
    //----------------------------------------------------------------------------


    publicAPI.getPixelInformation = function (inDisplayPosition, maxDistance, outSelectedPosition) {
      // Base case
      var maxDist = maxDistance < 0 ? 0 : maxDistance;

      if (maxDist === 0) {
        outSelectedPosition[0] = inDisplayPosition[0];
        outSelectedPosition[1] = inDisplayPosition[1];

        if (inDisplayPosition[0] < model.area[0] || inDisplayPosition[0] > model.area[2] || inDisplayPosition[1] < model.area[1] || inDisplayPosition[1] > model.area[3]) {
          return null;
        } // offset inDisplayPosition based on the lower-left-corner of the Area.


        var displayPosition = [inDisplayPosition[0] - model.area[0], inDisplayPosition[1] - model.area[1]];
        var actorid = convert(displayPosition[0], displayPosition[1], model.pixBuffer[PassTypes.ACTOR_PASS], model.area);

        if (actorid <= 0) {
          // the pixel did not hit any actor.
          return null;
        }

        var _info2 = {};
        _info2.valid = true;
        _info2.propID = actorid - idOffset;
        _info2.prop = model.props[_info2.propID];
        var compositeID = convert(displayPosition[0], displayPosition[1], model.pixBuffer[PassTypes.COMPOSITE_INDEX_PASS], model.area);

        if (compositeID < 0 || compositeID > 0xffffff) {
          compositeID = 0;
        }

        _info2.compositeID = compositeID - idOffset;

        if (model.captureZValues) {
          var offset = (displayPosition[1] * (model.area[2] - model.area[0] + 1) + displayPosition[0]) * 4;
          _info2.zValue = (256 * model.zBuffer[offset] + model.zBuffer[offset + 1]) / 65535.0;
          _info2.displayPosition = inDisplayPosition;
        }

        return _info2;
      } // Iterate over successively growing boxes.
      // They recursively call the base case to handle single pixels.


      var dispPos = [inDisplayPosition[0], inDisplayPosition[1]];
      var curPos = [0, 0];
      var info = publicAPI.getPixelInformation(inDisplayPosition, 0, outSelectedPosition);

      if (info && info.valid) {
        return info;
      }

      for (var dist = 1; dist < maxDist; ++dist) {
        // Vertical sides of box.
        for (var y = dispPos[1] > dist ? dispPos[1] - dist : 0; y <= dispPos[1] + dist; ++y) {
          curPos[1] = y;

          if (dispPos[0] >= dist) {
            curPos[0] = dispPos[0] - dist;
            info = publicAPI.getPixelInformation(curPos, 0, outSelectedPosition);

            if (info && info.valid) {
              return info;
            }
          }

          curPos[0] = dispPos[0] + dist;
          info = publicAPI.getPixelInformation(curPos, 0, outSelectedPosition);

          if (info && info.valid) {
            return info;
          }
        } // Horizontal sides of box.


        for (var x = dispPos[0] >= dist ? dispPos[0] - (dist - 1) : 0; x <= dispPos[0] + (dist - 1); ++x) {
          curPos[0] = x;

          if (dispPos[1] >= dist) {
            curPos[1] = dispPos[1] - dist;
            info = publicAPI.getPixelInformation(curPos, 0, outSelectedPosition);

            if (info && info.valid) {
              return info;
            }
          }

          curPos[1] = dispPos[1] + dist;
          info = publicAPI.getPixelInformation(curPos, 0, outSelectedPosition);

          if (info && info.valid) {
            return info;
          }
        }
      } // nothing hit.


      outSelectedPosition[0] = inDisplayPosition[0];
      outSelectedPosition[1] = inDisplayPosition[1];
      return null;
    }; //----------------------------------------------------------------------------


    publicAPI.generateSelection = function (fx1, fy1, fx2, fy2) {
      var x1 = Math.floor(fx1);
      var y1 = Math.floor(fy1);
      var x2 = Math.floor(fx2);
      var y2 = Math.floor(fy2);
      var dataMap = new Map();
      var outSelectedPosition = [0, 0];

      for (var yy = y1; yy <= y2; yy++) {
        for (var xx = x1; xx <= x2; xx++) {
          var pos = [xx, yy];
          var info = publicAPI.getPixelInformation(pos, 0, outSelectedPosition);

          if (info && info.valid) {
            var hash = getInfoHash(info);

            if (!dataMap.has(hash)) {
              dataMap.set(hash, {
                info: info,
                pixelCount: 1,
                attributeIDs: [info.attributeID]
              });
            } else {
              var dmv = dataMap.get(hash);
              dmv.pixelCount++;

              if (model.captureZValues) {
                if (info.zValue < dmv.info.zValue) {
                  dmv.info = info;
                }
              }

              if (dmv.attributeIDs.indexOf(info.attributeID) === -1) {
                dmv.attributeIDs.push(info.attributeID);
              }
            }
          }
        }
      }

      return convertSelection(model.fieldAssociation, dataMap, model.captureZValues, model.renderer, model.openGLRenderWindow);
    }; //----------------------------------------------------------------------------


    publicAPI.attach = function (w, r) {
      model.openGLRenderWindow = w;
      model.renderer = r;
    }; // override


    var superSetArea = publicAPI.setArea;

    publicAPI.setArea = function () {
      if (superSetArea.apply(void 0, arguments)) {
        model.area[0] = Math.floor(model.area[0]);
        model.area[1] = Math.floor(model.area[1]);
        model.area[2] = Math.floor(model.area[2]);
        model.area[3] = Math.floor(model.area[3]);
        return true;
      }

      return false;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$q = {
    area: undefined,
    renderer: null,
    openGLRenderWindow: null,
    openGLRenderer: null,
    currentPass: -1,
    propColorValue: null,
    props: null,
    idOffset: 1
  }; // ----------------------------------------------------------------------------

  function extend$s(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$q, initialValues); // Build VTK API

    vtkHardwareSelector$1$1.extend(publicAPI, model, initialValues);
    model.propColorValue = [0, 0, 0];
    model.props = [];

    if (!model.area) {
      model.area = [0, 0, 0, 0];
    }

    macro.setGetArray(publicAPI, model, ['area'], 4);
    macro.setGet(publicAPI, model, ['renderer', 'currentPass', 'openGLRenderWindow']);
    macro.setGetArray(publicAPI, model, ['propColorValue'], 3);
    macro.event(publicAPI, model, 'event'); // Object methods

    vtkOpenGLHardwareSelector(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$q = macro.newInstance(extend$s, 'vtkOpenGLHardwareSelector'); // ----------------------------------------------------------------------------

  var vtkHardwareSelector = _objectSpread$8({
    newInstance: newInstance$q,
    extend: extend$s
  }, Constants$3);

  /*
   * JavaScript MD5
   * https://github.com/blueimp/JavaScript-MD5
   *
   * Copyright 2011, Sebastian Tschan
   * https://blueimp.net
   *
   * Licensed under the MIT license:
   * https://opensource.org/licenses/MIT
   *
   * Based on
   * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
   * Digest Algorithm, as defined in RFC 1321.
   * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   * Distributed under the BSD License
   * See http://pajhome.org.uk/crypt/md5 for more info.
   */

  var md5 = createCommonjsModule(function (module) {
  (function ($) {

    /**
     * Add integers, wrapping at 2^32.
     * This uses 16-bit operations internally to work around bugs in interpreters.
     *
     * @param {number} x First integer
     * @param {number} y Second integer
     * @returns {number} Sum
     */
    function safeAdd(x, y) {
      var lsw = (x & 0xffff) + (y & 0xffff);
      var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
      return (msw << 16) | (lsw & 0xffff)
    }

    /**
     * Bitwise rotate a 32-bit number to the left.
     *
     * @param {number} num 32-bit number
     * @param {number} cnt Rotation count
     * @returns {number} Rotated number
     */
    function bitRotateLeft(num, cnt) {
      return (num << cnt) | (num >>> (32 - cnt))
    }

    /**
     * Basic operation the algorithm uses.
     *
     * @param {number} q q
     * @param {number} a a
     * @param {number} b b
     * @param {number} x x
     * @param {number} s s
     * @param {number} t t
     * @returns {number} Result
     */
    function md5cmn(q, a, b, x, s, t) {
      return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b)
    }
    /**
     * Basic operation the algorithm uses.
     *
     * @param {number} a a
     * @param {number} b b
     * @param {number} c c
     * @param {number} d d
     * @param {number} x x
     * @param {number} s s
     * @param {number} t t
     * @returns {number} Result
     */
    function md5ff(a, b, c, d, x, s, t) {
      return md5cmn((b & c) | (~b & d), a, b, x, s, t)
    }
    /**
     * Basic operation the algorithm uses.
     *
     * @param {number} a a
     * @param {number} b b
     * @param {number} c c
     * @param {number} d d
     * @param {number} x x
     * @param {number} s s
     * @param {number} t t
     * @returns {number} Result
     */
    function md5gg(a, b, c, d, x, s, t) {
      return md5cmn((b & d) | (c & ~d), a, b, x, s, t)
    }
    /**
     * Basic operation the algorithm uses.
     *
     * @param {number} a a
     * @param {number} b b
     * @param {number} c c
     * @param {number} d d
     * @param {number} x x
     * @param {number} s s
     * @param {number} t t
     * @returns {number} Result
     */
    function md5hh(a, b, c, d, x, s, t) {
      return md5cmn(b ^ c ^ d, a, b, x, s, t)
    }
    /**
     * Basic operation the algorithm uses.
     *
     * @param {number} a a
     * @param {number} b b
     * @param {number} c c
     * @param {number} d d
     * @param {number} x x
     * @param {number} s s
     * @param {number} t t
     * @returns {number} Result
     */
    function md5ii(a, b, c, d, x, s, t) {
      return md5cmn(c ^ (b | ~d), a, b, x, s, t)
    }

    /**
     * Calculate the MD5 of an array of little-endian words, and a bit length.
     *
     * @param {Array} x Array of little-endian words
     * @param {number} len Bit length
     * @returns {Array<number>} MD5 Array
     */
    function binlMD5(x, len) {
      /* append padding */
      x[len >> 5] |= 0x80 << len % 32;
      x[(((len + 64) >>> 9) << 4) + 14] = len;

      var i;
      var olda;
      var oldb;
      var oldc;
      var oldd;
      var a = 1732584193;
      var b = -271733879;
      var c = -1732584194;
      var d = 271733878;

      for (i = 0; i < x.length; i += 16) {
        olda = a;
        oldb = b;
        oldc = c;
        oldd = d;

        a = md5ff(a, b, c, d, x[i], 7, -680876936);
        d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
        c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
        b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
        a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
        d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
        c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
        b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
        a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
        d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
        c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
        b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
        a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
        d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
        c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
        b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);

        a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
        d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
        c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
        b = md5gg(b, c, d, a, x[i], 20, -373897302);
        a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
        d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
        c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
        b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
        a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
        d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
        c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
        b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
        a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
        d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
        c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
        b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);

        a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
        d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
        c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
        b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
        a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
        d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
        c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
        b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
        a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
        d = md5hh(d, a, b, c, x[i], 11, -358537222);
        c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
        b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
        a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
        d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
        c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
        b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);

        a = md5ii(a, b, c, d, x[i], 6, -198630844);
        d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
        c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
        b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
        a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
        d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
        c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
        b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
        a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
        d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
        c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
        b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
        a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
        d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
        c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
        b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);

        a = safeAdd(a, olda);
        b = safeAdd(b, oldb);
        c = safeAdd(c, oldc);
        d = safeAdd(d, oldd);
      }
      return [a, b, c, d]
    }

    /**
     * Convert an array of little-endian words to a string
     *
     * @param {Array<number>} input MD5 Array
     * @returns {string} MD5 string
     */
    function binl2rstr(input) {
      var i;
      var output = '';
      var length32 = input.length * 32;
      for (i = 0; i < length32; i += 8) {
        output += String.fromCharCode((input[i >> 5] >>> i % 32) & 0xff);
      }
      return output
    }

    /**
     * Convert a raw string to an array of little-endian words
     * Characters >255 have their high-byte silently ignored.
     *
     * @param {string} input Raw input string
     * @returns {Array<number>} Array of little-endian words
     */
    function rstr2binl(input) {
      var i;
      var output = [];
      output[(input.length >> 2) - 1] = undefined;
      for (i = 0; i < output.length; i += 1) {
        output[i] = 0;
      }
      var length8 = input.length * 8;
      for (i = 0; i < length8; i += 8) {
        output[i >> 5] |= (input.charCodeAt(i / 8) & 0xff) << i % 32;
      }
      return output
    }

    /**
     * Calculate the MD5 of a raw string
     *
     * @param {string} s Input string
     * @returns {string} Raw MD5 string
     */
    function rstrMD5(s) {
      return binl2rstr(binlMD5(rstr2binl(s), s.length * 8))
    }

    /**
     * Calculates the HMAC-MD5 of a key and some data (raw strings)
     *
     * @param {string} key HMAC key
     * @param {string} data Raw input string
     * @returns {string} Raw MD5 string
     */
    function rstrHMACMD5(key, data) {
      var i;
      var bkey = rstr2binl(key);
      var ipad = [];
      var opad = [];
      var hash;
      ipad[15] = opad[15] = undefined;
      if (bkey.length > 16) {
        bkey = binlMD5(bkey, key.length * 8);
      }
      for (i = 0; i < 16; i += 1) {
        ipad[i] = bkey[i] ^ 0x36363636;
        opad[i] = bkey[i] ^ 0x5c5c5c5c;
      }
      hash = binlMD5(ipad.concat(rstr2binl(data)), 512 + data.length * 8);
      return binl2rstr(binlMD5(opad.concat(hash), 512 + 128))
    }

    /**
     * Convert a raw string to a hex string
     *
     * @param {string} input Raw input string
     * @returns {string} Hex encoded string
     */
    function rstr2hex(input) {
      var hexTab = '0123456789abcdef';
      var output = '';
      var x;
      var i;
      for (i = 0; i < input.length; i += 1) {
        x = input.charCodeAt(i);
        output += hexTab.charAt((x >>> 4) & 0x0f) + hexTab.charAt(x & 0x0f);
      }
      return output
    }

    /**
     * Encode a string as UTF-8
     *
     * @param {string} input Input string
     * @returns {string} UTF8 string
     */
    function str2rstrUTF8(input) {
      return unescape(encodeURIComponent(input))
    }

    /**
     * Encodes input string as raw MD5 string
     *
     * @param {string} s Input string
     * @returns {string} Raw MD5 string
     */
    function rawMD5(s) {
      return rstrMD5(str2rstrUTF8(s))
    }
    /**
     * Encodes input string as Hex encoded string
     *
     * @param {string} s Input string
     * @returns {string} Hex encoded string
     */
    function hexMD5(s) {
      return rstr2hex(rawMD5(s))
    }
    /**
     * Calculates the raw HMAC-MD5 for the given key and data
     *
     * @param {string} k HMAC key
     * @param {string} d Input string
     * @returns {string} Raw MD5 string
     */
    function rawHMACMD5(k, d) {
      return rstrHMACMD5(str2rstrUTF8(k), str2rstrUTF8(d))
    }
    /**
     * Calculates the Hex encoded HMAC-MD5 for the given key and data
     *
     * @param {string} k HMAC key
     * @param {string} d Input string
     * @returns {string} Raw MD5 string
     */
    function hexHMACMD5(k, d) {
      return rstr2hex(rawHMACMD5(k, d))
    }

    /**
     * Calculates MD5 value for a given string.
     * If a key is provided, calculates the HMAC-MD5 value.
     * Returns a Hex encoded string unless the raw argument is given.
     *
     * @param {string} string Input string
     * @param {string} [key] HMAC key
     * @param {boolean} [raw] Raw output switch
     * @returns {string} MD5 output
     */
    function md5(string, key, raw) {
      if (!key) {
        if (!raw) {
          return hexMD5(string)
        }
        return rawMD5(string)
      }
      if (!raw) {
        return hexHMACMD5(key, string)
      }
      return rawHMACMD5(key, string)
    }

    if (module.exports) {
      module.exports = md5;
    } else {
      $.md5 = md5;
    }
  })(commonjsGlobal);
  });

  var SET_GET_FIELDS = ['lastShaderBound', 'context', 'openGLRenderWindow']; // ----------------------------------------------------------------------------
  // vtkShaderCache methods
  // ----------------------------------------------------------------------------

  function vtkShaderCache(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkShaderCache');

    publicAPI.replaceShaderValues = function (VSSource, FSSource, GSSource) {
      // first handle renaming any Fragment shader inputs
      // if we have a geometry shader. By default fragment shaders
      // assume their inputs come from a Vertex Shader. When we
      // have a Geometry shader we rename the frament shader inputs
      // to come from the geometry shader
      var nFSSource = FSSource;

      if (GSSource.length > 0) {
        nFSSource = vtkShaderProgram$1.substitute(nFSSource, 'VSOut', 'GSOut').result;
      }

      var gl2 = model.openGLRenderWindow.getWebgl2();
      var fragDepthString = '\n';
      var version = '#version 100\n';

      if (gl2) {
        version = '#version 300 es\n' + '#define attribute in\n' + '#define textureCube texture\n' + '#define texture2D texture\n' + '#define textureCubeLod textureLod\n' + '#define texture2DLod textureLod\n';
      } else {
        model.context.getExtension('OES_standard_derivatives');

        if (model.context.getExtension('EXT_frag_depth')) {
          fragDepthString = '#extension GL_EXT_frag_depth : enable\n';
        }

        if (model.context.getExtension('EXT_shader_texture_lod')) {
          fragDepthString += '#extension GL_EXT_shader_texture_lod : enable\n' + '#define textureCubeLod textureCubeLodEXT\n' + '#define texture2DLod texture2DLodEXT';
        }
      }

      nFSSource = vtkShaderProgram$1.substitute(nFSSource, '//VTK::System::Dec', ["".concat(version, "\n"), gl2 ? '' : '#extension GL_OES_standard_derivatives : enable\n', fragDepthString, '#ifdef GL_FRAGMENT_PRECISION_HIGH', 'precision highp float;', 'precision highp int;', '#else', 'precision mediump float;', 'precision mediump int;', '#endif']).result;
      var nVSSource = vtkShaderProgram$1.substitute(VSSource, '//VTK::System::Dec', ["".concat(version, "\n"), '#ifdef GL_FRAGMENT_PRECISION_HIGH', 'precision highp float;', 'precision highp int;', '#else', 'precision mediump float;', 'precision mediump int;', '#endif']).result;

      if (gl2) {
        nVSSource = vtkShaderProgram$1.substitute(nVSSource, 'varying', 'out').result;
        nFSSource = vtkShaderProgram$1.substitute(nFSSource, 'varying', 'in').result;
        nFSSource = vtkShaderProgram$1.substitute(nFSSource, 'gl_FragData\\[0\\]', 'fragOutput0').result;
        nFSSource = vtkShaderProgram$1.substitute(nFSSource, '//VTK::Output::Dec', 'layout(location = 0) out vec4 fragOutput0;').result;
      } // nFSSource = ShaderProgram.substitute(nFSSource, 'gl_FragData\\[0\\]',
      //   'gl_FragColor').result;


      var nGSSource = vtkShaderProgram$1.substitute(GSSource, '//VTK::System::Dec', version).result;
      return {
        VSSource: nVSSource,
        FSSource: nFSSource,
        GSSource: nGSSource
      };
    }; // return NULL if there is an issue


    publicAPI.readyShaderProgramArray = function (vertexCode, fragmentCode, geometryCode) {
      var data = publicAPI.replaceShaderValues(vertexCode, fragmentCode, geometryCode);
      var shader = publicAPI.getShaderProgram(data.VSSource, data.FSSource, data.GSSource);
      return publicAPI.readyShaderProgram(shader);
    };

    publicAPI.readyShaderProgram = function (shader) {
      if (!shader) {
        return null;
      } // compile if needed


      if (!shader.getCompiled() && !shader.compileShader()) {
        return null;
      } // bind if needed


      if (!publicAPI.bindShader(shader)) {
        return null;
      }

      return shader;
    };

    publicAPI.getShaderProgram = function (vertexCode, fragmentCode, geometryCode) {
      // compute the MD5 and the check the map
      var hashInput = "".concat(vertexCode).concat(fragmentCode).concat(geometryCode);
      var result = md5(hashInput); // does it already exist?

      var loc = Object.keys(model.shaderPrograms).indexOf(result);

      if (loc === -1) {
        // create one
        var sps = vtkShaderProgram$1.newInstance();
        sps.setContext(model.context);
        sps.getVertexShader().setSource(vertexCode);
        sps.getFragmentShader().setSource(fragmentCode);

        if (geometryCode) {
          sps.getGeometryShader().setSource(geometryCode);
        }

        sps.setMd5Hash(result);
        model.shaderPrograms[result] = sps;
        return sps;
      }

      return model.shaderPrograms[result];
    };

    publicAPI.releaseGraphicsResources = function (win) {
      // NOTE:
      // In the current implementation as of October 26th, if a shader
      // program is created by ShaderCache then it should make sure
      // that it releases the graphics resources used by these programs.
      // It is not wisely for callers to do that since then they would
      // have to loop over all the programs were in use and invoke
      // release graphics resources individually.
      publicAPI.releaseCurrentShader();
      Object.keys(model.shaderPrograms).map(function (key) {
        return model.shaderPrograms[key];
      }).forEach(function (sp) {
        return sp.releaseGraphicsResources(win);
      });
    };

    publicAPI.releaseGraphicsResources = function () {
      // release prior shader
      if (model.astShaderBound) {
        model.lastShaderBound.release();
        model.lastShaderBound = null;
      }
    };

    publicAPI.bindShader = function (shader) {
      if (model.lastShaderBound === shader) {
        return 1;
      } // release prior shader


      if (model.lastShaderBound) {
        model.lastShaderBound.release();
      }

      shader.bind();
      model.lastShaderBound = shader;
      return 1;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$p = {
    lastShaderBound: null,
    shaderPrograms: null,
    context: null,
    openGLRenderWindow: null
  }; // ----------------------------------------------------------------------------

  function extend$r(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$p, initialValues); // Internal objects

    model.shaderPrograms = {}; // Build VTK API

    macro.obj(publicAPI, model);
    macro.setGet(publicAPI, model, SET_GET_FIELDS); // Object methods

    vtkShaderCache(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$p = macro.newInstance(extend$r, 'vtkShaderCache'); // ----------------------------------------------------------------------------

  var vtkShaderCache$1 = {
    newInstance: newInstance$p,
    extend: extend$r
  };

  var vtkErrorMacro$6 = macro.vtkErrorMacro; // ----------------------------------------------------------------------------
  // vtkOpenGLTextureUnitManager methods
  // ----------------------------------------------------------------------------

  function vtkOpenGLTextureUnitManager(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkOpenGLTextureUnitManager'); // ----------------------------------------------------------------------------
    // Description:
    // Delete the allocation table and check if it is not called before
    // all the texture units have been released.

    publicAPI.deleteTable = function () {
      for (var i = 0; i < model.numberOfTextureUnits; ++i) {
        if (model.textureUnits[i] === true) {
          vtkErrorMacro$6('some texture units  were not properly released');
        }
      }

      model.textureUnits = [];
      model.numberOfTextureUnits = 0;
    }; // ----------------------------------------------------------------------------


    publicAPI.setContext = function (ctx) {
      if (model.context !== ctx) {
        if (model.context !== 0) {
          publicAPI.deleteTable();
        }

        model.context = ctx;

        if (model.context) {
          model.numberOfTextureUnits = ctx.getParameter(ctx.MAX_TEXTURE_IMAGE_UNITS);

          for (var i = 0; i < model.numberOfTextureUnits; ++i) {
            model.textureUnits[i] = false;
          }
        }

        publicAPI.modified();
      }
    }; // ----------------------------------------------------------------------------
    // Description:
    // Reserve a texture unit. It returns its number.
    // It returns -1 if the allocation failed (because there are no more
    // texture units left).
    // \post valid_result: result==-1 || result>=0 && result<this->GetNumberOfTextureUnits())
    // \post allocated: result==-1 || this->IsAllocated(result)


    publicAPI.allocate = function () {
      for (var i = 0; i < model.numberOfTextureUnits; i++) {
        if (!publicAPI.isAllocated(i)) {
          model.textureUnits[i] = true;
          return i;
        }
      }

      return -1;
    };

    publicAPI.allocateUnit = function (unit) {
      if (publicAPI.isAllocated(unit)) {
        return -1;
      }

      model.textureUnits[unit] = true;
      return unit;
    }; // ----------------------------------------------------------------------------
    // Description:
    // Tell if texture unit `textureUnitId' is already allocated.
    // \pre valid_id_range : textureUnitId>=0 && textureUnitId<this->GetNumberOfTextureUnits()


    publicAPI.isAllocated = function (textureUnitId) {
      return model.textureUnits[textureUnitId];
    }; // ----------------------------------------------------------------------------
    // Description:
    // Release a texture unit.
    // \pre valid_id: textureUnitId>=0 && textureUnitId<this->GetNumberOfTextureUnits()
    // \pre allocated_id: this->IsAllocated(textureUnitId)


    publicAPI.free = function (val) {
      model.textureUnits[val] = false;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$o = {
    context: null,
    numberOfTextureUnits: 0,
    textureUnits: 0
  }; // ----------------------------------------------------------------------------

  function extend$q(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$o, initialValues);
    macro.obj(publicAPI, model);
    model.textureUnits = []; // Build VTK API

    macro.get(publicAPI, model, ['numberOfTextureUnits']);
    macro.setGet(publicAPI, model, ['context']); // Object methods

    vtkOpenGLTextureUnitManager(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$o = macro.newInstance(extend$q, 'vtkOpenGLTextureUnitManager'); // ----------------------------------------------------------------------------

  var vtkTextureUnitManager = {
    newInstance: newInstance$o,
    extend: extend$q
  };

  // vtkRenderWindowViewNode is intended to be a superclass for all api specific
  // RenderWindows. It is intended to define a common API that can be invoked
  // upon an api specific render window and provide some common method
  // implementations. If your application requires communicating with an api specific
  // view try to limit such interactions to methods defined in this class.
  // ----------------------------------------------------------------------------
  // ----------------------------------------------------------------------------
  // vtkRenderWindowViewNode methods
  // ----------------------------------------------------------------------------

  function vtkRenderWindowViewNode(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkRenderWindowViewNode');

    publicAPI.getViewNodeFactory = function () {
      return null;
    };

    publicAPI.getAspectRatio = function () {
      return model.size[0] / model.size[1];
    };

    publicAPI.getAspectRatioForRenderer = function (renderer) {
      var viewport = renderer.getViewportByReference();
      return model.size[0] * (viewport[2] - viewport[0]) / ((viewport[3] - viewport[1]) * model.size[1]);
    };

    publicAPI.isInViewport = function (x, y, viewport) {
      var vCoords = viewport.getViewportByReference();
      var size = publicAPI.getFramebufferSize();

      if (vCoords[0] * size[0] <= x && vCoords[2] * size[0] >= x && vCoords[1] * size[1] <= y && vCoords[3] * size[1] >= y) {
        return true;
      }

      return false;
    };

    publicAPI.getViewportSize = function (viewport) {
      var vCoords = viewport.getViewportByReference();
      var size = publicAPI.getFramebufferSize();
      return [(vCoords[2] - vCoords[0]) * size[0], (vCoords[3] - vCoords[1]) * size[1]];
    };

    publicAPI.getViewportCenter = function (viewport) {
      var size = publicAPI.getViewportSize(viewport);
      return [size[0] * 0.5, size[1] * 0.5];
    };

    publicAPI.displayToNormalizedDisplay = function (x, y, z) {
      var size = publicAPI.getFramebufferSize();
      return [x / size[0], y / size[1], z];
    };

    publicAPI.normalizedDisplayToDisplay = function (x, y, z) {
      var size = publicAPI.getFramebufferSize();
      return [x * size[0], y * size[1], z];
    };

    publicAPI.worldToView = function (x, y, z, renderer) {
      return renderer.worldToView(x, y, z);
    };

    publicAPI.viewToWorld = function (x, y, z, renderer) {
      return renderer.viewToWorld(x, y, z);
    };

    publicAPI.worldToDisplay = function (x, y, z, renderer) {
      var val = renderer.worldToView(x, y, z);
      var dims = publicAPI.getViewportSize(renderer);
      var val2 = renderer.viewToProjection(val[0], val[1], val[2], dims[0] / dims[1]);
      var val3 = renderer.projectionToNormalizedDisplay(val2[0], val2[1], val2[2]);
      return publicAPI.normalizedDisplayToDisplay(val3[0], val3[1], val3[2]);
    };

    publicAPI.displayToWorld = function (x, y, z, renderer) {
      var val = publicAPI.displayToNormalizedDisplay(x, y, z);
      var val2 = renderer.normalizedDisplayToProjection(val[0], val[1], val[2]);
      var dims = publicAPI.getViewportSize(renderer);
      var val3 = renderer.projectionToView(val2[0], val2[1], val2[2], dims[0] / dims[1]);
      return renderer.viewToWorld(val3[0], val3[1], val3[2]);
    };

    publicAPI.normalizedDisplayToViewport = function (x, y, z, renderer) {
      var vCoords = renderer.getViewportByReference();
      vCoords = publicAPI.normalizedDisplayToDisplay(vCoords[0], vCoords[1], 0.0);
      var coords = publicAPI.normalizedDisplayToDisplay(x, y, z);
      return [coords[0] - vCoords[0] - 0.5, coords[1] - vCoords[1] - 0.5, z];
    };

    publicAPI.viewportToNormalizedViewport = function (x, y, z, renderer) {
      var size = publicAPI.getViewportSize(renderer);

      if (size && size[0] !== 0 && size[1] !== 0) {
        return [x / (size[0] - 1.0), y / (size[1] - 1.0), z];
      }

      return [x, y, z];
    };

    publicAPI.normalizedViewportToViewport = function (x, y, z, renderer) {
      var size = publicAPI.getViewportSize(renderer);
      return [x * (size[0] - 1.0), y * (size[1] - 1.0), z];
    };

    publicAPI.displayToLocalDisplay = function (x, y, z) {
      var size = publicAPI.getFramebufferSize();
      return [x, size[1] - y - 1, z];
    };

    publicAPI.viewportToNormalizedDisplay = function (x, y, z, renderer) {
      var vCoords = renderer.getViewportByReference();
      vCoords = publicAPI.normalizedDisplayToDisplay(vCoords[0], vCoords[1], 0.0);
      var x2 = x + vCoords[0] + 0.5;
      var y2 = y + vCoords[1] + 0.5;
      return publicAPI.displayToNormalizedDisplay(x2, y2, z);
    };

    publicAPI.getPixelData = function (x1, y1, x2, y2) {
      macro.vtkErrorMacro('not implemented');
      return undefined;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$n = {
    size: undefined,
    selector: undefined
  }; // ----------------------------------------------------------------------------

  function extend$p(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$n, initialValues);

    if (!model.size) {
      model.size = [300, 300];
    }

    macro.getArray(publicAPI, model, ['size'], 2);
    macro.get(publicAPI, model, ['selector']); // Inheritance

    vtkViewNode$1.extend(publicAPI, model, initialValues); // Object methods

    vtkRenderWindowViewNode(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$n = macro.newInstance(extend$p, 'vtkRenderWindowViewNode'); // ----------------------------------------------------------------------------

  var vtkRenderWindowViewNode$1 = {
    newInstance: newInstance$n,
    extend: extend$p
  };

  var vtkDebugMacro$4 = macro.vtkDebugMacro,
      vtkErrorMacro$5 = macro.vtkErrorMacro;
  var SCREENSHOT_PLACEHOLDER = {
    position: 'absolute',
    top: 0,
    left: 0,
    width: '100%',
    height: '100%'
  };

  function checkRenderTargetSupport(gl, format, type) {
    // create temporary frame buffer and texture
    var framebuffer = gl.createFramebuffer();
    var texture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, texture);
    gl.texImage2D(gl.TEXTURE_2D, 0, format, 2, 2, 0, format, type, null);
    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0); // check frame buffer status

    var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER); // clean up

    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    gl.bindTexture(gl.TEXTURE_2D, null);
    return status === gl.FRAMEBUFFER_COMPLETE;
  } // ----------------------------------------------------------------------------
  // Monitor the usage of GL context across vtkOpenGLRenderWindow instances
  // ----------------------------------------------------------------------------


  var GL_CONTEXT_COUNT = 0;
  var GL_CONTEXT_LISTENERS = [];

  function createGLContext() {
    GL_CONTEXT_COUNT++;
    GL_CONTEXT_LISTENERS.forEach(function (cb) {
      return cb(GL_CONTEXT_COUNT);
    });
  }

  function deleteGLContext() {
    GL_CONTEXT_COUNT--;
    GL_CONTEXT_LISTENERS.forEach(function (cb) {
      return cb(GL_CONTEXT_COUNT);
    });
  }

  function pushMonitorGLContextCount(cb) {
    GL_CONTEXT_LISTENERS.push(cb);
  }
  function popMonitorGLContextCount(cb) {
    return GL_CONTEXT_LISTENERS.pop();
  } // ----------------------------------------------------------------------------
  // vtkOpenGLRenderWindow methods
  // ----------------------------------------------------------------------------

  function vtkOpenGLRenderWindow(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkOpenGLRenderWindow');

    publicAPI.getViewNodeFactory = function () {
      return model.myFactory;
    }; // Auto update style


    var previousSize = [0, 0];

    function updateWindow() {
      // Canvas size
      if (model.renderable) {
        if (model.size[0] !== previousSize[0] || model.size[1] !== previousSize[1]) {
          previousSize[0] = model.size[0];
          previousSize[1] = model.size[1];
          model.canvas.setAttribute('width', model.size[0]);
          model.canvas.setAttribute('height', model.size[1]);
        }
      } // ImageStream size


      if (model.viewStream) {
        // If same size that's a NoOp
        model.viewStream.setSize(model.size[0], model.size[1]);
      } // Offscreen ?


      model.canvas.style.display = model.useOffScreen ? 'none' : 'block'; // Cursor type

      if (model.el) {
        model.el.style.cursor = model.cursorVisibility ? model.cursor : 'none';
      } // Invalidate cached DOM container size


      model.containerSize = null;
    }

    publicAPI.onModified(updateWindow); // Builds myself.

    publicAPI.buildPass = function (prepass) {
      if (prepass) {
        if (!model.renderable) {
          return;
        }

        publicAPI.prepareNodes();
        publicAPI.addMissingNodes(model.renderable.getRenderersByReference());
        publicAPI.removeUnusedNodes();
        publicAPI.initialize();
        model.children.forEach(function (child) {
          child.setOpenGLRenderWindow(publicAPI);
        });
      }
    };

    publicAPI.initialize = function () {
      if (!model.initialized) {
        model.context = publicAPI.get3DContext();
        model.textureUnitManager = vtkTextureUnitManager.newInstance();
        model.textureUnitManager.setContext(model.context);
        model.shaderCache.setContext(model.context); // initialize blending for transparency

        var gl = model.context;
        gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
        gl.depthFunc(gl.LEQUAL);
        gl.enable(gl.BLEND);
        model.initialized = true;
      }
    };

    publicAPI.makeCurrent = function () {
      model.context.makeCurrent();
    };

    publicAPI.setContainer = function (el) {
      if (model.el && model.el !== el) {
        if (model.canvas.parentNode !== model.el) {
          vtkErrorMacro$5('Error: canvas parent node does not match container');
        } // Remove canvas from previous container


        model.el.removeChild(model.canvas); // If the renderer has previously added
        // a background image, remove it from the DOM.

        if (model.el.contains(model.bgImage)) {
          model.el.removeChild(model.bgImage);
        }
      }

      if (model.el !== el) {
        model.el = el;

        if (model.el) {
          model.el.appendChild(model.canvas); // If the renderer is set to use a background
          // image, attach it to the DOM.

          if (model.useBackgroundImage) {
            model.el.appendChild(model.bgImage);
          }
        } // Trigger modified()


        publicAPI.modified();
      }
    };

    publicAPI.getContainer = function () {
      return model.el;
    };

    publicAPI.getContainerSize = function () {
      if (!model.containerSize && model.el) {
        var _model$el$getBounding = model.el.getBoundingClientRect(),
            width = _model$el$getBounding.width,
            height = _model$el$getBounding.height;

        model.containerSize = [width, height];
      }

      return model.containerSize || model.size;
    };

    publicAPI.getFramebufferSize = function () {
      if (model.activeFramebuffer) {
        return model.activeFramebuffer.getSize();
      }

      return model.size;
    };

    publicAPI.getPixelData = function (x1, y1, x2, y2) {
      var pixels = new Uint8Array((x2 - x1 + 1) * (y2 - y1 + 1) * 4);
      model.context.readPixels(x1, y1, x2 - x1 + 1, y2 - y1 + 1, model.context.RGBA, model.context.UNSIGNED_BYTE, pixels);
      return pixels;
    };

    publicAPI.get3DContext = function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        preserveDrawingBuffer: false,
        depth: true,
        alpha: true
      };
      var result = null; // Do we have webxr support

      if (navigator.xr !== undefined && navigator.xr.isSessionSupported('immersive-vr')) {
        publicAPI.invokeHaveVRDisplay();
      }

      var webgl2Supported = typeof WebGL2RenderingContext !== 'undefined';
      model.webgl2 = false;

      if (model.defaultToWebgl2 && webgl2Supported) {
        result = model.canvas.getContext('webgl2', options);

        if (result) {
          model.webgl2 = true;
          vtkDebugMacro$4('using webgl2');
        }
      }

      if (!result) {
        vtkDebugMacro$4('using webgl1');
        result = model.canvas.getContext('webgl', options) || model.canvas.getContext('experimental-webgl', options);
      } // prevent default context lost handler


      model.canvas.addEventListener('webglcontextlost', function (event) {
        event.preventDefault();
      }, false);
      model.canvas.addEventListener('webglcontextrestored', publicAPI.restoreContext, false);
      return result;
    }; // Request an XR session on the user device with WebXR,
    // typically in response to a user request such as a button press


    publicAPI.startXR = function (isAR) {
      if (navigator.xr === undefined) {
        throw new Error('WebXR is not available');
      }

      model.xrSessionIsAR = isAR;
      var sessionType = isAR ? 'immersive-ar' : 'immersive-vr';

      if (!navigator.xr.isSessionSupported(sessionType)) {
        if (isAR) {
          throw new Error('Device does not support AR session');
        } else {
          throw new Error('VR display is not available');
        }
      }

      if (model.xrSession === null) {
        navigator.xr.requestSession(sessionType).then(publicAPI.enterXR, function () {
          throw new Error('Failed to create XR session!');
        });
      } else {
        throw new Error('XR Session already exists!');
      }
    }; // When an XR session is available, set up the XRWebGLLayer
    // and request the first animation frame for the device


    publicAPI.enterXR = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(xrSession) {
        var gl, glLayer;
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                model.xrSession = xrSession;
                model.oldCanvasSize = model.size.slice();

                if (!(model.xrSession !== null)) {
                  _context.next = 14;
                  break;
                }

                gl = publicAPI.get3DContext();
                _context.next = 6;
                return gl.makeXRCompatible();

              case 6:
                glLayer = new global.XRWebGLLayer(model.xrSession, gl);
                publicAPI.setSize(glLayer.framebufferWidth, glLayer.framebufferHeight);
                model.xrSession.updateRenderState({
                  baseLayer: glLayer
                });
                model.xrSession.requestReferenceSpace('local').then(function (refSpace) {
                  model.xrReferenceSpace = refSpace;
                });
                model.renderable.getInteractor().switchToXRAnimation();
                model.xrSceneFrame = model.xrSession.requestAnimationFrame(publicAPI.xrRender);
                _context.next = 15;
                break;

              case 14:
                throw new Error('Failed to enter VR with a null xrSession.');

              case 15:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();

    publicAPI.stopXR = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
      var gl, ren;
      return regenerator.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(navigator.xr === undefined)) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return");

            case 2:
              if (!(model.xrSession !== null)) {
                _context2.next = 10;
                break;
              }

              model.xrSession.cancelAnimationFrame(model.xrSceneFrame);
              model.renderable.getInteractor().returnFromXRAnimation();
              gl = publicAPI.get3DContext();
              gl.bindFramebuffer(gl.FRAMEBUFFER, null);
              _context2.next = 9;
              return model.xrSession.end().catch(function (error) {
                if (!(error instanceof DOMException)) {
                  throw error;
                }
              });

            case 9:
              model.xrSession = null;

            case 10:
              if (model.oldCanvasSize !== undefined) {
                publicAPI.setSize.apply(publicAPI, _toConsumableArray(model.oldCanvasSize));
              } // Reset to default canvas


              ren = model.renderable.getRenderers()[0];
              ren.getActiveCamera().setProjectionMatrix(null);
              ren.resetCamera();
              ren.setViewport(0.0, 0, 1.0, 1.0);
              publicAPI.traverseAllPasses();

            case 16:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    publicAPI.xrRender = /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3(t, frame) {
        var xrSession, xrPose, gl, glLayer, ren;
        return regenerator.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                xrSession = frame.session;
                model.renderable.getInteractor().updateXRGamepads(xrSession, frame, model.xrReferenceSpace);
                model.xrSceneFrame = model.xrSession.requestAnimationFrame(publicAPI.xrRender);
                xrPose = frame.getViewerPose(model.xrReferenceSpace);

                if (xrPose) {
                  gl = publicAPI.get3DContext();

                  if (model.xrSessionIsAR && model.oldCanvasSize !== undefined) {
                    gl.canvas.width = model.oldCanvasSize[0];
                    gl.canvas.height = model.oldCanvasSize[1];
                  }

                  glLayer = xrSession.renderState.baseLayer;
                  gl.bindFramebuffer(gl.FRAMEBUFFER, glLayer.framebuffer);
                  gl.clear(gl.COLOR_BUFFER_BIT);
                  gl.clear(gl.DEPTH_BUFFER_BIT); // get the first renderer

                  ren = model.renderable.getRenderers()[0]; // Do a render pass for each eye

                  xrPose.views.forEach(function (view) {
                    var viewport = glLayer.getViewport(view);
                    gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height); // TODO: Appropriate handling for AR passthrough on HMDs
                    // with two eyes will require further investigation.

                    if (!model.xrSessionIsAR) {
                      if (view.eye === 'left') {
                        ren.setViewport(0, 0, 0.5, 1.0);
                      } else if (view.eye === 'right') {
                        ren.setViewport(0.5, 0, 1.0, 1.0);
                      } else {
                        // No handling for non-eye viewport
                        return;
                      }
                    }

                    ren.getActiveCamera().computeViewParametersFromPhysicalMatrix(view.transform.inverse.matrix);
                    ren.getActiveCamera().setProjectionMatrix(view.projectionMatrix);
                    publicAPI.traverseAllPasses();
                  });
                }

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x2, _x3) {
        return _ref3.apply(this, arguments);
      };
    }();

    publicAPI.restoreContext = function () {
      var rp = vtkRenderPass$1.newInstance();
      rp.setCurrentOperation('Release');
      rp.traverse(publicAPI, null);
    };

    publicAPI.activateTexture = function (texture) {
      // Only add if it isn't already there
      var result = model._textureResourceIds.get(texture);

      if (result !== undefined) {
        model.context.activeTexture(model.context.TEXTURE0 + result);
        return;
      }

      var activeUnit = publicAPI.getTextureUnitManager().allocate();

      if (activeUnit < 0) {
        vtkErrorMacro$5('Hardware does not support the number of textures defined.');
        return;
      }

      model._textureResourceIds.set(texture, activeUnit);

      model.context.activeTexture(model.context.TEXTURE0 + activeUnit);
    };

    publicAPI.deactivateTexture = function (texture) {
      // Only deactivate if it isn't already there
      var result = model._textureResourceIds.get(texture);

      if (result !== undefined) {
        publicAPI.getTextureUnitManager().free(result);
        delete model._textureResourceIds.delete(texture);
      }
    };

    publicAPI.getTextureUnitForTexture = function (texture) {
      var result = model._textureResourceIds.get(texture);

      if (result !== undefined) {
        return result;
      }

      return -1;
    };

    publicAPI.getDefaultTextureInternalFormat = function (vtktype, numComps, useFloat) {
      if (model.webgl2) {
        switch (vtktype) {
          case VtkDataTypes$3.UNSIGNED_CHAR:
            switch (numComps) {
              case 1:
                return model.context.R8;

              case 2:
                return model.context.RG8;

              case 3:
                return model.context.RGB8;

              case 4:
              default:
                return model.context.RGBA8;
            }

          default:
          case VtkDataTypes$3.FLOAT:
            switch (numComps) {
              case 1:
                return model.context.R16F;

              case 2:
                return model.context.RG16F;

              case 3:
                return model.context.RGB16F;

              case 4:
              default:
                return model.context.RGBA16F;
            }

        }
      } // webgl1 only supports four types


      switch (numComps) {
        case 1:
          return model.context.LUMINANCE;

        case 2:
          return model.context.LUMINANCE_ALPHA;

        case 3:
          return model.context.RGB;

        case 4:
        default:
          return model.context.RGBA;
      }
    };

    publicAPI.setBackgroundImage = function (img) {
      model.bgImage.src = img.src;
    };

    publicAPI.setUseBackgroundImage = function (value) {
      model.useBackgroundImage = value; // Add or remove the background image from the
      // DOM as specified.

      if (model.useBackgroundImage && !model.el.contains(model.bgImage)) {
        model.el.appendChild(model.bgImage);
      } else if (!model.useBackgroundImage && model.el.contains(model.bgImage)) {
        model.el.removeChild(model.bgImage);
      }
    };

    function getCanvasDataURL() {
      var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : model.imageFormat;
      // Copy current canvas to not modify the original
      var temporaryCanvas = document.createElement('canvas');
      var temporaryContext = temporaryCanvas.getContext('2d');
      temporaryCanvas.width = model.canvas.width;
      temporaryCanvas.height = model.canvas.height;
      temporaryContext.drawImage(model.canvas, 0, 0); // Get current client rect to place canvas

      var mainBoundingClientRect = model.canvas.getBoundingClientRect();
      var renderWindow = model.renderable;
      var renderers = renderWindow.getRenderers();
      renderers.forEach(function (renderer) {
        var viewProps = renderer.getViewProps();
        viewProps.forEach(function (viewProp) {
          // Check if the prop has a container that should have canvas
          if (viewProp.getContainer) {
            var container = viewProp.getContainer();
            var canvasList = container.getElementsByTagName('canvas'); // Go throughout all canvas and copy it into temporary main canvas

            for (var i = 0; i < canvasList.length; i++) {
              var currentCanvas = canvasList[i];
              var boundingClientRect = currentCanvas.getBoundingClientRect();
              var newXPosition = boundingClientRect.x - mainBoundingClientRect.x;
              var newYPosition = boundingClientRect.y - mainBoundingClientRect.y;
              temporaryContext.drawImage(currentCanvas, newXPosition, newYPosition);
            }
          }
        });
      });
      var screenshot = temporaryCanvas.toDataURL(format);
      temporaryCanvas.remove();
      publicAPI.invokeImageReady(screenshot);
    }

    publicAPI.captureNextImage = function () {
      var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'image/png';

      var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref4$resetCamera = _ref4.resetCamera,
          resetCamera = _ref4$resetCamera === void 0 ? false : _ref4$resetCamera,
          _ref4$size = _ref4.size,
          size = _ref4$size === void 0 ? null : _ref4$size,
          _ref4$scale = _ref4.scale,
          scale = _ref4$scale === void 0 ? 1 : _ref4$scale;

      if (model.deleted) {
        return null;
      }

      model.imageFormat = format;
      var previous = model.notifyStartCaptureImage;
      model.notifyStartCaptureImage = true;
      model._screenshot = {
        size: !!size || scale !== 1 ? size || model.size.map(function (val) {
          return val * scale;
        }) : null
      };
      return new Promise(function (resolve, reject) {
        var subscription = publicAPI.onImageReady(function (imageURL) {
          if (model._screenshot.size === null) {
            model.notifyStartCaptureImage = previous;
            subscription.unsubscribe();

            if (model._screenshot.placeHolder) {
              // resize the main canvas back to its original size and show it
              model.size = model._screenshot.originalSize; // process the resize

              publicAPI.modified(); // restore the saved camera parameters, if applicable

              if (model._screenshot.cameras) {
                model._screenshot.cameras.forEach(function (_ref5) {
                  var restoreParamsFn = _ref5.restoreParamsFn,
                      arg = _ref5.arg;
                  return restoreParamsFn(arg);
                });
              } // Trigger a render at the original size


              publicAPI.traverseAllPasses(); // Remove and clean up the placeholder, revealing the original

              model.el.removeChild(model._screenshot.placeHolder);

              model._screenshot.placeHolder.remove();

              model._screenshot = null;
            }

            resolve(imageURL);
          } else {
            // Create a placeholder image overlay while we resize and render
            var tmpImg = document.createElement('img');
            tmpImg.style = SCREENSHOT_PLACEHOLDER;
            tmpImg.src = imageURL;
            model._screenshot.placeHolder = model.el.appendChild(tmpImg); // hide the main canvas

            model.canvas.style.display = 'none'; // remember the main canvas original size, then resize it

            model._screenshot.originalSize = model.size;
            model.size = model._screenshot.size;
            model._screenshot.size = null; // process the resize

            publicAPI.modified();

            if (resetCamera) {
              // If resetCamera was requested, we first save camera parameters
              // from all the renderers, so we can restore them later
              model._screenshot.cameras = model.renderable.getRenderers().map(function (renderer) {
                var camera = renderer.getActiveCamera();
                var params = camera.get('focalPoint', 'position', 'parallelScale');
                return {
                  resetCameraFn: renderer.resetCamera,
                  restoreParamsFn: camera.set,
                  // "clone" the params so we don't keep refs to properties
                  arg: JSON.parse(JSON.stringify(params))
                };
              }); // Perform the resetCamera() on each renderer only after capturing
              // the params from all active cameras, in case there happen to be
              // linked cameras among the renderers.

              model._screenshot.cameras.forEach(function (_ref6) {
                var resetCameraFn = _ref6.resetCameraFn;
                return resetCameraFn();
              });
            } // Trigger a render at the custom size


            publicAPI.traverseAllPasses();
          }
        });
      });
    };

    publicAPI.getGLInformations = function () {
      var gl = publicAPI.get3DContext();
      var glTextureFloat = gl.getExtension('OES_texture_float');
      var glTextureHalfFloat = gl.getExtension('OES_texture_half_float');
      var glDebugRendererInfo = gl.getExtension('WEBGL_debug_renderer_info');
      var glDrawBuffers = gl.getExtension('WEBGL_draw_buffers');
      var glAnisotropic = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
      var params = [['Max Vertex Attributes', 'MAX_VERTEX_ATTRIBS', gl.getParameter(gl.MAX_VERTEX_ATTRIBS)], ['Max Varying Vectors', 'MAX_VARYING_VECTORS', gl.getParameter(gl.MAX_VARYING_VECTORS)], ['Max Vertex Uniform Vectors', 'MAX_VERTEX_UNIFORM_VECTORS', gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS)], ['Max Fragment Uniform Vectors', 'MAX_FRAGMENT_UNIFORM_VECTORS', gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS)], ['Max Fragment Texture Image Units', 'MAX_TEXTURE_IMAGE_UNITS', gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS)], ['Max Vertex Texture Image Units', 'MAX_VERTEX_TEXTURE_IMAGE_UNITS', gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS)], ['Max Combined Texture Image Units', 'MAX_COMBINED_TEXTURE_IMAGE_UNITS', gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS)], ['Max 2D Texture Size', 'MAX_TEXTURE_SIZE', gl.getParameter(gl.MAX_TEXTURE_SIZE)], ['Max Cube Texture Size', 'MAX_CUBE_MAP_TEXTURE_SIZE', gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE)], ['Max Texture Anisotropy', 'MAX_TEXTURE_MAX_ANISOTROPY_EXT', glAnisotropic && gl.getParameter(glAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT)], ['Point Size Range', 'ALIASED_POINT_SIZE_RANGE', gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE).join(' - ')], ['Line Width Range', 'ALIASED_LINE_WIDTH_RANGE', gl.getParameter(gl.ALIASED_LINE_WIDTH_RANGE).join(' - ')], ['Max Viewport Dimensions', 'MAX_VIEWPORT_DIMS', gl.getParameter(gl.MAX_VIEWPORT_DIMS).join(' - ')], ['Max Renderbuffer Size', 'MAX_RENDERBUFFER_SIZE', gl.getParameter(gl.MAX_RENDERBUFFER_SIZE)], ['Framebuffer Red Bits', 'RED_BITS', gl.getParameter(gl.RED_BITS)], ['Framebuffer Green Bits', 'GREEN_BITS', gl.getParameter(gl.GREEN_BITS)], ['Framebuffer Blue Bits', 'BLUE_BITS', gl.getParameter(gl.BLUE_BITS)], ['Framebuffer Alpha Bits', 'ALPHA_BITS', gl.getParameter(gl.ALPHA_BITS)], ['Framebuffer Depth Bits', 'DEPTH_BITS', gl.getParameter(gl.DEPTH_BITS)], ['Framebuffer Stencil Bits', 'STENCIL_BITS', gl.getParameter(gl.STENCIL_BITS)], ['Framebuffer Subpixel Bits', 'SUBPIXEL_BITS', gl.getParameter(gl.SUBPIXEL_BITS)], ['MSAA Samples', 'SAMPLES', gl.getParameter(gl.SAMPLES)], ['MSAA Sample Buffers', 'SAMPLE_BUFFERS', gl.getParameter(gl.SAMPLE_BUFFERS)], ['Supported Formats for UByte Render Targets     ', 'UNSIGNED_BYTE RENDER TARGET FORMATS', [glTextureFloat && checkRenderTargetSupport(gl, gl.RGBA, gl.UNSIGNED_BYTE) ? 'RGBA' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.RGB, gl.UNSIGNED_BYTE) ? 'RGB' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.LUMINANCE, gl.UNSIGNED_BYTE) ? 'LUMINANCE' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.ALPHA, gl.UNSIGNED_BYTE) ? 'ALPHA' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.LUMINANCE_ALPHA, gl.UNSIGNED_BYTE) ? 'LUMINANCE_ALPHA' : ''].join(' ')], ['Supported Formats for Half Float Render Targets', 'HALF FLOAT RENDER TARGET FORMATS', [glTextureHalfFloat && checkRenderTargetSupport(gl, gl.RGBA, glTextureHalfFloat.HALF_FLOAT_OES) ? 'RGBA' : '', glTextureHalfFloat && checkRenderTargetSupport(gl, gl.RGB, glTextureHalfFloat.HALF_FLOAT_OES) ? 'RGB' : '', glTextureHalfFloat && checkRenderTargetSupport(gl, gl.LUMINANCE, glTextureHalfFloat.HALF_FLOAT_OES) ? 'LUMINANCE' : '', glTextureHalfFloat && checkRenderTargetSupport(gl, gl.ALPHA, glTextureHalfFloat.HALF_FLOAT_OES) ? 'ALPHA' : '', glTextureHalfFloat && checkRenderTargetSupport(gl, gl.LUMINANCE_ALPHA, glTextureHalfFloat.HALF_FLOAT_OES) ? 'LUMINANCE_ALPHA' : ''].join(' ')], ['Supported Formats for Full Float Render Targets', 'FLOAT RENDER TARGET FORMATS', [glTextureFloat && checkRenderTargetSupport(gl, gl.RGBA, gl.FLOAT) ? 'RGBA' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.RGB, gl.FLOAT) ? 'RGB' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.LUMINANCE, gl.FLOAT) ? 'LUMINANCE' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.ALPHA, gl.FLOAT) ? 'ALPHA' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.LUMINANCE_ALPHA, gl.FLOAT) ? 'LUMINANCE_ALPHA' : ''].join(' ')], ['Max Multiple Render Targets Buffers', 'MAX_DRAW_BUFFERS_WEBGL', glDrawBuffers ? gl.getParameter(glDrawBuffers.MAX_DRAW_BUFFERS_WEBGL) : 0], ['High Float Precision in Vertex Shader', 'HIGH_FLOAT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).rangeMax, '</sup>)'].join('')], ['Medium Float Precision in Vertex Shader', 'MEDIUM_FLOAT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).rangeMax, '</sup>)'].join('')], ['Low Float Precision in Vertex Shader', 'LOW_FLOAT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT).rangeMax, '</sup>)'].join('')], ['High Float Precision in Fragment Shader', 'HIGH_FLOAT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).rangeMax, '</sup>)'].join('')], ['Medium Float Precision in Fragment Shader', 'MEDIUM_FLOAT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).rangeMax, '</sup>)'].join('')], ['Low Float Precision in Fragment Shader', 'LOW_FLOAT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT).rangeMax, '</sup>)'].join('')], ['High Int Precision in Vertex Shader', 'HIGH_INT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT).rangeMax, '</sup>)'].join('')], ['Medium Int Precision in Vertex Shader', 'MEDIUM_INT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT).rangeMax, '</sup>)'].join('')], ['Low Int Precision in Vertex Shader', 'LOW_INT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT).rangeMax, '</sup>)'].join('')], ['High Int Precision in Fragment Shader', 'HIGH_INT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT).rangeMax, '</sup>)'].join('')], ['Medium Int Precision in Fragment Shader', 'MEDIUM_INT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT).rangeMax, '</sup>)'].join('')], ['Low Int Precision in Fragment Shader', 'LOW_INT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT).rangeMax, '</sup>)'].join('')], ['Supported Extensions', 'EXTENSIONS', gl.getSupportedExtensions().join('<br/>\t\t\t\t\t    ')], ['WebGL Renderer', 'RENDERER', gl.getParameter(gl.RENDERER)], ['WebGL Vendor', 'VENDOR', gl.getParameter(gl.VENDOR)], ['WebGL Version', 'VERSION', gl.getParameter(gl.VERSION)], ['Shading Language Version', 'SHADING_LANGUAGE_VERSION', gl.getParameter(gl.SHADING_LANGUAGE_VERSION)], ['Unmasked Renderer', 'UNMASKED_RENDERER', glDebugRendererInfo && gl.getParameter(glDebugRendererInfo.UNMASKED_RENDERER_WEBGL)], ['Unmasked Vendor', 'UNMASKED_VENDOR', glDebugRendererInfo && gl.getParameter(glDebugRendererInfo.UNMASKED_VENDOR_WEBGL)], ['WebGL Version', 'WEBGL_VERSION', model.webgl2 ? 2 : 1]];
      var result = {};

      while (params.length) {
        var _params$pop = params.pop(),
            _params$pop2 = _slicedToArray(_params$pop, 3),
            label = _params$pop2[0],
            key = _params$pop2[1],
            value = _params$pop2[2];

        if (key) {
          result[key] = {
            label: label,
            value: value
          };
        }
      }

      return result;
    };

    publicAPI.traverseAllPasses = function () {
      if (model.renderPasses) {
        for (var index = 0; index < model.renderPasses.length; ++index) {
          model.renderPasses[index].traverse(publicAPI, null);
        }
      }

      if (model.notifyStartCaptureImage) {
        getCanvasDataURL();
      }
    };

    publicAPI.disableCullFace = function () {
      if (model.cullFaceEnabled) {
        model.context.disable(model.context.CULL_FACE);
        model.cullFaceEnabled = false;
      }
    };

    publicAPI.enableCullFace = function () {
      if (!model.cullFaceEnabled) {
        model.context.enable(model.context.CULL_FACE);
        model.cullFaceEnabled = true;
      }
    };

    publicAPI.setViewStream = function (stream) {
      if (model.viewStream === stream) {
        return false;
      }

      if (model.subscription) {
        model.subscription.unsubscribe();
        model.subscription = null;
      }

      model.viewStream = stream;

      if (model.viewStream) {
        // Force background to be transparent + render
        var mainRenderer = model.renderable.getRenderers()[0];
        mainRenderer.getBackgroundByReference()[3] = 0; // Enable display of the background image

        publicAPI.setUseBackgroundImage(true); // Bind to remote stream

        model.subscription = model.viewStream.onImageReady(function (e) {
          return publicAPI.setBackgroundImage(e.image);
        });
        model.viewStream.setSize(model.size[0], model.size[1]);
        model.viewStream.invalidateCache();
        model.viewStream.render();
        publicAPI.modified();
      }

      return true;
    };

    publicAPI.delete = macro.chain(publicAPI.delete, publicAPI.setViewStream, deleteGLContext);
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$m = {
    cullFaceEnabled: false,
    shaderCache: null,
    initialized: false,
    context: null,
    canvas: null,
    cursorVisibility: true,
    cursor: 'pointer',
    textureUnitManager: null,
    textureResourceIds: null,
    containerSize: null,
    renderPasses: [],
    notifyStartCaptureImage: false,
    webgl2: false,
    defaultToWebgl2: true,
    // attempt webgl2 on by default
    activeFramebuffer: null,
    xrSession: null,
    xrSessionIsAR: false,
    xrReferenceSpace: null,
    xrSupported: true,
    imageFormat: 'image/png',
    useOffScreen: false,
    useBackgroundImage: false
  }; // ----------------------------------------------------------------------------

  function extend$o(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$m, initialValues); // Inheritance

    vtkRenderWindowViewNode$1.extend(publicAPI, model, initialValues); // Create internal instances

    model.canvas = document.createElement('canvas');
    model.canvas.style.width = '100%';
    createGLContext();

    if (!model.selector) {
      model.selector = vtkHardwareSelector.newInstance();
      model.selector.setOpenGLRenderWindow(publicAPI);
    } // Create internal bgImage


    model.bgImage = new Image();
    model.bgImage.style.position = 'absolute';
    model.bgImage.style.left = '0';
    model.bgImage.style.top = '0';
    model.bgImage.style.width = '100%';
    model.bgImage.style.height = '100%';
    model.bgImage.style.zIndex = '-1';
    model._textureResourceIds = new Map();
    model.myFactory = vtkViewNodeFactory.newInstance();
    /* eslint-disable no-use-before-define */

    model.myFactory.registerOverride('vtkRenderWindow', newInstance$m);
    /* eslint-enable no-use-before-define */

    model.shaderCache = vtkShaderCache$1.newInstance();
    model.shaderCache.setOpenGLRenderWindow(publicAPI); // setup default forward pass rendering

    model.renderPasses[0] = vtkForwardPass$1.newInstance();
    macro.event(publicAPI, model, 'imageReady');
    macro.event(publicAPI, model, 'haveVRDisplay'); // Build VTK API

    macro.get(publicAPI, model, ['shaderCache', 'textureUnitManager', 'webgl2', 'vrDisplay', 'useBackgroundImage', 'xrSupported']);
    macro.setGet(publicAPI, model, ['initialized', 'context', 'canvas', 'renderPasses', 'notifyStartCaptureImage', 'defaultToWebgl2', 'cursor', 'useOffScreen', // might want to make this not call modified as
    // we change the active framebuffer a lot. Or maybe
    // only mark modified if the size or depth
    // of the buffer has changed
    'activeFramebuffer']);
    macro.setGetArray(publicAPI, model, ['size'], 2); // Object methods

    vtkOpenGLRenderWindow(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$m = macro.newInstance(extend$o, 'vtkOpenGLRenderWindow'); // ----------------------------------------------------------------------------
  // Register API specific RenderWindow implementation
  // ----------------------------------------------------------------------------

  registerViewConstructor('WebGL', newInstance$m); // ----------------------------------------------------------------------------

  var vtkRenderWindow = {
    newInstance: newInstance$m,
    extend: extend$o,
    pushMonitorGLContextCount: pushMonitorGLContextCount,
    popMonitorGLContextCount: popMonitorGLContextCount
  };

  var vtkDebugMacro$3 = macro.vtkDebugMacro;
  /* eslint-disable new-cap */

  /*
   * Convenience function to access elements of a gl-matrix.  If it turns
   * out I have rows and columns swapped everywhere, then I'll just change
   * the order of 'row' and 'col' parameters in this function
   */
  // function getMatrixElement(matrix, row, col) {
  //   const idx = (row * 4) + col;
  //   return matrix[idx];
  // }
  // ----------------------------------------------------------------------------
  // vtkCamera methods
  // ----------------------------------------------------------------------------

  function vtkCamera(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkCamera'); // Set up private variables and methods

    var origin = new Float64Array(3);
    var dopbasis = new Float64Array([0.0, 0.0, -1.0]);
    var upbasis = new Float64Array([0.0, 1.0, 0.0]);
    var tmpMatrix = identity(new Float64Array(16));
    var tmpvec1 = new Float64Array(3);
    var tmpvec2 = new Float64Array(3);
    var tmpvec3 = new Float64Array(3);
    var rotateMatrix = identity(new Float64Array(16));
    var trans = identity(new Float64Array(16));
    var newPosition = new Float64Array(3);
    var newFocalPoint = new Float64Array(3); // Internal Functions that don't need to be public

    function computeViewPlaneNormal() {
      // VPN is -DOP
      model.viewPlaneNormal[0] = -model.directionOfProjection[0];
      model.viewPlaneNormal[1] = -model.directionOfProjection[1];
      model.viewPlaneNormal[2] = -model.directionOfProjection[2];
    }

    publicAPI.orthogonalizeViewUp = function () {
      var vt = publicAPI.getViewMatrix();
      model.viewUp[0] = vt[4];
      model.viewUp[1] = vt[5];
      model.viewUp[2] = vt[6];
      publicAPI.modified();
    };

    publicAPI.setPosition = function (x, y, z) {
      if (x === model.position[0] && y === model.position[1] && z === model.position[2]) {
        return;
      }

      model.position[0] = x;
      model.position[1] = y;
      model.position[2] = z; // recompute the focal distance

      publicAPI.computeDistance();
      publicAPI.modified();
    };

    publicAPI.setFocalPoint = function (x, y, z) {
      if (x === model.focalPoint[0] && y === model.focalPoint[1] && z === model.focalPoint[2]) {
        return;
      }

      model.focalPoint[0] = x;
      model.focalPoint[1] = y;
      model.focalPoint[2] = z; // recompute the focal distance

      publicAPI.computeDistance();
      publicAPI.modified();
    };

    publicAPI.setDistance = function (d) {
      if (model.distance === d) {
        return;
      }

      model.distance = d;

      if (model.distance < 1e-20) {
        model.distance = 1e-20;
        vtkDebugMacro$3('Distance is set to minimum.');
      } // we want to keep the camera pointing in the same direction


      var vec = model.directionOfProjection; // recalculate FocalPoint

      model.focalPoint[0] = model.position[0] + vec[0] * model.distance;
      model.focalPoint[1] = model.position[1] + vec[1] * model.distance;
      model.focalPoint[2] = model.position[2] + vec[2] * model.distance;
      publicAPI.modified();
    }; //----------------------------------------------------------------------------
    // This method must be called when the focal point or camera position changes


    publicAPI.computeDistance = function () {
      var dx = model.focalPoint[0] - model.position[0];
      var dy = model.focalPoint[1] - model.position[1];
      var dz = model.focalPoint[2] - model.position[2];
      model.distance = Math.sqrt(dx * dx + dy * dy + dz * dz);

      if (model.distance < 1e-20) {
        model.distance = 1e-20;
        vtkDebugMacro$3('Distance is set to minimum.');
        var vec = model.directionOfProjection; // recalculate FocalPoint

        model.focalPoint[0] = model.position[0] + vec[0] * model.distance;
        model.focalPoint[1] = model.position[1] + vec[1] * model.distance;
        model.focalPoint[2] = model.position[2] + vec[2] * model.distance;
      }

      model.directionOfProjection[0] = dx / model.distance;
      model.directionOfProjection[1] = dy / model.distance;
      model.directionOfProjection[2] = dz / model.distance;
      computeViewPlaneNormal();
    }; //----------------------------------------------------------------------------
    // Move the position of the camera along the view plane normal. Moving
    // towards the focal point (e.g., > 1) is a dolly-in, moving away
    // from the focal point (e.g., < 1) is a dolly-out.


    publicAPI.dolly = function (amount) {
      if (amount <= 0.0) {
        return;
      } // dolly moves the camera towards the focus


      var d = model.distance / amount;
      publicAPI.setPosition(model.focalPoint[0] - d * model.directionOfProjection[0], model.focalPoint[1] - d * model.directionOfProjection[1], model.focalPoint[2] - d * model.directionOfProjection[2]);
    };

    publicAPI.roll = function (angle) {
      var eye = model.position;
      var at = model.focalPoint;
      var up = model.viewUp;
      var viewUpVec4 = new Float64Array([up[0], up[1], up[2], 0.0]);
      identity(rotateMatrix);
      var viewDir = new Float64Array([at[0] - eye[0], at[1] - eye[1], at[2] - eye[2]]);
      rotate(rotateMatrix, rotateMatrix, radiansFromDegrees(angle), viewDir);
      transformMat4(viewUpVec4, viewUpVec4, rotateMatrix);
      model.viewUp[0] = viewUpVec4[0];
      model.viewUp[1] = viewUpVec4[1];
      model.viewUp[2] = viewUpVec4[2];
      publicAPI.modified();
    };

    publicAPI.azimuth = function (angle) {
      var fp = model.focalPoint;
      identity(trans); // translate the focal point to the origin,
      // rotate about view up,
      // translate back again

      translate(trans, trans, fp);
      rotate(trans, trans, radiansFromDegrees(angle), model.viewUp);
      translate(trans, trans, [-fp[0], -fp[1], -fp[2]]); // apply the transform to the position

      transformMat4$1(newPosition, model.position, trans);
      publicAPI.setPosition(newPosition[0], newPosition[1], newPosition[2]);
    };

    publicAPI.yaw = function (angle) {
      var position = model.position;
      identity(trans); // translate the camera to the origin,
      // rotate about axis,
      // translate back again

      translate(trans, trans, position);
      rotate(trans, trans, radiansFromDegrees(angle), model.viewUp);
      translate(trans, trans, [-position[0], -position[1], -position[2]]); // apply the transform to the position

      transformMat4$1(newFocalPoint, model.focalPoint, trans);
      publicAPI.setFocalPoint(newFocalPoint[0], newFocalPoint[1], newFocalPoint[2]);
    };

    publicAPI.elevation = function (angle) {
      var fp = model.focalPoint; // get the eye / camera position from the viewMatrix

      var vt = publicAPI.getViewMatrix();
      var axis = [-vt[0], -vt[1], -vt[2]];
      identity(trans); // translate the focal point to the origin,
      // rotate about view up,
      // translate back again

      translate(trans, trans, fp);
      rotate(trans, trans, radiansFromDegrees(angle), axis);
      translate(trans, trans, [-fp[0], -fp[1], -fp[2]]); // apply the transform to the position

      transformMat4$1(newPosition, model.position, trans);
      publicAPI.setPosition(newPosition[0], newPosition[1], newPosition[2]);
    };

    publicAPI.pitch = function (angle) {
      var position = model.position;
      var vt = publicAPI.getViewMatrix();
      var axis = [vt[0], vt[1], vt[2]];
      identity(trans); // translate the camera to the origin,
      // rotate about axis,
      // translate back again

      translate(trans, trans, position);
      rotate(trans, trans, radiansFromDegrees(angle), axis);
      translate(trans, trans, [-position[0], -position[1], -position[2]]); // apply the transform to the focal point

      transformMat4$1(newFocalPoint, model.focalPoint, trans);
      publicAPI.setFocalPoint.apply(publicAPI, _toConsumableArray(newFocalPoint));
    };

    publicAPI.zoom = function (factor) {
      if (factor <= 0) {
        return;
      }

      if (model.parallelProjection) {
        model.parallelScale /= factor;
      } else {
        model.viewAngle /= factor;
      }

      publicAPI.modified();
    };

    publicAPI.translate = function (x, y, z) {
      var offset = [x, y, z];
      add(model.position, offset, model.position);
      add(model.focalPoint, offset, model.focalPoint);
      publicAPI.computeDistance();
      publicAPI.modified();
    };

    publicAPI.applyTransform = function (transformMat4$1) {
      var vuOld = [].concat(_toConsumableArray(model.viewUp), [1.0]);
      var posNew = [];
      var fpNew = [];
      var vuNew = [];
      vuOld[0] += model.position[0];
      vuOld[1] += model.position[1];
      vuOld[2] += model.position[2];
      transformMat4(posNew, [].concat(_toConsumableArray(model.position), [1.0]), transformMat4$1);
      transformMat4(fpNew, [].concat(_toConsumableArray(model.focalPoint), [1.0]), transformMat4$1);
      transformMat4(vuNew, vuOld, transformMat4$1);
      vuNew[0] -= posNew[0];
      vuNew[1] -= posNew[1];
      vuNew[2] -= posNew[2];
      publicAPI.setPosition.apply(publicAPI, _toConsumableArray(posNew.slice(0, 3)));
      publicAPI.setFocalPoint.apply(publicAPI, _toConsumableArray(fpNew.slice(0, 3)));
      publicAPI.setViewUp.apply(publicAPI, _toConsumableArray(vuNew.slice(0, 3)));
    };

    publicAPI.getThickness = function () {
      return model.clippingRange[1] - model.clippingRange[0];
    };

    publicAPI.setThickness = function (thickness) {
      var t = thickness;

      if (t < 1e-20) {
        t = 1e-20;
        vtkDebugMacro$3('Thickness is set to minimum.');
      }

      publicAPI.setClippingRange(model.clippingRange[0], model.clippingRange[0] + t);
    };

    publicAPI.setThicknessFromFocalPoint = function (thickness) {
      var t = thickness;

      if (t < 1e-20) {
        t = 1e-20;
        vtkDebugMacro$3('Thickness is set to minimum.');
      }

      publicAPI.setClippingRange(model.distance - t / 2, model.distance + t / 2);
    }; // Unimplemented functions


    publicAPI.setRoll = function (angle) {}; // dependency on GetOrientation() and a model.ViewTransform object, see https://github.com/Kitware/VTK/blob/master/Common/Transforms/vtkTransform.cxx and https://vtk.org/doc/nightly/html/classvtkTransform.html


    publicAPI.getRoll = function () {};

    publicAPI.setObliqueAngles = function (alpha, beta) {};

    publicAPI.getOrientation = function () {};

    publicAPI.getOrientationWXYZ = function () {};

    publicAPI.getFrustumPlanes = function (aspect) {// Return array of 24 params (4 params for each of 6 plane equations)
    };

    publicAPI.getCameraLightTransformMatrix = function () {};

    publicAPI.deepCopy = function (sourceCamera) {};

    publicAPI.physicalOrientationToWorldDirection = function (ori) {
      // push the x axis through the orientation quat
      var oriq = fromValues(ori[0], ori[1], ori[2], ori[3]);
      var coriq = create();
      var qdir = fromValues(0.0, 0.0, 1.0, 0.0);
      conjugate(coriq, oriq); // rotate the z axis by the quat

      multiply(qdir, oriq, qdir);
      multiply(qdir, qdir, coriq); // return the z axis in world coords

      return [qdir[0], qdir[1], qdir[2]];
    };

    publicAPI.getPhysicalToWorldMatrix = function (result) {
      publicAPI.getWorldToPhysicalMatrix(result);
      invert(result, result);
    };

    publicAPI.getWorldToPhysicalMatrix = function (result) {
      identity(result); // now the physical to vtk world rotation tform

      var physVRight = [3];
      cross(model.physicalViewNorth, model.physicalViewUp, physVRight);
      result[0] = physVRight[0];
      result[1] = physVRight[1];
      result[2] = physVRight[2];
      result[4] = model.physicalViewUp[0];
      result[5] = model.physicalViewUp[1];
      result[6] = model.physicalViewUp[2];
      result[8] = -model.physicalViewNorth[0];
      result[9] = -model.physicalViewNorth[1];
      result[10] = -model.physicalViewNorth[2];
      transpose(result, result);
      set$1(tmpvec1, 1 / model.physicalScale, 1 / model.physicalScale, 1 / model.physicalScale);
      scale$1(result, result, tmpvec1);
      translate(result, result, model.physicalTranslation);
    };

    publicAPI.computeViewParametersFromViewMatrix = function (vmat) {
      // invert to get view to world
      invert(tmpMatrix, vmat); // note with glmatrix operations happen in
      // the reverse order
      // mat.scale
      // mat.translate
      // will result in the translation then the scale
      // mat.mult(a,b)
      // results in perform the B transformation then A
      // then extract the params position, orientation
      // push 0,0,0 through to get a translation

      transformMat4$1(tmpvec1, origin, tmpMatrix);
      publicAPI.computeDistance();
      var oldDist = model.distance;
      publicAPI.setPosition(tmpvec1[0], tmpvec1[1], tmpvec1[2]); // push basis vectors to get orientation

      transformMat4$1(tmpvec2, dopbasis, tmpMatrix);
      subtract$1(tmpvec2, tmpvec2, tmpvec1);
      normalize$3(tmpvec2, tmpvec2);
      publicAPI.setDirectionOfProjection(tmpvec2[0], tmpvec2[1], tmpvec2[2]);
      transformMat4$1(tmpvec3, upbasis, tmpMatrix);
      subtract$1(tmpvec3, tmpvec3, tmpvec1);
      normalize$3(tmpvec3, tmpvec3);
      publicAPI.setViewUp(tmpvec3[0], tmpvec3[1], tmpvec3[2]);
      publicAPI.setDistance(oldDist);
    }; // the provided matrix should include
    // translation and orientation only
    // mat is physical to view


    publicAPI.computeViewParametersFromPhysicalMatrix = function (mat) {
      // get the WorldToPhysicalMatrix
      publicAPI.getWorldToPhysicalMatrix(tmpMatrix); // first convert the physical -> view matrix to be
      // world -> view

      multiply$1(tmpMatrix, mat, tmpMatrix);
      publicAPI.computeViewParametersFromViewMatrix(tmpMatrix);
    };

    publicAPI.setViewMatrix = function (mat) {
      model.viewMatrix = mat;

      if (model.viewMatrix) {
        copy(tmpMatrix, model.viewMatrix);
        publicAPI.computeViewParametersFromViewMatrix(tmpMatrix);
        transpose(model.viewMatrix, model.viewMatrix);
      }
    };

    publicAPI.getViewMatrix = function () {
      if (model.viewMatrix) {
        return model.viewMatrix;
      }

      lookAt(tmpMatrix, model.position, // eye
      model.focalPoint, // at
      model.viewUp // up
      );
      transpose(tmpMatrix, tmpMatrix);
      var result = new Float64Array(16);
      copy(result, tmpMatrix);
      return result;
    };

    publicAPI.setProjectionMatrix = function (mat) {
      model.projectionMatrix = mat;
    };

    publicAPI.getProjectionMatrix = function (aspect, nearz, farz) {
      var result = new Float64Array(16);
      identity(result);

      if (model.projectionMatrix) {
        var scale = 1 / model.physicalScale;
        set$1(tmpvec1, scale, scale, scale);
        copy(result, model.projectionMatrix);
        scale$1(result, result, tmpvec1);
        transpose(result, result);
        return result;
      }

      identity(tmpMatrix); // FIXME: Not sure what to do about adjust z buffer here
      // adjust Z-buffer range
      // this->ProjectionTransform->AdjustZBuffer( -1, +1, nearz, farz );

      var cWidth = model.clippingRange[1] - model.clippingRange[0];
      var cRange = [model.clippingRange[0] + (nearz + 1) * cWidth / 2.0, model.clippingRange[0] + (farz + 1) * cWidth / 2.0];

      if (model.parallelProjection) {
        // set up a rectangular parallelipiped
        var width = model.parallelScale * aspect;
        var height = model.parallelScale;
        var xmin = (model.windowCenter[0] - 1.0) * width;
        var xmax = (model.windowCenter[0] + 1.0) * width;
        var ymin = (model.windowCenter[1] - 1.0) * height;
        var ymax = (model.windowCenter[1] + 1.0) * height;
        ortho(tmpMatrix, xmin, xmax, ymin, ymax, cRange[0], cRange[1]);
        transpose(tmpMatrix, tmpMatrix);
      } else if (model.useOffAxisProjection) {
        throw new Error('Off-Axis projection is not supported at this time');
      } else {
        var tmp = Math.tan(radiansFromDegrees(model.viewAngle) / 2.0);

        var _width;

        var _height;

        if (model.useHorizontalViewAngle === true) {
          _width = model.clippingRange[0] * tmp;
          _height = model.clippingRange[0] * tmp / aspect;
        } else {
          _width = model.clippingRange[0] * tmp * aspect;
          _height = model.clippingRange[0] * tmp;
        }

        var _xmin = (model.windowCenter[0] - 1.0) * _width;

        var _xmax = (model.windowCenter[0] + 1.0) * _width;

        var _ymin = (model.windowCenter[1] - 1.0) * _height;

        var _ymax = (model.windowCenter[1] + 1.0) * _height;

        var znear = cRange[0];
        var zfar = cRange[1];
        tmpMatrix[0] = 2.0 * znear / (_xmax - _xmin);
        tmpMatrix[5] = 2.0 * znear / (_ymax - _ymin);
        tmpMatrix[2] = (_xmin + _xmax) / (_xmax - _xmin);
        tmpMatrix[6] = (_ymin + _ymax) / (_ymax - _ymin);
        tmpMatrix[10] = -(znear + zfar) / (zfar - znear);
        tmpMatrix[14] = -1.0;
        tmpMatrix[11] = -2.0 * znear * zfar / (zfar - znear);
        tmpMatrix[15] = 0.0;
      }

      copy(result, tmpMatrix);
      return result;
    };

    publicAPI.getCompositeProjectionMatrix = function (aspect, nearz, farz) {
      var vMat = publicAPI.getViewMatrix();
      var pMat = publicAPI.getProjectionMatrix(aspect, nearz, farz); // mats are transposed so the order is A then B
      // we reuse pMat as it is a copy so we can do what we want with it

      multiply$1(pMat, vMat, pMat);
      return pMat;
    };

    publicAPI.setDirectionOfProjection = function (x, y, z) {
      if (model.directionOfProjection[0] === x && model.directionOfProjection[1] === y && model.directionOfProjection[2] === z) {
        return;
      }

      model.directionOfProjection[0] = x;
      model.directionOfProjection[1] = y;
      model.directionOfProjection[2] = z;
      var vec = model.directionOfProjection; // recalculate FocalPoint

      model.focalPoint[0] = model.position[0] + vec[0] * model.distance;
      model.focalPoint[1] = model.position[1] + vec[1] * model.distance;
      model.focalPoint[2] = model.position[2] + vec[2] * model.distance;
      computeViewPlaneNormal();
    }; // used to handle convert js device orientation angles
    // when you use this method the camera will adjust to the
    // device orientation such that the physicalViewUp you set
    // in world coordinates looks up, and the physicalViewNorth
    // you set in world coorindates will (maybe) point north
    //
    // NOTE WARNING - much of the documentation out there on how
    // orientation works is seriously wrong. Even worse the Chrome
    // device orientation simulator is completely wrong and should
    // never be used. OMG it is so messed up.
    //
    // how it seems to work on iOS is that the device orientation
    // is specified in extrinsic angles with a alpha, beta, gamma
    // convention with axes of Z, X, Y (the code below substitutes
    // the physical coordinate system for these axes to get the right
    // modified coordinate system.


    publicAPI.setDeviceAngles = function (alpha, beta, gamma, screen) {
      var physVRight = [3];
      cross(model.physicalViewNorth, model.physicalViewUp, physVRight); // phone to physical coordinates

      var rotmat = identity(new Float64Array(16));
      rotate(rotmat, rotmat, radiansFromDegrees(alpha), model.physicalViewUp);
      rotate(rotmat, rotmat, radiansFromDegrees(beta), physVRight);
      rotate(rotmat, rotmat, radiansFromDegrees(gamma), model.physicalViewNorth);
      rotate(rotmat, rotmat, radiansFromDegrees(-screen), model.physicalViewUp);
      var dop = new Float64Array([-model.physicalViewUp[0], -model.physicalViewUp[1], -model.physicalViewUp[2]]);
      var vup = new Float64Array(model.physicalViewNorth);
      transformMat4$1(dop, dop, rotmat);
      transformMat4$1(vup, vup, rotmat);
      publicAPI.setDirectionOfProjection(dop[0], dop[1], dop[2]);
      publicAPI.setViewUp(vup[0], vup[1], vup[2]);
      publicAPI.modified();
    };

    publicAPI.setOrientationWXYZ = function (degrees, x, y, z) {
      var quatMat = identity(new Float64Array(16));

      if (degrees !== 0.0 && (x !== 0.0 || y !== 0.0 || z !== 0.0)) {
        // convert to radians
        var angle = radiansFromDegrees(degrees);
        var q = create();
        setAxisAngle(q, [x, y, z], angle);
        fromQuat(quatMat, q);
      }

      var newdop = new Float64Array(3);
      transformMat4$1(newdop, [0.0, 0.0, -1.0], quatMat);
      var newvup = new Float64Array(3);
      transformMat4$1(newvup, [0.0, 1.0, 0.0], quatMat);
      publicAPI.setDirectionOfProjection.apply(publicAPI, _toConsumableArray(newdop));
      publicAPI.setViewUp.apply(publicAPI, _toConsumableArray(newvup));
      publicAPI.modified();
    };

    publicAPI.computeClippingRange = function (bounds) {
      var vn = null;
      var position = null;
      vn = model.viewPlaneNormal;
      position = model.position;
      var a = -vn[0];
      var b = -vn[1];
      var c = -vn[2];
      var d = -(a * position[0] + b * position[1] + c * position[2]); // Set the max near clipping plane and the min far clipping plane

      var range = [a * bounds[0] + b * bounds[2] + c * bounds[4] + d, 1e-18]; // Find the closest / farthest bounding box vertex

      for (var k = 0; k < 2; k++) {
        for (var j = 0; j < 2; j++) {
          for (var i = 0; i < 2; i++) {
            var dist = a * bounds[i] + b * bounds[2 + j] + c * bounds[4 + k] + d;
            range[0] = dist < range[0] ? dist : range[0];
            range[1] = dist > range[1] ? dist : range[1];
          }
        }
      }

      return range;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$l = {
    position: [0, 0, 1],
    focalPoint: [0, 0, 0],
    viewUp: [0, 1, 0],
    directionOfProjection: [0, 0, -1],
    parallelProjection: false,
    useHorizontalViewAngle: false,
    viewAngle: 30,
    parallelScale: 1,
    clippingRange: [0.01, 1000.01],
    windowCenter: [0, 0],
    viewPlaneNormal: [0, 0, 1],
    useOffAxisProjection: false,
    screenBottomLeft: [-0.5, -0.5, -0.5],
    screenBottomRight: [0.5, -0.5, -0.5],
    screenTopRight: [0.5, 0.5, -0.5],
    freezeFocalPoint: false,
    projectionMatrix: null,
    viewMatrix: null,
    // used for world to physical transformations
    physicalTranslation: [0, 0, 0],
    physicalScale: 1.0,
    physicalViewUp: [0, 1, 0],
    physicalViewNorth: [0, 0, -1]
  }; // ----------------------------------------------------------------------------

  function extend$n(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$l, initialValues); // Build VTK API

    macro.obj(publicAPI, model);
    macro.get(publicAPI, model, ['distance']);
    macro.setGet(publicAPI, model, ['parallelProjection', 'useHorizontalViewAngle', 'viewAngle', 'parallelScale', 'useOffAxisProjection', 'freezeFocalPoint', 'physicalScale']);
    macro.getArray(publicAPI, model, ['directionOfProjection', 'viewPlaneNormal', 'position', 'focalPoint']);
    macro.setGetArray(publicAPI, model, ['clippingRange', 'windowCenter'], 2);
    macro.setGetArray(publicAPI, model, ['viewUp', 'screenBottomLeft', 'screenBottomRight', 'screenTopRight', 'physicalTranslation', 'physicalViewUp', 'physicalViewNorth'], 3); // Object methods

    vtkCamera(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$l = macro.newInstance(extend$n, 'vtkCamera'); // ----------------------------------------------------------------------------

  var vtkCamera$1 = {
    newInstance: newInstance$l,
    extend: extend$n
  };

  var LIGHT_TYPES = ['HeadLight', 'CameraLight', 'SceneLight']; // ----------------------------------------------------------------------------
  // vtkLight methods
  // ----------------------------------------------------------------------------

  function vtkLight(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkLight');

    publicAPI.getTransformedPosition = function () {
      if (model.transformMatrix) {
        return []; // FIXME !!!!
      }

      return [].concat(model.position);
    };

    publicAPI.getTransformedFocalPoint = function () {
      if (model.transformMatrix) {
        return []; // FIXME !!!!
      }

      return [].concat(model.focalPoint);
    };

    publicAPI.getDirection = function () {
      if (model.directionMTime < model.mtime) {
        model.direction[0] = model.focalPoint[0] - model.position[0];
        model.direction[1] = model.focalPoint[1] - model.position[1];
        model.direction[2] = model.focalPoint[2] - model.position[2];
        normalize(model.direction);
        model.directionMTime = model.mtime;
      }

      return model.direction;
    };

    publicAPI.setDirectionAngle = function (elevation, azimuth) {
      var elevationRadians = radiansFromDegrees(elevation);
      var azimuthRadians = radiansFromDegrees(azimuth);
      publicAPI.setPosition(Math.cos(elevationRadians) * Math.sin(azimuthRadians), Math.sin(elevationRadians), Math.cos(elevationRadians) * Math.cos(azimuthRadians));
      publicAPI.setFocalPoint(0, 0, 0);
      publicAPI.setPositional(0);
    };

    publicAPI.setLightTypeToHeadLight = function () {
      publicAPI.setLightType('HeadLight');
    };

    publicAPI.setLightTypeToCameraLight = function () {
      publicAPI.setLightType('CameraLight');
    };

    publicAPI.setLightTypeToSceneLight = function () {
      publicAPI.setTransformMatrix(null);
      publicAPI.setLightType('SceneLight');
    };

    publicAPI.lightTypeIsHeadLight = function () {
      return model.lightType === 'HeadLight';
    };

    publicAPI.lightTypeIsSceneLight = function () {
      return model.lightType === 'SceneLight';
    };

    publicAPI.lightTypeIsCameraLight = function () {
      return model.lightType === 'CameraLight';
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$k = {
    switch: true,
    intensity: 1,
    color: [1, 1, 1],
    position: [0, 0, 1],
    focalPoint: [0, 0, 0],
    positional: false,
    exponent: 1,
    coneAngle: 30,
    attenuationValues: [1, 0, 0],
    transformMatrix: null,
    lightType: 'SceneLight',
    shadowAttenuation: 1,
    direction: [0, 0, 0],
    directionMTime: 0
  }; // ----------------------------------------------------------------------------

  function extend$m(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$k, initialValues); // Build VTK API

    macro.obj(publicAPI, model);
    macro.setGet(publicAPI, model, ['intensity', 'switch', 'positional', 'exponent', 'coneAngle', 'transformMatrix', 'lightType', 'shadowAttenuation']);
    macro.setGetArray(publicAPI, model, ['color', 'position', 'focalPoint', 'attenuationValues'], 3); // Object methods

    vtkLight(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$k = macro.newInstance(extend$m, 'vtkLight'); // ----------------------------------------------------------------------------

  var vtkLight$1 = {
    newInstance: newInstance$k,
    extend: extend$m,
    LIGHT_TYPES: LIGHT_TYPES
  };

  var vtkErrorMacro$4 = macro.vtkErrorMacro;

  function notImplemented$2(method) {
    return function () {
      return vtkErrorMacro$4("vtkViewport::".concat(method, " - NOT IMPLEMENTED"));
    };
  } // ----------------------------------------------------------------------------
  // vtkViewport methods
  // ----------------------------------------------------------------------------


  function vtkViewport(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkViewport'); // Public API methods

    publicAPI.getViewProps = function () {
      return model.props;
    };

    publicAPI.hasViewProp = function (prop) {
      return !!model.props.filter(function (item) {
        return item === prop;
      }).length;
    };

    publicAPI.addViewProp = function (prop) {
      if (prop && !publicAPI.hasViewProp(prop)) {
        model.props = model.props.concat(prop);
      }
    };

    publicAPI.removeViewProp = function (prop) {
      var newPropList = model.props.filter(function (item) {
        return item !== prop;
      });

      if (model.props.length !== newPropList.length) {
        model.props = newPropList;
      }
    };

    publicAPI.removeAllViewProps = function () {
      model.props = [];
    }; // this method get all the props including any nested props


    function gatherProps(prop) {
      var allProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      allProps.push(prop);
      var children = prop.getNestedProps();

      if (children && children.length) {
        for (var i = 0; i < children.length; i++) {
          gatherProps(children[i], allProps);
        }
      }

      return allProps;
    }

    publicAPI.getViewPropsWithNestedProps = function () {
      var allPropsArray = [];

      for (var i = 0; i < model.props.length; i++) {
        gatherProps(model.props[i], allPropsArray);
      }

      return allPropsArray;
    };

    publicAPI.addActor2D = publicAPI.addViewProp;

    publicAPI.removeActor2D = function (prop) {
      // VTK way: model.actors2D.RemoveItem(prop);
      publicAPI.removeViewProp(prop);
    };

    publicAPI.getActors2D = function () {
      model.actors2D = [];
      model.props.forEach(function (prop) {
        model.actors2D = model.actors2D.concat(prop.getActors2D());
      });
      return model.actors2D;
    };

    publicAPI.displayToView = function () {
      return vtkErrorMacro$4('call displayToView on your view instead');
    };

    publicAPI.viewToDisplay = function () {
      return vtkErrorMacro$4('callviewtodisplay on your view instead');
    };

    publicAPI.getSize = function () {
      return vtkErrorMacro$4('call getSize on your View instead');
    };

    publicAPI.normalizedDisplayToProjection = function (x, y, z) {
      // first to normalized viewport
      var nvp = publicAPI.normalizedDisplayToNormalizedViewport(x, y, z); // then to view

      return publicAPI.normalizedViewportToProjection(nvp[0], nvp[1], nvp[2]);
    };

    publicAPI.normalizedDisplayToNormalizedViewport = function (x, y, z) {
      var scale = [model.viewport[2] - model.viewport[0], model.viewport[3] - model.viewport[1]];
      return [(x - model.viewport[0]) / scale[0], (y - model.viewport[1]) / scale[1], z];
    };

    publicAPI.normalizedViewportToProjection = function (x, y, z) {
      return [x * 2.0 - 1.0, y * 2.0 - 1.0, z * 2.0 - 1.0];
    };

    publicAPI.projectionToNormalizedDisplay = function (x, y, z) {
      // first to nvp
      var nvp = publicAPI.projectionToNormalizedViewport(x, y, z); // then to ndp

      return publicAPI.normalizedViewportToNormalizedDisplay(nvp[0], nvp[1], nvp[2]);
    };

    publicAPI.normalizedViewportToNormalizedDisplay = function (x, y, z) {
      var scale = [model.viewport[2] - model.viewport[0], model.viewport[3] - model.viewport[1]];
      return [x * scale[0] + model.viewport[0], y * scale[1] + model.viewport[1], z];
    };

    publicAPI.projectionToNormalizedViewport = function (x, y, z) {
      return [(x + 1.0) * 0.5, (y + 1.0) * 0.5, (z + 1.0) * 0.5];
    };

    publicAPI.PickPropFrom = notImplemented$2('PickPropFrom');
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$j = {
    vtkWindow: null,
    background: [0, 0, 0],
    background2: [0.2, 0.2, 0.2],
    gradientBackground: false,
    viewport: [0, 0, 1, 1],
    aspect: [1, 1],
    pixelAspect: [1, 1],
    props: [],
    actors2D: []
  }; // ----------------------------------------------------------------------------

  function extend$l(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$j, initialValues); // Build VTK API

    macro.obj(publicAPI, model);
    macro.event(publicAPI, model, 'event');
    macro.setGetArray(publicAPI, model, ['viewport'], 4);
    macro.setGetArray(publicAPI, model, ['background', 'background2'], 3);
    vtkViewport(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$j = macro.newInstance(extend$l, 'vtkViewport'); // ----------------------------------------------------------------------------

  var vtkViewport$1 = {
    newInstance: newInstance$j,
    extend: extend$l
  };

  var vtkDebugMacro$2 = vtkDebugMacro$a,
      vtkErrorMacro$3 = vtkErrorMacro$m,
      vtkWarningMacro$2 = vtkWarningMacro$6;

  function notImplemented$1(method) {
    return function () {
      return vtkErrorMacro$3("vtkRenderer::".concat(method, " - NOT IMPLEMENTED"));
    };
  } // ----------------------------------------------------------------------------
  // vtkRenderer methods
  // ----------------------------------------------------------------------------


  function vtkRenderer(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkRenderer'); // Events

    var COMPUTE_VISIBLE_PROP_BOUNDS_EVENT = {
      type: 'ComputeVisiblePropBoundsEvent',
      renderer: publicAPI
    };
    var RESET_CAMERA_CLIPPING_RANGE_EVENT = {
      type: 'ResetCameraClippingRangeEvent',
      renderer: publicAPI
    };
    var RESET_CAMERA_EVENT = {
      type: 'ResetCameraEvent',
      renderer: publicAPI
    };

    publicAPI.updateCamera = function () {
      if (!model.activeCamera) {
        vtkDebugMacro$2('No cameras are on, creating one.'); // the get method will automagically create a camera
        // and reset it since one hasn't been specified yet.

        publicAPI.getActiveCameraAndResetIfCreated();
      } // update the viewing transformation


      model.activeCamera.render(publicAPI);
      return true;
    };

    publicAPI.updateLightsGeometryToFollowCamera = function () {
      // only update the light's geometry if this Renderer is tracking
      // this lights.  That allows one renderer to view the lights that
      // another renderer is setting up.
      var camera = publicAPI.getActiveCameraAndResetIfCreated();
      model.lights.forEach(function (light) {
        if (light.lightTypeIsSceneLight() || light.lightTypeIsCameraLight()) ; else if (light.lightTypeIsHeadLight()) {
          // update position and orientation of light to match camera.
          light.setPositionFrom(camera.getPositionByReference());
          light.setFocalPointFrom(camera.getFocalPointByReference());
          light.modified(camera.getMTime());
        } else {
          vtkErrorMacro$3('light has unknown light type', light.get());
        }
      });
    };

    publicAPI.updateLightGeometry = function () {
      if (model.lightFollowCamera) {
        // only update the light's geometry if this Renderer is tracking
        // this lights.  That allows one renderer to view the lights that
        // another renderer is setting up.
        return publicAPI.updateLightsGeometryToFollowCamera();
      }

      return true;
    };

    publicAPI.allocateTime = notImplemented$1('allocateTime');
    publicAPI.updateGeometry = notImplemented$1('updateGeometry');

    publicAPI.getVTKWindow = function () {
      return model.renderWindow;
    };

    publicAPI.setLayer = function (layer) {
      vtkDebugMacro$2(publicAPI.getClassName(), publicAPI, 'setting Layer to ', layer);

      if (model.layer !== layer) {
        model.layer = layer;
        publicAPI.modified();
      }

      publicAPI.setPreserveColorBuffer(!!layer);
    };

    publicAPI.setActiveCamera = function (camera) {
      if (model.activeCamera === camera) {
        return false;
      }

      model.activeCamera = camera;
      publicAPI.modified();
      publicAPI.invokeEvent({
        type: 'ActiveCameraEvent',
        camera: camera
      });
      return true;
    };

    publicAPI.makeCamera = function () {
      var camera = vtkCamera$1.newInstance();
      publicAPI.invokeEvent({
        type: 'CreateCameraEvent',
        camera: camera
      });
      return camera;
    }; // Replace the set/get macro method


    publicAPI.getActiveCamera = function () {
      if (!model.activeCamera) {
        model.activeCamera = publicAPI.makeCamera();
      }

      return model.activeCamera;
    };

    publicAPI.getActiveCameraAndResetIfCreated = function () {
      if (!model.activeCamera) {
        publicAPI.getActiveCamera();
        publicAPI.resetCamera();
      }

      return model.activeCamera;
    };

    publicAPI.getActors = function () {
      model.actors = [];
      model.props.forEach(function (prop) {
        model.actors = model.actors.concat(prop.getActors());
      });
      return model.actors;
    };

    publicAPI.addActor = publicAPI.addViewProp;

    publicAPI.removeActor = function (actor) {
      model.actors = model.actors.filter(function (a) {
        return a !== actor;
      });
      publicAPI.removeViewProp(actor);
      publicAPI.modified();
    };

    publicAPI.removeAllActors = function () {
      var actors = publicAPI.getActors();
      actors.forEach(function (actor) {
        publicAPI.removeViewProp(actor);
      });
      model.actors = [];
      publicAPI.modified();
    };

    publicAPI.getVolumes = function () {
      model.volumes = [];
      model.props.forEach(function (prop) {
        model.volumes = model.volumes.concat(prop.getVolumes());
      });
      return model.volumes;
    };

    publicAPI.addVolume = publicAPI.addViewProp;

    publicAPI.removeVolume = function (volume) {
      model.volumes = model.volumes.filter(function (v) {
        return v !== volume;
      });
      publicAPI.removeViewProp(volume);
      publicAPI.modified();
    };

    publicAPI.removeAllVolumes = function () {
      var volumes = publicAPI.getVolumes();
      volumes.forEach(function (volume) {
        publicAPI.removeViewProp(volume);
      });
      model.volumes = [];
      publicAPI.modified();
    };

    publicAPI.addLight = function (light) {
      model.lights = [].concat(model.lights, light);
      publicAPI.modified();
    };

    publicAPI.removeLight = function (light) {
      model.lights = model.lights.filter(function (l) {
        return l !== light;
      });
      publicAPI.modified();
    };

    publicAPI.removeAllLights = function () {
      model.lights = [];
      publicAPI.modified();
    };

    publicAPI.setLightCollection = function (lights) {
      model.lights = lights;
      publicAPI.modified();
    };

    publicAPI.makeLight = vtkLight$1.newInstance;

    publicAPI.createLight = function () {
      if (!model.automaticLightCreation) {
        return;
      }

      if (model.createdLight) {
        publicAPI.removeLight(model.createdLight);
        model.createdLight.delete();
        model.createdLight = null;
      }

      model.createdLight = publicAPI.makeLight();
      publicAPI.addLight(model.createdLight);
      model.createdLight.setLightTypeToHeadLight(); // set these values just to have a good default should LightFollowCamera
      // be turned off.

      model.createdLight.setPosition(publicAPI.getActiveCamera().getPosition());
      model.createdLight.setFocalPoint(publicAPI.getActiveCamera().getFocalPoint());
    }; // requires the aspect ratio of the viewport as X/Y


    publicAPI.normalizedDisplayToWorld = function (x, y, z, aspect) {
      var vpd = publicAPI.normalizedDisplayToProjection(x, y, z);
      vpd = publicAPI.projectionToView(vpd[0], vpd[1], vpd[2], aspect);
      return publicAPI.viewToWorld(vpd[0], vpd[1], vpd[2]);
    }; // requires the aspect ratio of the viewport as X/Y


    publicAPI.worldToNormalizedDisplay = function (x, y, z, aspect) {
      var vpd = publicAPI.worldToView(x, y, z);
      vpd = publicAPI.viewToProjection(vpd[0], vpd[1], vpd[2], aspect);
      return publicAPI.projectionToNormalizedDisplay(vpd[0], vpd[1], vpd[2]);
    }; // requires the aspect ratio of the viewport as X/Y


    publicAPI.viewToWorld = function (x, y, z) {
      if (model.activeCamera === null) {
        vtkErrorMacro$3('ViewToWorld: no active camera, cannot compute view to world, returning 0,0,0');
        return [0, 0, 0];
      } // get the view matrix from the active camera


      var matrix = model.activeCamera.getViewMatrix();
      invert(matrix, matrix);
      transpose(matrix, matrix); // Transform point to world coordinates

      var result = new Float64Array([x, y, z]);
      transformMat4$1(result, result, matrix);
      return result;
    };

    publicAPI.projectionToView = function (x, y, z, aspect) {
      if (model.activeCamera === null) {
        vtkErrorMacro$3('ProjectionToView: no active camera, cannot compute projection to view, returning 0,0,0');
        return [0, 0, 0];
      } // get the projection transformation from the active camera


      var matrix = model.activeCamera.getProjectionMatrix(aspect, -1.0, 1.0);
      invert(matrix, matrix);
      transpose(matrix, matrix); // Transform point to world coordinates

      var result = new Float64Array([x, y, z]);
      transformMat4$1(result, result, matrix);
      return result;
    }; // Convert world point coordinates to view coordinates.


    publicAPI.worldToView = function (x, y, z) {
      if (model.activeCamera === null) {
        vtkErrorMacro$3('WorldToView: no active camera, cannot compute view to world, returning 0,0,0');
        return [0, 0, 0];
      } // get the view transformation from the active camera


      var matrix = model.activeCamera.getViewMatrix();
      transpose(matrix, matrix);
      var result = new Float64Array([x, y, z]);
      transformMat4$1(result, result, matrix);
      return result;
    }; // Convert world point coordinates to view coordinates.
    // requires the aspect ratio of the viewport as X/Y


    publicAPI.viewToProjection = function (x, y, z, aspect) {
      if (model.activeCamera === null) {
        vtkErrorMacro$3('ViewToProjection: no active camera, cannot compute view to projection, returning 0,0,0');
        return [0, 0, 0];
      } // get the projeciton transformation from the active camera


      var matrix = model.activeCamera.getProjectionMatrix(aspect, -1.0, 1.0);
      transpose(matrix, matrix);
      var result = new Float64Array([x, y, z]);
      transformMat4$1(result, result, matrix);
      return result;
    };

    publicAPI.computeVisiblePropBounds = function () {
      model.allBounds[0] = vtkBoundingBox.INIT_BOUNDS[0];
      model.allBounds[1] = vtkBoundingBox.INIT_BOUNDS[1];
      model.allBounds[2] = vtkBoundingBox.INIT_BOUNDS[2];
      model.allBounds[3] = vtkBoundingBox.INIT_BOUNDS[3];
      model.allBounds[4] = vtkBoundingBox.INIT_BOUNDS[4];
      model.allBounds[5] = vtkBoundingBox.INIT_BOUNDS[5];
      var nothingVisible = true;
      publicAPI.invokeEvent(COMPUTE_VISIBLE_PROP_BOUNDS_EVENT); // loop through all props

      for (var index = 0; index < model.props.length; ++index) {
        var prop = model.props[index];

        if (prop.getVisibility() && prop.getUseBounds()) {
          var bounds = prop.getBounds();

          if (bounds && areBoundsInitialized(bounds)) {
            nothingVisible = false;

            if (bounds[0] < model.allBounds[0]) {
              model.allBounds[0] = bounds[0];
            }

            if (bounds[1] > model.allBounds[1]) {
              model.allBounds[1] = bounds[1];
            }

            if (bounds[2] < model.allBounds[2]) {
              model.allBounds[2] = bounds[2];
            }

            if (bounds[3] > model.allBounds[3]) {
              model.allBounds[3] = bounds[3];
            }

            if (bounds[4] < model.allBounds[4]) {
              model.allBounds[4] = bounds[4];
            }

            if (bounds[5] > model.allBounds[5]) {
              model.allBounds[5] = bounds[5];
            }
          }
        }
      }

      if (nothingVisible) {
        uninitializeBounds(model.allBounds);
        vtkDebugMacro$2("Can't compute bounds, no 3D props are visible");
      }

      return model.allBounds;
    };

    publicAPI.resetCamera = function () {
      var bounds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var boundsToUse = bounds || publicAPI.computeVisiblePropBounds();
      var center = [0, 0, 0];

      if (!areBoundsInitialized(boundsToUse)) {
        vtkDebugMacro$2('Cannot reset camera!');
        return false;
      }

      var vn = null;

      if (publicAPI.getActiveCamera()) {
        vn = model.activeCamera.getViewPlaneNormal();
      } else {
        vtkErrorMacro$3('Trying to reset non-existent camera');
        return false;
      } // Reset the perspective zoom factors, otherwise subsequent zooms will cause
      // the view angle to become very small and cause bad depth sorting.


      model.activeCamera.setViewAngle(30.0);
      center[0] = (boundsToUse[0] + boundsToUse[1]) / 2.0;
      center[1] = (boundsToUse[2] + boundsToUse[3]) / 2.0;
      center[2] = (boundsToUse[4] + boundsToUse[5]) / 2.0;
      var w1 = boundsToUse[1] - boundsToUse[0];
      var w2 = boundsToUse[3] - boundsToUse[2];
      var w3 = boundsToUse[5] - boundsToUse[4];
      w1 *= w1;
      w2 *= w2;
      w3 *= w3;
      var radius = w1 + w2 + w3; // If we have just a single point, pick a radius of 1.0

      radius = radius === 0 ? 1.0 : radius; // compute the radius of the enclosing sphere

      radius = Math.sqrt(radius) * 0.5; // default so that the bounding sphere fits within the view fustrum
      // compute the distance from the intersection of the view frustum with the
      // bounding sphere. Basically in 2D draw a circle representing the bounding
      // sphere in 2D then draw a horizontal line going out from the center of
      // the circle. That is the camera view. Then draw a line from the camera
      // position to the point where it intersects the circle. (it will be tangent
      // to the circle at this point, this is important, only go to the tangent
      // point, do not draw all the way to the view plane). Then draw the radius
      // from the tangent point to the center of the circle. You will note that
      // this forms a right triangle with one side being the radius, another being
      // the target distance for the camera, then just find the target dist using
      // a sin.

      var angle = radiansFromDegrees(model.activeCamera.getViewAngle());
      var parallelScale = radius;
      var distance = radius / Math.sin(angle * 0.5); // check view-up vector against view plane normal

      var vup = model.activeCamera.getViewUp();

      if (Math.abs(dot(vup, vn)) > 0.999) {
        vtkWarningMacro$2('Resetting view-up since view plane normal is parallel');
        model.activeCamera.setViewUp(-vup[2], vup[0], vup[1]);
      } // update the camera


      model.activeCamera.setFocalPoint(center[0], center[1], center[2]);
      model.activeCamera.setPosition(center[0] + distance * vn[0], center[1] + distance * vn[1], center[2] + distance * vn[2]);
      publicAPI.resetCameraClippingRange(boundsToUse); // setup default parallel scale

      model.activeCamera.setParallelScale(parallelScale); // update reasonable world to physical values

      model.activeCamera.setPhysicalScale(radius);
      model.activeCamera.setPhysicalTranslation(-center[0], -center[1], -center[2]); // Here to let parallel/distributed compositing intercept
      // and do the right thing.

      publicAPI.invokeEvent(RESET_CAMERA_EVENT);
      return true;
    };

    publicAPI.resetCameraClippingRange = function () {
      var bounds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var boundsToUse = bounds || publicAPI.computeVisiblePropBounds();

      if (!areBoundsInitialized(boundsToUse)) {
        vtkDebugMacro$2('Cannot reset camera clipping range!');
        return false;
      } // Make sure we have an active camera


      publicAPI.getActiveCameraAndResetIfCreated();

      if (!model.activeCamera) {
        vtkErrorMacro$3('Trying to reset clipping range of non-existent camera');
        return false;
      } // Get the exact range for the bounds


      var range = model.activeCamera.computeClippingRange(boundsToUse); // do not let far - near be less than 0.1 of the window height
      // this is for cases such as 2D images which may have zero range

      var minGap = 0.0;

      if (model.activeCamera.getParallelProjection()) {
        minGap = 0.2 * model.activeCamera.getParallelScale();
      } else {
        var angle = radiansFromDegrees(model.activeCamera.getViewAngle());
        minGap = 0.2 * Math.tan(angle / 2.0) * range[1];
      }

      if (range[1] - range[0] < minGap) {
        minGap = minGap - range[1] + range[0];
        range[1] += minGap / 2.0;
        range[0] -= minGap / 2.0;
      } // Do not let the range behind the camera throw off the calculation.


      if (range[0] < 0.0) {
        range[0] = 0.0;
      } // Give ourselves a little breathing room


      range[0] = 0.99 * range[0] - (range[1] - range[0]) * model.clippingRangeExpansion;
      range[1] = 1.01 * range[1] + (range[1] - range[0]) * model.clippingRangeExpansion; // Make sure near is not bigger than far

      range[0] = range[0] >= range[1] ? 0.01 * range[1] : range[0]; // Make sure near is at least some fraction of far - this prevents near
      // from being behind the camera or too close in front. How close is too
      // close depends on the resolution of the depth buffer

      if (!model.nearClippingPlaneTolerance) {
        model.nearClippingPlaneTolerance = 0.01;
      } // make sure the front clipping range is not too far from the far clippnig
      // range, this is to make sure that the zbuffer resolution is effectively
      // used


      if (range[0] < model.nearClippingPlaneTolerance * range[1]) {
        range[0] = model.nearClippingPlaneTolerance * range[1];
      }

      model.activeCamera.setClippingRange(range[0], range[1]); // Here to let parallel/distributed compositing intercept
      // and do the right thing.

      publicAPI.invokeEvent(RESET_CAMERA_CLIPPING_RANGE_EVENT);
      return false;
    };

    publicAPI.setRenderWindow = function (renderWindow) {
      if (renderWindow !== model.renderWindow) {
        model.vtkWindow = renderWindow;
        model.renderWindow = renderWindow;
      }
    };

    publicAPI.visibleActorCount = function () {
      return model.props.filter(function (prop) {
        return prop.getVisibility();
      }).length;
    };

    publicAPI.visibleVolumeCount = publicAPI.visibleActorCount;

    publicAPI.getMTime = function () {
      var m1 = model.mtime;
      var m2 = model.activeCamera ? model.activeCamera.getMTime() : 0;

      if (m2 > m1) {
        m1 = m2;
      }

      var m3 = model.createdLight ? model.createdLight.getMTime() : 0;

      if (m3 > m1) {
        m1 = m3;
      }

      return m1;
    };

    publicAPI.getTransparent = function () {
      return !!model.preserveColorBuffer;
    };

    publicAPI.isActiveCameraCreated = function () {
      return !!model.activeCamera;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$i = {
    pickedProp: null,
    activeCamera: null,
    allBounds: [],
    ambient: [1, 1, 1],
    allocatedRenderTime: 100,
    timeFactor: 1,
    createdLight: null,
    automaticLightCreation: true,
    twoSidedLighting: true,
    lastRenderTimeInSeconds: -1,
    renderWindow: null,
    lights: [],
    actors: [],
    volumes: [],
    lightFollowCamera: true,
    numberOfPropsRendered: 0,
    propArray: null,
    pathArray: null,
    layer: 0,
    preserveColorBuffer: false,
    preserveDepthBuffer: false,
    computeVisiblePropBounds: createUninitializedBounds(),
    interactive: true,
    nearClippingPlaneTolerance: 0,
    clippingRangeExpansion: 0.05,
    erase: true,
    draw: true,
    useShadows: false,
    useDepthPeeling: false,
    occlusionRatio: 0,
    maximumNumberOfPeels: 4,
    selector: null,
    delegate: null,
    texturedBackground: false,
    backgroundTexture: null,
    pass: 0
  }; // ----------------------------------------------------------------------------

  function extend$k(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$i, initialValues); // Inheritance

    vtkViewport$1.extend(publicAPI, model, initialValues); // make sure background has 4 entries. Default to opaque black

    if (!model.background) model.background = [0, 0, 0, 1];

    while (model.background.length < 3) {
      model.background.push(0);
    }

    if (model.background.length === 3) model.background.push(1); // Build VTK API

    get$1(publicAPI, model, ['renderWindow', 'allocatedRenderTime', 'timeFactor', 'lastRenderTimeInSeconds', 'numberOfPropsRendered', 'lastRenderingUsedDepthPeeling', 'selector']);
    setGet(publicAPI, model, ['twoSidedLighting', 'lightFollowCamera', 'automaticLightCreation', 'erase', 'draw', 'nearClippingPlaneTolerance', 'clippingRangeExpansion', 'backingStore', 'interactive', 'layer', 'preserveColorBuffer', 'preserveDepthBuffer', 'useDepthPeeling', 'occlusionRatio', 'maximumNumberOfPeels', 'delegate', 'backgroundTexture', 'texturedBackground', 'useShadows', 'pass']);
    getArray(publicAPI, model, ['actors', 'volumes', 'lights']);
    setGetArray(publicAPI, model, ['background'], 4, 1.0); // Object methods

    vtkRenderer(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$i = newInstance$1j(extend$k, 'vtkRenderer'); // ----------------------------------------------------------------------------

  var vtkRenderer$1 = {
    newInstance: newInstance$i,
    extend: extend$k
  };

  var Device$1 = {
    Unknown: 0,
    LeftController: 1,
    RightController: 2
  };
  var Input$1 = {
    Unknown: 0,
    Trigger: 1,
    TrackPad: 2,
    Grip: 3,
    Thumbstick: 4,
    A: 5,
    B: 6,
    ApplicationMenu: 7 // Not exposed in WebXR API

  };
  var Axis = {
    Unknown: 0,
    TouchpadX: 1,
    TouchpadY: 2,
    ThumbstickX: 3,
    ThumbstickY: 4
  };
  var Constants$1 = {
    Device: Device$1,
    Input: Input$1,
    Axis: Axis
  };

  function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$7(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$7(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  var Device = Constants$1.Device,
      Input = Constants$1.Input;
  var vtkWarningMacro$1 = macro.vtkWarningMacro,
      vtkErrorMacro$2 = macro.vtkErrorMacro,
      normalizeWheel = macro.normalizeWheel,
      vtkOnceErrorMacro = macro.vtkOnceErrorMacro; // ----------------------------------------------------------------------------
  // Global methods
  // ----------------------------------------------------------------------------

  var deviceInputMap = {
    'xr-standard': [Input.Trigger, Input.Grip, Input.TrackPad, Input.Thumbstick, Input.A, Input.B]
  };
  var handledEvents = ['StartAnimation', 'Animation', 'EndAnimation', 'MouseEnter', 'MouseLeave', 'StartMouseMove', 'MouseMove', 'EndMouseMove', 'LeftButtonPress', 'LeftButtonRelease', 'MiddleButtonPress', 'MiddleButtonRelease', 'RightButtonPress', 'RightButtonRelease', 'KeyPress', 'KeyDown', 'KeyUp', 'StartMouseWheel', 'MouseWheel', 'EndMouseWheel', 'StartPinch', 'Pinch', 'EndPinch', 'StartPan', 'Pan', 'EndPan', 'StartRotate', 'Rotate', 'EndRotate', 'Button3D', 'Move3D', 'StartPointerLock', 'EndPointerLock', 'StartInteraction', 'Interaction', 'EndInteraction'];

  function preventDefault(event) {
    if (event.cancelable) {
      event.stopPropagation();
      event.preventDefault();
    }

    return false;
  } // ----------------------------------------------------------------------------
  // vtkRenderWindowInteractor methods
  // ----------------------------------------------------------------------------


  function vtkRenderWindowInteractor(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkRenderWindowInteractor'); // Initialize list of requesters

    var animationRequesters = new Set(); // track active event listeners to handle simultaneous button tracking

    var activeListenerCount = 0; // Public API methods
    //----------------------------------------------------------------------

    publicAPI.start = function () {
      // Let the compositing handle the event loop if it wants to.
      // if (publicAPI.HasObserver(vtkCommand::StartEvent) && !publicAPI.HandleEventLoop) {
      //   publicAPI.invokeEvent({ type: 'StartEvent' });
      //   return;
      // }
      // As a convenience, initialize if we aren't initialized yet.
      if (!model.initialized) {
        publicAPI.initialize();

        if (!model.initialized) {
          return;
        }
      } // Pass execution to the subclass which will run the event loop,
      // this will not return until TerminateApp is called.


      publicAPI.startEventLoop();
    }; //----------------------------------------------------------------------


    publicAPI.setRenderWindow = function (aren) {
      vtkErrorMacro$2('you want to call setView(view) instead of setRenderWindow on a vtk.js interactor');
    }; //----------------------------------------------------------------------


    publicAPI.setInteractorStyle = function (style) {
      if (model.interactorStyle !== style) {
        if (model.interactorStyle != null) {
          model.interactorStyle.setInteractor(null);
        }

        model.interactorStyle = style;

        if (model.interactorStyle != null) {
          if (model.interactorStyle.getInteractor() !== publicAPI) {
            model.interactorStyle.setInteractor(publicAPI);
          }
        }
      }
    }; //---------------------------------------------------------------------


    publicAPI.initialize = function () {
      model.initialized = true;
      publicAPI.enable();
      publicAPI.render();
    };

    publicAPI.enable = function () {
      return publicAPI.setEnabled(true);
    };

    publicAPI.disable = function () {
      return publicAPI.setEnabled(false);
    };

    publicAPI.startEventLoop = function () {
      return vtkWarningMacro$1('empty event loop');
    };

    function updateCurrentRenderer(x, y) {
      if (!model._forcedRenderer) {
        model.currentRenderer = publicAPI.findPokedRenderer(x, y);
      }
    }

    publicAPI.getCurrentRenderer = function () {
      if (model.currentRenderer) {
        return model.currentRenderer;
      }

      updateCurrentRenderer(0, 0);
      return model.currentRenderer;
    };

    function getScreenEventPositionFor(source) {
      var bounds = model.container.getBoundingClientRect();
      var canvas = model.view.getCanvas();
      var scaleX = canvas.width / bounds.width;
      var scaleY = canvas.height / bounds.height;
      var position = {
        x: scaleX * (source.clientX - bounds.left),
        y: scaleY * (bounds.height - source.clientY + bounds.top),
        z: 0
      };
      updateCurrentRenderer(position.x, position.y);
      return position;
    }

    function getTouchEventPositionsFor(touches) {
      var positions = {};

      for (var i = 0; i < touches.length; i++) {
        var touch = touches[i];
        positions[touch.identifier] = getScreenEventPositionFor(touch);
      }

      return positions;
    }

    function getModifierKeysFor(event) {
      return {
        controlKey: event.ctrlKey,
        altKey: event.altKey,
        shiftKey: event.shiftKey
      };
    }

    function getKeysFor(event) {
      var modifierKeys = getModifierKeysFor(event);

      var keys = _objectSpread$7({
        key: event.key,
        keyCode: event.charCode
      }, modifierKeys);

      return keys;
    }

    function interactionRegistration(addListeners) {
      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var rootElm = document;
      var method = addListeners ? 'addEventListener' : 'removeEventListener';
      var invMethod = addListeners ? 'removeEventListener' : 'addEventListener';

      if (!force && !addListeners && activeListenerCount > 0) {
        --activeListenerCount;
      } // only add/remove listeners when there are no registered listeners


      if (!activeListenerCount || force) {
        activeListenerCount = 0;

        if (model.container) {
          model.container[invMethod]('mousemove', publicAPI.handleMouseMove);
        }

        rootElm[method]('mouseup', publicAPI.handleMouseUp);
        rootElm[method]('mousemove', publicAPI.handleMouseMove);
        rootElm[method]('touchend', publicAPI.handleTouchEnd, false);
        rootElm[method]('touchcancel', publicAPI.handleTouchEnd, false);
        rootElm[method]('touchmove', publicAPI.handleTouchMove, false);
      }

      if (!force && addListeners) {
        ++activeListenerCount;
      }
    }

    publicAPI.bindEvents = function (container) {
      model.container = container;
      container.addEventListener('contextmenu', preventDefault); // container.addEventListener('click', preventDefault); // Avoid stopping event propagation

      container.addEventListener('wheel', publicAPI.handleWheel);
      container.addEventListener('DOMMouseScroll', publicAPI.handleWheel);
      container.addEventListener('mouseenter', publicAPI.handleMouseEnter);
      container.addEventListener('mouseleave', publicAPI.handleMouseLeave);
      container.addEventListener('mousemove', publicAPI.handleMouseMove);
      container.addEventListener('mousedown', publicAPI.handleMouseDown);
      document.addEventListener('keypress', publicAPI.handleKeyPress);
      document.addEventListener('keydown', publicAPI.handleKeyDown);
      document.addEventListener('keyup', publicAPI.handleKeyUp);
      document.addEventListener('pointerlockchange', publicAPI.handlePointerLockChange);
      container.addEventListener('touchstart', publicAPI.handleTouchStart, false);
    };

    publicAPI.unbindEvents = function () {
      // force unbinding listeners
      interactionRegistration(false, true);
      model.container.removeEventListener('contextmenu', preventDefault); // model.container.removeEventListener('click', preventDefault); // Avoid stopping event propagation

      model.container.removeEventListener('wheel', publicAPI.handleWheel);
      model.container.removeEventListener('DOMMouseScroll', publicAPI.handleWheel);
      model.container.removeEventListener('mouseenter', publicAPI.handleMouseEnter);
      model.container.removeEventListener('mouseleave', publicAPI.handleMouseLeave);
      model.container.removeEventListener('mousemove', publicAPI.handleMouseMove);
      model.container.removeEventListener('mousedown', publicAPI.handleMouseDown);
      document.removeEventListener('keypress', publicAPI.handleKeyPress);
      document.removeEventListener('keydown', publicAPI.handleKeyDown);
      document.removeEventListener('keyup', publicAPI.handleKeyUp);
      document.removeEventListener('pointerlockchange', publicAPI.handlePointerLockChange);
      model.container.removeEventListener('touchstart', publicAPI.handleTouchStart);
      model.container = null;
    };

    publicAPI.handleKeyPress = function (event) {
      var data = getKeysFor(event);
      publicAPI.keyPressEvent(data);
    };

    publicAPI.handleKeyDown = function (event) {
      var data = getKeysFor(event);
      publicAPI.keyDownEvent(data);
    };

    publicAPI.handleKeyUp = function (event) {
      var data = getKeysFor(event);
      publicAPI.keyUpEvent(data);
    };

    publicAPI.handleMouseDown = function (event) {
      if (event.button > 2) {
        // ignore events from extra mouse buttons such as `back` and `forward`
        return;
      }

      interactionRegistration(true);
      preventDefault(event);

      var callData = _objectSpread$7(_objectSpread$7({}, getModifierKeysFor(event)), {}, {
        position: getScreenEventPositionFor(event)
      });

      switch (event.button) {
        case 0:
          publicAPI.leftButtonPressEvent(callData);
          break;

        case 1:
          publicAPI.middleButtonPressEvent(callData);
          break;

        case 2:
          publicAPI.rightButtonPressEvent(callData);
          break;

        default:
          vtkErrorMacro$2("Unknown mouse button pressed: ".concat(event.button));
          break;
      }
    }; //----------------------------------------------------------------------


    publicAPI.requestPointerLock = function () {
      var canvas = publicAPI.getView().getCanvas();
      canvas.requestPointerLock();
    }; //----------------------------------------------------------------------


    publicAPI.exitPointerLock = function () {
      return document.exitPointerLock();
    }; //----------------------------------------------------------------------


    publicAPI.isPointerLocked = function () {
      return !!document.pointerLockElement;
    }; //----------------------------------------------------------------------


    publicAPI.handlePointerLockChange = function () {
      if (publicAPI.isPointerLocked()) {
        publicAPI.startPointerLockEvent();
      } else {
        publicAPI.endPointerLockEvent();
      }
    }; //----------------------------------------------------------------------


    function forceRender() {
      if (model.view && model.enabled && model.enableRender) {
        model.inRender = true;
        model.view.traverseAllPasses();
        model.inRender = false;
      } // outside the above test so that third-party code can redirect
      // the render to the appropriate class


      publicAPI.invokeRenderEvent();
    }

    publicAPI.requestAnimation = function (requestor) {
      if (requestor === undefined) {
        vtkErrorMacro$2("undefined requester, can not start animating");
        return;
      }

      if (animationRequesters.has(requestor)) {
        vtkWarningMacro$1("requester is already registered for animating");
        return;
      }

      animationRequesters.add(requestor);

      if (animationRequesters.size === 1 && !model.xrAnimation) {
        model.lastFrameTime = 0.1;
        model.lastFrameStart = Date.now();
        model.animationRequest = requestAnimationFrame(publicAPI.handleAnimation);
        publicAPI.startAnimationEvent();
      }
    };

    publicAPI.isAnimating = function () {
      return model.xrAnimation || model.animationRequest !== null;
    };

    publicAPI.cancelAnimation = function (requestor) {
      var skipWarning = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (!animationRequesters.has(requestor)) {
        if (!skipWarning) {
          var requestStr = requestor && requestor.getClassName ? requestor.getClassName() : requestor;
          vtkWarningMacro$1("".concat(requestStr, " did not request an animation"));
        }

        return;
      }

      animationRequesters.delete(requestor);

      if (model.animationRequest && animationRequesters.size === 0) {
        cancelAnimationFrame(model.animationRequest);
        model.animationRequest = null;
        publicAPI.endAnimationEvent();
        publicAPI.render();
      }
    };

    publicAPI.switchToXRAnimation = function () {
      // cancel existing animation if any
      if (model.animationRequest) {
        cancelAnimationFrame(model.animationRequest);
        model.animationRequest = null;
      }

      model.xrAnimation = true;
    };

    publicAPI.returnFromXRAnimation = function () {
      model.xrAnimation = false;

      if (animationRequesters.size !== 0) {
        model.FrameTime = -1;
        model.animationRequest = requestAnimationFrame(publicAPI.handleAnimation);
      }
    };

    publicAPI.updateXRGamepads = function (xrSession, xrFrame, xrRefSpace) {
      // watch for when buttons change state and fire events
      xrSession.inputSources.forEach(function (inputSource) {
        var pose = xrFrame.getPose(inputSource.gripSpace, xrRefSpace);
        var gp = inputSource.gamepad;
        var hand = inputSource.handedness;

        if (gp) {
          if (!(gp.index in model.lastGamepadValues)) {
            model.lastGamepadValues[gp.index] = {
              left: {
                buttons: {}
              },
              right: {
                buttons: {}
              }
            };
          }

          for (var b = 0; b < gp.buttons.length; ++b) {
            if (!(b in model.lastGamepadValues[gp.index][hand].buttons)) {
              model.lastGamepadValues[gp.index][hand].buttons[b] = false;
            }

            if (model.lastGamepadValues[gp.index][hand].buttons[b] !== gp.buttons[b].pressed) {
              publicAPI.button3DEvent({
                gamepad: gp,
                position: pose.transform.position,
                orientation: pose.transform.orientation,
                pressed: gp.buttons[b].pressed,
                device: inputSource.handedness === 'left' ? Device.LeftController : Device.RightController,
                input: deviceInputMap[gp.mapping] && deviceInputMap[gp.mapping][b] ? deviceInputMap[gp.mapping][b] : Input.Trigger
              });
              model.lastGamepadValues[gp.index][hand].buttons[b] = gp.buttons[b].pressed;
            }

            if (model.lastGamepadValues[gp.index][hand].buttons[b]) {
              publicAPI.move3DEvent({
                gamepad: gp,
                position: pose.transform.position,
                orientation: pose.transform.orientation,
                device: inputSource.handedness === 'left' ? Device.LeftController : Device.RightController
              });
            }
          }
        }
      });
    };

    publicAPI.handleMouseMove = function (event) {
      // Do not consume event for move
      // preventDefault(event);
      var callData = _objectSpread$7(_objectSpread$7({}, getModifierKeysFor(event)), {}, {
        position: getScreenEventPositionFor(event)
      });

      if (model.moveTimeoutID === 0) {
        publicAPI.startMouseMoveEvent(callData);
      } else {
        publicAPI.mouseMoveEvent(callData);
        clearTimeout(model.moveTimeoutID);
      } // start a timer to keep us animating while we get mouse move events


      model.moveTimeoutID = setTimeout(function () {
        publicAPI.endMouseMoveEvent();
        model.moveTimeoutID = 0;
      }, 200);
    };

    publicAPI.handleAnimation = function () {
      var currTime = Date.now();

      if (model.FrameTime === -1.0) {
        model.lastFrameTime = 0.1;
      } else {
        model.lastFrameTime = (currTime - model.lastFrameStart) / 1000.0;
      }

      model.lastFrameTime = Math.max(0.01, model.lastFrameTime);
      model.lastFrameStart = currTime;
      publicAPI.animationEvent();
      forceRender();
      model.animationRequest = requestAnimationFrame(publicAPI.handleAnimation);
    };

    publicAPI.handleWheel = function (event) {
      preventDefault(event);
      /**
       * wheel event values can vary significantly across browsers, platforms
       * and devices [1]. `normalizeWheel` uses facebook's solution from their
       * fixed-data-table repository [2].
       *
       * [1] https://developer.mozilla.org/en-US/docs/Web/Events/mousewheel
       * [2] https://github.com/facebookarchive/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js
       *
       * This code will return an object with properties:
       *
       *   spinX   -- normalized spin speed (use for zoom) - x plane
       *   spinY   -- " - y plane
       *   pixelX  -- normalized distance (to pixels) - x plane
       *   pixelY  -- " - y plane
       *
       */

      var callData = _objectSpread$7(_objectSpread$7(_objectSpread$7({}, normalizeWheel(event)), getModifierKeysFor(event)), {}, {
        position: getScreenEventPositionFor(event)
      });

      if (model.wheelTimeoutID === 0) {
        publicAPI.startMouseWheelEvent(callData);
      } else {
        publicAPI.mouseWheelEvent(callData);
        clearTimeout(model.wheelTimeoutID);
      } // start a timer to keep us animating while we get wheel events


      model.wheelTimeoutID = setTimeout(function () {
        publicAPI.endMouseWheelEvent();
        model.wheelTimeoutID = 0;
      }, 200);
    };

    publicAPI.handleMouseEnter = function (event) {
      var callData = _objectSpread$7(_objectSpread$7({}, getModifierKeysFor(event)), {}, {
        position: getScreenEventPositionFor(event)
      });

      publicAPI.mouseEnterEvent(callData);
    };

    publicAPI.handleMouseLeave = function (event) {
      var callData = _objectSpread$7(_objectSpread$7({}, getModifierKeysFor(event)), {}, {
        position: getScreenEventPositionFor(event)
      });

      publicAPI.mouseLeaveEvent(callData);
    };

    publicAPI.handleMouseUp = function (event) {
      interactionRegistration(false);
      preventDefault(event);

      var callData = _objectSpread$7(_objectSpread$7({}, getModifierKeysFor(event)), {}, {
        position: getScreenEventPositionFor(event)
      });

      switch (event.button) {
        case 0:
          publicAPI.leftButtonReleaseEvent(callData);
          break;

        case 1:
          publicAPI.middleButtonReleaseEvent(callData);
          break;

        case 2:
          publicAPI.rightButtonReleaseEvent(callData);
          break;

        default:
          vtkErrorMacro$2("Unknown mouse button released: ".concat(event.button));
          break;
      }
    };

    publicAPI.handleTouchStart = function (event) {
      interactionRegistration(true);
      preventDefault(event); // If multitouch

      if (model.recognizeGestures && event.touches.length > 1) {
        var positions = getTouchEventPositionsFor(event.touches); // did we just transition to multitouch?

        if (event.touches.length === 2) {
          var touch = event.touches[0];
          var callData = {
            position: getScreenEventPositionFor(touch),
            shiftKey: false,
            altKey: false,
            controlKey: false
          };
          publicAPI.leftButtonReleaseEvent(callData);
        } // handle the gesture


        publicAPI.recognizeGesture('TouchStart', positions);
      } else {
        var _touch = event.touches[0];
        var _callData = {
          position: getScreenEventPositionFor(_touch),
          shiftKey: false,
          altKey: false,
          controlKey: false
        };
        publicAPI.leftButtonPressEvent(_callData);
      }
    };

    publicAPI.handleTouchMove = function (event) {
      preventDefault(event);

      if (model.recognizeGestures && event.touches.length > 1) {
        var positions = getTouchEventPositionsFor(event.touches);
        publicAPI.recognizeGesture('TouchMove', positions);
      } else {
        var touch = event.touches[0];
        var callData = {
          position: getScreenEventPositionFor(touch),
          shiftKey: false,
          altKey: false,
          controlKey: false
        };
        publicAPI.mouseMoveEvent(callData);
      }
    };

    publicAPI.handleTouchEnd = function (event) {
      preventDefault(event);

      if (model.recognizeGestures) {
        // No more fingers down
        if (event.touches.length === 0) {
          // If just one finger released, consider as left button
          if (event.changedTouches.length === 1) {
            var touch = event.changedTouches[0];
            var callData = {
              position: getScreenEventPositionFor(touch),
              shiftKey: false,
              altKey: false,
              controlKey: false
            };
            publicAPI.leftButtonReleaseEvent(callData);
            interactionRegistration(false);
          } else {
            // If more than one finger released, recognize touchend
            var positions = getTouchEventPositionsFor(event.changedTouches);
            publicAPI.recognizeGesture('TouchEnd', positions);
            interactionRegistration(false);
          }
        } else if (event.touches.length === 1) {
          // If one finger left, end touch and start button press
          var _positions = getTouchEventPositionsFor(event.changedTouches);

          publicAPI.recognizeGesture('TouchEnd', _positions);
          var _touch2 = event.touches[0];
          var _callData2 = {
            position: getScreenEventPositionFor(_touch2),
            shiftKey: false,
            altKey: false,
            controlKey: false
          };
          publicAPI.leftButtonPressEvent(_callData2);
        } else {
          // If more than one finger left, keep touch move
          var _positions2 = getTouchEventPositionsFor(event.touches);

          publicAPI.recognizeGesture('TouchMove', _positions2);
        }
      } else {
        var _touch3 = event.changedTouches[0];
        var _callData3 = {
          position: getScreenEventPositionFor(_touch3),
          shiftKey: false,
          altKey: false,
          controlKey: false
        };
        publicAPI.leftButtonReleaseEvent(_callData3);
        interactionRegistration(false);
      }
    };

    publicAPI.setView = function (val) {
      if (model.view === val) {
        return;
      }

      model.view = val;
      model.view.getRenderable().setInteractor(publicAPI);
      publicAPI.modified();
    };

    publicAPI.getFirstRenderer = function () {
      return model.view.getRenderable().getRenderersByReference()[0];
    };

    publicAPI.findPokedRenderer = function () {
      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      if (!model.view) {
        return null;
      } // The original order of renderers needs to remain as
      // the first one is the one we want to manipulate the camera on.


      var rc = model.view.getRenderable().getRenderers();
      rc.sort(function (a, b) {
        return a.getLayer() - b.getLayer();
      });
      var interactiveren = null;
      var viewportren = null;
      var currentRenderer = null;
      var count = rc.length;

      while (count--) {
        var aren = rc[count];

        if (model.view.isInViewport(x, y, aren) && aren.getInteractive()) {
          currentRenderer = aren;
          break;
        }

        if (interactiveren === null && aren.getInteractive()) {
          // Save this renderer in case we can't find one in the viewport that
          // is interactive.
          interactiveren = aren;
        }

        if (viewportren === null && model.view.isInViewport(x, y, aren)) {
          // Save this renderer in case we can't find one in the viewport that
          // is interactive.
          viewportren = aren;
        }
      } // We must have a value.  If we found an interactive renderer before, that's
      // better than a non-interactive renderer.


      if (currentRenderer === null) {
        currentRenderer = interactiveren;
      } // We must have a value.  If we found a renderer that is in the viewport,
      // that is better than any old viewport (but not as good as an interactive
      // one).


      if (currentRenderer === null) {
        currentRenderer = viewportren;
      } // We must have a value - take anything.


      if (currentRenderer == null) {
        currentRenderer = rc[0];
      }

      return currentRenderer;
    }; // only render if we are not animating. If we are animating
    // then renders will happen naturally anyhow and we definitely
    // do not want extra renders as the make the apparent interaction
    // rate slower.


    publicAPI.render = function () {
      if (!publicAPI.isAnimating() && !model.inRender) {
        forceRender();
      }
    }; // create the generic Event methods


    handledEvents.forEach(function (eventName) {
      var lowerFirst = eventName.charAt(0).toLowerCase() + eventName.slice(1);

      publicAPI["".concat(lowerFirst, "Event")] = function (arg) {
        // Check that interactor enabled
        if (!model.enabled) {
          return;
        } // Check that a poked renderer exists


        var renderer = publicAPI.getCurrentRenderer();

        if (!renderer) {
          vtkOnceErrorMacro("\n          Can not forward events without a current renderer on the interactor.\n        ");
          return;
        } // Pass the eventName and the poked renderer


        var callData = _objectSpread$7({
          type: eventName,
          pokedRenderer: model.currentRenderer,
          firstRenderer: publicAPI.getFirstRenderer()
        }, arg); // Call invoke


        publicAPI["invoke".concat(eventName)](callData);
      };
    }); // we know we are in multitouch now, so start recognizing

    publicAPI.recognizeGesture = function (event, positions) {
      // more than two pointers we ignore
      if (Object.keys(positions).length > 2) {
        return;
      }

      if (!model.startingEventPositions) {
        model.startingEventPositions = {};
      } // store the initial positions


      if (event === 'TouchStart') {
        Object.keys(positions).forEach(function (key) {
          model.startingEventPositions[key] = positions[key];
        }); // we do not know what the gesture is yet

        model.currentGesture = 'Start';
        return;
      } // end the gesture if needed


      if (event === 'TouchEnd') {
        if (model.currentGesture === 'Pinch') {
          publicAPI.render();
          publicAPI.endPinchEvent();
        }

        if (model.currentGesture === 'Rotate') {
          publicAPI.render();
          publicAPI.endRotateEvent();
        }

        if (model.currentGesture === 'Pan') {
          publicAPI.render();
          publicAPI.endPanEvent();
        }

        model.currentGesture = 'Start';
        model.startingEventPositions = {};
        return;
      } // what are the two pointers we are working with


      var count = 0;
      var posVals = [];
      var startVals = [];
      Object.keys(positions).forEach(function (key) {
        posVals[count] = positions[key];
        startVals[count] = model.startingEventPositions[key];
        count++;
      }); // The meat of the algorithm
      // on move events we analyze them to determine what type
      // of movement it is and then deal with it.
      // calculate the distances

      var originalDistance = Math.sqrt((startVals[0].x - startVals[1].x) * (startVals[0].x - startVals[1].x) + (startVals[0].y - startVals[1].y) * (startVals[0].y - startVals[1].y));
      var newDistance = Math.sqrt((posVals[0].x - posVals[1].x) * (posVals[0].x - posVals[1].x) + (posVals[0].y - posVals[1].y) * (posVals[0].y - posVals[1].y)); // calculate rotations

      var originalAngle = degreesFromRadians(Math.atan2(startVals[1].y - startVals[0].y, startVals[1].x - startVals[0].x));
      var newAngle = degreesFromRadians(Math.atan2(posVals[1].y - posVals[0].y, posVals[1].x - posVals[0].x)); // angles are cyclic so watch for that, 1 and 359 are only 2 apart :)

      var angleDeviation = newAngle - originalAngle;
      newAngle = newAngle + 180.0 >= 360.0 ? newAngle - 180.0 : newAngle + 180.0;
      originalAngle = originalAngle + 180.0 >= 360.0 ? originalAngle - 180.0 : originalAngle + 180.0;

      if (Math.abs(newAngle - originalAngle) < Math.abs(angleDeviation)) {
        angleDeviation = newAngle - originalAngle;
      } // calculate the translations


      var trans = [];
      trans[0] = (posVals[0].x - startVals[0].x + posVals[1].x - startVals[1].x) / 2.0;
      trans[1] = (posVals[0].y - startVals[0].y + posVals[1].y - startVals[1].y) / 2.0;

      if (event === 'TouchMove') {
        // OK we want to
        // - immediately respond to the user
        // - allow the user to zoom without panning (saves focal point)
        // - allow the user to rotate without panning (saves focal point)
        // do we know what gesture we are doing yet? If not
        // see if we can figure it out
        if (model.currentGesture === 'Start') {
          // pinch is a move to/from the center point
          // rotate is a move along the circumference
          // pan is a move of the center point
          // compute the distance along each of these axes in pixels
          // the first to break thresh wins
          var thresh = 0.01 * Math.sqrt(model.container.clientWidth * model.container.clientWidth + model.container.clientHeight * model.container.clientHeight);

          if (thresh < 15.0) {
            thresh = 15.0;
          }

          var pinchDistance = Math.abs(newDistance - originalDistance);
          var rotateDistance = newDistance * 3.1415926 * Math.abs(angleDeviation) / 360.0;
          var panDistance = Math.sqrt(trans[0] * trans[0] + trans[1] * trans[1]);

          if (pinchDistance > thresh && pinchDistance > rotateDistance && pinchDistance > panDistance) {
            model.currentGesture = 'Pinch';
            var callData = {
              scale: 1.0,
              touches: positions
            };
            publicAPI.startPinchEvent(callData);
          } else if (rotateDistance > thresh && rotateDistance > panDistance) {
            model.currentGesture = 'Rotate';
            var _callData4 = {
              rotation: 0.0,
              touches: positions
            };
            publicAPI.startRotateEvent(_callData4);
          } else if (panDistance > thresh) {
            model.currentGesture = 'Pan';
            var _callData5 = {
              translation: [0, 0],
              touches: positions
            };
            publicAPI.startPanEvent(_callData5);
          }
        } else {
          // if we have found a specific type of movement then
          // handle it
          if (model.currentGesture === 'Rotate') {
            var _callData6 = {
              rotation: angleDeviation,
              touches: positions
            };
            publicAPI.rotateEvent(_callData6);
          }

          if (model.currentGesture === 'Pinch') {
            var _callData7 = {
              scale: newDistance / originalDistance,
              touches: positions
            };
            publicAPI.pinchEvent(_callData7);
          }

          if (model.currentGesture === 'Pan') {
            var _callData8 = {
              translation: trans,
              touches: positions
            };
            publicAPI.panEvent(_callData8);
          }
        }
      }
    };

    publicAPI.handleVisibilityChange = function () {
      model.lastFrameStart = Date.now();
    };

    publicAPI.setCurrentRenderer = function (r) {
      model._forcedRenderer = !!r;
      model.currentRenderer = r;
    }; // Stop animating if the renderWindowInteractor is deleted.


    var superDelete = publicAPI.delete;

    publicAPI.delete = function () {
      while (animationRequesters.size) {
        publicAPI.cancelAnimation(animationRequesters.values().next().value);
      }

      if (typeof document.hidden !== 'undefined') {
        document.removeEventListener('visibilitychange', publicAPI.handleVisibilityChange);
      }

      superDelete();
    }; // Use the Page Visibility API to detect when we switch away from or back to
    // this tab, and reset the lastFrameStart. When tabs are not active, browsers
    // will stop calling requestAnimationFrame callbacks.


    if (typeof document.hidden !== 'undefined') {
      document.addEventListener('visibilitychange', publicAPI.handleVisibilityChange, false);
    }
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$h = {
    renderWindow: null,
    interactorStyle: null,
    picker: null,
    pickingManager: null,
    initialized: false,
    enabled: false,
    enableRender: true,
    currentRenderer: null,
    lightFollowCamera: true,
    desiredUpdateRate: 30.0,
    stillUpdateRate: 2.0,
    container: null,
    view: null,
    recognizeGestures: true,
    currentGesture: 'Start',
    animationRequest: null,
    lastFrameTime: 0.1,
    wheelTimeoutID: 0,
    moveTimeoutID: 0,
    lastGamepadValues: {}
  }; // ----------------------------------------------------------------------------

  function extend$j(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$h, initialValues); // Object methods

    macro.obj(publicAPI, model);
    macro.event(publicAPI, model, 'RenderEvent');
    handledEvents.forEach(function (eventName) {
      return macro.event(publicAPI, model, eventName);
    }); // Create get-only macros

    macro.get(publicAPI, model, ['initialized', 'container', 'interactorStyle', 'lastFrameTime', 'view']); // Create get-set macros

    macro.setGet(publicAPI, model, ['lightFollowCamera', 'enabled', 'enableRender', 'recognizeGestures', 'desiredUpdateRate', 'stillUpdateRate', 'picker']); // For more macro methods, see "Sources/macros.js"
    // Object specific methods

    vtkRenderWindowInteractor(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$h = macro.newInstance(extend$j, 'vtkRenderWindowInteractor'); // ----------------------------------------------------------------------------

  var vtkRenderWindowInteractor$1 = _objectSpread$7({
    newInstance: newInstance$h,
    extend: extend$j,
    handledEvents: handledEvents
  }, Constants$1);

  function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$6(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  var vtkErrorMacro$1 = macro.vtkErrorMacro,
      VOID = macro.VOID; // ----------------------------------------------------------------------------
  // Global methods
  // ----------------------------------------------------------------------------
  //----------------------------------------------------------------------------
  // Description:
  // Transform from world to display coordinates.

  function computeWorldToDisplay(renderer, x, y, z) {
    var view = renderer.getRenderWindow().getViews()[0];
    return view.worldToDisplay(x, y, z, renderer);
  } //----------------------------------------------------------------------------
  // Description:
  // Transform from display to world coordinates.


  function computeDisplayToWorld(renderer, x, y, z) {
    var view = renderer.getRenderWindow().getViews()[0];
    return view.displayToWorld(x, y, z, renderer);
  } // ----------------------------------------------------------------------------
  // Static API
  // ----------------------------------------------------------------------------


  var STATIC$4 = {
    computeWorldToDisplay: computeWorldToDisplay,
    computeDisplayToWorld: computeDisplayToWorld
  }; // ----------------------------------------------------------------------------
  // vtkInteractorObserver methods
  // ----------------------------------------------------------------------------

  function vtkInteractorObserver(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkInteractorObserver');

    var superClass = _objectSpread$6({}, publicAPI); //----------------------------------------------------------------------------


    function unsubscribeFromEvents() {
      while (model.subscribedEvents.length) {
        model.subscribedEvents.pop().unsubscribe();
      }
    } //----------------------------------------------------------------------------
    // Check what events we can handle and register callbacks


    function subscribeToEvents() {
      vtkRenderWindowInteractor$1.handledEvents.forEach(function (eventName) {
        if (publicAPI["handle".concat(eventName)]) {
          model.subscribedEvents.push(model.interactor["on".concat(eventName)](function (callData) {
            if (model.processEvents) {
              return publicAPI["handle".concat(eventName)](callData);
            }

            return VOID;
          }, model.priority));
        }
      });
    } //----------------------------------------------------------------------------
    // Public API methods
    //----------------------------------------------------------------------------


    publicAPI.setInteractor = function (i) {
      if (i === model.interactor) {
        return;
      }

      unsubscribeFromEvents();
      model.interactor = i;

      if (i && model.enabled) {
        subscribeToEvents();
      }

      publicAPI.modified();
    }; //----------------------------------------------------------------------------


    publicAPI.setEnabled = function (enable) {
      if (enable === model.enabled) {
        return;
      }

      unsubscribeFromEvents();

      if (enable) {
        if (model.interactor) {
          subscribeToEvents();
        } else {
          vtkErrorMacro$1("\n          The interactor must be set before subscribing to events\n        ");
        }
      }

      model.enabled = enable;
      publicAPI.modified();
    }; //----------------------------------------------------------------------------
    // Description:
    // Transform from display to world coordinates.


    publicAPI.computeDisplayToWorld = function (renderer, x, y, z) {
      if (!renderer) {
        return null;
      }

      return model.interactor.getView().displayToWorld(x, y, z, renderer);
    }; //----------------------------------------------------------------------------
    // Description:
    // Transform from world to display coordinates.


    publicAPI.computeWorldToDisplay = function (renderer, x, y, z) {
      if (!renderer) {
        return null;
      }

      return model.interactor.getView().worldToDisplay(x, y, z, renderer);
    }; //----------------------------------------------------------------------------


    publicAPI.setPriority = function (priority) {
      var modified = superClass.setPriority(priority);

      if (modified && model.interactor) {
        unsubscribeFromEvents();
        subscribeToEvents();
      }
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$g = {
    enabled: true,
    interactor: null,
    priority: 0.0,
    processEvents: true,
    subscribedEvents: []
  }; // ----------------------------------------------------------------------------

  function extend$i(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$g, initialValues); // Object methods

    macro.obj(publicAPI, model);
    macro.event(publicAPI, model, 'InteractionEvent');
    macro.event(publicAPI, model, 'StartInteractionEvent');
    macro.event(publicAPI, model, 'EndInteractionEvent'); // Create get-only macros

    macro.get(publicAPI, model, ['interactor', 'enabled']); // Create get-set macros

    macro.setGet(publicAPI, model, ['priority', 'processEvents']); // For more macro methods, see "Sources/macros.js"
    // Object specific methods

    vtkInteractorObserver(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$g = macro.newInstance(extend$i, 'vtkInteractorObserver'); // ----------------------------------------------------------------------------

  var vtkInteractorObserver$1 = _objectSpread$6({
    newInstance: newInstance$g,
    extend: extend$i
  }, STATIC$4);

  var States$2 = {
    IS_START: 0,
    IS_NONE: 0,
    IS_ROTATE: 1,
    IS_PAN: 2,
    IS_SPIN: 3,
    IS_DOLLY: 4,
    IS_CAMERA_POSE: 11,
    IS_WINDOW_LEVEL: 1024,
    IS_SLICE: 1025
  };
  var vtkInteractorStyleConstants = {
    States: States$2
  };

  function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$5(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  var States$1 = vtkInteractorStyleConstants.States; // ----------------------------------------------------------------------------
  // Global methods
  // ----------------------------------------------------------------------------
  // Add module-level functions or api that you want to expose statically via
  // the next section...

  var stateNames = {
    Rotate: States$1.IS_ROTATE,
    Pan: States$1.IS_PAN,
    Spin: States$1.IS_SPIN,
    Dolly: States$1.IS_DOLLY,
    CameraPose: States$1.IS_CAMERA_POSE,
    WindowLevel: States$1.IS_WINDOW_LEVEL,
    Slice: States$1.IS_SLICE
  }; // ----------------------------------------------------------------------------
  // vtkInteractorStyle methods
  // ----------------------------------------------------------------------------

  function vtkInteractorStyle(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkInteractorStyle'); // Public API methods
    // create bunch of Start/EndState methods

    Object.keys(stateNames).forEach(function (key) {
      macro.event(publicAPI, model, "Start".concat(key, "Event"));

      publicAPI["start".concat(key)] = function () {
        if (model.state !== States$1.IS_NONE) {
          return;
        }

        model.state = stateNames[key];
        model.interactor.requestAnimation(publicAPI);
        publicAPI.invokeStartInteractionEvent({
          type: 'StartInteractionEvent'
        });
        publicAPI["invokeStart".concat(key, "Event")]({
          type: "Start".concat(key, "Event")
        });
      };

      macro.event(publicAPI, model, "End".concat(key, "Event"));

      publicAPI["end".concat(key)] = function () {
        if (model.state !== stateNames[key]) {
          return;
        }

        model.state = States$1.IS_NONE;
        model.interactor.cancelAnimation(publicAPI);
        publicAPI.invokeEndInteractionEvent({
          type: 'EndInteractionEvent'
        });
        publicAPI["invokeEnd".concat(key, "Event")]({
          type: "End".concat(key, "Event")
        });
        model.interactor.render();
      };
    }); //----------------------------------------------------------------------------

    publicAPI.handleKeyPress = function (callData) {
      var rwi = model.interactor;
      var ac = null;

      switch (callData.key) {
        case 'r':
        case 'R':
          callData.pokedRenderer.resetCamera();
          rwi.render();
          break;

        case 'w':
        case 'W':
          ac = callData.pokedRenderer.getActors();
          ac.forEach(function (anActor) {
            var prop = anActor.getProperty();

            if (prop.setRepresentationToWireframe) {
              prop.setRepresentationToWireframe();
            }
          });
          rwi.render();
          break;

        case 's':
        case 'S':
          ac = callData.pokedRenderer.getActors();
          ac.forEach(function (anActor) {
            var prop = anActor.getProperty();

            if (prop.setRepresentationToSurface) {
              prop.setRepresentationToSurface();
            }
          });
          rwi.render();
          break;

        case 'v':
        case 'V':
          ac = callData.pokedRenderer.getActors();
          ac.forEach(function (anActor) {
            var prop = anActor.getProperty();

            if (prop.setRepresentationToPoints) {
              prop.setRepresentationToPoints();
            }
          });
          rwi.render();
          break;
      }
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$f = {
    state: States$1.IS_NONE,
    handleObservers: 1,
    autoAdjustCameraClippingRange: 1
  }; // ----------------------------------------------------------------------------

  function extend$h(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$f, initialValues); // Inheritance

    vtkInteractorObserver$1.extend(publicAPI, model, initialValues); // Object specific methods

    vtkInteractorStyle(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$f = macro.newInstance(extend$h, 'vtkInteractorStyle'); // ----------------------------------------------------------------------------

  var vtkInteractorStyle$1 = _objectSpread$5({
    newInstance: newInstance$f,
    extend: extend$h
  }, vtkInteractorStyleConstants);

  var States = vtkInteractorStyleConstants.States;
  /* eslint-disable no-lonely-if */
  // ----------------------------------------------------------------------------
  // vtkInteractorStyleTrackballCamera methods
  // ----------------------------------------------------------------------------

  function vtkInteractorStyleTrackballCamera(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkInteractorStyleTrackballCamera'); // Public API methods

    publicAPI.handleMouseMove = function (callData) {
      var pos = callData.position;
      var renderer = callData.pokedRenderer;

      switch (model.state) {
        case States.IS_ROTATE:
          publicAPI.handleMouseRotate(renderer, pos);
          publicAPI.invokeInteractionEvent({
            type: 'InteractionEvent'
          });
          break;

        case States.IS_PAN:
          publicAPI.handleMousePan(renderer, pos);
          publicAPI.invokeInteractionEvent({
            type: 'InteractionEvent'
          });
          break;

        case States.IS_DOLLY:
          publicAPI.handleMouseDolly(renderer, pos);
          publicAPI.invokeInteractionEvent({
            type: 'InteractionEvent'
          });
          break;

        case States.IS_SPIN:
          publicAPI.handleMouseSpin(renderer, pos);
          publicAPI.invokeInteractionEvent({
            type: 'InteractionEvent'
          });
          break;
      }

      model.previousPosition = pos;
    }; //----------------------------------------------------------------------------


    publicAPI.handleButton3D = function (ed) {
      if (ed && ed.pressed && ed.device === Device$1.RightController && (ed.input === Input$1.Trigger || ed.input === Input$1.TrackPad)) {
        publicAPI.startCameraPose();
        return;
      }

      if (ed && !ed.pressed && ed.device === Device$1.RightController && (ed.input === Input$1.Trigger || ed.input === Input$1.TrackPad) && model.state === States.IS_CAMERA_POSE) {
        publicAPI.endCameraPose(); // return;
      }
    };

    publicAPI.handleMove3D = function (ed) {
      switch (model.state) {
        case States.IS_CAMERA_POSE:
          publicAPI.updateCameraPose(ed);
          break;
      }
    };

    publicAPI.updateCameraPose = function (ed) {
      // move the world in the direction of the
      // controller
      var camera = ed.pokedRenderer.getActiveCamera();
      var oldTrans = camera.getPhysicalTranslation(); // look at the y axis to determine how fast / what direction to move

      var speed = 0.5; // ed.gamepad.axes[1];
      // 0.05 meters / frame movement

      var pscale = speed * 0.05 * camera.getPhysicalScale(); // convert orientation to world coordinate direction

      var dir = camera.physicalOrientationToWorldDirection([ed.orientation.x, ed.orientation.y, ed.orientation.z, ed.orientation.w]);
      camera.setPhysicalTranslation(oldTrans[0] + dir[0] * pscale, oldTrans[1] + dir[1] * pscale, oldTrans[2] + dir[2] * pscale);
    }; //----------------------------------------------------------------------------


    publicAPI.handleLeftButtonPress = function (callData) {
      var pos = callData.position;
      model.previousPosition = pos;

      if (callData.shiftKey) {
        if (callData.controlKey || callData.altKey) {
          publicAPI.startDolly();
        } else {
          publicAPI.startPan();
        }
      } else {
        if (callData.controlKey || callData.altKey) {
          publicAPI.startSpin();
        } else {
          publicAPI.startRotate();
        }
      }
    }; //--------------------------------------------------------------------------


    publicAPI.handleLeftButtonRelease = function () {
      switch (model.state) {
        case States.IS_DOLLY:
          publicAPI.endDolly();
          break;

        case States.IS_PAN:
          publicAPI.endPan();
          break;

        case States.IS_SPIN:
          publicAPI.endSpin();
          break;

        case States.IS_ROTATE:
          publicAPI.endRotate();
          break;
      }
    }; //----------------------------------------------------------------------------


    publicAPI.handleStartMouseWheel = function (callData) {
      publicAPI.startDolly();
      publicAPI.handleMouseWheel(callData);
    }; //--------------------------------------------------------------------------


    publicAPI.handleEndMouseWheel = function () {
      publicAPI.endDolly();
    }; //----------------------------------------------------------------------------


    publicAPI.handleStartPinch = function (callData) {
      model.previousScale = callData.scale;
      publicAPI.startDolly();
    }; //--------------------------------------------------------------------------


    publicAPI.handleEndPinch = function () {
      publicAPI.endDolly();
    }; //----------------------------------------------------------------------------


    publicAPI.handleStartRotate = function (callData) {
      model.previousRotation = callData.rotation;
      publicAPI.startRotate();
    }; //--------------------------------------------------------------------------


    publicAPI.handleEndRotate = function () {
      publicAPI.endRotate();
    }; //----------------------------------------------------------------------------


    publicAPI.handleStartPan = function (callData) {
      model.previousTranslation = callData.translation;
      publicAPI.startPan();
    }; //--------------------------------------------------------------------------


    publicAPI.handleEndPan = function () {
      publicAPI.endPan();
    }; //----------------------------------------------------------------------------


    publicAPI.handlePinch = function (callData) {
      publicAPI.dollyByFactor(callData.pokedRenderer, callData.scale / model.previousScale);
      model.previousScale = callData.scale;
    }; //----------------------------------------------------------------------------


    publicAPI.handlePan = function (callData) {
      var camera = callData.pokedRenderer.getActiveCamera(); // Calculate the focal depth since we'll be using it a lot

      var viewFocus = camera.getFocalPoint();
      viewFocus = publicAPI.computeWorldToDisplay(callData.pokedRenderer, viewFocus[0], viewFocus[1], viewFocus[2]);
      var focalDepth = viewFocus[2];
      var trans = callData.translation;
      var lastTrans = model.previousTranslation;
      var newPickPoint = publicAPI.computeDisplayToWorld(callData.pokedRenderer, viewFocus[0] + trans[0] - lastTrans[0], viewFocus[1] + trans[1] - lastTrans[1], focalDepth); // Has to recalc old mouse point since the viewport has moved,
      // so can't move it outside the loop

      var oldPickPoint = publicAPI.computeDisplayToWorld(callData.pokedRenderer, viewFocus[0], viewFocus[1], focalDepth); // Camera motion is reversed

      var motionVector = [];
      motionVector[0] = oldPickPoint[0] - newPickPoint[0];
      motionVector[1] = oldPickPoint[1] - newPickPoint[1];
      motionVector[2] = oldPickPoint[2] - newPickPoint[2];
      viewFocus = camera.getFocalPoint();
      var viewPoint = camera.getPosition();
      camera.setFocalPoint(motionVector[0] + viewFocus[0], motionVector[1] + viewFocus[1], motionVector[2] + viewFocus[2]);
      camera.setPosition(motionVector[0] + viewPoint[0], motionVector[1] + viewPoint[1], motionVector[2] + viewPoint[2]);

      if (model.interactor.getLightFollowCamera()) {
        callData.pokedRenderer.updateLightsGeometryToFollowCamera();
      }

      camera.orthogonalizeViewUp();
      model.previousTranslation = callData.translation;
    }; //----------------------------------------------------------------------------


    publicAPI.handleRotate = function (callData) {
      var camera = callData.pokedRenderer.getActiveCamera();
      camera.roll(callData.rotation - model.previousRotation);
      camera.orthogonalizeViewUp();
      model.previousRotation = callData.rotation;
    }; //--------------------------------------------------------------------------


    publicAPI.handleMouseRotate = function (renderer, position) {
      var rwi = model.interactor;
      var dx = position.x - model.previousPosition.x;
      var dy = position.y - model.previousPosition.y;
      var size = rwi.getView().getViewportSize(renderer);
      var deltaElevation = -0.1;
      var deltaAzimuth = -0.1;

      if (size[0] && size[1]) {
        deltaElevation = -20.0 / size[1];
        deltaAzimuth = -20.0 / size[0];
      }

      var rxf = dx * deltaAzimuth * model.motionFactor;
      var ryf = dy * deltaElevation * model.motionFactor;
      var camera = renderer.getActiveCamera();

      if (!Number.isNaN(rxf) && !Number.isNaN(ryf)) {
        camera.azimuth(rxf);
        camera.elevation(ryf);
        camera.orthogonalizeViewUp();
      }

      if (model.autoAdjustCameraClippingRange) {
        renderer.resetCameraClippingRange();
      }

      if (rwi.getLightFollowCamera()) {
        renderer.updateLightsGeometryToFollowCamera();
      }
    }; //--------------------------------------------------------------------------


    publicAPI.handleMouseSpin = function (renderer, position) {
      var rwi = model.interactor;
      var camera = renderer.getActiveCamera();
      var center = rwi.getView().getViewportCenter(renderer);
      var oldAngle = degreesFromRadians(Math.atan2(model.previousPosition.y - center[1], model.previousPosition.x - center[0]));
      var newAngle = degreesFromRadians(Math.atan2(position.y - center[1], position.x - center[0])) - oldAngle;

      if (!Number.isNaN(newAngle)) {
        camera.roll(newAngle);
        camera.orthogonalizeViewUp();
      }
    }; //--------------------------------------------------------------------------


    publicAPI.handleMousePan = function (renderer, position) {
      var camera = renderer.getActiveCamera(); // Calculate the focal depth since we'll be using it a lot

      var viewFocus = camera.getFocalPoint();
      viewFocus = publicAPI.computeWorldToDisplay(renderer, viewFocus[0], viewFocus[1], viewFocus[2]);
      var focalDepth = viewFocus[2];
      var newPickPoint = publicAPI.computeDisplayToWorld(renderer, position.x, position.y, focalDepth); // Has to recalc old mouse point since the viewport has moved,
      // so can't move it outside the loop

      var oldPickPoint = publicAPI.computeDisplayToWorld(renderer, model.previousPosition.x, model.previousPosition.y, focalDepth); // Camera motion is reversed

      var motionVector = [];
      motionVector[0] = oldPickPoint[0] - newPickPoint[0];
      motionVector[1] = oldPickPoint[1] - newPickPoint[1];
      motionVector[2] = oldPickPoint[2] - newPickPoint[2];
      viewFocus = camera.getFocalPoint();
      var viewPoint = camera.getPosition();
      camera.setFocalPoint(motionVector[0] + viewFocus[0], motionVector[1] + viewFocus[1], motionVector[2] + viewFocus[2]);
      camera.setPosition(motionVector[0] + viewPoint[0], motionVector[1] + viewPoint[1], motionVector[2] + viewPoint[2]);

      if (model.interactor.getLightFollowCamera()) {
        renderer.updateLightsGeometryToFollowCamera();
      }
    }; //----------------------------------------------------------------------------


    publicAPI.handleMouseDolly = function (renderer, position) {
      var dy = position.y - model.previousPosition.y;
      var rwi = model.interactor;
      var center = rwi.getView().getViewportCenter(renderer);
      var dyf = model.motionFactor * dy / center[1];
      publicAPI.dollyByFactor(renderer, Math.pow(1.1, dyf));
    }; //----------------------------------------------------------------------------


    publicAPI.handleMouseWheel = function (callData) {
      var dyf = 1 - callData.spinY / model.zoomFactor;
      publicAPI.dollyByFactor(callData.pokedRenderer, dyf);
    }; //----------------------------------------------------------------------------


    publicAPI.dollyByFactor = function (renderer, factor) {
      if (Number.isNaN(factor)) {
        return;
      }

      var camera = renderer.getActiveCamera();

      if (camera.getParallelProjection()) {
        camera.setParallelScale(camera.getParallelScale() / factor);
      } else {
        camera.dolly(factor);

        if (model.autoAdjustCameraClippingRange) {
          renderer.resetCameraClippingRange();
        }
      }

      if (model.interactor.getLightFollowCamera()) {
        renderer.updateLightsGeometryToFollowCamera();
      }
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$e = {
    motionFactor: 10.0,
    zoomFactor: 10.0
  }; // ----------------------------------------------------------------------------

  function extend$g(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$e, initialValues); // Inheritance

    vtkInteractorStyle$1.extend(publicAPI, model, initialValues); // Create get-set macros

    macro.setGet(publicAPI, model, ['motionFactor', 'zoomFactor']); // For more macro methods, see "Sources/macros.js"
    // Object specific methods

    vtkInteractorStyleTrackballCamera(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$e = macro.newInstance(extend$g, 'vtkInteractorStyleTrackballCamera'); // ----------------------------------------------------------------------------

  var vtkInteractorStyleTrackballCamera$1 = {
    newInstance: newInstance$e,
    extend: extend$g
  };

  function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$4(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  // Global methods
  // ----------------------------------------------------------------------------

  function extractCellSizes(cellArray) {
    var currentIdx = 0;
    return cellArray.filter(function (value, index) {
      if (index === currentIdx) {
        currentIdx += value + 1;
        return true;
      }

      return false;
    });
  }

  function getNumberOfCells(cellArray) {
    return extractCellSizes(cellArray).length;
  } // ----------------------------------------------------------------------------
  // Static API
  // ----------------------------------------------------------------------------


  var STATIC$3 = {
    extractCellSizes: extractCellSizes,
    getNumberOfCells: getNumberOfCells
  }; // ----------------------------------------------------------------------------
  // vtkCellArray methods
  // ----------------------------------------------------------------------------

  function vtkCellArray(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkCellArray');

    publicAPI.getNumberOfCells = function (recompute) {
      if (model.numberOfCells !== undefined && !recompute) {
        return model.numberOfCells;
      }

      model.cellSizes = extractCellSizes(model.values);
      model.numberOfCells = model.cellSizes.length;
      return model.numberOfCells;
    };

    publicAPI.getCellSizes = function (recompute) {
      if (model.cellSizes !== undefined && !recompute) {
        return model.cellSizes;
      }

      model.cellSizes = extractCellSizes(model.values);
      return model.cellSizes;
    };

    var superSetData = publicAPI.setData;

    publicAPI.setData = function (typedArray) {
      superSetData(typedArray, 1);
      model.numberOfCells = undefined;
      model.cellSizes = undefined;
    };
    /**
     * Returns the point indexes at the given location as a subarray.
     */


    publicAPI.getCell = function (loc) {
      var cellLoc = loc;
      var numberOfPoints = model.values[cellLoc++];
      return model.values.subarray(cellLoc, cellLoc + numberOfPoints);
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  function defaultValues(initialValues) {
    return _objectSpread$4({
      empty: true,
      numberOfComponents: 1,
      dataType: VtkDataTypes$3.UNSIGNED_INT
    }, initialValues);
  } // ----------------------------------------------------------------------------


  function extend$f(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    vtkDataArray$1.extend(publicAPI, model, defaultValues(initialValues));
    vtkCellArray(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$d = macro.newInstance(extend$f, 'vtkCellArray'); // ----------------------------------------------------------------------------

  var vtkCellArray$1 = _objectSpread$4({
    newInstance: newInstance$d,
    extend: extend$f
  }, STATIC$3);

  // vtkCell methods
  // ----------------------------------------------------------------------------

  function vtkCell(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkCell');

    publicAPI.initialize = function (points) {
      var pointIdsList = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      if (!pointIdsList) {
        model.points = points;
        model.pointsIds = new Array(points.getNumberOfPoints());

        for (var i = points.getNumberOfPoints() - 1; i >= 0; --i) {
          model.pointsIds[i] = i;
        }
      } else {
        model.pointsIds = pointIdsList;
        var triangleData = model.points.getData();

        if (triangleData.length !== 3 * model.pointsIds.length) {
          triangleData = macro.newTypedArray(points.getDataType(), 3 * model.pointsIds.length);
        }

        var pointsData = points.getData();
        model.pointsIds.forEach(function (pointId, index) {
          // const start = 3 * pointId;
          // pointsData.set(p.subarray(start, start + 3), 3 * index);
          var pointOffset = 3 * pointId;
          var trianglePointOffset = 3 * index;
          triangleData[trianglePointOffset] = pointsData[pointOffset];
          triangleData[++trianglePointOffset] = pointsData[++pointOffset];
          triangleData[++trianglePointOffset] = pointsData[++pointOffset];
        });
        model.points.setData(triangleData);
      }
    };

    publicAPI.getBounds = function () {
      var nbPoints = model.points.getNumberOfPoints();
      var x = [];

      if (nbPoints) {
        model.points.getPoint(0, x);
        model.bounds[0] = x[0];
        model.bounds[1] = x[0];
        model.bounds[2] = x[1];
        model.bounds[3] = x[1];
        model.bounds[4] = x[2];
        model.bounds[5] = x[2];

        for (var i = 1; i < nbPoints; i++) {
          model.points.getPoint(i, x);
          model.bounds[0] = x[0] < model.bounds[0] ? x[0] : model.bounds[0];
          model.bounds[1] = x[0] > model.bounds[1] ? x[0] : model.bounds[1];
          model.bounds[2] = x[1] < model.bounds[2] ? x[1] : model.bounds[2];
          model.bounds[3] = x[1] > model.bounds[3] ? x[1] : model.bounds[3];
          model.bounds[4] = x[2] < model.bounds[4] ? x[2] : model.bounds[4];
          model.bounds[5] = x[2] > model.bounds[5] ? x[2] : model.bounds[5];
        }
      } else {
        uninitializeBounds(model.bounds);
      }

      return model.bounds;
    };

    publicAPI.getLength2 = function () {
      publicAPI.getBounds();
      var length = 0.0;
      var diff = 0;

      for (var i = 0; i < 3; i++) {
        diff = model.bounds[2 * i + 1] - model.bounds[2 * i];
        length += diff * diff;
      }

      return length;
    };

    publicAPI.getParametricDistance = function (pcoords) {
      var pDist;
      var pDistMax = 0.0;

      for (var i = 0; i < 3; i++) {
        if (pcoords[i] < 0.0) {
          pDist = -pcoords[i];
        } else if (pcoords[i] > 1.0) {
          pDist = pcoords[i] - 1.0;
        } else {
          // inside the cell in the parametric direction
          pDist = 0.0;
        }

        if (pDist > pDistMax) {
          pDistMax = pDist;
        }
      }

      return pDistMax;
    };

    publicAPI.getNumberOfPoints = function () {
      return model.points.getNumberOfPoints();
    };

    publicAPI.deepCopy = function (cell) {
      cell.initialize(model.points, model.pointsIds);
    };

    publicAPI.getCellDimension = function () {}; // virtual


    publicAPI.intersectWithLine = function (p1, p2, tol, t, x, pcoords, subId) {}; // virtual


    publicAPI.evaluatePosition = function (x, closestPoint, subId, pcoords, dist2, weights) {}; // virtual

  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$d = {
    bounds: [-1, -1, -1, -1, -1, -1],
    pointsIds: []
  }; // ----------------------------------------------------------------------------

  function extend$e(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$d, initialValues);
    macro.obj(publicAPI, model);

    if (!model.points) {
      model.points = vtkPoints$1.newInstance();
    }

    macro.get(publicAPI, model, ['points', 'pointsIds']);
    vtkCell(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$c = macro.newInstance(extend$e, 'vtkCell'); // ----------------------------------------------------------------------------

  var vtkCell$1 = {
    newInstance: newInstance$c,
    extend: extend$e
  };

  function resize(model, sz) {
    var newSize = sz;

    if (sz >= model.array.length) {
      newSize += model.array.length;
    }

    while (newSize > model.array.length) {
      model.array.push({
        ncells: 0,
        cells: null
      });
    }

    model.array.length = newSize;
  } // ----------------------------------------------------------------------------
  // vtkCellLinks methods
  // ----------------------------------------------------------------------------


  function vtkCellLinks(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkCellLinks');
    /**
     * Build the link list array. All subclasses of vtkAbstractCellLinks
     * must support this method.
     */

    publicAPI.buildLinks = function (data) {
      var numPts = data.getPoints().getNumberOfPoints();
      var numCells = data.getNumberOfCells(); // fill out lists with number of references to cells

      var linkLoc = new Uint32Array(numPts); // Use fast path if polydata

      if (data.isA('vtkPolyData')) {
        // traverse data to determine number of uses of each point
        for (var cellId = 0; cellId < numCells; ++cellId) {
          var _data$getCellPoints = data.getCellPoints(cellId),
              cellPointIds = _data$getCellPoints.cellPointIds;

          cellPointIds.forEach(function (cellPointId) {
            publicAPI.incrementLinkCount(cellPointId);
          });
        } // now allocate storage for the links


        publicAPI.allocateLinks(numPts);
        model.maxId = numPts - 1;

        var _loop = function _loop(_cellId) {
          var _data$getCellPoints2 = data.getCellPoints(_cellId),
              cellPointIds = _data$getCellPoints2.cellPointIds;

          cellPointIds.forEach(function (cellPointId) {
            publicAPI.insertCellReference(cellPointId, linkLoc[cellPointId]++, _cellId);
          });
        };

        for (var _cellId = 0; _cellId < numCells; ++_cellId) {
          _loop(_cellId);
        }
      } // any other type of dataset
      else {
        // traverse data to determine number of uses of each point
        for (var _cellId2 = 0; _cellId2 < numCells; _cellId2++) {
          // TODO: Currently not supported: const cell = data.getCell(cellId);
          var cell = vtkCell$1.newInstance();
          cell.getPointsIds().forEach(function (cellPointId) {
            publicAPI.incrementLinkCount(cellPointId);
          });
        } // now allocate storage for the links


        publicAPI.allocateLinks(numPts);
        model.maxId = numPts - 1;

        var _loop2 = function _loop2(_cellId3) {
          // TODO: Currently not supported: const cell = data.getCell(cellId);
          var cell = vtkCell$1.newInstance();
          cell.getPointsIds().forEach(function (cellPointId) {
            publicAPI.insertCellReference(cellPointId, linkLoc[cellPointId]++, _cellId3);
          });
        };

        for (var _cellId3 = 0; _cellId3 < numCells; ++_cellId3) {
          _loop2(_cellId3);
        }
      } // end else

    };
    /**
     * Build the link list array with a provided connectivity array.
     */
    // publicAPI.buildLinks = (data, connectivity) => {};

    /**
     * Allocate the specified number of links (i.e., number of points) that
     * will be built.
     */


    publicAPI.allocate = function (numLinks) {
      var ext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;
      model.array = Array(numLinks).fill().map(function () {
        return {
          ncells: 0,
          cells: null
        };
      });
      model.extend = ext;
      model.maxId = -1;
    };

    publicAPI.initialize = function () {
      model.array = null;
    };
    /**
     * Get a link structure given a point id.
     */


    publicAPI.getLink = function (ptId) {
      return model.array[ptId];
    };
    /**
     * Get the number of cells using the point specified by ptId.
     */


    publicAPI.getNcells = function (ptId) {
      return model.array[ptId].ncells;
    };
    /**
     * Return a list of cell ids using the point.
     */


    publicAPI.getCells = function (ptId) {
      return model.array[ptId].cells;
    };
    /**
     * Insert a new point into the cell-links data structure. The size parameter
     * is the initial size of the list.
     */


    publicAPI.insertNextPoint = function (numLinks) {
      model.array.push({
        ncells: numLinks,
        cells: Array(numLinks)
      });
      ++model.maxId;
    };
    /**
     * Insert a cell id into the list of cells (at the end) using the cell id
     * provided. (Make sure to extend the link list (if necessary) using the
     * method resizeCellList().)
     */


    publicAPI.insertNextCellReference = function (ptId, cellId) {
      model.array[ptId].cells[model.array[ptId].ncells++] = cellId;
    };
    /**
     * Delete point (and storage) by destroying links to using cells.
     */


    publicAPI.deletePoint = function (ptId) {
      model.array[ptId].ncells = 0;
      model.array[ptId].cells = null;
    };
    /**
     * Delete the reference to the cell (cellId) from the point (ptId). This
     * removes the reference to the cellId from the cell list, but does not
     * resize the list (recover memory with resizeCellList(), if necessary).
     */


    publicAPI.removeCellReference = function (cellId, ptId) {
      model.array[ptId].cells = model.array[ptId].cells.filter(function (cell) {
        return cell !== cellId;
      });
      model.array[ptId].ncells = model.array[ptId].cells.length;
    };
    /**
     * Add the reference to the cell (cellId) from the point (ptId). This
     * adds a reference to the cellId from the cell list, but does not resize
     * the list (extend memory with resizeCellList(), if necessary).
     */


    publicAPI.addCellReference = function (cellId, ptId) {
      model.array[ptId].cells[model.array[ptId].ncells++] = cellId;
    };
    /**
     * Change the length of a point's link list (i.e., list of cells using a
     * point) by the size specified.
     */


    publicAPI.resizeCellList = function (ptId, size) {
      model.array[ptId].cells.length = size;
    };
    /**
     * Reclaim any unused memory.
     */


    publicAPI.squeeze = function () {
      resize(model, model.maxId + 1);
    };
    /**
     * Reset to a state of no entries without freeing the memory.
     */


    publicAPI.reset = function () {
      model.maxId = -1;
    };
    /**
     * Standard DeepCopy method.  Since this object contains no reference
     * to other objects, there is no ShallowCopy.
     */


    publicAPI.deepCopy = function (src) {
      model.array = _toConsumableArray(src.array);
      model.extend = src.extend;
      model.maxId = src.maxId;
    };
    /**
     * Increment the count of the number of cells using the point.
     */


    publicAPI.incrementLinkCount = function (ptId) {
      ++model.array[ptId].ncells;
    };

    publicAPI.allocateLinks = function (n) {
      for (var i = 0; i < n; ++i) {
        model.array[i].cells = new Array(model.array[i].ncells);
      }
    };
    /**
     * Insert a cell id into the list of cells using the point.
     */


    publicAPI.insertCellReference = function (ptId, pos, cellId) {
      model.array[ptId].cells[pos] = cellId;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$c = {
    array: null,
    // pointer to data
    maxId: 0,
    // maximum index inserted thus far
    extend: 0 // grow array by this point

  }; // ----------------------------------------------------------------------------

  function extend$d(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$c, initialValues);
    macro.obj(publicAPI, model);
    vtkCellLinks(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$b = macro.newInstance(extend$d, 'vtkCellLinks'); // ----------------------------------------------------------------------------

  var vtkCellLinks$1 = {
    newInstance: newInstance$b,
    extend: extend$d
  };

  var CellType = {
    // Linear cells
    VTK_EMPTY_CELL: 0,
    VTK_VERTEX: 1,
    VTK_POLY_VERTEX: 2,
    VTK_LINE: 3,
    VTK_POLY_LINE: 4,
    VTK_TRIANGLE: 5,
    VTK_TRIANGLE_STRIP: 6,
    VTK_POLYGON: 7,
    VTK_PIXEL: 8,
    VTK_QUAD: 9,
    VTK_TETRA: 10,
    VTK_VOXEL: 11,
    VTK_HEXAHEDRON: 12,
    VTK_WEDGE: 13,
    VTK_PYRAMID: 14,
    VTK_PENTAGONAL_PRISM: 15,
    VTK_HEXAGONAL_PRISM: 16,
    // Quadratic, isoparametric cells
    VTK_QUADRATIC_EDGE: 21,
    VTK_QUADRATIC_TRIANGLE: 22,
    VTK_QUADRATIC_QUAD: 23,
    VTK_QUADRATIC_POLYGON: 36,
    VTK_QUADRATIC_TETRA: 24,
    VTK_QUADRATIC_HEXAHEDRON: 25,
    VTK_QUADRATIC_WEDGE: 26,
    VTK_QUADRATIC_PYRAMID: 27,
    VTK_BIQUADRATIC_QUAD: 28,
    VTK_TRIQUADRATIC_HEXAHEDRON: 29,
    VTK_QUADRATIC_LINEAR_QUAD: 30,
    VTK_QUADRATIC_LINEAR_WEDGE: 31,
    VTK_BIQUADRATIC_QUADRATIC_WEDGE: 32,
    VTK_BIQUADRATIC_QUADRATIC_HEXAHEDRON: 33,
    VTK_BIQUADRATIC_TRIANGLE: 34,
    // Cubic, isoparametric cell
    VTK_CUBIC_LINE: 35,
    // Special class of cells formed by convex group of points
    VTK_CONVEX_POINT_SET: 41,
    // Polyhedron cell (consisting of polygonal faces)
    VTK_POLYHEDRON: 42,
    // Higher order cells in parametric form
    VTK_PARAMETRIC_CURVE: 51,
    VTK_PARAMETRIC_SURFACE: 52,
    VTK_PARAMETRIC_TRI_SURFACE: 53,
    VTK_PARAMETRIC_QUAD_SURFACE: 54,
    VTK_PARAMETRIC_TETRA_REGION: 55,
    VTK_PARAMETRIC_HEX_REGION: 56,
    // Higher order cells
    VTK_HIGHER_ORDER_EDGE: 60,
    VTK_HIGHER_ORDER_TRIANGLE: 61,
    VTK_HIGHER_ORDER_QUAD: 62,
    VTK_HIGHER_ORDER_POLYGON: 63,
    VTK_HIGHER_ORDER_TETRAHEDRON: 64,
    VTK_HIGHER_ORDER_WEDGE: 65,
    VTK_HIGHER_ORDER_PYRAMID: 66,
    VTK_HIGHER_ORDER_HEXAHEDRON: 67,
    // Arbitrary order Lagrange elements (formulated separated from generic higher order cells)
    VTK_LAGRANGE_CURVE: 68,
    VTK_LAGRANGE_TRIANGLE: 69,
    VTK_LAGRANGE_QUADRILATERAL: 70,
    VTK_LAGRANGE_TETRAHEDRON: 71,
    VTK_LAGRANGE_HEXAHEDRON: 72,
    VTK_LAGRANGE_WEDGE: 73,
    VTK_LAGRANGE_PYRAMID: 74,
    VTK_NUMBER_OF_CELL_TYPES: 75
  }; // This list should contain the cell class names in
  // the same order as in CellType.

  var CellTypesStrings = ['vtkEmptyCell', 'vtkVertex', 'vtkPolyVertex', 'vtkLine', 'vtkPolyLine', 'vtkTriangle', 'vtkTriangleStrip', 'vtkPolygon', 'vtkPixel', 'vtkQuad', 'vtkTetra', 'vtkVoxel', 'vtkHexahedron', 'vtkWedge', 'vtkPyramid', 'vtkPentagonalPrism', 'vtkHexagonalPrism', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'vtkQuadraticEdge', 'vtkQuadraticTriangle', 'vtkQuadraticQuad', 'vtkQuadraticTetra', 'vtkQuadraticHexahedron', 'vtkQuadraticWedge', 'vtkQuadraticPyramid', 'vtkBiQuadraticQuad', 'vtkTriQuadraticHexahedron', 'vtkQuadraticLinearQuad', 'vtkQuadraticLinearWedge', 'vtkBiQuadraticQuadraticWedge', 'vtkBiQuadraticQuadraticHexahedron', 'vtkBiQuadraticTriangle', 'vtkCubicLine', 'vtkQuadraticPolygon', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'vtkConvexPointSet', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'vtkParametricCurve', 'vtkParametricSurface', 'vtkParametricTriSurface', 'vtkParametricQuadSurface', 'vtkParametricTetraRegion', 'vtkParametricHexRegion', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'vtkHigherOrderEdge', 'vtkHigherOrderTriangle', 'vtkHigherOrderQuad', 'vtkHigherOrderPolygon', 'vtkHigherOrderTetrahedron', 'vtkHigherOrderWedge', 'vtkHigherOrderPyramid', 'vtkHigherOrderHexahedron'];

  function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  // Global methods
  // ----------------------------------------------------------------------------

  /**
   * Given an int (as defined in vtkCellType.h) identifier for a class
   * return it's classname.
   */

  function getClassNameFromTypeId(typeId) {
    return typeId < CellTypesStrings.length ? CellTypesStrings[typeId] : 'UnknownClass';
  }
  /**
   * Given a data object classname, return it's int identified (as
   * defined in vtkCellType.h)
   */


  function getTypeIdFromClassName(cellTypeString) {
    return CellTypesStrings.findIndex(cellTypeString);
  }
  /**
   * This convenience method is a fast check to determine if a cell type
   * represents a linear or nonlinear cell.  This is generally much more
   * efficient than getting the appropriate vtkCell and checking its IsLinear
   * method.
   */


  function isLinear(type) {
    return type < CellType.VTK_QUADRATIC_EDGE || type === CellType.VTK_CONVEX_POINT_SET || type === CellType.VTK_POLYHEDRON;
  } // ----------------------------------------------------------------------------
  // Static API
  // ----------------------------------------------------------------------------


  var STATIC$2 = {
    getClassNameFromTypeId: getClassNameFromTypeId,
    getTypeIdFromClassName: getTypeIdFromClassName,
    isLinear: isLinear
  }; // ----------------------------------------------------------------------------
  // vtkCellTypes methods
  // ----------------------------------------------------------------------------

  function vtkCellTypes(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkCellTypes');
    /**
     * Allocate memory for this array. Delete old storage only if necessary.
     */

    publicAPI.allocate = function () {
      var sz = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 512;
      var ext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;
      model.size = sz > 0 ? sz : 1;
      model.extend = ext > 0 ? ext : 1;
      model.maxId = -1;
      model.typeArray = new Uint8Array(sz);
      model.locationArray = new Uint32Array(sz);
    };
    /**
     * Add a cell at specified id.
     */


    publicAPI.insertCell = function (cellId, type, loc) {
      model.typeArray[cellId] = type;
      model.locationArray[cellId] = loc;

      if (cellId > model.maxId) {
        model.maxId = cellId;
      }
    };
    /**
     * Add a cell to the object in the next available slot.
     */


    publicAPI.insertNextCell = function (type, loc) {
      publicAPI.insertCell(++model.maxId, type, loc);
      return model.maxId;
    };
    /**
     * Specify a group of cell types. This version is provided to maintain
     * backwards compatibility and does a copy of the cellLocations
     */


    publicAPI.setCellTypes = function (ncells, cellTypes, cellLocations) {
      model.size = ncells;
      model.typeArray = cellTypes;
      model.locationArray = cellLocations;
      model.maxId = ncells - 1;
    };
    /**
     * Return the location of the cell in the associated vtkCellArray.
     */


    publicAPI.getCellLocation = function (cellId) {
      return model.locationArray[cellId];
    };
    /**
     * Delete cell by setting to nullptr cell type.
     */


    publicAPI.deleteCell = function (cellId) {
      model.typeArray[cellId] = CellType.VTK_EMPTY_CELL;
    };
    /**
     * Return the number of types in the list.
     */


    publicAPI.getNumberOfTypes = function () {
      return model.maxId + 1;
    };
    /**
     * Return true if type specified is contained in list; false otherwise.
     */


    publicAPI.isType = function (type) {
      var numTypes = publicAPI.getNumberOfTypes();

      for (var i = 0; i < numTypes; ++i) {
        if (type === publicAPI.getCellType(i)) {
          return true;
        }
      }

      return false;
    };
    /**
     * Add the type specified to the end of the list. Range checking is performed.
     */


    publicAPI.insertNextType = function (type) {
      return publicAPI.insertNextCell(type, -1);
    };
    /**
     * Return the type of cell.
     */


    publicAPI.getCellType = function (cellId) {
      return model.typeArray[cellId];
    };
    /**
     * Reclaim any extra memory.
     */
    // TODO: publicAPI.squeeze = () =>  {};

    /**
     * Initialize object without releasing memory.
     */


    publicAPI.reset = function () {
      model.maxId = -1;
    };
    /**
     * Standard DeepCopy method.  Since this object contains no reference
     * to other objects, there is no ShallowCopy.
     */


    publicAPI.deepCopy = function (src) {
      publicAPI.allocate(src.getSize(), src.getExtend());
      model.typeArray.set(src.getTypeArray());
      model.locationArray.set(src.getLocationArray());
      model.maxId = src.getMaxId();
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$b = {
    // typeArray: null, // pointer to types array
    // locationArray: null;   // pointer to array of offsets
    size: 0,
    // allocated size of data
    maxId: -1,
    // maximum index inserted thus far
    extend: 1000 // grow array by this point

  }; // ----------------------------------------------------------------------------

  function extend$c(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$b, initialValues);
    macro.obj(publicAPI, model);
    macro.get(publicAPI, model, ['size', 'maxId', 'extend']);
    macro.getArray(publicAPI, model, ['typeArray', 'locationArray']);
    vtkCellTypes(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$a = macro.newInstance(extend$c, 'vtkCellTypes'); // ----------------------------------------------------------------------------

  var vtkCellTypes$1 = _objectSpread$3({
    newInstance: newInstance$a,
    extend: extend$c
  }, STATIC$2);

  var IntersectionState$1 = {
    NO_INTERSECTION: 0,
    YES_INTERSECTION: 1,
    ON_LINE: 2
  };
  var Constants = {
    IntersectionState: IntersectionState$1
  };

  function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  var IntersectionState = Constants.IntersectionState; // ----------------------------------------------------------------------------
  // Global methods
  // ----------------------------------------------------------------------------

  function distanceToLine(x, p1, p2) {
    var closestPoint = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    var outObj = {
      t: Number.MIN_VALUE,
      distance: 0
    };
    var p21 = [];
    var closest; // Determine appropriate vector

    p21[0] = p2[0] - p1[0];
    p21[1] = p2[1] - p1[1];
    p21[2] = p2[2] - p1[2]; // Get parametric location

    var num = p21[0] * (x[0] - p1[0]) + p21[1] * (x[1] - p1[1]) + p21[2] * (x[2] - p1[2]);
    var denom = dot(p21, p21); // trying to avoid an expensive fabs

    var tolerance = 1e-5 * num;

    if (denom !== 0.0) {
      outObj.t = num / denom;
    }

    if (tolerance < 0.0) {
      tolerance = -tolerance;
    }

    if (-tolerance < denom && denom < tolerance) {
      closest = p1;
    } else if (denom <= 0.0 || outObj.t < 0.0) {
      // If parametric coordinate is within 0<=p<=1, then the point is closest to
      // the line.  Otherwise, it's closest to a point at the end of the line.
      closest = p1;
    } else if (outObj.t > 1.0) {
      closest = p2;
    } else {
      closest = p21;
      p21[0] = p1[0] + outObj.t * p21[0];
      p21[1] = p1[1] + outObj.t * p21[1];
      p21[2] = p1[2] + outObj.t * p21[2];
    }

    if (closestPoint) {
      closestPoint[0] = closest[0];
      closestPoint[1] = closest[1];
      closestPoint[2] = closest[2];
    }

    outObj.distance = distance2BetweenPoints(closest, x);
    return outObj;
  }

  function intersection(a1, a2, b1, b2, u, v) {
    var a21 = [];
    var b21 = [];
    var b1a1 = [];
    u[0] = 0.0;
    v[0] = 0.0; // Determine line vectors.

    a21[0] = a2[0] - a1[0];
    a21[1] = a2[1] - a1[1];
    a21[2] = a2[2] - a1[2];
    b21[0] = b2[0] - b1[0];
    b21[1] = b2[1] - b1[1];
    b21[2] = b2[2] - b1[2];
    b1a1[0] = b1[0] - a1[0];
    b1a1[1] = b1[1] - a1[1];
    b1a1[2] = b1[2] - a1[2]; // Compute the system (least squares) matrix.

    var A = [];
    A[0] = [dot(a21, a21), -dot(a21, b21)];
    A[1] = [A[0][1], dot(b21, b21)]; // Compute the least squares system constant term.

    var c = [];
    c[0] = dot(a21, b1a1);
    c[1] = -dot(b21, b1a1); // Solve the system of equations

    if (solveLinearSystem(A, c, 2) === 0) {
      // The lines are colinear. Therefore, one of the four endpoints is the
      // point of closest approach
      var minDist = Number.MAX_VALUE;
      var p = [a1, a2, b1, b2];
      var l1 = [b1, b1, a1, a1];
      var l2 = [b2, b2, a2, a2];
      var uv1 = [v[0], v[0], u[0], u[0]];
      var uv2 = [u[0], u[0], v[0], v[0]];
      var obj;

      for (var i = 0; i < 4; i++) {
        obj = distanceToLine(p[i], l1[i], l2[i]);

        if (obj.distance < minDist) {
          minDist = obj.distance;
          uv1[i] = obj.t;
          uv2[i] = i % 2;
        }
      }

      return IntersectionState.ON_LINE;
    }

    u[0] = c[0];
    v[0] = c[1]; // Check parametric coordinates for intersection.

    if (u[0] >= 0.0 && u[0] <= 1.0 && v[0] >= 0.0 && v[0] <= 1.0) {
      return IntersectionState.YES_INTERSECTION;
    }

    return IntersectionState.NO_INTERSECTION;
  } // ----------------------------------------------------------------------------
  // Static API
  // ----------------------------------------------------------------------------


  var STATIC$1 = {
    distanceToLine: distanceToLine,
    intersection: intersection
  }; // ----------------------------------------------------------------------------
  // vtkLine methods
  // ----------------------------------------------------------------------------

  function vtkLine(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkLine');

    function isBetweenPoints(t) {
      return t >= 0.0 && t <= 1.0;
    }

    publicAPI.getCellDimension = function () {
      return 1;
    };

    publicAPI.intersectWithLine = function (p1, p2, tol, x, pcoords) {
      var outObj = {
        intersect: 0,
        t: Number.MAX_VALUE,
        subId: 0,
        betweenPoints: null
      };
      pcoords[1] = 0.0;
      pcoords[2] = 0.0;
      var projXYZ = [];
      var a1 = [];
      var a2 = [];
      model.points.getPoint(0, a1);
      model.points.getPoint(1, a2);
      var u = [];
      var v = [];
      var intersect = intersection(p1, p2, a1, a2, u, v);
      outObj.t = u[0];
      outObj.betweenPoints = isBetweenPoints(outObj.t);
      pcoords[0] = v[0];

      if (intersect === IntersectionState.YES_INTERSECTION) {
        // make sure we are within tolerance
        for (var i = 0; i < 3; i++) {
          x[i] = a1[i] + pcoords[0] * (a2[i] - a1[i]);
          projXYZ[i] = p1[i] + outObj.t * (p2[i] - p1[i]);
        }

        if (distance2BetweenPoints(x, projXYZ) <= tol * tol) {
          outObj.intersect = 1;
          return outObj;
        }
      } else {
        var outDistance; // check to see if it lies within tolerance
        // one of the parametric coords must be outside 0-1

        if (outObj.t < 0.0) {
          outDistance = distanceToLine(p1, a1, a2, x);

          if (outDistance.distance <= tol * tol) {
            outObj.t = 0.0;
            outObj.intersect = 1;
            outObj.betweenPoints = true; // Intersection is near p1

            return outObj;
          }

          return outObj;
        }

        if (outObj.t > 1.0) {
          outDistance = distanceToLine(p2, a1, a2, x);

          if (outDistance.distance <= tol * tol) {
            outObj.t = 1.0;
            outObj.intersect = 1;
            outObj.betweenPoints = true; // Intersection is near p2

            return outObj;
          }

          return outObj;
        }

        if (pcoords[0] < 0.0) {
          pcoords[0] = 0.0;
          outDistance = distanceToLine(a1, p1, p2, x);
          outObj.t = outDistance.t;

          if (outDistance.distance <= tol * tol) {
            outObj.intersect = 1;
            return outObj;
          }

          return outObj;
        }

        if (pcoords[0] > 1.0) {
          pcoords[0] = 1.0;
          outDistance = distanceToLine(a2, p1, p2, x);
          outObj.t = outDistance.t;

          if (outDistance.distance <= tol * tol) {
            outObj.intersect = 1;
            return outObj;
          }

          return outObj;
        }
      }

      return outObj;
    };

    publicAPI.evaluatePosition = function (x, closestPoint, subId, pcoords, dist2, weights) {}; // virtual

  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$a = {}; // ----------------------------------------------------------------------------

  function extend$b(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$a, initialValues);
    vtkCell$1.extend(publicAPI, model, initialValues);
    vtkLine(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$9 = macro.newInstance(extend$b, 'vtkLine'); // ----------------------------------------------------------------------------

  var vtkLine$1 = _objectSpread$2(_objectSpread$2({
    newInstance: newInstance$9,
    extend: extend$b
  }, STATIC$1), Constants);

  // Global methods
  // ----------------------------------------------------------------------------
  // ----------------------------------------------------------------------------
  // vtkPointSet methods
  // ----------------------------------------------------------------------------

  function vtkPointSet(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkPointSet'); // Create empty points

    if (!model.points) {
      model.points = vtkPoints$1.newInstance();
    } else {
      model.points = vtk(model.points);
    }

    publicAPI.getNumberOfPoints = function () {
      return model.points.getNumberOfPoints();
    };

    publicAPI.getBounds = function () {
      return model.points.getBounds();
    };

    publicAPI.computeBounds = function () {
      publicAPI.getBounds();
    };

    var superShallowCopy = publicAPI.shallowCopy;

    publicAPI.shallowCopy = function (other) {
      var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      superShallowCopy(other, debug);
      model.points = vtkPoints$1.newInstance();
      model.points.shallowCopy(other.getPoints());
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$9 = {// points: null,
  }; // ----------------------------------------------------------------------------

  function extend$a(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$9, initialValues); // Inheritance

    vtkDataSet$1.extend(publicAPI, model, initialValues);
    macro.setGet(publicAPI, model, ['points']); // Object specific methods

    vtkPointSet(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$8 = macro.newInstance(extend$a, 'vtkPointSet'); // ----------------------------------------------------------------------------

  var vtkPointSet$1 = {
    newInstance: newInstance$8,
    extend: extend$a
  };

  function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  // Global methods
  // ----------------------------------------------------------------------------

  function computeNormalDirection(v1, v2, v3, n) {
    // order is important!!! maintain consistency with triangle vertex order
    var ax = v3[0] - v2[0];
    var ay = v3[1] - v2[1];
    var az = v3[2] - v2[2];
    var bx = v1[0] - v2[0];
    var by = v1[1] - v2[1];
    var bz = v1[2] - v2[2];
    n[0] = ay * bz - az * by;
    n[1] = az * bx - ax * bz;
    n[2] = ax * by - ay * bx;
  }

  function computeNormal(v1, v2, v3, n) {
    computeNormalDirection(v1, v2, v3, n);
    var length = Math.sqrt(n[0] * n[0] + n[1] * n[1] + n[2] * n[2]);

    if (length !== 0.0) {
      n[0] /= length;
      n[1] /= length;
      n[2] /= length;
    }
  } // ----------------------------------------------------------------------------
  // Static API
  // ----------------------------------------------------------------------------


  var STATIC = {
    computeNormalDirection: computeNormalDirection,
    computeNormal: computeNormal
  }; // ----------------------------------------------------------------------------
  // vtkTriangle methods
  // ----------------------------------------------------------------------------

  function vtkTriangle(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkTriangle');

    publicAPI.getCellDimension = function () {
      return 2;
    };

    publicAPI.intersectWithLine = function (p1, p2, tol, x, pcoords) {
      var outObj = {
        subId: 0,
        t: Number.MAX_VALUE,
        intersect: 0,
        betweenPoints: false
      };
      pcoords[2] = 0.0;
      var closestPoint = [];
      var tol2 = tol * tol; // Get normal for triangle

      var pt1 = [];
      var pt2 = [];
      var pt3 = [];
      model.points.getPoint(0, pt1);
      model.points.getPoint(1, pt2);
      model.points.getPoint(2, pt3);
      var n = [];
      var weights = [];
      computeNormal(pt1, pt2, pt3, n);

      if (n[0] !== 0 || n[1] !== 0 || n[2] !== 0) {
        // Intersect plane of triangle with line
        var plane = vtkPlane$1.intersectWithLine(p1, p2, pt1, n);
        outObj.betweenPoints = plane.betweenPoints;
        outObj.t = plane.t;
        x[0] = plane.x[0];
        x[1] = plane.x[1];
        x[2] = plane.x[2];

        if (!plane.intersection) {
          pcoords[0] = 0.0;
          pcoords[1] = 0.0;
          outObj.intersect = 0;
          return outObj;
        } // Evaluate position


        var inside = publicAPI.evaluatePosition(x, closestPoint, pcoords, weights);

        if (inside.evaluation >= 0) {
          if (inside.dist2 <= tol2) {
            outObj.intersect = 1;
            return outObj;
          }

          outObj.intersect = inside.evaluation;
          return outObj;
        }
      } // Normals are null, so the triangle is degenerated and
      // we still need to check intersection between line and
      // the longest edge.


      var dist2Pt1Pt2 = distance2BetweenPoints(pt1, pt2);
      var dist2Pt2Pt3 = distance2BetweenPoints(pt2, pt3);
      var dist2Pt3Pt1 = distance2BetweenPoints(pt3, pt1);

      if (!model.line) {
        model.line = vtkLine$1.newInstance();
      }

      if (dist2Pt1Pt2 > dist2Pt2Pt3 && dist2Pt1Pt2 > dist2Pt3Pt1) {
        model.line.getPoints().setPoint(0, pt1);
        model.line.getPoints().setPoint(1, pt2);
      } else if (dist2Pt2Pt3 > dist2Pt3Pt1 && dist2Pt2Pt3 > dist2Pt1Pt2) {
        model.line.getPoints().setPoint(0, pt2);
        model.line.getPoints().setPoint(1, pt3);
      } else {
        model.line.getPoints().setPoint(0, pt3);
        model.line.getPoints().setPoint(1, pt1);
      }

      var intersectLine = model.line.intersectWithLine(p1, p2, tol, x, pcoords);
      outObj.betweenPoints = intersectLine.betweenPoints;
      outObj.t = intersectLine.t;

      if (intersectLine.intersect) {
        var pt3Pt1 = [];
        var pt3Pt2 = [];
        var pt3X = []; // Compute r and s manually, using dot and norm.

        for (var i = 0; i < 3; i++) {
          pt3Pt1[i] = pt1[i] - pt3[i];
          pt3Pt2[i] = pt2[i] - pt3[i];
          pt3X[i] = x[i] - pt3[i];
        }

        pcoords[0] = dot(pt3X, pt3Pt1) / dist2Pt3Pt1;
        pcoords[1] = dot(pt3X, pt3Pt2) / dist2Pt2Pt3;
        outObj.intersect = 1;
        return outObj;
      }

      pcoords[0] = 0.0;
      pcoords[1] = 0.0;
      outObj.intersect = 0;
      return outObj;
    };

    publicAPI.evaluatePosition = function (x, closestPoint, pcoords, weights) {
      // will return obj
      var outObj = {
        subId: 0,
        dist2: 0,
        evaluation: -1
      };
      var i;
      var j;
      var pt1 = [];
      var pt2 = [];
      var pt3 = [];
      var n = [];
      var fabsn;
      var rhs = [];
      var c1 = [];
      var c2 = [];
      var det = 0;
      var idx = 0;
      var indices = [];
      var dist2Point;
      var dist2Line1;
      var dist2Line2;
      var closest = [];
      var closestPoint1 = [];
      var closestPoint2 = [];
      var cp = [];
      outObj.subId = 0;
      pcoords[2] = 0.0; // Get normal for triangle, only the normal direction is needed, i.e. the
      // normal need not be normalized (unit length)
      //

      model.points.getPoint(1, pt1);
      model.points.getPoint(2, pt2);
      model.points.getPoint(0, pt3);
      computeNormalDirection(pt1, pt2, pt3, n); // Project point to plane

      vtkPlane$1.generalizedProjectPoint(x, pt1, n, cp); // Construct matrices.  Since we have over determined system, need to find
      // which 2 out of 3 equations to use to develop equations. (Any 2 should
      // work since we've projected point to plane.)

      var maxComponent = 0.0;

      for (i = 0; i < 3; i++) {
        // trying to avoid an expensive call to fabs()
        if (n[i] < 0) {
          fabsn = -n[i];
        } else {
          fabsn = n[i];
        }

        if (fabsn > maxComponent) {
          maxComponent = fabsn;
          idx = i;
        }
      }

      for (j = 0, i = 0; i < 3; i++) {
        if (i !== idx) {
          indices[j++] = i;
        }
      }

      for (i = 0; i < 2; i++) {
        rhs[i] = cp[indices[i]] - pt3[indices[i]];
        c1[i] = pt1[indices[i]] - pt3[indices[i]];
        c2[i] = pt2[indices[i]] - pt3[indices[i]];
      }

      det = determinant2x2(c1, c2);

      if (det === 0.0) {
        pcoords[0] = 0.0;
        pcoords[1] = 0.0;
        outObj.evaluation = -1;
        return outObj;
      }

      pcoords[0] = determinant2x2(rhs, c2) / det;
      pcoords[1] = determinant2x2(c1, rhs) / det; // Okay, now find closest point to element

      weights[0] = 1 - (pcoords[0] + pcoords[1]);
      weights[1] = pcoords[0];
      weights[2] = pcoords[1];

      if (weights[0] >= 0.0 && weights[0] <= 1.0 && weights[1] >= 0.0 && weights[1] <= 1.0 && weights[2] >= 0.0 && weights[2] <= 1.0) {
        // projection distance
        if (closestPoint) {
          outObj.dist2 = distance2BetweenPoints(cp, x);
          closestPoint[0] = cp[0];
          closestPoint[1] = cp[1];
          closestPoint[2] = cp[2];
        }

        outObj.evaluation = 1;
      } else {
        var t;

        if (closestPoint) {
          if (weights[1] < 0.0 && weights[2] < 0.0) {
            dist2Point = distance2BetweenPoints(x, pt3);
            dist2Line1 = vtkLine$1.distanceToLine(x, pt1, pt3, t, closestPoint1);
            dist2Line2 = vtkLine$1.distanceToLine(x, pt3, pt2, t, closestPoint2);

            if (dist2Point < dist2Line1) {
              outObj.dist2 = dist2Point;
              closest = pt3;
            } else {
              outObj.dist2 = dist2Line1;
              closest = closestPoint1;
            }

            if (dist2Line2 < outObj.dist2) {
              outObj.dist2 = dist2Line2;
              closest = closestPoint2;
            }

            for (i = 0; i < 3; i++) {
              closestPoint[i] = closest[i];
            }
          } else if (weights[2] < 0.0 && weights[0] < 0.0) {
            dist2Point = distance2BetweenPoints(x, pt1);
            dist2Line1 = vtkLine$1.distanceToLine(x, pt1, pt3, t, closestPoint1);
            dist2Line2 = vtkLine$1.distanceToLine(x, pt1, pt2, t, closestPoint2);

            if (dist2Point < dist2Line1) {
              outObj.dist2 = dist2Point;
              closest = pt1;
            } else {
              outObj.dist2 = dist2Line1;
              closest = closestPoint1;
            }

            if (dist2Line2 < outObj.dist2) {
              outObj.dist2 = dist2Line2;
              closest = closestPoint2;
            }

            for (i = 0; i < 3; i++) {
              closestPoint[i] = closest[i];
            }
          } else if (weights[1] < 0.0 && weights[0] < 0.0) {
            dist2Point = distance2BetweenPoints(x, pt2);
            dist2Line1 = vtkLine$1.distanceToLine(x, pt2, pt3, t, closestPoint1);
            dist2Line2 = vtkLine$1.distanceToLine(x, pt1, pt2, t, closestPoint2);

            if (dist2Point < dist2Line1) {
              outObj.dist2 = dist2Point;
              closest = pt2;
            } else {
              outObj.dist2 = dist2Line1;
              closest = closestPoint1;
            }

            if (dist2Line2 < outObj.dist2) {
              outObj.dist2 = dist2Line2;
              closest = closestPoint2;
            }

            for (i = 0; i < 3; i++) {
              closestPoint[i] = closest[i];
            }
          } else if (weights[0] < 0.0) {
            var lineDistance = vtkLine$1.distanceToLine(x, pt1, pt2, closestPoint);
            outObj.dist2 = lineDistance.distance;
          } else if (weights[1] < 0.0) {
            var _lineDistance = vtkLine$1.distanceToLine(x, pt2, pt3, closestPoint);

            outObj.dist2 = _lineDistance.distance;
          } else if (weights[2] < 0.0) {
            var _lineDistance2 = vtkLine$1.distanceToLine(x, pt1, pt3, closestPoint);

            outObj.dist2 = _lineDistance2.distance;
          }
        }

        outObj.evaluation = 0;
      }

      return outObj;
    };

    publicAPI.evaluateLocation = function (pcoords, x, weights) {
      var p0 = [];
      var p1 = [];
      var p2 = [];
      model.points.getPoint(0, p0);
      model.points.getPoint(1, p1);
      model.points.getPoint(2, p2);
      var u3 = 1.0 - pcoords[0] - pcoords[1];

      for (var i = 0; i < 3; i++) {
        x[i] = p0[i] * u3 + p1[i] * pcoords[0] + p2[i] * pcoords[1];
      }

      weights[0] = u3;
      weights[1] = pcoords[0];
      weights[2] = pcoords[1];
    };

    publicAPI.getParametricDistance = function (pcoords) {
      var pDist;
      var pDistMax = 0.0;
      var pc = [];
      pc[0] = pcoords[0];
      pc[1] = pcoords[1];
      pc[2] = 1.0 - pcoords[0] - pcoords[1];

      for (var i = 0; i < 3; i++) {
        if (pc[i] < 0.0) {
          pDist = -pc[i];
        } else if (pc[i] > 1.0) {
          pDist = pc[i] - 1.0;
        } else {
          // inside the cell in the parametric direction
          pDist = 0.0;
        }

        if (pDist > pDistMax) {
          pDistMax = pDist;
        }
      }

      return pDistMax;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$8 = {}; // ----------------------------------------------------------------------------

  function extend$9(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$8, initialValues);
    vtkCell$1.extend(publicAPI, model, initialValues);
    vtkTriangle(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$7 = macro.newInstance(extend$9, 'vtkTriangle'); // ----------------------------------------------------------------------------

  var vtkTriangle$1 = _objectSpread$1({
    newInstance: newInstance$7,
    extend: extend$9
  }, STATIC);

  var POLYDATA_FIELDS = ['verts', 'lines', 'polys', 'strips'];

  var _CELL_FACTORY;
  var vtkWarningMacro = macro.vtkWarningMacro;
  var CELL_FACTORY = (_CELL_FACTORY = {}, _defineProperty(_CELL_FACTORY, CellType.VTK_LINE, vtkLine$1), _defineProperty(_CELL_FACTORY, CellType.VTK_POLY_LINE, vtkLine$1), _defineProperty(_CELL_FACTORY, CellType.VTK_TRIANGLE, vtkTriangle$1), _CELL_FACTORY); // ----------------------------------------------------------------------------
  // vtkPolyData methods
  // ----------------------------------------------------------------------------

  function vtkPolyData(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkPolyData');

    function camelize(str) {
      return str.replace(/(?:^\w|[A-Z]|\b\w)/g, function (letter) {
        return letter.toUpperCase();
      }).replace(/\s+/g, '');
    } // build empty cell arrays and set methods


    POLYDATA_FIELDS.forEach(function (type) {
      publicAPI["getNumberOf".concat(camelize(type))] = function () {
        return model[type].getNumberOfCells();
      };

      if (!model[type]) {
        model[type] = vtkCellArray$1.newInstance();
      } else {
        model[type] = vtk(model[type]);
      }
    });

    publicAPI.getNumberOfCells = function () {
      return POLYDATA_FIELDS.reduce(function (num, cellType) {
        return num + model[cellType].getNumberOfCells();
      }, 0);
    };

    var superShallowCopy = publicAPI.shallowCopy;

    publicAPI.shallowCopy = function (other) {
      var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      superShallowCopy(other, debug);
      POLYDATA_FIELDS.forEach(function (type) {
        model[type] = vtkCellArray$1.newInstance();
        model[type].shallowCopy(other.getReferenceByName(type));
      });
    };

    publicAPI.buildCells = function () {
      // here are the number of cells we have
      var nVerts = publicAPI.getNumberOfVerts();
      var nLines = publicAPI.getNumberOfLines();
      var nPolys = publicAPI.getNumberOfPolys();
      var nStrips = publicAPI.getNumberOfStrips(); // pre-allocate the space we need

      var nCells = nVerts + nLines + nPolys + nStrips;
      var types = new Uint8Array(nCells);
      var pTypes = types;
      var locs = new Uint32Array(nCells);
      var pLocs = locs; // record locations and type of each cell.
      // verts

      if (nVerts) {
        var nextCellPts = 0;
        model.verts.getCellSizes().forEach(function (numCellPts, index) {
          pLocs[index] = nextCellPts;
          pTypes[index] = numCellPts > 1 ? CellType.VTK_POLY_VERTEX : CellType.VTK_VERTEX;
          nextCellPts += numCellPts + 1;
        });
        pLocs = pLocs.subarray(nVerts);
        pTypes = pTypes.subarray(nVerts);
      } // lines


      if (nLines) {
        var _nextCellPts = 0;
        model.lines.getCellSizes().forEach(function (numCellPts, index) {
          pLocs[index] = _nextCellPts;
          pTypes[index] = numCellPts > 2 ? CellType.VTK_POLY_LINE : CellType.VTK_LINE;

          if (numCellPts === 1) {
            vtkWarningMacro('Building VTK_LINE ', index, ' with only one point, but VTK_LINE needs at least two points. Check the input.');
          }

          _nextCellPts += numCellPts + 1;
        });
        pLocs = pLocs.subarray(nLines);
        pTypes = pTypes.subarray(nLines);
      } // polys


      if (nPolys) {
        var _nextCellPts2 = 0;
        model.polys.getCellSizes().forEach(function (numCellPts, index) {
          pLocs[index] = _nextCellPts2;

          switch (numCellPts) {
            case 3:
              pTypes[index] = CellType.VTK_TRIANGLE;
              break;

            case 4:
              pTypes[index] = CellType.VTK_QUAD;
              break;

            default:
              pTypes[index] = CellType.VTK_POLYGON;
              break;
          }

          if (numCellPts < 3) {
            vtkWarningMacro('Building VTK_TRIANGLE ', index, ' with less than three points, but VTK_TRIANGLE needs at least three points. Check the input.');
          }

          _nextCellPts2 += numCellPts + 1;
        });
        pLocs += pLocs.subarray(nPolys);
        pTypes += pTypes.subarray(nPolys);
      } // strips


      if (nStrips) {
        var _nextCellPts3 = 0;
        pTypes.fill(CellType.VTK_TRIANGLE_STRIP, 0, nStrips);
        model.strips.getCellSizes().forEach(function (numCellPts, index) {
          pLocs[index] = _nextCellPts3;
          _nextCellPts3 += numCellPts + 1;
        });
      } // set up the cell types data structure


      model.cells = vtkCellTypes$1.newInstance();
      model.cells.setCellTypes(nCells, types, locs);
    };
    /**
     * Create upward links from points to cells that use each point. Enables
     * topologically complex queries.
     */


    publicAPI.buildLinks = function () {
      var initialSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (model.cells === undefined) {
        publicAPI.buildCells();
      }

      model.links = vtkCellLinks$1.newInstance();

      if (initialSize > 0) {
        model.links.allocate(initialSize);
      } else {
        model.links.allocate(publicAPI.getPoints().getNumberOfPoints());
      }

      model.links.buildLinks(publicAPI);
    }; // Returns an object made of the cellType and a subarray `cellPointIds` of
    // the cell points.


    publicAPI.getCellPoints = function (cellId) {
      var cellType = model.cells.getCellType(cellId);
      var cells = null;

      switch (cellType) {
        case CellType.VTK_VERTEX:
        case CellType.VTK_POLY_VERTEX:
          cells = model.verts;
          break;

        case CellType.VTK_LINE:
        case CellType.VTK_POLY_LINE:
          cells = model.lines;
          break;

        case CellType.VTK_TRIANGLE:
        case CellType.VTK_QUAD:
        case CellType.VTK_POLYGON:
          cells = model.polys;
          break;

        case CellType.VTK_TRIANGLE_STRIP:
          cells = model.strips;
          break;

        default:
          cells = null;
          return {
            type: 0,
            cellPointIds: null
          };
      }

      var loc = model.cells.getCellLocation(cellId);
      var cellPointIds = cells.getCell(loc);
      return {
        cellType: cellType,
        cellPointIds: cellPointIds
      };
    };

    publicAPI.getPointCells = function (ptId) {
      return model.links.getCells(ptId);
    };

    publicAPI.getCellEdgeNeighbors = function (cellId, point1, point2) {
      var link1 = model.links.getLink(point1);
      var link2 = model.links.getLink(point2);
      return link1.cells.filter(function (cell) {
        return cell !== cellId && link2.cells.indexOf(cell) !== -1;
      });
    };
    /**
     * If you know the type of cell, you may provide it to improve performances.
     */


    publicAPI.getCell = function (cellId) {
      var cellHint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var cellInfo = publicAPI.getCellPoints(cellId);
      var cell = cellHint || CELL_FACTORY[cellInfo.cellType].newInstance();
      cell.initialize(publicAPI.getPoints(), cellInfo.cellPointIds);
      return cell;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$7 = {// verts: null,
    // lines: null,
    // polys: null,
    // strips: null,
    // cells: null,
    // links: null,
  }; // ----------------------------------------------------------------------------

  function extend$8(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$7, initialValues); // Inheritance

    vtkPointSet$1.extend(publicAPI, model, initialValues);
    macro.get(publicAPI, model, ['cells', 'links']);
    macro.setGet(publicAPI, model, ['verts', 'lines', 'polys', 'strips']); // Object specific methods

    vtkPolyData(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$6 = macro.newInstance(extend$8, 'vtkPolyData'); // ----------------------------------------------------------------------------

  var vtkPolyData$1 = {
    newInstance: newInstance$6,
    extend: extend$8
  };

  function notImplemented(method) {
    return function () {
      return macro.vtkErrorMacro("vtkProp::".concat(method, " - NOT IMPLEMENTED"));
    };
  } // ----------------------------------------------------------------------------
  // vtkProp methods
  // ----------------------------------------------------------------------------


  function vtkProp(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkProp');

    publicAPI.getMTime = function () {
      var m1 = model.mtime;

      for (var index = 0; index < model.textures.length; ++index) {
        var m2 = model.textures[index].getMTime();

        if (m2 > m1) {
          m1 = m2;
        }
      }

      return m1;
    };

    publicAPI.getNestedProps = function () {
      return null;
    };

    publicAPI.getActors = function () {
      return [];
    };

    publicAPI.getActors2D = function () {
      return [];
    };

    publicAPI.getVolumes = function () {
      return [];
    };

    publicAPI.pick = notImplemented('pick');
    publicAPI.hasKey = notImplemented('hasKey');

    publicAPI.getNestedVisibility = function () {
      return model.visibility && (!model.parentProp || model.parentProp.getNestedVisibility());
    };

    publicAPI.getNestedPickable = function () {
      return model.pickable && (!model.parentProp || model.parentProp.getNestedPickable());
    };

    publicAPI.getNestedDragable = function () {
      return model.dragable && (!model.parentProp || model.parentProp.getNestedDragable());
    };

    publicAPI.getRedrawMTime = function () {
      return model.mtime;
    };

    publicAPI.setEstimatedRenderTime = function (t) {
      model.estimatedRenderTime = t;
      model.savedEstimatedRenderTime = t;
    };

    publicAPI.restoreEstimatedRenderTime = function () {
      model.estimatedRenderTime = model.savedEstimatedRenderTime;
    };

    publicAPI.addEstimatedRenderTime = function (t) {
      model.estimatedRenderTime += t;
    };

    publicAPI.setAllocatedRenderTime = function (t) {
      model.allocatedRenderTime = t;
      model.savedEstimatedRenderTime = model.estimatedRenderTime;
      model.estimatedRenderTime = 0;
    };

    publicAPI.getSupportsSelection = function () {
      return false;
    };

    publicAPI.getTextures = function () {
      return model.textures;
    };

    publicAPI.hasTexture = function (texture) {
      return model.textures.indexOf(texture) !== -1;
    };

    publicAPI.addTexture = function (texture) {
      if (texture && !publicAPI.hasTexture(texture)) {
        model.textures = model.textures.concat(texture);
        publicAPI.modified();
      }
    };

    publicAPI.removeTexture = function (texture) {
      var newTextureList = model.textures.filter(function (item) {
        return item !== texture;
      });

      if (model.textures.length !== newTextureList.length) {
        model.textures = newTextureList;
        publicAPI.modified();
      }
    };

    publicAPI.removeAllTextures = function () {
      model.textures = [];
      publicAPI.modified();
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$6 = {
    visibility: true,
    pickable: true,
    dragable: true,
    useBounds: true,
    allocatedRenderTime: 10,
    estimatedRenderTime: 0,
    savedEstimatedRenderTime: 0,
    renderTimeMultiplier: 1,
    paths: null,
    textures: []
  }; // ----------------------------------------------------------------------------

  function extend$7(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$6, initialValues); // Build VTK API

    macro.obj(publicAPI, model);
    macro.get(publicAPI, model, ['estimatedRenderTime', 'allocatedRenderTime']);
    macro.setGet(publicAPI, model, ['visibility', 'pickable', 'dragable', 'useBounds', 'renderTimeMultiplier', 'parentProp']); // Object methods

    vtkProp(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$5 = macro.newInstance(extend$7, 'vtkProp'); // ----------------------------------------------------------------------------

  var vtkProp$1 = {
    newInstance: newInstance$5,
    extend: extend$7
  };

  // vtkProp3D methods
  // ----------------------------------------------------------------------------

  function vtkProp3D(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkProp3D');

    publicAPI.addPosition = function (deltaXYZ) {
      model.position = model.position.map(function (value, index) {
        return value + deltaXYZ[index];
      });
      publicAPI.modified();
    };

    publicAPI.getOrientationWXYZ = function () {
      var q = create();
      getRotation(q, model.rotation);
      var oaxis = new Float64Array(3);
      var w = getAxisAngle(oaxis, q);
      return [degreesFromRadians(w), oaxis[0], oaxis[1], oaxis[2]];
    };

    publicAPI.rotateX = function (val) {
      if (val === 0.0) {
        return;
      }

      rotateX(model.rotation, model.rotation, radiansFromDegrees(val));
      publicAPI.modified();
    };

    publicAPI.rotateY = function (val) {
      if (val === 0.0) {
        return;
      }

      rotateY(model.rotation, model.rotation, radiansFromDegrees(val));
      publicAPI.modified();
    };

    publicAPI.rotateZ = function (val) {
      if (val === 0.0) {
        return;
      }

      rotateZ(model.rotation, model.rotation, radiansFromDegrees(val));
      publicAPI.modified();
    };

    publicAPI.rotateWXYZ = function (degrees, x, y, z) {
      if (degrees === 0.0 || x === 0.0 && y === 0.0 && z === 0.0) {
        return;
      } // convert to radians


      var angle = radiansFromDegrees(degrees);
      var q = create();
      setAxisAngle(q, [x, y, z], angle);
      var quatMat = new Float64Array(16);
      fromQuat(quatMat, q);
      multiply$1(model.rotation, model.rotation, quatMat);
      publicAPI.modified();
    };

    publicAPI.setOrientation = function (x, y, z) {
      if (x === model.orientation[0] && y === model.orientation[1] && z === model.orientation[2]) {
        return false;
      }

      model.orientation = [x, y, z];
      identity(model.rotation);
      publicAPI.rotateZ(z);
      publicAPI.rotateX(x);
      publicAPI.rotateY(y);
      publicAPI.modified();
      return true;
    };

    publicAPI.setUserMatrix = function (matrix) {
      copy(model.userMatrix, matrix);
      publicAPI.modified();
    };

    publicAPI.getMatrix = function () {
      publicAPI.computeMatrix();
      return model.matrix;
    };

    publicAPI.computeMatrix = function () {
      // check whether or not need to rebuild the matrix
      if (publicAPI.getMTime() > model.matrixMTime.getMTime()) {
        identity(model.matrix);

        if (model.userMatrix) {
          multiply$1(model.matrix, model.matrix, model.userMatrix);
        }

        translate(model.matrix, model.matrix, model.origin);
        translate(model.matrix, model.matrix, model.position);
        multiply$1(model.matrix, model.matrix, model.rotation);
        scale$1(model.matrix, model.matrix, model.scale);
        translate(model.matrix, model.matrix, [-model.origin[0], -model.origin[1], -model.origin[2]]);
        transpose(model.matrix, model.matrix); // check for identity

        model.isIdentity = true;

        for (var i = 0; i < 4; ++i) {
          for (var j = 0; j < 4; ++j) {
            if ((i === j ? 1.0 : 0.0) !== model.matrix[i + j * 4]) {
              model.isIdentity = false;
            }
          }
        }

        model.matrixMTime.modified();
      }
    };

    publicAPI.getCenter = function () {
      return vtkBoundingBox.getCenter(model.bounds);
    };

    publicAPI.getLength = function () {
      return vtkBoundingBox.getLength(model.bounds);
    };

    publicAPI.getXRange = function () {
      return vtkBoundingBox.getXRange(model.bounds);
    };

    publicAPI.getYRange = function () {
      return vtkBoundingBox.getYRange(model.bounds);
    };

    publicAPI.getZRange = function () {
      return vtkBoundingBox.getZRange(model.bounds);
    };

    publicAPI.getUserMatrix = function () {
      return model.userMatrix;
    };

    function updateIdentityFlag() {
      publicAPI.computeMatrix();
    }

    publicAPI.onModified(updateIdentityFlag);
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$5 = {
    origin: [0, 0, 0],
    position: [0, 0, 0],
    orientation: [0, 0, 0],
    rotation: null,
    scale: [1, 1, 1],
    bounds: [1, -1, 1, -1, 1, -1],
    userMatrix: null,
    userMatrixMTime: null,
    cachedProp3D: null,
    isIdentity: true,
    matrixMTime: null
  }; // ----------------------------------------------------------------------------

  function extend$6(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$5, initialValues); // Inheritance

    vtkProp$1.extend(publicAPI, model, initialValues);
    model.matrixMTime = {};
    macro.obj(model.matrixMTime); // Build VTK API

    macro.get(publicAPI, model, ['bounds', 'isIdentity']);
    macro.getArray(publicAPI, model, ['orientation']);
    macro.setGetArray(publicAPI, model, ['origin', 'position', 'scale'], 3); // Object internal instance

    model.matrix = identity(new Float64Array(16));
    model.rotation = identity(new Float64Array(16));
    model.userMatrix = identity(new Float64Array(16));
    model.transform = null; // FIXME
    // Object methods

    vtkProp3D(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$4 = macro.newInstance(extend$6, 'vtkProp3D'); // ----------------------------------------------------------------------------

  var vtkProp3D$1 = {
    newInstance: newInstance$4,
    extend: extend$6
  };

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  var vtkDebugMacro$1 = macro.vtkDebugMacro; // ----------------------------------------------------------------------------
  // vtkActor methods
  // ----------------------------------------------------------------------------

  function vtkActor(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkActor'); // Capture 'parentClass' api for internal use

    var superClass = _objectSpread({}, publicAPI);

    publicAPI.getActors = function () {
      return publicAPI;
    };

    publicAPI.getIsOpaque = function () {
      if (model.forceOpaque) {
        return true;
      }

      if (model.forceTranslucent) {
        return false;
      } // make sure we have a property


      if (!model.property) {
        // force creation of a property
        publicAPI.getProperty();
      }

      var isOpaque = model.property.getOpacity() >= 1.0; // are we using an opaque texture, if any?

      isOpaque = isOpaque && (!model.texture || !model.texture.isTranslucent()); // are we using an opaque scalar array, if any?

      isOpaque = isOpaque && (!model.mapper || model.mapper.getIsOpaque());
      return isOpaque;
    };

    publicAPI.hasTranslucentPolygonalGeometry = function () {
      if (model.mapper === null) {
        return false;
      } // make sure we have a property


      if (model.property === null) {
        // force creation of a property
        publicAPI.setProperty(publicAPI.makeProperty());
      } // is this actor opaque ?


      return !publicAPI.getIsOpaque();
    };

    publicAPI.makeProperty = vtkProperty$1.newInstance;

    publicAPI.getProperty = function () {
      if (model.property === null) {
        model.property = publicAPI.makeProperty();
      }

      return model.property;
    };

    publicAPI.getBounds = function () {
      if (model.mapper === null) {
        return model.bounds;
      } // Check for the special case when the mapper's bounds are unknown


      var bds = model.mapper.getBounds();

      if (!bds || bds.length !== 6) {
        return bds;
      } // Check for the special case when the actor is empty.


      if (bds[0] > bds[1]) {
        model.mapperBounds = bds.concat(); // copy the mapper's bounds

        model.bounds = [1, -1, 1, -1, 1, -1];
        model.boundsMTime.modified();
        return bds;
      } // Check if we have cached values for these bounds - we cache the
      // values returned by model.mapper.getBounds() and we store the time
      // of caching. If the values returned this time are different, or
      // the modified time of this class is newer than the cached time,
      // then we need to rebuild.


      if (!model.mapperBounds || bds[0] !== model.mapperBounds[0] || bds[1] !== model.mapperBounds[1] || bds[2] !== model.mapperBounds[2] || bds[3] !== model.mapperBounds[3] || bds[4] !== model.mapperBounds[4] || bds[5] !== model.mapperBounds[5] || publicAPI.getMTime() > model.boundsMTime.getMTime()) {
        vtkDebugMacro$1('Recomputing bounds...');
        model.mapperBounds = bds.concat(); // copy the mapper's bounds

        var bbox = [];
        vtkBoundingBox.getCorners(bds, bbox);
        publicAPI.computeMatrix();
        var tmp4 = new Float64Array(16);
        transpose(tmp4, model.matrix);
        bbox.forEach(function (pt) {
          return transformMat4$1(pt, pt, tmp4);
        });
        /* eslint-disable no-multi-assign */

        model.bounds[0] = model.bounds[2] = model.bounds[4] = Number.MAX_VALUE;
        model.bounds[1] = model.bounds[3] = model.bounds[5] = -Number.MAX_VALUE;
        /* eslint-enable no-multi-assign */

        model.bounds = model.bounds.map(function (d, i) {
          return i % 2 === 0 ? bbox.reduce(function (a, b) {
            return a > b[i / 2] ? b[i / 2] : a;
          }, d) : bbox.reduce(function (a, b) {
            return a < b[(i - 1) / 2] ? b[(i - 1) / 2] : a;
          }, d);
        });
        model.boundsMTime.modified();
      }

      return model.bounds;
    };

    publicAPI.getMTime = function () {
      var mt = superClass.getMTime();

      if (model.property !== null) {
        var time = model.property.getMTime();
        mt = time > mt ? time : mt;
      }

      if (model.backfaceProperty !== null) {
        var _time = model.backfaceProperty.getMTime();

        mt = _time > mt ? _time : mt;
      }

      return mt;
    };

    publicAPI.getRedrawMTime = function () {
      var mt = model.mtime;

      if (model.mapper !== null) {
        var time = model.mapper.getMTime();
        mt = time > mt ? time : mt;

        if (model.mapper.getInput() !== null) {
          // FIXME !!! getInputAlgorithm / getInput
          model.mapper.getInputAlgorithm().update();
          time = model.mapper.getInput().getMTime();
          mt = time > mt ? time : mt;
        }
      }

      return mt;
    };

    publicAPI.getSupportsSelection = function () {
      return model.mapper ? model.mapper.getSupportsSelection() : false;
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$4 = {
    mapper: null,
    property: null,
    backfaceProperty: null,
    forceOpaque: false,
    forceTranslucent: false,
    bounds: [1, -1, 1, -1, 1, -1]
  }; // ----------------------------------------------------------------------------

  function extend$5(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$4, initialValues); // Inheritance

    vtkProp3D$1.extend(publicAPI, model, initialValues); // vtkTimeStamp

    model.boundsMTime = {};
    macro.obj(model.boundsMTime); // Build VTK API

    macro.set(publicAPI, model, ['property']);
    macro.setGet(publicAPI, model, ['backfaceProperty', 'forceOpaque', 'forceTranslucent', 'mapper']); // Object methods

    vtkActor(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$3 = macro.newInstance(extend$5, 'vtkActor'); // ----------------------------------------------------------------------------

  var vtkActor$1 = {
    newInstance: newInstance$3,
    extend: extend$5
  };

  function vtkGenericRenderWindow(publicAPI, model) {
    // Capture resize trigger method to remove from publicAPI
    var invokeResize = publicAPI.invokeResize;
    delete publicAPI.invokeResize; // VTK renderWindow/renderer

    model.renderWindow = vtkRenderWindow$1$1.newInstance();
    model.renderer = vtkRenderer$1.newInstance();
    model.renderWindow.addRenderer(model.renderer); // OpenGLRenderWindow

    model.openGLRenderWindow = vtkRenderWindow.newInstance();
    model.renderWindow.addView(model.openGLRenderWindow); // Interactor

    model.interactor = vtkRenderWindowInteractor$1.newInstance();
    model.interactor.setInteractorStyle(vtkInteractorStyleTrackballCamera$1.newInstance());
    model.interactor.setView(model.openGLRenderWindow);
    model.interactor.initialize(); // Expose background

    publicAPI.setBackground = model.renderer.setBackground; // Update BG color

    publicAPI.setBackground.apply(publicAPI, _toConsumableArray(model.background)); // Handle window resize

    publicAPI.resize = function () {
      if (model.container) {
        var dims = model.container.getBoundingClientRect();
        var devicePixelRatio = window.devicePixelRatio || 1;
        model.openGLRenderWindow.setSize(Math.floor(dims.width * devicePixelRatio), Math.floor(dims.height * devicePixelRatio));
        invokeResize();
        model.renderWindow.render();
      }
    }; // Handle DOM container relocation


    publicAPI.setContainer = function (el) {
      if (model.container) {
        model.interactor.unbindEvents(model.container);
      } // Switch container


      model.container = el;
      model.openGLRenderWindow.setContainer(model.container); // Bind to new container

      if (model.container) {
        model.interactor.bindEvents(model.container);
      }
    }; // Properly release GL context


    publicAPI.delete = macro.chain(publicAPI.setContainer, model.openGLRenderWindow.delete, publicAPI.delete); // Handle size

    if (model.listenWindowResize) {
      window.addEventListener('resize', publicAPI.resize);
    }

    publicAPI.resize();
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$3 = {
    background: [0.32, 0.34, 0.43],
    listenWindowResize: true,
    container: null
  }; // ----------------------------------------------------------------------------

  function extend$4(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$3, initialValues); // Object methods

    macro.obj(publicAPI, model);
    macro.get(publicAPI, model, ['renderWindow', 'renderer', 'openGLRenderWindow', 'interactor', 'container']);
    macro.event(publicAPI, model, 'resize'); // Object specific methods

    vtkGenericRenderWindow(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$2 = macro.newInstance(extend$4); // ----------------------------------------------------------------------------

  var vtkGenericRenderWindow$1 = {
    newInstance: newInstance$2,
    extend: extend$4
  };

  var xmlbuilder2_min = createCommonjsModule(function (module, exports) {
  !function(e,t){module.exports=t();}(commonjsGlobal,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n});},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0});},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=184)}([function(e,t,r){function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r]);}Object.defineProperty(t,"__esModule",{value:!0}),n(r(240)),n(r(251)),n(r(175)),n(r(107)),n(r(29)),n(r(73)),n(r(106)),n(r(30)),n(r(252)),n(r(52)),n(r(97)),n(r(253)),n(r(37)),n(r(51)),n(r(173)),n(r(176)),n(r(172)),n(r(108)),n(r(254)),n(r(255)),n(r(256)),n(r(72)),n(r(177)),n(r(105)),n(r(17)),n(r(257)),n(r(12)),n(r(174));},function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var i=r(212);t.FixedSizeSet=i.FixedSizeSet;var o=r(213);t.ObjectCache=o.ObjectCache;var a=r(214);t.CompareCache=a.CompareCache;var s=r(215);t.Lazy=s.Lazy;var u=r(216);function l(e,t,r){if(m(e))e.forEach((function(e,n){return t.call(r,n,e)}));else for(var n in e)e.hasOwnProperty(n)&&t.call(r,n,e[n]);}function c(e){var t,r;if(h(e))return e;if(f(e)){var i=[];try{for(var o=n(e),a=o.next();!a.done;a=o.next()){var s=a.value;i.push(c(s));}}catch(e){t={error:e};}finally{try{a&&!a.done&&(r=o.return)&&r.call(o);}finally{if(t)throw t.error}}return i}if(p(e)){i={};for(var u in e)if(e.hasOwnProperty(u)){var l=e[u];i[u]=c(l);}return i}return e}function h(e){return !!e&&"[object Function]"===Object.prototype.toString.call(e)}function p(e){var t=typeof e;return !!e&&("function"===t||"object"===t)}function f(e){return Array.isArray(e)}function d(e){return e instanceof Set}function m(e){return e instanceof Map}function y(e){if(p(e)){var t=Object.getPrototypeOf(e),r=t.constructor;return t&&r&&"function"==typeof r&&r instanceof r&&Function.prototype.toString.call(r)===Function.prototype.toString.call(Object)}return !1}t.StringWalker=u.StringWalker,t.applyMixin=function(e,t){for(var r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];Object.getOwnPropertyNames(t.prototype).forEach((function(n){if("constructor"!==n){if(-1!==r.indexOf(n)){var i=Object.getOwnPropertyDescriptor(e.prototype,n);i&&Object.defineProperty(e.prototype,"_"+n,i);}var o=Object.getOwnPropertyDescriptor(t.prototype,n);o&&Object.defineProperty(e.prototype,n,o);}}));},t.applyDefaults=function e(t,r,n){void 0===n&&(n=!1);var i=c(t||{});return l(r,(function(t,r){y(r)?i[t]=e(i[t],r,n):(n||void 0===i[t])&&(i[t]=r);})),i},t.forEachArray=function(e,t,r){e.forEach(t,r);},t.forEachObject=l,t.arrayLength=function(e){return d(e)?e.size:e.length},t.objectLength=function(e){return m(e)?e.size:Object.keys(e).length},t.getObjectValue=function(e,t){return m(e)?e.get(t):e[t]},t.removeObjectValue=function(e,t){m(e)?e.delete(t):delete e[t];},t.clone=c,t.isBoolean=function(e){return "boolean"==typeof e},t.isNumber=function(e){return "number"==typeof e},t.isString=function(e){return "string"==typeof e},t.isFunction=h,t.isObject=p,t.isArray=f,t.isSet=d,t.isMap=m,t.isEmpty=function(e){if(f(e))return !e.length;if(d(e))return !e.size;if(m(e))return !e.size;if(p(e)){for(var t in e)if(e.hasOwnProperty(t))return !1;return !0}return !1},t.isPlainObject=y,t.isIterable=function(e){return e&&"function"==typeof e[Symbol.iterator]},t.getValue=function(e){return h(e.valueOf)?e.valueOf():e},t.utf8Encode=function(e){for(var t=new Uint8Array(4*e.length),r=0,n=0;n<e.length;n++){var i=e.charCodeAt(n);if(i<128)t[r++]=i;else {if(i<2048)t[r++]=i>>6|192;else {if(i>55295&&i<56320){if(++n>=e.length)throw new Error("Incomplete surrogate pair.");var o=e.charCodeAt(n);if(o<56320||o>57343)throw new Error("Invalid surrogate character.");i=65536+((1023&i)<<10)+(1023&o),t[r++]=i>>18|240,t[r++]=i>>12&63|128;}else t[r++]=i>>12|224;t[r++]=i>>6&63|128;}t[r++]=63&i|128;}}return t.subarray(0,r)},t.utf8Decode=function(e){for(var t="",r=0;r<e.length;){var n=e[r++];if(n>127)if(n>191&&n<224){if(r>=e.length)throw new Error("Incomplete 2-byte sequence.");n=(31&n)<<6|63&e[r++];}else if(n>223&&n<240){if(r+1>=e.length)throw new Error("Incomplete 3-byte sequence.");n=(15&n)<<12|(63&e[r++])<<6|63&e[r++];}else {if(!(n>239&&n<248))throw new Error("Unknown multi-byte start.");if(r+2>=e.length)throw new Error("Incomplete 4-byte sequence.");n=(7&n)<<18|(63&e[r++])<<12|(63&e[r++])<<6|63&e[r++];}if(n<=65535)t+=String.fromCharCode(n);else {if(!(n<=1114111))throw new Error("Code point exceeds UTF-16 limit.");n-=65536,t+=String.fromCharCode(n>>10|55296),t+=String.fromCharCode(1023&n|56320);}}return t};},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.Before=0]="Before",e[e.Equal=1]="Equal",e[e.After=2]="After";}(t.BoundaryPosition||(t.BoundaryPosition={})),function(e){e[e.None=0]="None",e[e.Capturing=1]="Capturing",e[e.AtTarget=2]="AtTarget",e[e.Bubbling=3]="Bubbling";}(t.EventPhase||(t.EventPhase={})),function(e){e[e.Element=1]="Element",e[e.Attribute=2]="Attribute",e[e.Text=3]="Text",e[e.CData=4]="CData",e[e.EntityReference=5]="EntityReference",e[e.Entity=6]="Entity",e[e.ProcessingInstruction=7]="ProcessingInstruction",e[e.Comment=8]="Comment",e[e.Document=9]="Document",e[e.DocumentType=10]="DocumentType",e[e.DocumentFragment=11]="DocumentFragment",e[e.Notation=12]="Notation";}(t.NodeType||(t.NodeType={})),function(e){e[e.Disconnected=1]="Disconnected",e[e.Preceding=2]="Preceding",e[e.Following=4]="Following",e[e.Contains=8]="Contains",e[e.ContainedBy=16]="ContainedBy",e[e.ImplementationSpecific=32]="ImplementationSpecific";}(t.Position||(t.Position={})),function(e){e[e.Accept=1]="Accept",e[e.Reject=2]="Reject",e[e.Skip=3]="Skip";}(t.FilterResult||(t.FilterResult={})),function(e){e[e.All=4294967295]="All",e[e.Element=1]="Element",e[e.Attribute=2]="Attribute",e[e.Text=4]="Text",e[e.CDataSection=8]="CDataSection",e[e.EntityReference=16]="EntityReference",e[e.Entity=32]="Entity",e[e.ProcessingInstruction=64]="ProcessingInstruction",e[e.Comment=128]="Comment",e[e.Document=256]="Document",e[e.DocumentType=512]="DocumentType",e[e.DocumentFragment=1024]="DocumentFragment",e[e.Notation=2048]="Notation";}(t.WhatToShow||(t.WhatToShow={})),function(e){e[e.StartToStart=0]="StartToStart",e[e.StartToEnd=1]="StartToEnd",e[e.EndToEnd=2]="EndToEnd",e[e.EndToStart=3]="EndToStart";}(t.HowToCompare||(t.HowToCompare={}));},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(241);t.Cast=n.Cast;var i=r(150);t.Guard=i.Guard;var o=r(242);t.EmptySet=o.EmptySet;},function(e,t,r){var n=r(11),i=r(55).f,o=r(21),a=r(25),s=r(80),u=r(119),l=r(123);e.exports=function(e,t){var r,c,h,p,f,d=e.target,m=e.global,y=e.stat;if(r=m?n:y?n[d]||s(d,{}):(n[d]||{}).prototype)for(c in t){if(p=t[c],h=e.noTargetGet?(f=i(r,c))&&f.value:r[c],!l(m?c:d+(y?".":"#")+c,e.forced)&&void 0!==h){if(typeof p==typeof h)continue;u(p,h);}(e.sham||h&&h.sham)&&o(p,"sham",!0),a(r,c,p,e);}};},function(e,t,r){var n=r(11),i=r(81),o=r(14),a=r(58),s=r(86),u=r(124),l=i("wks"),c=n.Symbol,h=u?c:c&&c.withoutSetter||a;e.exports=function(e){return o(l,e)||(s&&o(c,e)?l[e]=c[e]:l[e]=h("Symbol."+e)),l[e]};},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(1),i=r(29),o=function(){function e(){this._features={mutationObservers:!0,customElements:!0,slots:!0,steps:!0},this._window=null,this._compareCache=new n.CompareCache,this._rangeList=new n.FixedSizeSet;}return e.prototype.setFeatures=function(e){if(void 0===e&&(e=!0),n.isObject(e))for(var t in e)this._features[t]=e[t]||!1;else for(var t in this._features)this._features[t]=e;},Object.defineProperty(e.prototype,"features",{get:function(){return this._features},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"window",{get:function(){return null===this._window&&(this._window=i.create_window()),this._window},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"compareCache",{get:function(){return this._compareCache},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"rangeList",{get:function(){return this._rangeList},enumerable:!0,configurable:!0}),Object.defineProperty(e,"instance",{get:function(){return e._instance||(e._instance=new e),e._instance},enumerable:!0,configurable:!0}),e}();t.dom=o.instance;},function(e,t,r){var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var i=n(r(228));t.base64=i;var o=n(r(146));t.byte=o;var a=n(r(147));t.byteSequence=a;var s=n(r(96));t.codePoint=s;var u=n(r(232));t.json=u;var l=n(r(233));t.list=l;var c=n(r(234));t.map=c;var h=n(r(235));t.namespace=h;var p=n(r(236));t.queue=p;var f=n(r(237));t.set=f;var d=n(r(238));t.stack=d;var m=n(r(239));t.string=m;},function(e,t){e.exports=function(e){try{return !!e()}catch(e){return !0}};},function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(t,r){void 0===r&&(r="");var n=e.call(this,r)||this;return n.name=t,n}return i(t,e),t}(Error);t.DOMException=o;var a=function(e){function t(t){return void 0===t&&(t=""),e.call(this,"DOMStringSizeError",t)||this}return i(t,e),t}(o);t.DOMStringSizeError=a;var s=function(e){function t(t){return void 0===t&&(t=""),e.call(this,"WrongDocumentError","The object is in the wrong document. "+t)||this}return i(t,e),t}(o);t.WrongDocumentError=s;var u=function(e){function t(t){return void 0===t&&(t=""),e.call(this,"NoDataAllowedError",t)||this}return i(t,e),t}(o);t.NoDataAllowedError=u;var l=function(e){function t(t){return void 0===t&&(t=""),e.call(this,"NoModificationAllowedError","The object can not be modified. "+t)||this}return i(t,e),t}(o);t.NoModificationAllowedError=l;var c=function(e){function t(t){return void 0===t&&(t=""),e.call(this,"NotSupportedError","The operation is not supported. "+t)||this}return i(t,e),t}(o);t.NotSupportedError=c;var h=function(e){function t(t){return void 0===t&&(t=""),e.call(this,"InUseAttributeError",t)||this}return i(t,e),t}(o);t.InUseAttributeError=h;var p=function(e){function t(t){return void 0===t&&(t=""),e.call(this,"InvalidStateError","The object is in an invalid state. "+t)||this}return i(t,e),t}(o);t.InvalidStateError=p;var f=function(e){function t(t){return void 0===t&&(t=""),e.call(this,"InvalidModificationError","The object can not be modified in this way. "+t)||this}return i(t,e),t}(o);t.InvalidModificationError=f;var d=function(e){function t(t){return void 0===t&&(t=""),e.call(this,"NamespaceError","The operation is not allowed by Namespaces in XML. [XMLNS] "+t)||this}return i(t,e),t}(o);t.NamespaceError=d;var m=function(e){function t(t){return void 0===t&&(t=""),e.call(this,"InvalidAccessError","The object does not support the operation or argument. "+t)||this}return i(t,e),t}(o);t.InvalidAccessError=m;var y=function(e){function t(t){return void 0===t&&(t=""),e.call(this,"ValidationError",t)||this}return i(t,e),t}(o);t.ValidationError=y;var v=function(e){function t(t){return void 0===t&&(t=""),e.call(this,"TypeMismatchError",t)||this}return i(t,e),t}(o);t.TypeMismatchError=v;var _=function(e){function t(t){return void 0===t&&(t=""),e.call(this,"SecurityError","The operation is insecure. "+t)||this}return i(t,e),t}(o);t.SecurityError=_;var g=function(e){function t(t){return void 0===t&&(t=""),e.call(this,"NetworkError","A network error occurred. "+t)||this}return i(t,e),t}(o);t.NetworkError=g;var b=function(e){function t(t){return void 0===t&&(t=""),e.call(this,"AbortError","The operation was aborted. "+t)||this}return i(t,e),t}(o);t.AbortError=b;var x=function(e){function t(t){return void 0===t&&(t=""),e.call(this,"URLMismatchError","The given URL does not match another URL. "+t)||this}return i(t,e),t}(o);t.URLMismatchError=x;var w=function(e){function t(t){return void 0===t&&(t=""),e.call(this,"QuotaExceededError","The quota has been exceeded. "+t)||this}return i(t,e),t}(o);t.QuotaExceededError=w;var E=function(e){function t(t){return void 0===t&&(t=""),e.call(this,"TimeoutError","The operation timed out. "+t)||this}return i(t,e),t}(o);t.TimeoutError=E;var D=function(e){function t(t){return void 0===t&&(t=""),e.call(this,"InvalidNodeTypeError","The supplied node is incorrect or has an incorrect ancestor for this operation. "+t)||this}return i(t,e),t}(o);t.InvalidNodeTypeError=D;var S=function(e){function t(t){return void 0===t&&(t=""),e.call(this,"DataCloneError","The object can not be cloned. "+t)||this}return i(t,e),t}(o);t.DataCloneError=S;var C=function(e){function t(t){return void 0===t&&(t=""),e.call(this,"NotImplementedError","The DOM method is not implemented by this module. "+t)||this}return i(t,e),t}(o);t.NotImplementedError=C;var A=function(e){function t(t){return void 0===t&&(t=""),e.call(this,"HierarchyRequestError","The operation would yield an incorrect node tree. "+t)||this}return i(t,e),t}(o);t.HierarchyRequestError=A;var N=function(e){function t(t){return void 0===t&&(t=""),e.call(this,"NotFoundError","The object can not be found here. "+t)||this}return i(t,e),t}(o);t.NotFoundError=N;var T=function(e){function t(t){return void 0===t&&(t=""),e.call(this,"IndexSizeError","The index is not in the allowed range. "+t)||this}return i(t,e),t}(o);t.IndexSizeError=T;var O=function(e){function t(t){return void 0===t&&(t=""),e.call(this,"SyntaxError","The string did not match the expected pattern. "+t)||this}return i(t,e),t}(o);t.SyntaxError=O;var F=function(e){function t(t){return void 0===t&&(t=""),e.call(this,"InvalidCharacterError","The string contains invalid characters. "+t)||this}return i(t,e),t}(o);t.InvalidCharacterError=F;},function(e,t,r){var n=r(53),i=["kind","resolve","construct","instanceOf","predicate","represent","defaultStyle","styleAliases"],o=["scalar","sequence","mapping"];e.exports=function(e,t){var r,a;if(t=t||{},Object.keys(t).forEach((function(t){if(-1===i.indexOf(t))throw new n('Unknown option "'+t+'" is met in definition of "'+e+'" YAML type.')})),this.tag=e,this.kind=t.kind||null,this.resolve=t.resolve||function(){return !0},this.construct=t.construct||function(e){return e},this.instanceOf=t.instanceOf||null,this.predicate=t.predicate||null,this.represent=t.represent||null,this.defaultStyle=t.defaultStyle||null,this.styleAliases=(r=t.styleAliases||null,a={},null!==r&&Object.keys(r).forEach((function(e){r[e].forEach((function(t){a[String(t)]=e;}));})),a),-1===o.indexOf(this.kind))throw new n('Unknown kind "'+this.kind+'" is specified for "'+e+'" YAML type.')};},function(e,t,r){(function(t){var r=function(e){return e&&e.Math==Math&&e};e.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof t&&t)||Function("return this")();}).call(this,r(78));},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.idl_defineConst=function(e,t,r){Object.defineProperty(e,t,{writable:!1,enumerable:!0,configurable:!1,value:r});};},function(e,t){e.exports=function(e){return "object"==typeof e?null!==e:"function"==typeof e};},function(e,t){var r={}.hasOwnProperty;e.exports=function(e,t){return r.call(e,t)};},function(e,t,r){var n=r(16),i=r(115),o=r(18),a=r(56),s=Object.defineProperty;t.f=n?s:function(e,t,r){if(o(e),t=a(t,!0),o(r),i)try{return s(e,t,r)}catch(e){}if("get"in r||"set"in r)throw TypeError("Accessors not supported");return "value"in r&&(e[t]=r.value),e};},function(e,t,r){var n=r(8);e.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}));},function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var i=r(3),o=r(2);function a(e,t,r){if(void 0===r&&(r=!1),r&&i.Guard.isElementNode(t)&&i.Guard.isShadowRoot(t.shadowRoot)&&t.shadowRoot._firstChild)return t.shadowRoot._firstChild;if(t._firstChild)return t._firstChild;if(t===e)return null;if(t._nextSibling)return t._nextSibling;for(var n=t._parent;n&&n!==e;){if(n._nextSibling)return n._nextSibling;n=n._parent;}return null}function s(){var e;return (e={})[Symbol.iterator]=function(){return {next:function(){return {done:!0,value:null}}}},e}function u(e,t,r,n){void 0===t&&(t=!1),void 0===r&&(r=!1);for(var i=t?e:a(e,e,r);i&&n&&!n(i);)i=a(e,i,r);return i}function l(e,t,r,n,i){void 0===n&&(n=!1);for(var o=a(e,t,n);o&&i&&!i(o);)o=a(e,o,n);return o}function c(e,t,r,n){var i;return void 0===t&&(t=!1),void 0===r&&(r=!1),t||0!==e._children.size?((i={})[Symbol.iterator]=function(){var i=t?e:a(e,e,r);return {next:function(){for(;i&&n&&!n(i);)i=a(e,i,r);if(null===i)return {done:!0,value:null};var t={done:!1,value:i};return i=a(e,i,r),t}}},i):s()}function h(e,t,r){void 0===t&&(t=!1);for(var n=t?e:e._parent;n&&r&&!r(n);)n=n._parent;return n}function p(e,t,r,n){for(var i=t._parent;i&&n&&!n(i);)i=i._parent;return i}function f(e){return i.Guard.isDocumentTypeNode(e)?0:i.Guard.isCharacterDataNode(e)?e._data.length:e._children.size}function d(e,t){if(void 0===t&&(t=!1),t){var r=d(e,!1);return i.Guard.isShadowRoot(r)?d(r._host,!0):r}return e._parent?d(e._parent):e}function m(e,t,r,n){void 0===r&&(r=!1),void 0===n&&(n=!1);for(var o=r?e:n&&i.Guard.isShadowRoot(e)?e._host:e._parent;null!==o;){if(o===t)return !0;o=n&&i.Guard.isShadowRoot(o)?o._host:o._parent;}return !1}function y(e){for(var t=d(e),r=0,n=u(t);null!==n;){if(r++,n===e)return r;n=l(t,n);}return -1}t.tree_getFirstDescendantNode=u,t.tree_getNextDescendantNode=l,t.tree_getDescendantNodes=c,t.tree_getDescendantElements=function(e,t,r,n){var o;return void 0===t&&(t=!1),void 0===r&&(r=!1),t||0!==e._children.size?((o={})[Symbol.iterator]=function(){var o=c(e,t,r,(function(e){return i.Guard.isElementNode(e)}))[Symbol.iterator](),a=o.next().value;return {next:function(){for(;a&&n&&!n(a);)a=o.next().value;if(null===a)return {done:!0,value:null};var e={done:!1,value:a};return a=o.next().value,e}}},o):s()},t.tree_getSiblingNodes=function(e,t,r){var n;return void 0===t&&(t=!1),e._parent&&0!==e._parent._children.size?((n={})[Symbol.iterator]=function(){var n=e._parent?e._parent._firstChild:null;return {next:function(){for(;n&&(r&&!r(n)||!t&&n===e);)n=n._nextSibling;if(null===n)return {done:!0,value:null};var i={done:!1,value:n};return n=n._nextSibling,i}}},n):s()},t.tree_getFirstAncestorNode=h,t.tree_getNextAncestorNode=p,t.tree_getAncestorNodes=function(e,t,r){var n;return void 0===t&&(t=!1),t||e._parent?((n={})[Symbol.iterator]=function(){var n=h(e,t,r);return {next:function(){if(null===n)return {done:!0,value:null};var e={done:!1,value:n};return n=p(0,n,t,r),e}}},n):s()},t.tree_getCommonAncestor=function(e,t){if(e===t)return e._parent;for(var r=[],n=[],i=h(e,!0);null!==i;)r.push(i),i=p(0,i);for(var o=h(t,!0);null!==o;)n.push(o),o=p(0,o);for(var a=r.length,s=n.length,u=null,l=Math.min(a,s);l>0;l--){var c=r[--a];if(c!==n[--s])break;u=c;}return u},t.tree_getFollowingNode=function(e,t){if(t._firstChild)return t._firstChild;if(t._nextSibling)return t._nextSibling;for(;;){var r=t._parent;if(null===r||r===e)return null;if(r._nextSibling)return r._nextSibling;t=r;}},t.tree_getPrecedingNode=function(e,t){return t===e?null:t._previousSibling?(t=t._previousSibling)._lastChild?t._lastChild:t:t._parent},t.tree_isConstrained=function e(t){var r,i,a,s,u,l;switch(t._nodeType){case o.NodeType.Document:var c=!1,h=!1;try{for(var p=n(t._children),f=p.next();!f.done;f=p.next()){switch(f.value._nodeType){case o.NodeType.ProcessingInstruction:case o.NodeType.Comment:break;case o.NodeType.DocumentType:if(c||h)return !1;c=!0;break;case o.NodeType.Element:if(h)return !1;h=!0;break;default:return !1}}}catch(e){r={error:e};}finally{try{f&&!f.done&&(i=p.return)&&i.call(p);}finally{if(r)throw r.error}}break;case o.NodeType.DocumentFragment:case o.NodeType.Element:try{for(var d=n(t._children),m=d.next();!m.done;m=d.next()){switch(m.value._nodeType){case o.NodeType.Element:case o.NodeType.Text:case o.NodeType.ProcessingInstruction:case o.NodeType.CData:case o.NodeType.Comment:break;default:return !1}}}catch(e){a={error:e};}finally{try{m&&!m.done&&(s=d.return)&&s.call(d);}finally{if(a)throw a.error}}break;case o.NodeType.DocumentType:case o.NodeType.Text:case o.NodeType.ProcessingInstruction:case o.NodeType.CData:case o.NodeType.Comment:return !t.hasChildNodes()}try{for(var y=n(t._children),v=y.next();!v.done;v=y.next()){if(!e(v.value))return !1}}catch(e){u={error:e};}finally{try{v&&!v.done&&(l=y.return)&&l.call(y);}finally{if(u)throw u.error}}return !0},t.tree_nodeLength=f,t.tree_isEmpty=function(e){return 0===f(e)},t.tree_rootNode=d,t.tree_isDescendantOf=function(e,t,r,n){void 0===r&&(r=!1),void 0===n&&(n=!1);for(var i=u(e,r,n);null!==i;){if(i===t)return !0;i=l(e,i,r,n);}return !1},t.tree_isAncestorOf=m,t.tree_isHostIncludingAncestorOf=function e(t,r,n){if(void 0===n&&(n=!1),m(t,r,n))return !0;var o=d(t);return !(!i.Guard.isDocumentFragmentNode(o)||null===o._host||!e(o._host,r,n))},t.tree_isSiblingOf=function(e,t,r){return void 0===r&&(r=!1),e!==t?null!==e._parent&&e._parent===t._parent:!!r},t.tree_isPreceding=function(e,t){var r=y(e),n=y(t);return -1!==r&&-1!==n&&(d(e)===d(t)&&n<r)},t.tree_isFollowing=function(e,t){var r=y(e),n=y(t);return -1!==r&&-1!==n&&(d(e)===d(t)&&n>r)},t.tree_isParentOf=function(e,t){return e._parent===t},t.tree_isChildOf=function(e,t){return t._parent===e},t.tree_previousSibling=function(e){return e._previousSibling},t.tree_nextSibling=function(e){return e._nextSibling},t.tree_firstChild=function(e){return e._firstChild},t.tree_lastChild=function(e){return e._lastChild},t.tree_treePosition=y,t.tree_index=function(e){for(var t=0;null!==e._previousSibling;)t++,e=e._previousSibling;return t},t.tree_retarget=function(e,t){for(;;){if(!e||!i.Guard.isNode(e))return e;var r=d(e);if(!i.Guard.isShadowRoot(r))return e;if(t&&i.Guard.isNode(t)&&m(r,t,!0,!0))return e;e=r.host;}};},function(e,t,r){var n=r(13);e.exports=function(e){if(!n(e))throw TypeError(String(e)+" is not an object");return e};},function(e,t,r){var n=r(24),i=r(130),o=r(49),a=r(43),s=r(88),u=a.set,l=a.getterFor("Array Iterator");e.exports=s(Array,"Array",(function(e,t){u(this,{type:"Array Iterator",target:n(e),index:0,kind:t});}),(function(){var e=l(this),t=e.target,r=e.kind,n=e.index++;return !t||n>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:n,done:!1}:"values"==r?{value:t[n],done:!1}:{value:[n,t[n]],done:!1}}),"values"),o.Arguments=o.Array,i("keys"),i("values"),i("entries");},function(e,t,r){var n=r(90),i=r(25),o=r(202);n||i(Object.prototype,"toString",o,{unsafe:!0});},function(e,t,r){var n=r(16),i=r(15),o=r(40);e.exports=n?function(e,t,r){return i.f(e,t,o(1,r))}:function(e,t,r){return e[t]=r,e};},function(e,t,r){var n=r(137).charAt,i=r(43),o=r(88),a=i.set,s=i.getterFor("String Iterator");o(String,"String",(function(e){a(this,{type:"String Iterator",string:String(e),index:0});}),(function(){var e,t=s(this),r=t.string,i=t.index;return i>=r.length?{value:void 0,done:!0}:(e=n(r,i),t.index+=e.length,{value:e,done:!1})}));},function(e,t,r){var n=r(11),i=r(203),o=r(19),a=r(21),s=r(5),u=s("iterator"),l=s("toStringTag"),c=o.values;for(var h in i){var p=n[h],f=p&&p.prototype;if(f){if(f[u]!==c)try{a(f,u,c);}catch(e){f[u]=c;}if(f[l]||a(f,l,h),i[h])for(var d in o)if(f[d]!==o[d])try{a(f,d,o[d]);}catch(e){f[d]=o[d];}}}},function(e,t,r){var n=r(41),i=r(35);e.exports=function(e){return n(i(e))};},function(e,t,r){var n=r(11),i=r(21),o=r(14),a=r(80),s=r(117),u=r(43),l=u.get,c=u.enforce,h=String(String).split("String");(e.exports=function(e,t,r,s){var u=!!s&&!!s.unsafe,l=!!s&&!!s.enumerable,p=!!s&&!!s.noTargetGet;"function"==typeof r&&("string"!=typeof t||o(r,"name")||i(r,"name",t),c(r).source=h.join("string"==typeof t?t:"")),e!==n?(u?!p&&e[t]&&(l=!0):delete e[t],l?e[t]=r:i(e,t,r)):l?e[t]=r:a(t,r);})(Function.prototype,"toString",(function(){return "function"==typeof this&&l(this).source||s(this)}));},function(e,t,r){var n=r(47),i=Math.min;e.exports=function(e){return e>0?i(n(e),9007199254740991):0};},function(e,t,r){var n=r(35);e.exports=function(e){return Object(n(e))};},function(e,t,r){var n=r(16),i=r(8),o=r(14),a=Object.defineProperty,s={},u=function(e){throw e};e.exports=function(e,t){if(o(s,e))return s[e];t||(t={});var r=[][e],l=!!o(t,"ACCESSORS")&&t.ACCESSORS,c=o(t,0)?t[0]:u,h=o(t,1)?t[1]:void 0;return s[e]=!!r&&!i((function(){if(l&&!n)return !0;var e={length:-1};l?a(e,1,{enumerable:!0,get:u}):e[1]=1,r.call(e,c,h);}))};},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(148),i=r(149),o=r(151),a=r(98),s=r(153),u=r(154),l=r(155),c=r(99),h=r(100),p=r(156),f=r(157),d=r(101),m=r(158),y=r(159),v=r(160),_=r(161),g=r(162),b=r(163),x=r(164),w=r(165),E=r(166),D=r(167),S=r(168),C=r(169),A=r(170);t.create_domImplementation=function(e){return n.DOMImplementationImpl._create(e)},t.create_window=function(){return i.WindowImpl._create()},t.create_xmlDocument=function(){return new o.XMLDocumentImpl},t.create_document=function(){return new a.DocumentImpl},t.create_abortController=function(){return new s.AbortControllerImpl},t.create_abortSignal=function(){return u.AbortSignalImpl._create()},t.create_documentType=function(e,t,r,n){return l.DocumentTypeImpl._create(e,t,r,n)},t.create_element=function(e,t,r,n){return c.ElementImpl._create(e,t,r,n)},t.create_htmlElement=function(e,t,r,n){return c.ElementImpl._create(e,t,r,n)},t.create_htmlUnknownElement=function(e,t,r,n){return c.ElementImpl._create(e,t,r,n)},t.create_documentFragment=function(e){return h.DocumentFragmentImpl._create(e)},t.create_shadowRoot=function(e,t){return p.ShadowRootImpl._create(e,t)},t.create_attr=function(e,t){return f.AttrImpl._create(e,t)},t.create_text=function(e,t){return d.TextImpl._create(e,t)},t.create_cdataSection=function(e,t){return m.CDATASectionImpl._create(e,t)},t.create_comment=function(e,t){return y.CommentImpl._create(e,t)},t.create_processingInstruction=function(e,t,r){return v.ProcessingInstructionImpl._create(e,t,r)},t.create_htmlCollection=function(e,t){return void 0===t&&(t=function(){return !0}),_.HTMLCollectionImpl._create(e,t)},t.create_nodeList=function(e){return g.NodeListImpl._create(e)},t.create_nodeListStatic=function(e,t){return b.NodeListStaticImpl._create(e,t)},t.create_namedNodeMap=function(e){return x.NamedNodeMapImpl._create(e)},t.create_range=function(e,t){return w.RangeImpl._create(e,t)},t.create_nodeIterator=function(e,t,r){return E.NodeIteratorImpl._create(e,t,r)},t.create_treeWalker=function(e,t){return D.TreeWalkerImpl._create(e,t)},t.create_nodeFilter=function(){return S.NodeFilterImpl._create()},t.create_mutationRecord=function(e,t,r,n,i,o,a,s,u){return C.MutationRecordImpl._create(e,t,r,n,i,o,a,s,u)},t.create_domTokenList=function(e,t){return A.DOMTokenListImpl._create(e,t)};},function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var i=r(6),o=r(17),a=r(3),s=r(72),u=new Map;function l(e,t){if(t!==e._root&&o.tree_isAncestorOf(e._reference,t,!0)){if(e._pointerBeforeReference)for(;;){var r=o.tree_getFollowingNode(e._root,t);if(null!==r&&o.tree_isDescendantOf(e._root,r,!0)&&!o.tree_isDescendantOf(t,r,!0))return void(e._reference=r);if(null===r)return void(e._pointerBeforeReference=!1)}if(null===t._previousSibling)null!==t._parent&&(e._reference=t._parent);else {for(var n=t._previousSibling,i=o.tree_getFirstDescendantNode(t._previousSibling,!0,!1);null!==i;)null!==i&&(n=i),i=o.tree_getNextDescendantNode(t._previousSibling,i,!0,!1);e._reference=n;}}}function c(e,t,r,n,i){if(a.Guard.isSlot(e)&&"name"===t&&null===i){if(n===r)return;if(null===n&&""===r)return;if(""===n&&null===r)return;e._name=null===n||""===n?"":n,s.shadowTree_assignSlotablesForATree(o.tree_rootNode(e));}}function h(e,t,r,n,i){if(a.Guard.isSlotable(e)&&"slot"===t&&null===i){if(n===r)return;if(null===n&&""===r)return;if(""===n&&null===r)return;e._name=null===n||""===n?"":n,s.shadowTree_isAssigned(e)&&s.shadowTree_assignSlotables(e._assignedSlot),s.shadowTree_assignASlot(e);}}function p(e,t,r,n){"id"===t&&null===n&&(e._uniqueIdentifier=r||void 0);}t.dom_runRemovingSteps=function(e,t){},t.dom_runCloningSteps=function(e,t,r,n){},t.dom_runAdoptingSteps=function(e,t){},t.dom_runAttributeChangeSteps=function(e,t,r,o,a){var s,u;i.dom.features.slots&&(h.call(e,e,t,r,o,a),c.call(e,e,t,r,o,a)),p.call(e,e,t,o,a);try{for(var l=n(e._attributeChangeSteps),f=l.next();!f.done;f=l.next()){f.value.call(e,e,t,r,o,a);}}catch(e){s={error:e};}finally{try{f&&!f.done&&(u=l.return)&&u.call(l);}finally{if(s)throw s.error}}},t.dom_runInsertionSteps=function(e){},t.dom_runNodeIteratorPreRemovingSteps=function(e,t){l.call(e,e,t);},t.dom_hasSupportedTokens=function(e){return u.has(e)},t.dom_getSupportedTokens=function(e){return u.get(e)||new Set},t.dom_runEventConstructingSteps=function(e){},t.dom_runChildTextContentChangeSteps=function(e){};},function(e,t,r){var n=r(4),i=r(11),o=r(46),a=r(44),s=r(16),u=r(86),l=r(124),c=r(8),h=r(14),p=r(59),f=r(13),d=r(18),m=r(27),y=r(24),v=r(56),_=r(40),g=r(60),b=r(61),x=r(82),w=r(190),E=r(85),D=r(55),S=r(15),C=r(79),A=r(21),N=r(25),T=r(81),O=r(57),F=r(45),k=r(58),P=r(5),I=r(125),L=r(126),M=r(62),B=r(43),j=r(36).forEach,R=O("hidden"),z=P("toPrimitive"),U=B.set,G=B.getterFor("Symbol"),X=Object.prototype,q=i.Symbol,W=o("JSON","stringify"),H=D.f,J=S.f,Y=w.f,V=C.f,K=T("symbols"),$=T("op-symbols"),Q=T("string-to-symbol-registry"),Z=T("symbol-to-string-registry"),ee=T("wks"),te=i.QObject,re=!te||!te.prototype||!te.prototype.findChild,ne=s&&c((function(){return 7!=g(J({},"a",{get:function(){return J(this,"a",{value:7}).a}})).a}))?function(e,t,r){var n=H(X,t);n&&delete X[t],J(e,t,r),n&&e!==X&&J(X,t,n);}:J,ie=function(e,t){var r=K[e]=g(q.prototype);return U(r,{type:"Symbol",tag:e,description:t}),s||(r.description=t),r},oe=l?function(e){return "symbol"==typeof e}:function(e){return Object(e)instanceof q},ae=function(e,t,r){e===X&&ae($,t,r),d(e);var n=v(t,!0);return d(r),h(K,n)?(r.enumerable?(h(e,R)&&e[R][n]&&(e[R][n]=!1),r=g(r,{enumerable:_(0,!1)})):(h(e,R)||J(e,R,_(1,{})),e[R][n]=!0),ne(e,n,r)):J(e,n,r)},se=function(e,t){d(e);var r=y(t),n=b(r).concat(he(r));return j(n,(function(t){s&&!ue.call(r,t)||ae(e,t,r[t]);})),e},ue=function(e){var t=v(e,!0),r=V.call(this,t);return !(this===X&&h(K,t)&&!h($,t))&&(!(r||!h(this,t)||!h(K,t)||h(this,R)&&this[R][t])||r)},le=function(e,t){var r=y(e),n=v(t,!0);if(r!==X||!h(K,n)||h($,n)){var i=H(r,n);return !i||!h(K,n)||h(r,R)&&r[R][n]||(i.enumerable=!0),i}},ce=function(e){var t=Y(y(e)),r=[];return j(t,(function(e){h(K,e)||h(F,e)||r.push(e);})),r},he=function(e){var t=e===X,r=Y(t?$:y(e)),n=[];return j(r,(function(e){!h(K,e)||t&&!h(X,e)||n.push(K[e]);})),n};(u||(N((q=function(){if(this instanceof q)throw TypeError("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,t=k(e),r=function(e){this===X&&r.call($,e),h(this,R)&&h(this[R],t)&&(this[R][t]=!1),ne(this,t,_(1,e));};return s&&re&&ne(X,t,{configurable:!0,set:r}),ie(t,e)}).prototype,"toString",(function(){return G(this).tag})),N(q,"withoutSetter",(function(e){return ie(k(e),e)})),C.f=ue,S.f=ae,D.f=le,x.f=w.f=ce,E.f=he,I.f=function(e){return ie(P(e),e)},s&&(J(q.prototype,"description",{configurable:!0,get:function(){return G(this).description}}),a||N(X,"propertyIsEnumerable",ue,{unsafe:!0}))),n({global:!0,wrap:!0,forced:!u,sham:!u},{Symbol:q}),j(b(ee),(function(e){L(e);})),n({target:"Symbol",stat:!0,forced:!u},{for:function(e){var t=String(e);if(h(Q,t))return Q[t];var r=q(t);return Q[t]=r,Z[r]=t,r},keyFor:function(e){if(!oe(e))throw TypeError(e+" is not a symbol");if(h(Z,e))return Z[e]},useSetter:function(){re=!0;},useSimple:function(){re=!1;}}),n({target:"Object",stat:!0,forced:!u,sham:!s},{create:function(e,t){return void 0===t?g(e):se(g(e),t)},defineProperty:ae,defineProperties:se,getOwnPropertyDescriptor:le}),n({target:"Object",stat:!0,forced:!u},{getOwnPropertyNames:ce,getOwnPropertySymbols:he}),n({target:"Object",stat:!0,forced:c((function(){E.f(1);}))},{getOwnPropertySymbols:function(e){return E.f(m(e))}}),W)&&n({target:"JSON",stat:!0,forced:!u||c((function(){var e=q();return "[null]"!=W([e])||"{}"!=W({a:e})||"{}"!=W(Object(e))}))},{stringify:function(e,t,r){for(var n,i=[e],o=1;arguments.length>o;)i.push(arguments[o++]);if(n=t,(f(t)||void 0!==e)&&!oe(e))return p(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!oe(t))return t}),i[1]=t,W.apply(null,i)}});q.prototype[z]||A(q.prototype,z,q.prototype.valueOf),M(q,"Symbol"),F[R]=!0;},function(e,t,r){var n=r(4),i=r(16),o=r(11),a=r(14),s=r(13),u=r(15).f,l=r(119),c=o.Symbol;if(i&&"function"==typeof c&&(!("description"in c.prototype)||void 0!==c().description)){var h={},p=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),t=this instanceof p?new c(e):void 0===e?c():c(e);return ""===e&&(h[t]=!0),t};l(p,c);var f=p.prototype=c.prototype;f.constructor=p;var d=f.toString,m="Symbol(test)"==String(c("test")),y=/^Symbol\((.*)\)[^)]+$/;u(f,"description",{configurable:!0,get:function(){var e=s(this)?this.valueOf():this,t=d.call(e);if(a(h,e))return "";var r=m?t.slice(7,-1):t.replace(y,"$1");return ""===r?void 0:r}}),n({global:!0,forced:!0},{Symbol:p});}},function(e,t,r){r(126)("iterator");},function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var a=r(6),s=r(2),u=r(70),l=r(3),c=r(9),h=r(0),p=r(152),f=r(12),d=function(e){function t(){var t=e.call(this)||this;return t._parent=null,t._firstChild=null,t._lastChild=null,t._previousSibling=null,t._nextSibling=null,t}return i(t,e),Object.defineProperty(t.prototype,"_childNodes",{get:function(){return this.__childNodes||(this.__childNodes=h.create_nodeList(this))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"_nodeDocument",{get:function(){return this._nodeDocumentOverride||a.dom.window._associatedDocument},set:function(e){this._nodeDocumentOverride=e;},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"_registeredObserverList",{get:function(){return this.__registeredObserverList||(this.__registeredObserverList=[])},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"nodeType",{get:function(){return this._nodeType},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"nodeName",{get:function(){return l.Guard.isElementNode(this)?this._htmlUppercasedQualifiedName:l.Guard.isAttrNode(this)?this._qualifiedName:l.Guard.isExclusiveTextNode(this)?"#text":l.Guard.isCDATASectionNode(this)?"#cdata-section":l.Guard.isProcessingInstructionNode(this)?this._target:l.Guard.isCommentNode(this)?"#comment":l.Guard.isDocumentNode(this)?"#document":l.Guard.isDocumentTypeNode(this)?this._name:l.Guard.isDocumentFragmentNode(this)?"#document-fragment":""},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"baseURI",{get:function(){return p.urlSerializer(this._nodeDocument._URL)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isConnected",{get:function(){return l.Guard.isElementNode(this)&&h.shadowTree_isConnected(this)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"ownerDocument",{get:function(){return this._nodeType===s.NodeType.Document?null:this._nodeDocument},enumerable:!0,configurable:!0}),t.prototype.getRootNode=function(e){return h.tree_rootNode(this,!!e&&e.composed)},Object.defineProperty(t.prototype,"parentNode",{get:function(){return this._nodeType===s.NodeType.Attribute?null:this._parent},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"parentElement",{get:function(){return this._parent&&l.Guard.isElementNode(this._parent)?this._parent:null},enumerable:!0,configurable:!0}),t.prototype.hasChildNodes=function(){return null!==this._firstChild},Object.defineProperty(t.prototype,"childNodes",{get:function(){return this._childNodes},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"firstChild",{get:function(){return this._firstChild},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"lastChild",{get:function(){return this._lastChild},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"previousSibling",{get:function(){return this._previousSibling},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"nextSibling",{get:function(){return this._nextSibling},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"nodeValue",{get:function(){return l.Guard.isAttrNode(this)?this._value:l.Guard.isCharacterDataNode(this)?this._data:null},set:function(e){null===e&&(e=""),l.Guard.isAttrNode(this)?h.attr_setAnExistingAttributeValue(this,e):l.Guard.isCharacterDataNode(this)&&h.characterData_replaceData(this,0,this._data.length,e);},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"textContent",{get:function(){return l.Guard.isDocumentFragmentNode(this)||l.Guard.isElementNode(this)?h.text_descendantTextContent(this):l.Guard.isAttrNode(this)?this._value:l.Guard.isCharacterDataNode(this)?this._data:null},set:function(e){null===e&&(e=""),l.Guard.isDocumentFragmentNode(this)||l.Guard.isElementNode(this)?h.node_stringReplaceAll(e,this):l.Guard.isAttrNode(this)?h.attr_setAnExistingAttributeValue(this,e):l.Guard.isCharacterDataNode(this)&&h.characterData_replaceData(this,0,h.tree_nodeLength(this),e);},enumerable:!0,configurable:!0}),t.prototype.normalize=function(){for(var e,t,r,n,i=[],s=h.tree_getFirstDescendantNode(this,!1,!1,(function(e){return l.Guard.isExclusiveTextNode(e)}));null!==s;)i.push(s),s=h.tree_getNextDescendantNode(this,s,!1,!1,(function(e){return l.Guard.isExclusiveTextNode(e)}));for(var u=0;u<i.length;u++){var c=i[u];if(null!==c._parent){var p=h.tree_nodeLength(c);if(0!==p){var f=[],d="";try{for(var m=(e=void 0,o(h.text_contiguousExclusiveTextNodes(c))),y=m.next();!y.done;y=m.next()){var v=y.value;f.push(v),d+=v._data;}}catch(t){e={error:t};}finally{try{y&&!y.done&&(t=m.return)&&t.call(m);}finally{if(e)throw e.error}}if(h.characterData_replaceData(c,p,0,d),0!==a.dom.rangeList.size)for(var _=c._nextSibling;null!==_&&l.Guard.isExclusiveTextNode(_);){var g=_,b=h.tree_index(g);try{for(var x=(r=void 0,o(a.dom.rangeList)),w=x.next();!w.done;w=x.next()){var E=w.value;E._start[0]===g&&(E._start[0]=c,E._start[1]+=p),E._end[0]===g&&(E._end[0]=c,E._end[1]+=p),E._start[0]===g._parent&&E._start[1]===b&&(E._start[0]=c,E._start[1]=p),E._end[0]===g._parent&&E._end[1]===b&&(E._end[0]=c,E._end[1]=p);}}catch(e){r={error:e};}finally{try{w&&!w.done&&(n=x.return)&&n.call(x);}finally{if(r)throw r.error}}p+=h.tree_nodeLength(_),_=_._nextSibling;}for(var D=0;D<f.length;D++){null!==(v=f[D])._parent&&h.mutation_remove(v,v._parent);}}else h.mutation_remove(c,c._parent);}}},t.prototype.cloneNode=function(e){if(void 0===e&&(e=!1),l.Guard.isShadowRoot(this))throw new c.NotSupportedError;return h.node_clone(this,null,e)},t.prototype.isEqualNode=function(e){return void 0===e&&(e=null),null!==e&&h.node_equals(this,e)},t.prototype.isSameNode=function(e){return void 0===e&&(e=null),this===e},t.prototype.compareDocumentPosition=function(e){if(e===this)return 0;var t=e,r=this,n=null,i=null;if(l.Guard.isAttrNode(t)&&(t=(n=t)._element),l.Guard.isAttrNode(r)&&(r=(i=r)._element,n&&t&&t===r))for(var o=0;o<r._attributeList.length;o++){var u=r._attributeList[o];if(h.node_equals(u,n))return s.Position.ImplementationSpecific|s.Position.Preceding;if(h.node_equals(u,i))return s.Position.ImplementationSpecific|s.Position.Following}return null===t||null===r||h.tree_rootNode(t)!==h.tree_rootNode(r)?s.Position.Disconnected|s.Position.ImplementationSpecific|(a.dom.compareCache.check(this,e)?s.Position.Preceding:s.Position.Following):!n&&h.tree_isAncestorOf(r,t)||i&&t===r?s.Position.Contains|s.Position.Preceding:!i&&h.tree_isDescendantOf(r,t)||n&&t===r?s.Position.ContainedBy|s.Position.Following:h.tree_isPreceding(r,t)?s.Position.Preceding:s.Position.Following},t.prototype.contains=function(e){return null!==e&&h.tree_isDescendantOf(this,e,!0)},t.prototype.lookupPrefix=function(e){return e?l.Guard.isElementNode(this)?h.node_locateANamespacePrefix(this,e):l.Guard.isDocumentNode(this)?null===this.documentElement?null:h.node_locateANamespacePrefix(this.documentElement,e):l.Guard.isDocumentTypeNode(this)||l.Guard.isDocumentFragmentNode(this)?null:l.Guard.isAttrNode(this)?null===this._element?null:h.node_locateANamespacePrefix(this._element,e):null!==this._parent&&l.Guard.isElementNode(this._parent)?h.node_locateANamespacePrefix(this._parent,e):null:null},t.prototype.lookupNamespaceURI=function(e){return h.node_locateANamespace(this,e||null)},t.prototype.isDefaultNamespace=function(e){return e||(e=null),h.node_locateANamespace(this,null)===e},t.prototype.insertBefore=function(e,t){return h.mutation_preInsert(e,this,t)},t.prototype.appendChild=function(e){return h.mutation_append(e,this)},t.prototype.replaceChild=function(e,t){return h.mutation_replace(t,e,this)},t.prototype.removeChild=function(e){return h.mutation_preRemove(e,this)},t.prototype._getTheParent=function(e){return l.Guard.isSlotable(this)&&h.shadowTree_isAssigned(this)?this._assignedSlot:this._parent},t.ELEMENT_NODE=1,t.ATTRIBUTE_NODE=2,t.TEXT_NODE=3,t.CDATA_SECTION_NODE=4,t.ENTITY_REFERENCE_NODE=5,t.ENTITY_NODE=6,t.PROCESSING_INSTRUCTION_NODE=7,t.COMMENT_NODE=8,t.DOCUMENT_NODE=9,t.DOCUMENT_TYPE_NODE=10,t.DOCUMENT_FRAGMENT_NODE=11,t.NOTATION_NODE=12,t.DOCUMENT_POSITION_DISCONNECTED=1,t.DOCUMENT_POSITION_PRECEDING=2,t.DOCUMENT_POSITION_FOLLOWING=4,t.DOCUMENT_POSITION_CONTAINS=8,t.DOCUMENT_POSITION_CONTAINED_BY=16,t.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC=32,t}(u.EventTargetImpl);t.NodeImpl=d,d.prototype._children=new l.EmptySet,f.idl_defineConst(d.prototype,"ELEMENT_NODE",1),f.idl_defineConst(d.prototype,"ATTRIBUTE_NODE",2),f.idl_defineConst(d.prototype,"TEXT_NODE",3),f.idl_defineConst(d.prototype,"CDATA_SECTION_NODE",4),f.idl_defineConst(d.prototype,"ENTITY_REFERENCE_NODE",5),f.idl_defineConst(d.prototype,"ENTITY_NODE",6),f.idl_defineConst(d.prototype,"PROCESSING_INSTRUCTION_NODE",7),f.idl_defineConst(d.prototype,"COMMENT_NODE",8),f.idl_defineConst(d.prototype,"DOCUMENT_NODE",9),f.idl_defineConst(d.prototype,"DOCUMENT_TYPE_NODE",10),f.idl_defineConst(d.prototype,"DOCUMENT_FRAGMENT_NODE",11),f.idl_defineConst(d.prototype,"NOTATION_NODE",12),f.idl_defineConst(d.prototype,"DOCUMENT_POSITION_DISCONNECTED",1),f.idl_defineConst(d.prototype,"DOCUMENT_POSITION_PRECEDING",2),f.idl_defineConst(d.prototype,"DOCUMENT_POSITION_FOLLOWING",4),f.idl_defineConst(d.prototype,"DOCUMENT_POSITION_CONTAINS",8),f.idl_defineConst(d.prototype,"DOCUMENT_POSITION_CONTAINED_BY",16),f.idl_defineConst(d.prototype,"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",32);},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e};},function(e,t,r){var n=r(87),i=r(41),o=r(27),a=r(26),s=r(128),u=[].push,l=function(e){var t=1==e,r=2==e,l=3==e,c=4==e,h=6==e,p=5==e||h;return function(f,d,m,y){for(var v,_,g=o(f),b=i(g),x=n(d,m,3),w=a(b.length),E=0,D=y||s,S=t?D(f,w):r?D(f,0):void 0;w>E;E++)if((p||E in b)&&(_=x(v=b[E],E,g),e))if(t)S[E]=_;else if(_)switch(e){case 3:return !0;case 5:return v;case 6:return E;case 2:u.call(S,v);}else if(c)return !1;return h?-1:l||c?c:S}};e.exports={forEach:l(0),map:l(1),filter:l(2),some:l(3),every:l(4),find:l(5),findIndex:l(6)};},function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},i=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value);}catch(e){i={error:e};}finally{try{n&&!n.done&&(r=o.return)&&r.call(o);}finally{if(i)throw i.error}}return a},o=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(i(arguments[t]));return e};Object.defineProperty(t,"__esModule",{value:!0});var a=r(6),s=r(9),u=r(2),l=r(3),c=r(1),h=r(7),p=r(73),f=r(17),d=r(172),m=r(72),y=r(51),v=r(30),_=r(106);function g(e,t,r){var i,o,a,l,c,h,p,d,m=t._nodeType,y=e._nodeType,v=r?r._nodeType:null;if(m!==u.NodeType.Document&&m!==u.NodeType.DocumentFragment&&m!==u.NodeType.Element)throw new s.HierarchyRequestError("Only document, document fragment and element nodes can contain child nodes. Parent node is "+t.nodeName+".");if(f.tree_isHostIncludingAncestorOf(t,e,!0))throw new s.HierarchyRequestError("The node to be inserted cannot be an inclusive ancestor of parent node. Node is "+e.nodeName+", parent node is "+t.nodeName+".");if(null!==r&&r._parent!==t)throw new s.NotFoundError("The reference child node cannot be found under parent node. Child node is "+r.nodeName+", parent node is "+t.nodeName+".");if(y!==u.NodeType.DocumentFragment&&y!==u.NodeType.DocumentType&&y!==u.NodeType.Element&&y!==u.NodeType.Text&&y!==u.NodeType.ProcessingInstruction&&y!==u.NodeType.CData&&y!==u.NodeType.Comment)throw new s.HierarchyRequestError("Only document fragment, document type, element, text, processing instruction, cdata section or comment nodes can be inserted. Node is "+e.nodeName+".");if(y===u.NodeType.Text&&m===u.NodeType.Document)throw new s.HierarchyRequestError("Cannot insert a text node as a child of a document node. Node is "+e.nodeName+".");if(y===u.NodeType.DocumentType&&m!==u.NodeType.Document)throw new s.HierarchyRequestError("A document type node can only be inserted under a document node. Parent node is "+t.nodeName+".");if(m===u.NodeType.Document)if(y===u.NodeType.DocumentFragment){var _=0;try{for(var g=n(e._children),b=g.next();!b.done;b=g.next()){var x=b.value;if(x._nodeType===u.NodeType.Element)_++;else if(x._nodeType===u.NodeType.Text)throw new s.HierarchyRequestError("Cannot insert text a node as a child of a document node. Node is "+x.nodeName+".")}}catch(e){i={error:e};}finally{try{b&&!b.done&&(o=g.return)&&o.call(g);}finally{if(i)throw i.error}}if(_>1)throw new s.HierarchyRequestError("A document node can only have one document element node. Document fragment to be inserted has "+_+" element nodes.");if(1===_){try{for(var w=n(t._children),E=w.next();!E.done;E=w.next()){if(E.value._nodeType===u.NodeType.Element)throw new s.HierarchyRequestError("The document node already has a document element node.")}}catch(e){a={error:e};}finally{try{E&&!E.done&&(l=w.return)&&l.call(w);}finally{if(a)throw a.error}}if(r){if(v===u.NodeType.DocumentType)throw new s.HierarchyRequestError("Cannot insert an element node before a document type node.");for(var D=r._nextSibling;D;){if(D._nodeType===u.NodeType.DocumentType)throw new s.HierarchyRequestError("Cannot insert an element node before a document type node.");D=D._nextSibling;}}}}else if(y===u.NodeType.Element){try{for(var S=n(t._children),C=S.next();!C.done;C=S.next()){if(C.value._nodeType===u.NodeType.Element)throw new s.HierarchyRequestError("Document already has a document element node. Node is "+e.nodeName+".")}}catch(e){c={error:e};}finally{try{C&&!C.done&&(h=S.return)&&h.call(S);}finally{if(c)throw c.error}}if(r){if(v===u.NodeType.DocumentType)throw new s.HierarchyRequestError("Cannot insert an element node before a document type node. Node is "+e.nodeName+".");for(D=r._nextSibling;D;){if(D._nodeType===u.NodeType.DocumentType)throw new s.HierarchyRequestError("Cannot insert an element node before a document type node. Node is "+e.nodeName+".");D=D._nextSibling;}}}else if(y===u.NodeType.DocumentType){try{for(var A=n(t._children),N=A.next();!N.done;N=A.next()){if(N.value._nodeType===u.NodeType.DocumentType)throw new s.HierarchyRequestError("Document already has a document type node. Node is "+e.nodeName+".")}}catch(e){p={error:e};}finally{try{N&&!N.done&&(d=A.return)&&d.call(A);}finally{if(p)throw p.error}}if(r)for(var T=r._previousSibling;T;){if(T._nodeType===u.NodeType.Element)throw new s.HierarchyRequestError("Cannot insert a document type node before an element node. Node is "+e.nodeName+".");T=T._previousSibling;}else for(T=t._firstChild;T;){if(T._nodeType===u.NodeType.Element)throw new s.HierarchyRequestError("Cannot insert a document type node before an element node. Node is "+e.nodeName+".");T=T._nextSibling;}}}function b(e,t,r){g(e,t,r);var n=r;return n===e&&(n=e._nextSibling),_.document_adopt(e,t._nodeDocument),x(e,t,n),e}function x(e,t,r,i){var s,d;if(null!==r||e._nodeType===u.NodeType.DocumentFragment){var _=e._nodeType===u.NodeType.DocumentFragment?e._children.size:1;if(null!==r&&0!==a.dom.rangeList.size){var g=f.tree_index(r);try{for(var b=n(a.dom.rangeList),x=b.next();!x.done;x=b.next()){var E=x.value;E._start[0]===t&&E._start[1]>g&&(E._start[1]+=_),E._end[0]===t&&E._end[1]>g&&(E._end[1]+=_);}}catch(e){s={error:e};}finally{try{x&&!x.done&&(d=b.return)&&d.call(b);}finally{if(s)throw s.error}}}var D=e._nodeType===u.NodeType.DocumentFragment?new(Array.bind.apply(Array,o([void 0],e._children))):[e];if(e._nodeType===u.NodeType.DocumentFragment)for(;e._firstChild;)w(e._firstChild,e,!0);a.dom.features.mutationObservers&&e._nodeType===u.NodeType.DocumentFragment&&y.observer_queueTreeMutationRecord(e,[],D,null,null);for(var S=r?r._previousSibling:t._lastChild,C=null===r?-1:f.tree_index(r),A=0;A<D.length;A++){var N=D[A];if(l.Guard.isElementNode(N)&&(l.Guard.isDocumentNode(t)&&(t._documentElement=N),N._nodeDocument._hasNamespaces||null===N._namespace&&null===N._namespacePrefix||(N._nodeDocument._hasNamespaces=!0)),N._parent=t,null===r?h.set.append(t._children,N):(h.set.insert(t._children,N,C),C++),null===t._firstChild)N._previousSibling=null,N._nextSibling=null,t._firstChild=N,t._lastChild=N;else {var T=r?r._previousSibling:t._lastChild,O=r||null;N._previousSibling=T,N._nextSibling=O,T&&(T._nextSibling=N),O&&(O._previousSibling=N),T||(t._firstChild=N),O||(t._lastChild=N);}a.dom.features.slots&&null!==t._shadowRoot&&l.Guard.isSlotable(N)&&m.shadowTree_assignASlot(N),a.dom.features.steps&&l.Guard.isTextNode(N)&&v.dom_runChildTextContentChangeSteps(t),a.dom.features.slots&&l.Guard.isShadowRoot(f.tree_rootNode(t))&&l.Guard.isSlot(t)&&c.isEmpty(t._assignedNodes)&&m.shadowTree_signalASlotChange(t),a.dom.features.slots&&m.shadowTree_assignSlotablesForATree(f.tree_rootNode(N));for(var F=f.tree_getFirstDescendantNode(N,!0,!0);null!==F;)a.dom.features.steps&&v.dom_runInsertionSteps(F),a.dom.features.customElements&&l.Guard.isElementNode(F)&&m.shadowTree_isConnected(F)&&(l.Guard.isCustomElementNode(F)?p.customElement_enqueueACustomElementCallbackReaction(F,"connectedCallback",[]):p.customElement_tryToUpgrade(F)),F=f.tree_getNextDescendantNode(N,F,!0,!0);}a.dom.features.mutationObservers&&(i||y.observer_queueTreeMutationRecord(t,D,[],S,r));}else !function(e,t,r){var n=t._lastChild;l.Guard.isElementNode(e)&&(l.Guard.isDocumentNode(t)&&(t._documentElement=e),e._nodeDocument._hasNamespaces||null===e._namespace&&null===e._namespacePrefix||(e._nodeDocument._hasNamespaces=!0));if(e._parent=t,t._children.add(e),null===t._firstChild)e._previousSibling=null,e._nextSibling=null,t._firstChild=e,t._lastChild=e;else {var i=t._lastChild;e._previousSibling=i,e._nextSibling=null,i&&(i._nextSibling=e),i||(t._firstChild=e),t._lastChild=e;}a.dom.features.slots&&null!==t._shadowRoot&&l.Guard.isSlotable(e)&&m.shadowTree_assignASlot(e);a.dom.features.steps&&l.Guard.isTextNode(e)&&v.dom_runChildTextContentChangeSteps(t);a.dom.features.slots&&l.Guard.isShadowRoot(f.tree_rootNode(t))&&l.Guard.isSlot(t)&&c.isEmpty(t._assignedNodes)&&m.shadowTree_signalASlotChange(t);a.dom.features.slots&&m.shadowTree_assignSlotablesForATree(f.tree_rootNode(e));a.dom.features.steps&&v.dom_runInsertionSteps(e);a.dom.features.customElements&&l.Guard.isElementNode(e)&&m.shadowTree_isConnected(e)&&(l.Guard.isCustomElementNode(e)?p.customElement_enqueueACustomElementCallbackReaction(e,"connectedCallback",[]):p.customElement_tryToUpgrade(e));a.dom.features.mutationObservers&&(r||y.observer_queueTreeMutationRecord(t,[e],[],n,null));}(e,t,i);}function w(e,t,r){var i,o,s,u,h,_,g,b;if(0!==a.dom.rangeList.size){var x=f.tree_index(e);try{for(var w=n(a.dom.rangeList),E=w.next();!E.done;E=w.next()){var D=E.value;f.tree_isDescendantOf(e,D._start[0],!0)&&(D._start=[t,x]),f.tree_isDescendantOf(e,D._end[0],!0)&&(D._end=[t,x]),D._start[0]===t&&D._start[1]>x&&D._start[1]--,D._end[0]===t&&D._end[1]>x&&D._end[1]--;}}catch(e){i={error:e};}finally{try{E&&!E.done&&(o=w.return)&&o.call(w);}finally{if(i)throw i.error}}try{for(var S=n(a.dom.rangeList),C=S.next();!C.done;C=S.next()){(D=C.value)._start[0]===t&&D._start[1]>x&&(D._start[1]-=1),D._end[0]===t&&D._end[1]>x&&(D._end[1]-=1);}}catch(e){s={error:e};}finally{try{C&&!C.done&&(u=S.return)&&u.call(S);}finally{if(s)throw s.error}}}if(a.dom.features.steps)try{for(var A=n(d.nodeIterator_iteratorList()),N=A.next();!N.done;N=A.next()){var T=N.value;T._root._nodeDocument===e._nodeDocument&&v.dom_runNodeIteratorPreRemovingSteps(T,e);}}catch(e){h={error:e};}finally{try{N&&!N.done&&(_=A.return)&&_.call(A);}finally{if(h)throw h.error}}var O=e._previousSibling,F=e._nextSibling;l.Guard.isDocumentNode(t)&&l.Guard.isElementNode(e)&&(t._documentElement=null),e._parent=null,t._children.delete(e);var k=e._previousSibling,P=e._nextSibling;(e._previousSibling=null,e._nextSibling=null,k&&(k._nextSibling=P),P&&(P._previousSibling=k),k||(t._firstChild=P),P||(t._lastChild=k),a.dom.features.slots&&l.Guard.isSlotable(e)&&null!==e._assignedSlot&&m.shadowTree_isAssigned(e)&&m.shadowTree_assignSlotables(e._assignedSlot),a.dom.features.slots&&l.Guard.isShadowRoot(f.tree_rootNode(t))&&l.Guard.isSlot(t)&&c.isEmpty(t._assignedNodes)&&m.shadowTree_signalASlotChange(t),a.dom.features.slots)&&(null!==f.tree_getFirstDescendantNode(e,!0,!1,(function(e){return l.Guard.isSlot(e)}))&&(m.shadowTree_assignSlotablesForATree(f.tree_rootNode(t)),m.shadowTree_assignSlotablesForATree(e)));a.dom.features.steps&&v.dom_runRemovingSteps(e,t),a.dom.features.customElements&&l.Guard.isCustomElementNode(e)&&p.customElement_enqueueACustomElementCallbackReaction(e,"disconnectedCallback",[]);for(var I=f.tree_getFirstDescendantNode(e,!1,!0);null!==I;)a.dom.features.steps&&v.dom_runRemovingSteps(I,e),a.dom.features.customElements&&l.Guard.isCustomElementNode(I)&&p.customElement_enqueueACustomElementCallbackReaction(I,"disconnectedCallback",[]),I=f.tree_getNextDescendantNode(e,I,!1,!0);if(a.dom.features.mutationObservers)for(var L=f.tree_getFirstAncestorNode(t,!0);null!==L;){try{for(var M=(g=void 0,n(L._registeredObserverList)),B=M.next();!B.done;B=M.next()){var j=B.value;j.options.subtree&&e._registeredObserverList.push({observer:j.observer,options:j.options,source:j});}}catch(e){g={error:e};}finally{try{B&&!B.done&&(b=M.return)&&b.call(M);}finally{if(g)throw g.error}}L=f.tree_getNextAncestorNode(t,L,!0);}a.dom.features.mutationObservers&&(r||y.observer_queueTreeMutationRecord(t,[],[e],O,F)),a.dom.features.steps&&l.Guard.isTextNode(e)&&v.dom_runChildTextContentChangeSteps(t);}t.mutation_ensurePreInsertionValidity=g,t.mutation_preInsert=b,t.mutation_insert=x,t.mutation_append=function(e,t){return b(e,t,null)},t.mutation_replace=function(e,t,r){var i,o,l,c,h,p,d,m;if(r._nodeType!==u.NodeType.Document&&r._nodeType!==u.NodeType.DocumentFragment&&r._nodeType!==u.NodeType.Element)throw new s.HierarchyRequestError("Only document, document fragment and element nodes can contain child nodes. Parent node is "+r.nodeName+".");if(f.tree_isHostIncludingAncestorOf(r,t,!0))throw new s.HierarchyRequestError("The node to be inserted cannot be an ancestor of parent node. Node is "+t.nodeName+", parent node is "+r.nodeName+".");if(e._parent!==r)throw new s.NotFoundError("The reference child node cannot be found under parent node. Child node is "+e.nodeName+", parent node is "+r.nodeName+".");if(t._nodeType!==u.NodeType.DocumentFragment&&t._nodeType!==u.NodeType.DocumentType&&t._nodeType!==u.NodeType.Element&&t._nodeType!==u.NodeType.Text&&t._nodeType!==u.NodeType.ProcessingInstruction&&t._nodeType!==u.NodeType.CData&&t._nodeType!==u.NodeType.Comment)throw new s.HierarchyRequestError("Only document fragment, document type, element, text, processing instruction, cdata section or comment nodes can be inserted. Node is "+t.nodeName+".");if(t._nodeType===u.NodeType.Text&&r._nodeType===u.NodeType.Document)throw new s.HierarchyRequestError("Cannot insert a text node as a child of a document node. Node is "+t.nodeName+".");if(t._nodeType===u.NodeType.DocumentType&&r._nodeType!==u.NodeType.Document)throw new s.HierarchyRequestError("A document type node can only be inserted under a document node. Parent node is "+r.nodeName+".");if(r._nodeType===u.NodeType.Document)if(t._nodeType===u.NodeType.DocumentFragment){var v=0;try{for(var g=n(t._children),b=g.next();!b.done;b=g.next()){var E=b.value;if(E._nodeType===u.NodeType.Element)v++;else if(E._nodeType===u.NodeType.Text)throw new s.HierarchyRequestError("Cannot insert text a node as a child of a document node. Node is "+E.nodeName+".")}}catch(e){i={error:e};}finally{try{b&&!b.done&&(o=g.return)&&o.call(g);}finally{if(i)throw i.error}}if(v>1)throw new s.HierarchyRequestError("A document node can only have one document element node. Document fragment to be inserted has "+v+" element nodes.");if(1===v){try{for(var D=n(r._children),S=D.next();!S.done;S=D.next()){if((F=S.value)._nodeType===u.NodeType.Element&&F!==e)throw new s.HierarchyRequestError("The document node already has a document element node.")}}catch(e){l={error:e};}finally{try{S&&!S.done&&(c=D.return)&&c.call(D);}finally{if(l)throw l.error}}for(var C=e._nextSibling;C;){if(C._nodeType===u.NodeType.DocumentType)throw new s.HierarchyRequestError("Cannot insert an element node before a document type node.");C=C._nextSibling;}}}else if(t._nodeType===u.NodeType.Element){try{for(var A=n(r._children),N=A.next();!N.done;N=A.next()){if((F=N.value)._nodeType===u.NodeType.Element&&F!==e)throw new s.HierarchyRequestError("Document already has a document element node. Node is "+t.nodeName+".")}}catch(e){h={error:e};}finally{try{N&&!N.done&&(p=A.return)&&p.call(A);}finally{if(h)throw h.error}}for(C=e._nextSibling;C;){if(C._nodeType===u.NodeType.DocumentType)throw new s.HierarchyRequestError("Cannot insert an element node before a document type node. Node is "+t.nodeName+".");C=C._nextSibling;}}else if(t._nodeType===u.NodeType.DocumentType){try{for(var T=n(r._children),O=T.next();!O.done;O=T.next()){var F;if((F=O.value)._nodeType===u.NodeType.DocumentType&&F!==e)throw new s.HierarchyRequestError("Document already has a document type node. Node is "+t.nodeName+".")}}catch(e){d={error:e};}finally{try{O&&!O.done&&(m=T.return)&&m.call(T);}finally{if(d)throw d.error}}for(var k=e._previousSibling;k;){if(k._nodeType===u.NodeType.Element)throw new s.HierarchyRequestError("Cannot insert a document type node before an element node. Node is "+t.nodeName+".");k=k._previousSibling;}}var P=e._nextSibling;P===t&&(P=t._nextSibling);var I=e._previousSibling;_.document_adopt(t,r._nodeDocument);var L=[];null!==e._parent&&(L.push(e),w(e,e._parent,!0));var M=[];return t._nodeType===u.NodeType.DocumentFragment?M=Array.from(t._children):M.push(t),x(t,r,P,!0),a.dom.features.mutationObservers&&y.observer_queueTreeMutationRecord(r,M,L,I,P),e},t.mutation_replaceAll=function(e,t){var r,i;null!==e&&_.document_adopt(e,t._nodeDocument);var o=Array.from(t._children),s=[];e&&e._nodeType===u.NodeType.DocumentFragment?s=Array.from(e._children):null!==e&&s.push(e);try{for(var l=n(o),c=l.next();!c.done;c=l.next()){w(c.value,t,!0);}}catch(e){r={error:e};}finally{try{c&&!c.done&&(i=l.return)&&i.call(l);}finally{if(r)throw r.error}}null!==e&&x(e,t,null,!0),a.dom.features.mutationObservers&&y.observer_queueTreeMutationRecord(t,s,o,null,null);},t.mutation_preRemove=function(e,t){if(e._parent!==t)throw new s.NotFoundError("The child node cannot be found under parent node. Child node is "+e.nodeName+", parent node is "+t.nodeName+".");return w(e,t),e},t.mutation_remove=w;},function(e,t,r){function n(e){return null==e}e.exports.isNothing=n,e.exports.isObject=function(e){return "object"==typeof e&&null!==e},e.exports.toArray=function(e){return Array.isArray(e)?e:n(e)?[]:[e]},e.exports.repeat=function(e,t){var r,n="";for(r=0;r<t;r+=1)n+=e;return n},e.exports.isNegativeZero=function(e){return 0===e&&Number.NEGATIVE_INFINITY===1/e},e.exports.extend=function(e,t){var r,n,i,o;if(t)for(r=0,n=(o=Object.keys(t)).length;r<n;r+=1)e[i=o[r]]=t[i];return e};},function(e,t,r){var n=r(38),i=r(53),o=r(10);function a(e,t,r){var n=[];return e.include.forEach((function(e){r=a(e,t,r);})),e[t].forEach((function(e){r.forEach((function(t,r){t.tag===e.tag&&t.kind===e.kind&&n.push(r);})),r.push(e);})),r.filter((function(e,t){return -1===n.indexOf(t)}))}function s(e){this.include=e.include||[],this.implicit=e.implicit||[],this.explicit=e.explicit||[],this.implicit.forEach((function(e){if(e.loadKind&&"scalar"!==e.loadKind)throw new i("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.")})),this.compiledImplicit=a(this,"implicit",[]),this.compiledExplicit=a(this,"explicit",[]),this.compiledTypeMap=function(){var e,t,r={scalar:{},sequence:{},mapping:{},fallback:{}};function n(e){r[e.kind][e.tag]=r.fallback[e.tag]=e;}for(e=0,t=arguments.length;e<t;e+=1)arguments[e].forEach(n);return r}(this.compiledImplicit,this.compiledExplicit);}s.DEFAULT=null,s.create=function(){var e,t;switch(arguments.length){case 1:e=s.DEFAULT,t=arguments[0];break;case 2:e=arguments[0],t=arguments[1];break;default:throw new i("Wrong number of arguments for Schema.create function")}if(e=n.toArray(e),t=n.toArray(t),!e.every((function(e){return e instanceof s})))throw new i("Specified list of super schemas (or a single Schema object) contains a non-Schema object.");if(!t.every((function(e){return e instanceof o})))throw new i("Specified list of YAML types (or a single Type object) contains a non-Type object.");return new s({include:e,explicit:t})},e.exports=s;},function(e,t){e.exports=function(e,t){return {enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}};},function(e,t,r){var n=r(8),i=r(42),o="".split;e.exports=n((function(){return !Object("z").propertyIsEnumerable(0)}))?function(e){return "String"==i(e)?o.call(e,""):Object(e)}:Object;},function(e,t){var r={}.toString;e.exports=function(e){return r.call(e).slice(8,-1)};},function(e,t,r){var n,i,o,a=r(186),s=r(11),u=r(13),l=r(21),c=r(14),h=r(57),p=r(45),f=s.WeakMap;if(a){var d=new f,m=d.get,y=d.has,v=d.set;n=function(e,t){return v.call(d,e,t),t},i=function(e){return m.call(d,e)||{}},o=function(e){return y.call(d,e)};}else {var _=h("state");p[_]=!0,n=function(e,t){return l(e,_,t),t},i=function(e){return c(e,_)?e[_]:{}},o=function(e){return c(e,_)};}e.exports={set:n,get:i,has:o,enforce:function(e){return o(e)?i(e):n(e,{})},getterFor:function(e){return function(t){var r;if(!u(t)||(r=i(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return r}}};},function(e,t){e.exports=!1;},function(e,t){e.exports={};},function(e,t,r){var n=r(120),i=r(11),o=function(e){return "function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?o(n[e])||o(i[e]):n[e]&&n[e][t]||i[e]&&i[e][t]};},function(e,t){var r=Math.ceil,n=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?n:r)(e)};},function(e,t,r){var n=r(8);e.exports=function(e,t){var r=[][e];return !!r&&n((function(){r.call(null,t||function(){throw 1},1);}))};},function(e,t){e.exports={};},function(e,t,r){r(31),r(32),r(33),r(220),r(64),r(19),r(65),r(20),r(68),r(66),r(92),r(144),r(22),r(94),r(23);var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},i=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value);}catch(e){i={error:e};}finally{try{n&&!n.done&&(r=o.return)&&r.call(o);}finally{if(i)throw i.error}}return a},o=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(i(arguments[t]));return e};Object.defineProperty(t,"__esModule",{value:!0});var a=r(2),s=r(69),u=r(95),l=r(7),c=r(0),h=function(){function e(e){this.level=0,this._builderOptions=e;}return e.prototype.declaration=function(e,t,r){},e.prototype.docType=function(e,t,r){},e.prototype.comment=function(e){},e.prototype.text=function(e){},e.prototype.instruction=function(e,t){},e.prototype.cdata=function(e){},e.prototype.openTagBegin=function(e){},e.prototype.openTagEnd=function(e,t,r){},e.prototype.closeTag=function(e){},e.prototype.attributes=function(e){var t,r;try{for(var i=n(e),o=i.next();!o.done;o=i.next()){var a=o.value;this.attribute(null===a[1]?a[2]:a[1]+":"+a[2],a[3]);}}catch(e){t={error:e};}finally{try{o&&!o.done&&(r=i.return)&&r.call(i);}finally{if(t)throw t.error}}},e.prototype.attribute=function(e,t){},e.prototype.beginElement=function(e){},e.prototype.endElement=function(e){},e.prototype.serializeNode=function(e,t){var r=void 0!==e._nodeDocument&&e._nodeDocument._hasNamespaces;if(this.level=0,this.currentNode=e,r){var n=new u.NamespacePrefixMap;n.set("xml",l.namespace.XML);this._serializeNodeNS(e,null,n,{value:1},t);}else this._serializeNode(e,t);},e.prototype._serializeNodeNS=function(e,t,r,n,i){switch(this.currentNode=e,e.nodeType){case a.NodeType.Element:this._serializeElementNS(e,t,r,n,i);break;case a.NodeType.Document:this._serializeDocumentNS(e,t,r,n,i);break;case a.NodeType.Comment:this._serializeComment(e,i);break;case a.NodeType.Text:this._serializeText(e,i);break;case a.NodeType.DocumentFragment:this._serializeDocumentFragmentNS(e,t,r,n,i);break;case a.NodeType.DocumentType:this._serializeDocumentType(e,i);break;case a.NodeType.ProcessingInstruction:this._serializeProcessingInstruction(e,i);break;case a.NodeType.CData:this._serializeCData(e,i);break;default:throw new Error("Unknown node type: "+e.nodeType)}},e.prototype._serializeNode=function(e,t){switch(this.currentNode=e,e.nodeType){case a.NodeType.Element:this._serializeElement(e,t);break;case a.NodeType.Document:this._serializeDocument(e,t);break;case a.NodeType.Comment:this._serializeComment(e,t);break;case a.NodeType.Text:this._serializeText(e,t);break;case a.NodeType.DocumentFragment:this._serializeDocumentFragment(e,t);break;case a.NodeType.DocumentType:this._serializeDocumentType(e,t);break;case a.NodeType.ProcessingInstruction:this._serializeProcessingInstruction(e,t);break;case a.NodeType.CData:this._serializeCData(e,t);break;default:throw new Error("Unknown node type: "+e.nodeType)}},e.prototype._serializeElementNS=function(t,r,i,a,s){var u,h,p=[];if(s&&(-1!==t.localName.indexOf(":")||!c.xml_isName(t.localName)))throw new Error("Node local name contains invalid characters (well-formed required).");var f="",d=!1,m=!1,y=i.copy(),v={},_=this._recordNamespaceInformation(t,y,v),g=r,b=t.namespaceURI;if(g===b)null!==_&&(m=!0),f=b===l.namespace.XML?"xml:"+t.localName:t.localName,this.beginElement(f),this.openTagBegin(f);else {var x=t.prefix,w=null;if(null===x&&b===_||(w=y.get(x,b)),"xmlns"===x){if(s)throw new Error("An element cannot have the 'xmlns' prefix (well-formed required).");w=x;}null!==w?(f=w+":"+t.localName,null!==_&&_!==l.namespace.XML&&(g=_||null),this.beginElement(f),this.openTagBegin(f)):null!==x?(x in v&&(x=this._generatePrefix(b,y,a)),y.set(x,b),f+=x+":"+t.localName,this.beginElement(f),this.openTagBegin(f),p.push([null,"xmlns",x,this._serializeAttributeValue(b,s)]),null!==_&&(g=_||null)):null===_||null!==_&&_!==b?(m=!0,f+=t.localName,g=b,this.beginElement(f),this.openTagBegin(f),p.push([null,null,"xmlns",this._serializeAttributeValue(b,s)])):(f+=t.localName,g=b,this.beginElement(f),this.openTagBegin(f));}p.push.apply(p,o(this._serializeAttributesNS(t,y,a,v,m,s))),this.attributes(p);var E=b===l.namespace.HTML;if(E&&0===t.childNodes.length&&e._VoidElementNames.has(t.localName)?(this.openTagEnd(f,!0,!0),this.endElement(f),d=!0):E||0!==t.childNodes.length?this.openTagEnd(f,!1,!1):(this.openTagEnd(f,!0,!1),this.endElement(f),d=!0),!d){if(E&&"template"===t.localName);else try{for(var D=n(t.childNodes),S=D.next();!S.done;S=D.next()){var C=S.value;this.level++,this._serializeNodeNS(C,g,y,a,s),this.level--;}}catch(e){u={error:e};}finally{try{S&&!S.done&&(h=D.return)&&h.call(D);}finally{if(u)throw u.error}}this.closeTag(f),this.endElement(f);}},e.prototype._serializeElement=function(e,t){var r,i;if(t&&(-1!==e.localName.indexOf(":")||!c.xml_isName(e.localName)))throw new Error("Node local name contains invalid characters (well-formed required).");var o=!1,a=e.localName;this.beginElement(a),this.openTagBegin(a);var s=this._serializeAttributes(e,t);if(this.attributes(s),e.hasChildNodes()?this.openTagEnd(a,!1,!1):(this.openTagEnd(a,!0,!1),this.endElement(a),o=!0),!o){try{for(var u=n(e._children),l=u.next();!l.done;l=u.next()){var h=l.value;this.level++,this._serializeNode(h,t),this.level--;}}catch(e){r={error:e};}finally{try{l&&!l.done&&(i=u.return)&&i.call(u);}finally{if(r)throw r.error}}this.closeTag(a),this.endElement(a);}},e.prototype._serializeDocumentNS=function(e,t,r,i,o){var a,s;if(o&&null===e.documentElement)throw new Error("Missing document element (well-formed required).");try{for(var u=n(e.childNodes),l=u.next();!l.done;l=u.next()){var c=l.value;this._serializeNodeNS(c,t,r,i,o);}}catch(e){a={error:e};}finally{try{l&&!l.done&&(s=u.return)&&s.call(u);}finally{if(a)throw a.error}}},e.prototype._serializeDocument=function(e,t){var r,i;if(t&&null===e.documentElement)throw new Error("Missing document element (well-formed required).");try{for(var o=n(e._children),a=o.next();!a.done;a=o.next()){var s=a.value;this._serializeNode(s,t);}}catch(e){r={error:e};}finally{try{a&&!a.done&&(i=o.return)&&i.call(o);}finally{if(r)throw r.error}}},e.prototype._serializeComment=function(e,t){if(t&&(!c.xml_isLegalChar(e.data)||-1!==e.data.indexOf("--")||e.data.endsWith("-")))throw new Error("Comment data contains invalid characters (well-formed required).");this.comment(e.data);},e.prototype._serializeText=function(e,t){if(t&&!c.xml_isLegalChar(e.data))throw new Error("Text data contains invalid characters (well-formed required).");var r=e.data.replace(/(?!&([^&;]*);)&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;");this.text(r);},e.prototype._serializeDocumentFragmentNS=function(e,t,r,i,o){var a,s;try{for(var u=n(e.childNodes),l=u.next();!l.done;l=u.next()){var c=l.value;this._serializeNodeNS(c,t,r,i,o);}}catch(e){a={error:e};}finally{try{l&&!l.done&&(s=u.return)&&s.call(u);}finally{if(a)throw a.error}}},e.prototype._serializeDocumentFragment=function(e,t){var r,i;try{for(var o=n(e._children),a=o.next();!a.done;a=o.next()){var s=a.value;this._serializeNode(s,t);}}catch(e){r={error:e};}finally{try{a&&!a.done&&(i=o.return)&&i.call(o);}finally{if(r)throw r.error}}},e.prototype._serializeDocumentType=function(e,t){if(t&&!c.xml_isPubidChar(e.publicId))throw new Error("DocType public identifier does not match PubidChar construct (well-formed required).");if(t&&(!c.xml_isLegalChar(e.systemId)||-1!==e.systemId.indexOf('"')&&-1!==e.systemId.indexOf("'")))throw new Error("DocType system identifier contains invalid characters (well-formed required).");this.docType(e.name,e.publicId,e.systemId);},e.prototype._serializeProcessingInstruction=function(e,t){if(t&&(-1!==e.target.indexOf(":")||/^xml$/i.test(e.target)))throw new Error("Processing instruction target contains invalid characters (well-formed required).");if(t&&(!c.xml_isLegalChar(e.data)||-1!==e.data.indexOf("?>")))throw new Error("Processing instruction data contains invalid characters (well-formed required).");this.instruction(e.target,e.data);},e.prototype._serializeCData=function(e,t){if(t&&-1!==e.data.indexOf("]]>"))throw new Error("CDATA contains invalid characters (well-formed required).");this.cdata(e.data);},e.prototype._serializeAttributesNS=function(e,t,r,i,o,a){var u,h,p=[],f=a?new s.LocalNameSet:void 0;try{for(var d=n(e.attributes),m=d.next();!m.done;m=d.next()){var y=m.value;if(a||o||null!==y.namespaceURI){if(a&&f&&f.has(y.namespaceURI,y.localName))throw new Error("Element contains duplicate attributes (well-formed required).");a&&f&&f.set(y.namespaceURI,y.localName);var v=y.namespaceURI,_=null;if(null!==v)if(_=t.get(y.prefix,v),v===l.namespace.XMLNS){if(y.value===l.namespace.XML||null===y.prefix&&o||null!==y.prefix&&(!(y.localName in i)||i[y.localName]!==y.value)&&t.has(y.localName,y.value))continue;if(a&&y.value===l.namespace.XMLNS)throw new Error("XMLNS namespace is reserved (well-formed required).");if(a&&""===y.value)throw new Error("Namespace prefix declarations cannot be used to undeclare a namespace (well-formed required).");"xmlns"===y.prefix&&(_="xmlns");}else null===_&&(_=null===y.prefix||t.hasPrefix(y.prefix)&&!t.has(y.prefix,v)?this._generatePrefix(v,t,r):y.prefix,p.push([null,"xmlns",_,this._serializeAttributeValue(v,a)]));if(null!==_&&_,a&&(-1!==y.localName.indexOf(":")||!c.xml_isName(y.localName)||"xmlns"===y.localName&&null===v))throw new Error("Attribute local name contains invalid characters (well-formed required).");p.push([v,_,y.localName,this._serializeAttributeValue(y.value,a)]);}else p.push([null,null,y.localName,this._serializeAttributeValue(y.value,a)]);}}catch(e){u={error:e};}finally{try{m&&!m.done&&(h=d.return)&&h.call(d);}finally{if(u)throw u.error}}return p},e.prototype._serializeAttributes=function(e,t){var r,i,o=[],a=t?{}:void 0;try{for(var s=n(e.attributes),u=s.next();!u.done;u=s.next()){var l=u.value;if(t){if(t&&a&&l.localName in a)throw new Error("Element contains duplicate attributes (well-formed required).");if(t&&a&&(a[l.localName]=!0),t&&(-1!==l.localName.indexOf(":")||!c.xml_isName(l.localName)))throw new Error("Attribute local name contains invalid characters (well-formed required).");o.push([null,null,l.localName,this._serializeAttributeValue(l.value,t)]);}else o.push([null,null,l.localName,this._serializeAttributeValue(l.value,t)]);}}catch(e){r={error:e};}finally{try{u&&!u.done&&(i=s.return)&&i.call(s);}finally{if(r)throw r.error}}return o},e.prototype._recordNamespaceInformation=function(e,t,r){var i,o,a=null;try{for(var s=n(e.attributes),u=s.next();!u.done;u=s.next()){var c=u.value,h=c.namespaceURI,p=c.prefix;if(h===l.namespace.XMLNS){if(null===p){a=c.value;continue}var f=c.localName,d=c.value;if(d===l.namespace.XML)continue;if(""===d&&(d=null),t.has(f,d))continue;t.set(f,d),r[f]=d||"";}}}catch(e){i={error:e};}finally{try{u&&!u.done&&(o=s.return)&&o.call(s);}finally{if(i)throw i.error}}return a},e.prototype._generatePrefix=function(e,t,r){var n="ns"+r.value.toString();return r.value++,t.set(n,e),n},e.prototype._serializeAttributeValue=function(e,t){if(t&&null!==e&&!c.xml_isLegalChar(e))throw new Error("Invalid characters in attribute value.");return null===e?"":e.replace(/(?!&([^&;]*);)&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;")},e._VoidElementNames=new Set(["area","base","basefont","bgsound","br","col","embed","frame","hr","img","input","keygen","link","menuitem","meta","param","source","track","wbr"]),e}();t.BaseWriter=h;},function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},i=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value);}catch(e){i={error:e};}finally{try{n&&!n.done&&(r=o.return)&&r.call(o);}finally{if(i)throw i.error}}return a};Object.defineProperty(t,"__esModule",{value:!0});var o=r(6),a=r(3),s=r(7),u=r(29),l=r(17),c=r(97);function h(){var e=o.dom.window;e._mutationObserverMicrotaskQueued||(e._mutationObserverMicrotaskQueued=!0,Promise.resolve().then((function(){p();})));}function p(){var e,t,r,i,u=o.dom.window;u._mutationObserverMicrotaskQueued=!1;var l=s.set.clone(u._mutationObservers),h=s.set.clone(u._signalSlots);s.set.empty(u._signalSlots);var p=function(e){var t=s.list.clone(e._recordQueue);s.list.empty(e._recordQueue);for(var r=0;r<e._nodeList.length;r++){var n=e._nodeList[r];s.list.remove(n._registeredObserverList,(function(t){return a.Guard.isTransientRegisteredObserver(t)&&t.observer===e}));}if(!s.list.isEmpty(t))try{e._callback.call(e,t,e);}catch(e){}};try{for(var f=n(l),d=f.next();!d.done;d=f.next()){p(d.value);}}catch(t){e={error:t};}finally{try{d&&!d.done&&(t=f.return)&&t.call(f);}finally{if(e)throw e.error}}if(o.dom.features.slots)try{for(var m=n(h),y=m.next();!y.done;y=m.next()){var v=y.value;c.event_fireAnEvent("slotchange",v,void 0,{bubbles:!0});}}catch(e){r={error:e};}finally{try{y&&!y.done&&(i=m.return)&&i.call(m);}finally{if(r)throw r.error}}}function f(e,t,r,o,a,s,c,p,f){for(var d,m,y=new Map,v=l.tree_getFirstAncestorNode(t,!0);null!==v;){for(var _=0;_<v._registeredObserverList.length;_++){var g=v._registeredObserverList[_],b=g.options;if((v===t||b.subtree)&&(("attributes"!==e||b.attributes)&&("attributes"!==e||!b.attributeFilter||b.attributeFilter.indexOf(r||"")&&null===o)&&("characterData"!==e||b.characterData)&&("childList"!==e||b.childList))){var x=g.observer;y.has(x)||y.set(x,null),("attributes"===e&&b.attributeOldValue||"characterData"===e&&b.characterDataOldValue)&&y.set(x,a);}}v=l.tree_getNextAncestorNode(t,v,!0);}try{for(var w=n(y),E=w.next();!E.done;E=w.next()){var D=i(E.value,2),S=D[0],C=D[1],A=u.create_mutationRecord(e,t,u.create_nodeListStatic(t,s),u.create_nodeListStatic(t,c),p,f,r,o,C);S._recordQueue.push(A);}}catch(e){d={error:e};}finally{try{E&&!E.done&&(m=w.return)&&m.call(w);}finally{if(d)throw d.error}}h();}t.observer_queueAMutationObserverMicrotask=h,t.observer_notifyMutationObservers=p,t.observer_queueMutationRecord=f,t.observer_queueTreeMutationRecord=function(e,t,r,n,i){f("childList",e,null,null,null,t,r,n,i);},t.observer_queueAttributeMutationRecord=function(e,t,r,n){f("attributes",e,t,r,n,[],[],null,null);};},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(6),i=r(7),o=r(3),a=r(9),s=r(29),u=r(73),l=r(51),c=r(30),h=r(37),p=r(106);function f(e,t,r){n.dom.features.mutationObservers&&l.observer_queueAttributeMutationRecord(t,e._localName,e._namespace,e._value),n.dom.features.customElements&&o.Guard.isCustomElementNode(t)&&u.customElement_enqueueACustomElementCallbackReaction(t,"attributeChangedCallback",[e._localName,e._value,r,e._namespace]),n.dom.features.steps&&c.dom_runAttributeChangeSteps(t,e._localName,e._value,r,e._namespace),e._value=r;}function d(e,t){n.dom.features.mutationObservers&&l.observer_queueAttributeMutationRecord(t,e._localName,e._namespace,null),n.dom.features.customElements&&o.Guard.isCustomElementNode(t)&&u.customElement_enqueueACustomElementCallbackReaction(t,"attributeChangedCallback",[e._localName,null,e._value,e._namespace]),n.dom.features.steps&&c.dom_runAttributeChangeSteps(t,e._localName,null,e._value,e._namespace),t._attributeList._asArray().push(e),e._element=t,t._nodeDocument._hasNamespaces||null===e._namespace&&null===e._namespacePrefix&&"xmlns"!==e._localName||(t._nodeDocument._hasNamespaces=!0);}function m(e,t){n.dom.features.mutationObservers&&l.observer_queueAttributeMutationRecord(t,e._localName,e._namespace,e._value),n.dom.features.customElements&&o.Guard.isCustomElementNode(t)&&u.customElement_enqueueACustomElementCallbackReaction(t,"attributeChangedCallback",[e._localName,e._value,null,e._namespace]),n.dom.features.steps&&c.dom_runAttributeChangeSteps(t,e._localName,e._value,null,e._namespace);var r=t._attributeList._asArray().indexOf(e);t._attributeList._asArray().splice(r,1),e._element=null;}function y(e,t,r){n.dom.features.mutationObservers&&l.observer_queueAttributeMutationRecord(r,e._localName,e._namespace,e._value),n.dom.features.customElements&&o.Guard.isCustomElementNode(r)&&u.customElement_enqueueACustomElementCallbackReaction(r,"attributeChangedCallback",[e._localName,e._value,t._value,e._namespace]),n.dom.features.steps&&c.dom_runAttributeChangeSteps(r,e._localName,e._value,t._value,e._namespace);var i=r._attributeList._asArray().indexOf(e);-1!==i&&(r._attributeList._asArray()[i]=t),e._element=null,t._element=r,r._nodeDocument._hasNamespaces||null===t._namespace&&null===t._namespacePrefix&&"xmlns"!==t._localName||(r._nodeDocument._hasNamespaces=!0);}function v(e,t){return t._namespace===i.namespace.HTML&&"html"===t._nodeDocument._type&&(e=e.toLowerCase()),t._attributeList._asArray().find((function(t){return t._qualifiedName===e}))||null}function _(e,t,r){var n=e||null;return r._attributeList._asArray().find((function(e){return e._namespace===n&&e._localName===t}))||null}t.element_has=function(e,t){return -1!==t._attributeList._asArray().indexOf(e)},t.element_change=f,t.element_append=d,t.element_remove=m,t.element_replace=y,t.element_getAnAttributeByName=v,t.element_getAnAttributeByNamespaceAndLocalName=_,t.element_getAnAttributeValue=function(e,t,r){void 0===r&&(r="");var n=_(r,t,e);return null===n?"":n._value},t.element_setAnAttribute=function(e,t){if(null!==e._element&&e._element!==t)throw new a.InUseAttributeError("This attribute already exists in the document: "+e._qualifiedName+" as a child of "+e._element._qualifiedName+".");var r=_(e._namespace||"",e._localName,t);return r===e?e:(null!==r?y(r,e,t):d(e,t),r)},t.element_setAnAttributeValue=function(e,t,r,n,i){void 0===n&&(n=null),void 0===i&&(i=null);var o=_(i||"",t,e);if(null===o){var a=s.create_attr(e._nodeDocument,t);return a._namespace=i,a._namespacePrefix=n,a._value=r,void d(a,e)}f(o,e,r);},t.element_removeAnAttributeByName=function(e,t){var r=v(e,t);return null!==r&&m(r,t),r},t.element_removeAnAttributeByNamespaceAndLocalName=function(e,t,r){var n=_(e,t,r);return null!==n&&m(n,r),n},t.element_createAnElement=function(e,t,r,o,l,c){void 0===o&&(o=null),void 0===l&&(l=null),void 0===c&&(c=!1);var h=null;if(!n.dom.features.customElements)return (h=s.create_element(e,t,r,o))._customElementState="uncustomized",h._customElementDefinition=null,h._is=l,h;var f=u.customElement_lookUpACustomElementDefinition(e,r,t,l);if(null!==f&&f.name!==f.localName)(h=new(p.document_elementInterface(t,i.namespace.HTML)))._localName=t,h._namespace=i.namespace.HTML,h._namespacePrefix=o,h._customElementState="undefined",h._customElementDefinition=null,h._is=l,h._nodeDocument=e,c?u.customElement_upgrade(f,h):u.customElement_enqueueACustomElementUpgradeReaction(h,f);else if(null!==f)if(c)try{var d=new(0,f.constructor);if(console.assert(void 0!==d._customElementState),console.assert(void 0!==d._customElementDefinition),console.assert(d._namespace===i.namespace.HTML),0!==d._attributeList.length)throw new a.NotSupportedError("Custom element already has attributes.");if(0!==d._children.size)throw new a.NotSupportedError("Custom element already has child nodes.");if(null!==d._parent)throw new a.NotSupportedError("Custom element already has a parent node.");if(d._nodeDocument!==e)throw new a.NotSupportedError("Custom element is already in a document.");if(d._localName!==t)throw new a.NotSupportedError("Custom element has a different local name.");d._namespacePrefix=o,d._is=null;}catch(r){(h=s.create_htmlUnknownElement(e,t,i.namespace.HTML,o))._customElementState="failed",h._customElementDefinition=null,h._is=null;}else (h=s.create_htmlElement(e,t,i.namespace.HTML,o))._customElementState="undefined",h._customElementDefinition=null,h._is=null,u.customElement_enqueueACustomElementUpgradeReaction(h,f);else {(h=new(p.document_elementInterface(t,r)))._localName=t,h._namespace=r,h._namespacePrefix=o,h._customElementState="uncustomized",h._customElementDefinition=null,h._is=l,h._nodeDocument=e,r!==i.namespace.HTML||null===l&&!u.customElement_isValidCustomElementName(t)||(h._customElementState="undefined");}if(null===h)throw new Error("Unable to create element.");return h},t.element_insertAdjacent=function(e,t,r){switch(t.toLowerCase()){case"beforebegin":return null===e._parent?null:h.mutation_preInsert(r,e._parent,e);case"afterbegin":return h.mutation_preInsert(r,e,e._firstChild);case"beforeend":return h.mutation_preInsert(r,e,null);case"afterend":return null===e._parent?null:h.mutation_preInsert(r,e._parent,e._nextSibling);default:throw new a.SyntaxError('Invalid \'where\' argument. "beforebegin", "afterbegin", "beforeend" or "afterend" expected')}};},function(e,t,r){function n(e,t){Error.call(this),this.name="YAMLException",this.reason=e,this.mark=t,this.message=(this.reason||"(unknown reason)")+(this.mark?" "+this.mark.toString():""),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack||"";}n.prototype=Object.create(Error.prototype),n.prototype.constructor=n,n.prototype.toString=function(e){var t=this.name+": ";return t+=this.reason||"(unknown reason)",!e&&this.mark&&(t+=" "+this.mark.toString()),t},e.exports=n;},function(e,t,r){var n=r(39);e.exports=new n({include:[r(181)],implicit:[r(293),r(294)],explicit:[r(295),r(296),r(297),r(298)]});},function(e,t,r){var n=r(16),i=r(79),o=r(40),a=r(24),s=r(56),u=r(14),l=r(115),c=Object.getOwnPropertyDescriptor;t.f=n?c:function(e,t){if(e=a(e),t=s(t,!0),l)try{return c(e,t)}catch(e){}if(u(e,t))return o(!i.f.call(e,t),e[t])};},function(e,t,r){var n=r(13);e.exports=function(e,t){if(!n(e))return e;var r,i;if(t&&"function"==typeof(r=e.toString)&&!n(i=r.call(e)))return i;if("function"==typeof(r=e.valueOf)&&!n(i=r.call(e)))return i;if(!t&&"function"==typeof(r=e.toString)&&!n(i=r.call(e)))return i;throw TypeError("Can't convert object to primitive value")};},function(e,t,r){var n=r(81),i=r(58),o=n("keys");e.exports=function(e){return o[e]||(o[e]=i(e))};},function(e,t){var r=0,n=Math.random();e.exports=function(e){return "Symbol("+String(void 0===e?"":e)+")_"+(++r+n).toString(36)};},function(e,t,r){var n=r(42);e.exports=Array.isArray||function(e){return "Array"==n(e)};},function(e,t,r){var n,i=r(18),o=r(188),a=r(84),s=r(45),u=r(189),l=r(116),c=r(57),h=c("IE_PROTO"),p=function(){},f=function(e){return "<script>"+e+"<\/script>"},d=function(){try{n=document.domain&&new ActiveXObject("htmlfile");}catch(e){}var e,t;d=n?function(e){e.write(f("")),e.close();var t=e.parentWindow.Object;return e=null,t}(n):((t=l("iframe")).style.display="none",u.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(f("document.F=Object")),e.close(),e.F);for(var r=a.length;r--;)delete d.prototype[a[r]];return d()};s[h]=!0,e.exports=Object.create||function(e,t){var r;return null!==e?(p.prototype=i(e),r=new p,p.prototype=null,r[h]=e):r=d(),void 0===t?r:o(r,t)};},function(e,t,r){var n=r(121),i=r(84);e.exports=Object.keys||function(e){return n(e,i)};},function(e,t,r){var n=r(15).f,i=r(14),o=r(5)("toStringTag");e.exports=function(e,t,r){e&&!i(e=r?e:e.prototype,o)&&n(e,o,{configurable:!0,value:t});};},function(e,t,r){var n=r(8),i=r(5),o=r(129),a=i("species");e.exports=function(e){return o>=51||!n((function(){var t=[];return (t.constructor={})[a]=function(){return {foo:1}},1!==t[e](Boolean).foo}))};},function(e,t,r){var n=r(4),i=r(122).indexOf,o=r(48),a=r(28),s=[].indexOf,u=!!s&&1/[1].indexOf(1,-0)<0,l=o("indexOf"),c=a("indexOf",{ACCESSORS:!0,1:0});n({target:"Array",proto:!0,forced:u||!l||!c},{indexOf:function(e){return u?s.apply(this,arguments)||0:i(this,e,arguments.length>1?arguments[1]:void 0)}});},function(e,t,r){var n=r(16),i=r(15).f,o=Function.prototype,a=o.toString,s=/^\s*function ([^ (]*)/;n&&!("name"in o)&&i(o,"name",{configurable:!0,get:function(){try{return a.call(this).match(s)[1]}catch(e){return ""}}});},function(e,t,r){var n=r(25),i=r(18),o=r(8),a=r(136),s=RegExp.prototype,u=s.toString,l=o((function(){return "/a/b"!=u.call({source:"a",flags:"b"})})),c="toString"!=u.name;(l||c)&&n(RegExp.prototype,"toString",(function(){var e=i(this),t=String(e.source),r=e.flags;return "/"+t+"/"+String(void 0===r&&e instanceof RegExp&&!("flags"in s)?a.call(e):r)}),{unsafe:!0});},function(e,t,r){r(31),r(32),r(33),r(19),r(138),r(20),r(66),r(22),r(23);var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var a=r(1),s=r(2),u=function(e){function t(t,r){var n=e.call(this,t)||this;return n._writerOptions=a.applyDefaults(r,{format:"object",wellFormed:!1,group:!1,verbose:!1}),n}return i(t,e),t.prototype.serialize=function(e){return this._currentList=[],this._currentIndex=0,this._listRegister=[this._currentList],this.serializeNode(e,this._writerOptions.wellFormed),this._process(this._currentList,this._writerOptions)},t.prototype._process=function(e,t){var r,n,i,o,u,l,c;if(0===e.length)return {};for(var h={},p=!1,f=0,d=0,m=0,y=0,v=0;v<e.length;v++){var _=e[v];switch(I=Object.keys(_)[0]){case"@":continue;case"#":f++;break;case"!":d++;break;case"?":m++;break;case"$":y++;break;default:h[I]?p=!0:h[I]=!0;}}var g=this._getAttrKey(),b=this._getNodeKey(s.NodeType.Text),x=this._getNodeKey(s.NodeType.Comment),w=this._getNodeKey(s.NodeType.ProcessingInstruction),E=this._getNodeKey(s.NodeType.CData);if(1===f&&1===e.length&&a.isString(e[0]["#"]))return e[0]["#"];if(p){var D={};for(v=0;v<e.length;v++){_=e[v];if("@"===(I=Object.keys(_)[0])){var S=_["@"];1===(L=Object.keys(S)).length?D[g+L[0]]=S[L[0]]:D[g]=_["@"];}}var C=[];for(v=0;v<e.length;v++){_=e[v];switch(I=Object.keys(_)[0]){case"@":break;case"#":C.push(((r={})[b]=_["#"],r));break;case"!":C.push(((n={})[x]=_["!"],n));break;case"?":C.push(((i={})[w]=_["?"],i));break;case"$":C.push(((o={})[E]=_.$,o));break;default:if(0!==(B=_)[I].length&&a.isArray(B[I][0])){for(var A=[],N=B[I],T=0;T<N.length;T++)A.push(this._process(N[T],t));C.push(((u={})[I]=A,u));}else t.verbose?C.push(((l={})[I]=[this._process(B[I],t)],l)):C.push(((c={})[I]=this._process(B[I],t),c));}}return D[b]=C,D}var O=1,F=1,k=1,P=1;for(D={},v=0;v<e.length;v++){var I;_=e[v];switch(I=Object.keys(_)[0]){case"@":S=_["@"];var L=Object.keys(S);if(t.group&&1!==L.length)D[g]=S;else for(var M in S)D[g+M]=S[M];break;case"#":O=this._processSpecItem(_["#"],D,t.group,b,f,O);break;case"!":F=this._processSpecItem(_["!"],D,t.group,x,d,F);break;case"?":k=this._processSpecItem(_["?"],D,t.group,w,m,k);break;case"$":P=this._processSpecItem(_.$,D,t.group,E,y,P);break;default:var B;if(0!==(B=_)[I].length&&a.isArray(B[I][0])){A=[],N=B[I];for(var j=0;j<N.length;j++)A.push(this._process(N[j],t));D[I]=A;}else t.verbose?D[I]=[this._process(B[I],t)]:D[I]=this._process(B[I],t);}}return D},t.prototype._processSpecItem=function(e,t,r,n,i,s){var u,l;if(!r&&a.isArray(e)&&i+e.length>2)try{for(var c=o(e),h=c.next();!h.done;h=c.next()){var p=h.value;t[n+(s++).toString()]=p;}}catch(e){u={error:e};}finally{try{h&&!h.done&&(l=c.return)&&l.call(c);}finally{if(u)throw u.error}}else t[i>1?n+(s++).toString():n]=e;return s},t.prototype.beginElement=function(e){var t,r,n=[];if(0===this._currentList.length)this._currentList.push(((t={})[e]=n,t));else {var i=this._currentList[this._currentList.length-1];if(this._isElementNode(i,e))if(0!==i[e].length&&a.isArray(i[e][0]))i[e].push(n);else i[e]=[i[e],n];else this._currentList.push(((r={})[e]=n,r));}this._currentIndex++,this._listRegister.length>this._currentIndex?this._listRegister[this._currentIndex]=n:this._listRegister.push(n),this._currentList=n;},t.prototype.endElement=function(){this._currentList=this._listRegister[--this._currentIndex];},t.prototype.attribute=function(e,t){var r,n;if(0===this._currentList.length)this._currentList.push({"@":(r={},r[e]=t,r)});else {var i=this._currentList[this._currentList.length-1];this._isAttrNode(i)?i["@"][e]=t:this._currentList.push({"@":(n={},n[e]=t,n)});}},t.prototype.comment=function(e){if(0===this._currentList.length)this._currentList.push({"!":e});else {var t=this._currentList[this._currentList.length-1];this._isCommentNode(t)?a.isArray(t["!"])?t["!"].push(e):t["!"]=[t["!"],e]:this._currentList.push({"!":e});}},t.prototype.text=function(e){if(0===this._currentList.length)this._currentList.push({"#":e});else {var t=this._currentList[this._currentList.length-1];this._isTextNode(t)?a.isArray(t["#"])?t["#"].push(e):t["#"]=[t["#"],e]:this._currentList.push({"#":e});}},t.prototype.instruction=function(e,t){var r=""===t?e:e+" "+t;if(0===this._currentList.length)this._currentList.push({"?":r});else {var n=this._currentList[this._currentList.length-1];this._isInstructionNode(n)?a.isArray(n["?"])?n["?"].push(r):n["?"]=[n["?"],r]:this._currentList.push({"?":r});}},t.prototype.cdata=function(e){if(0===this._currentList.length)this._currentList.push({$:e});else {var t=this._currentList[this._currentList.length-1];this._isCDATANode(t)?a.isArray(t.$)?t.$.push(e):t.$=[t.$,e]:this._currentList.push({$:e});}},t.prototype._isAttrNode=function(e){return "@"in e},t.prototype._isTextNode=function(e){return "#"in e},t.prototype._isCommentNode=function(e){return "!"in e},t.prototype._isInstructionNode=function(e){return "?"in e},t.prototype._isCDATANode=function(e){return "$"in e},t.prototype._isElementNode=function(e,t){return t in e},t.prototype._getAttrKey=function(){return this._builderOptions.convert.att},t.prototype._getNodeKey=function(e){switch(e){case s.NodeType.Comment:return this._builderOptions.convert.comment;case s.NodeType.Text:return this._builderOptions.convert.text;case s.NodeType.ProcessingInstruction:return this._builderOptions.convert.ins;case s.NodeType.CData:return this._builderOptions.convert.cdata;default:throw new Error("Invalid node type.")}},t}(r(50).BaseWriter);t.ObjectWriter=u;},function(e,t,r){var n=r(4),i=r(93);n({target:"RegExp",proto:!0,forced:/./.exec!==i},{exec:i});},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this._items={},this._nullItems={};}return e.prototype.set=function(e,t){null===e?this._nullItems[t]=!0:(this._items[e]||(this._items[e]={}),this._items[e][t]=!0);},e.prototype.has=function(e,t){return null===e?!0===this._nullItems[t]:!!this._items[e]&&!0===this._items[e][t]},e}();t.LocalNameSet=n;},function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value);}catch(e){i={error:e};}finally{try{n&&!n.done&&(r=o.return)&&r.call(o);}finally{if(i)throw i.error}}return a};Object.defineProperty(t,"__esModule",{value:!0});var i=r(9),o=r(3),a=r(0),s=function(){function e(){}return Object.defineProperty(e.prototype,"_eventListenerList",{get:function(){return this.__eventListenerList||(this.__eventListenerList=[])},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"_eventHandlerMap",{get:function(){return this.__eventHandlerMap||(this.__eventHandlerMap={})},enumerable:!0,configurable:!0}),e.prototype.addEventListener=function(e,t,r){void 0===r&&(r={passive:!1,once:!1,capture:!1});var i,s=n(a.eventTarget_flattenMore(r),3),u=s[0],l=s[1],c=s[2];t&&(i=o.Guard.isEventListener(t)?t:{handleEvent:t},a.eventTarget_addEventListener(this,{type:e,callback:i,capture:u,passive:l,once:c,removed:!1}));},e.prototype.removeEventListener=function(e,t,r){void 0===r&&(r={capture:!1});var n=a.eventTarget_flatten(r);if(t)for(var i=0;i<this._eventListenerList.length;i++){var s=this._eventListenerList[i];if(s.type===e&&s.capture===n){if(o.Guard.isEventListener(t)&&s.callback===t){a.eventTarget_removeEventListener(this,s,i);break}if(t&&s.callback.handleEvent===t){a.eventTarget_removeEventListener(this,s,i);break}}}},e.prototype.dispatchEvent=function(e){if(e._dispatchFlag||!e._initializedFlag)throw new i.InvalidStateError;return e._isTrusted=!1,a.event_dispatch(e,this)},e.prototype._getTheParent=function(e){return null},e}();t.EventTargetImpl=s;},function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0});var o=r(34),a=r(0),s=function(e){function t(t){var r=e.call(this)||this;return r._data=t,r}return i(t,e),Object.defineProperty(t.prototype,"data",{get:function(){return this._data},set:function(e){a.characterData_replaceData(this,0,this._data.length,e);},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"length",{get:function(){return this._data.length},enumerable:!0,configurable:!0}),t.prototype.substringData=function(e,t){return a.characterData_substringData(this,e,t)},t.prototype.appendData=function(e){return a.characterData_replaceData(this,this._data.length,0,e)},t.prototype.insertData=function(e,t){a.characterData_replaceData(this,e,0,t);},t.prototype.deleteData=function(e,t){a.characterData_replaceData(this,e,t,"");},t.prototype.replaceData=function(e,t,r){a.characterData_replaceData(this,e,t,r);},Object.defineProperty(t.prototype,"previousElementSibling",{get:function(){throw new Error("Mixin: NonDocumentTypeChildNode not implemented.")},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"nextElementSibling",{get:function(){throw new Error("Mixin: NonDocumentTypeChildNode not implemented.")},enumerable:!0,configurable:!0}),t.prototype.before=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error("Mixin: ChildNode not implemented.")},t.prototype.after=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error("Mixin: ChildNode not implemented.")},t.prototype.replaceWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error("Mixin: ChildNode not implemented.")},t.prototype.remove=function(){throw new Error("Mixin: ChildNode not implemented.")},t}(o.NodeImpl);t.CharacterDataImpl=s;},function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},i=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value);}catch(e){i={error:e};}finally{try{n&&!n.done&&(r=o.return)&&r.call(o);}finally{if(i)throw i.error}}return a},o=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(i(arguments[t]));return e};Object.defineProperty(t,"__esModule",{value:!0});var a=r(6),s=r(3),u=r(1),l=r(17),c=r(51);function h(e){a.dom.window._signalSlots.add(e),c.observer_queueAMutationObserverMicrotask();}function p(e,t){void 0===t&&(t=!1);var r=s.Cast.asNode(e)._parent;if(null===r)return null;var n=r._shadowRoot||null;if(null===n)return null;if(t&&"open"!==n._mode)return null;for(var i=l.tree_getFirstDescendantNode(n,!1,!0,(function(e){return s.Guard.isSlot(e)}));null!==i;){if(i._name===e._name)return i;i=l.tree_getNextDescendantNode(n,i,!1,!0,(function(e){return s.Guard.isSlot(e)}));}return null}function f(e){var t,r,i=[],o=l.tree_rootNode(e);if(!s.Guard.isShadowRoot(o))return i;var a=o._host;try{for(var u=n(a._children),c=u.next();!c.done;c=u.next()){var h=c.value;if(s.Guard.isSlotable(h))p(h)===e&&i.push(h);}}catch(e){t={error:e};}finally{try{c&&!c.done&&(r=u.return)&&r.call(u);}finally{if(t)throw t.error}}return i}function d(e){var t,r,i=f(e);if(i.length===e._assignedNodes.length){for(var o=!0,a=0;a<i.length;a++)if(i[a]!==e._assignedNodes[a]){o=!1;break}o||h(e);}e._assignedNodes=i;try{for(var s=n(i),u=s.next();!u.done;u=s.next()){u.value._assignedSlot=e;}}catch(e){t={error:e};}finally{try{u&&!u.done&&(r=s.return)&&r.call(s);}finally{if(t)throw t.error}}}t.shadowTree_signalASlotChange=h,t.shadowTree_isConnected=function(e){return s.Guard.isDocumentNode(l.tree_rootNode(e,!0))},t.shadowTree_isAssigned=function(e){return null!==e._assignedSlot},t.shadowTree_findASlot=p,t.shadowTree_findSlotables=f,t.shadowTree_findFlattenedSlotables=function e(t){var r,i,a,c,h=[],p=l.tree_rootNode(t);if(!s.Guard.isShadowRoot(p))return h;var d=f(t);if(u.isEmpty(d))try{for(var m=n(t._children),y=m.next();!y.done;y=m.next()){var v=y.value;s.Guard.isSlotable(v)&&d.push(v);}}catch(e){r={error:e};}finally{try{y&&!y.done&&(i=m.return)&&i.call(m);}finally{if(r)throw r.error}}try{for(var _=n(d),g=_.next();!g.done;g=_.next()){var b=g.value;if(s.Guard.isSlot(b)&&s.Guard.isShadowRoot(l.tree_rootNode(b))){var x=e(b);h.push.apply(h,o(x));}else h.push(b);}}catch(e){a={error:e};}finally{try{g&&!g.done&&(c=_.return)&&c.call(_);}finally{if(a)throw a.error}}return h},t.shadowTree_assignSlotables=d,t.shadowTree_assignSlotablesForATree=function(e){for(var t=l.tree_getFirstDescendantNode(e,!0,!1,(function(e){return s.Guard.isSlot(e)}));null!==t;)d(t),t=l.tree_getNextDescendantNode(e,t,!0,!1,(function(e){return s.Guard.isSlot(e)}));},t.shadowTree_assignASlot=function(e){var t=p(e);null!==t&&d(t);};},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=/[a-z]([\0-\t\x2D\._a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*-([\0-\t\x2D\._a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*/,i=new Set(["annotation-xml","color-profile","font-face","font-face-src","font-face-uri","font-face-format","font-face-name","missing-glyph"]),o=new Set(["article","aside","blockquote","body","div","footer","h1","h2","h3","h4","h5","h6","header","main","nav","p","section","span"]),a=new Set(["area","base","basefont","bgsound","br","col","embed","frame","hr","img","input","keygen","link","menuitem","meta","param","source","track","wbr"]),s=new Set(["article","aside","blockquote","body","div","footer","h1","h2","h3","h4","h5","h6","header","main","nav","p","section","span"]);t.customElement_isValidCustomElementName=function(e){return !!n.test(e)&&!i.has(e)},t.customElement_isValidElementName=function(e){return o.has(e)},t.customElement_isVoidElementName=function(e){return a.has(e)},t.customElement_isValidShadowHostName=function(e){return s.has(e)},t.customElement_enqueueACustomElementUpgradeReaction=function(e,t){},t.customElement_enqueueACustomElementCallbackReaction=function(e,t,r){},t.customElement_upgrade=function(e,t){},t.customElement_tryToUpgrade=function(e){},t.customElement_lookUpACustomElementDefinition=function(e,t,r,n){return null};},function(e,t,r){r(4)({target:"String",proto:!0},{repeat:r(259)});},function(e,t,r){r(278),r(68),r(179),r(94),Object.defineProperty(t,"__esModule",{value:!0});var n=r(109),i=function(){function e(e){this._builderOptions=e,e.parser&&Object.assign(this,e.parser);}return e.prototype._docType=function(e,t,r,n){return e.dtd({name:t,pubID:r,sysID:n})},e.prototype._comment=function(e,t){return e.com(t)},e.prototype._text=function(e,t){return e.txt(t)},e.prototype._instruction=function(e,t,r){return e.ins(t,r)},e.prototype._cdata=function(e,t){return e.dat(t)},e.prototype._element=function(e,t,r){return void 0===t?e.ele(r):e.ele(t,r)},e.prototype._attribute=function(e,t,r,n){return void 0===t?e.att(r,n):e.att(t,r,n)},e.prototype._sanitize=function(e){return n.sanitizeInput(e,this._builderOptions.invalidCharReplacement)},e.prototype._decodeText=function(t){return null==t?t:t.replace(/&(quot|amp|apos|lt|gt);/g,(function(t,r){return e._entityTable[r]})).replace(/&#(?:x([a-fA-F0-9]+)|([0-9]+));/g,(function(e,t,r){return String.fromCodePoint(parseInt(t||r,t?16:10))}))},e.prototype._decodeAttributeValue=function(e){return this._decodeText(e)},e.prototype.parse=function(e,t){return this._parse(e,t)},e.prototype.docType=function(e,t,r,n){return this._docType(e,t,r,n)},e.prototype.comment=function(e,t){return this._comment(e,t)},e.prototype.text=function(e,t){return this._text(e,t)},e.prototype.instruction=function(e,t,r){return this._instruction(e,t,r)},e.prototype.cdata=function(e,t){return this._cdata(e,t)},e.prototype.element=function(e,t,r){return this._element(e,t,r)},e.prototype.attribute=function(e,t,r,n){return this._attribute(e,t,r,n)},e.prototype.sanitize=function(e){return this._sanitize(e)},e._entityTable={lt:"<",gt:">",amp:"&",quot:'"',apos:"'"},e}();t.BaseReader=i;},function(e,t,r){var n=r(39);e.exports=n.DEFAULT=new n({include:[r(54)],explicit:[r(299),r(300),r(301)]});},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(185);t.XMLBuilderImpl=n.XMLBuilderImpl;var i=r(304);t.XMLBuilderCBImpl=i.XMLBuilderCBImpl;var o=r(183);t.builder=o.builder,t.create=o.create,t.fragment=o.fragment,t.convert=o.convert;var a=r(309);t.createCB=a.createCB,t.fragmentCB=a.fragmentCB;},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")();}catch(e){"object"==typeof window&&(r=window);}e.exports=r;},function(e,t,r){var n={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,o=i&&!n.call({1:2},1);t.f=o?function(e){var t=i(this,e);return !!t&&t.enumerable}:n;},function(e,t,r){var n=r(11),i=r(21);e.exports=function(e,t){try{i(n,e,t);}catch(r){n[e]=t;}return t};},function(e,t,r){var n=r(44),i=r(118);(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.6.5",mode:n?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"});},function(e,t,r){var n=r(121),i=r(84).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return n(e,i)};},function(e,t,r){var n=r(47),i=Math.max,o=Math.min;e.exports=function(e,t){var r=n(e);return r<0?i(r+t,0):o(r,t)};},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"];},function(e,t){t.f=Object.getOwnPropertySymbols;},function(e,t,r){var n=r(8);e.exports=!!Object.getOwnPropertySymbols&&!n((function(){return !String(Symbol())}));},function(e,t,r){var n=r(127);e.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 0:return function(){return e.call(t)};case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,i){return e.call(t,r,n,i)}}return function(){return e.apply(t,arguments)}};},function(e,t,r){var n=r(4),i=r(195),o=r(132),a=r(133),s=r(62),u=r(21),l=r(25),c=r(5),h=r(44),p=r(49),f=r(131),d=f.IteratorPrototype,m=f.BUGGY_SAFARI_ITERATORS,y=c("iterator"),v=function(){return this};e.exports=function(e,t,r,c,f,_,g){i(r,t,c);var b,x,w,E=function(e){if(e===f&&N)return N;if(!m&&e in C)return C[e];switch(e){case"keys":case"values":case"entries":return function(){return new r(this,e)}}return function(){return new r(this)}},D=t+" Iterator",S=!1,C=e.prototype,A=C[y]||C["@@iterator"]||f&&C[f],N=!m&&A||E(f),T="Array"==t&&C.entries||A;if(T&&(b=o(T.call(new e)),d!==Object.prototype&&b.next&&(h||o(b)===d||(a?a(b,d):"function"!=typeof b[y]&&u(b,y,v)),s(b,D,!0,!0),h&&(p[D]=v))),"values"==f&&A&&"values"!==A.name&&(S=!0,N=function(){return A.call(this)}),h&&!g||C[y]===N||u(C,y,N),p[t]=N,f)if(x={values:E("values"),keys:_?N:E("keys"),entries:E("entries")},g)for(w in x)(m||S||!(w in C))&&l(C,w,x[w]);else n({target:t,proto:!0,forced:m||S},x);return x};},function(e,t,r){var n=r(4),i=r(13),o=r(59),a=r(83),s=r(26),u=r(24),l=r(134),c=r(5),h=r(63),p=r(28),f=h("slice"),d=p("slice",{ACCESSORS:!0,0:0,1:2}),m=c("species"),y=[].slice,v=Math.max;n({target:"Array",proto:!0,forced:!f||!d},{slice:function(e,t){var r,n,c,h=u(this),p=s(h.length),f=a(e,p),d=a(void 0===t?p:t,p);if(o(h)&&("function"!=typeof(r=h.constructor)||r!==Array&&!o(r.prototype)?i(r)&&null===(r=r[m])&&(r=void 0):r=void 0,r===Array||void 0===r))return y.call(h,f,d);for(n=new(void 0===r?Array:r)(v(d-f,0)),c=0;f<d;f++,c++)f in h&&l(n,c,h[f]);return n.length=c,n}});},function(e,t,r){var n={};n[r(5)("toStringTag")]="z",e.exports="[object z]"===String(n);},function(e,t,r){r(19),r(138),r(20),r(92),r(22),r(23),Object.defineProperty(t,"__esModule",{value:!0}),t.DefaultBuilderOptions={version:"1.0",encoding:void 0,standalone:void 0,keepNullNodes:!1,keepNullAttributes:!1,ignoreConverters:!1,convert:{att:"@",ins:"?",text:"#",cdata:"$",comment:"!"},defaultNamespace:{ele:void 0,att:void 0},namespaceAlias:{html:"http://www.w3.org/1999/xhtml",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg",xlink:"http://www.w3.org/1999/xlink"},invalidCharReplacement:void 0,parser:void 0},t.XMLBuilderOptionKeys=new Set(Object.keys(t.DefaultBuilderOptions)),t.DefaultXMLBuilderCBOptions={format:"xml",wellFormed:!1,prettyPrint:!1,indent:"  ",newline:"\n",offset:0,width:0,allowEmptyTags:!1,spaceBeforeSlash:!1,keepNullNodes:!1,keepNullAttributes:!1,ignoreConverters:!1,convert:{att:"@",ins:"?",text:"#",cdata:"$",comment:"!"},defaultNamespace:{ele:void 0,att:void 0},namespaceAlias:{html:"http://www.w3.org/1999/xhtml",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg",xlink:"http://www.w3.org/1999/xlink"}};},function(e,t,r){var n=r(139),i=r(143);e.exports=n("Set",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),i);},function(e,t,r){var n,i,o=r(136),a=r(221),s=RegExp.prototype.exec,u=String.prototype.replace,l=s,c=(n=/a/,i=/b*/g,s.call(n,"a"),s.call(i,"a"),0!==n.lastIndex||0!==i.lastIndex),h=a.UNSUPPORTED_Y||a.BROKEN_CARET,p=void 0!==/()??/.exec("")[1];(c||p||h)&&(l=function(e){var t,r,n,i,a=this,l=h&&a.sticky,f=o.call(a),d=a.source,m=0,y=e;return l&&(-1===(f=f.replace("y","")).indexOf("g")&&(f+="g"),y=String(e).slice(a.lastIndex),a.lastIndex>0&&(!a.multiline||a.multiline&&"\n"!==e[a.lastIndex-1])&&(d="(?: "+d+")",y=" "+y,m++),r=new RegExp("^(?:"+d+")",f)),p&&(r=new RegExp("^"+d+"$(?!\\s)",f)),c&&(t=a.lastIndex),n=s.call(l?r:a,y),l?n?(n.input=n.input.slice(m),n[0]=n[0].slice(m),n.index=a.lastIndex,a.lastIndex+=n[0].length):a.lastIndex=0:c&&n&&(a.lastIndex=a.global?n.index+n[0].length:t),p&&n&&n.length>1&&u.call(n[0],r,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(n[i]=void 0);})),n}),e.exports=l;},function(e,t,r){var n=r(225),i=r(18),o=r(27),a=r(26),s=r(47),u=r(35),l=r(226),c=r(227),h=Math.max,p=Math.min,f=Math.floor,d=/\$([$&'`]|\d\d?|<[^>]*>)/g,m=/\$([$&'`]|\d\d?)/g;n("replace",2,(function(e,t,r,n){var y=n.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE,v=n.REPLACE_KEEPS_$0,_=y?"$":"$0";return [function(r,n){var i=u(this),o=null==r?void 0:r[e];return void 0!==o?o.call(r,i,n):t.call(String(i),r,n)},function(e,n){if(!y&&v||"string"==typeof n&&-1===n.indexOf(_)){var o=r(t,e,this,n);if(o.done)return o.value}var u=i(e),f=String(this),d="function"==typeof n;d||(n=String(n));var m=u.global;if(m){var b=u.unicode;u.lastIndex=0;}for(var x=[];;){var w=c(u,f);if(null===w)break;if(x.push(w),!m)break;""===String(w[0])&&(u.lastIndex=l(f,a(u.lastIndex),b));}for(var E,D="",S=0,C=0;C<x.length;C++){w=x[C];for(var A=String(w[0]),N=h(p(s(w.index),f.length),0),T=[],O=1;O<w.length;O++)T.push(void 0===(E=w[O])?E:String(E));var F=w.groups;if(d){var k=[A].concat(T,N,f);void 0!==F&&k.push(F);var P=String(n.apply(void 0,k));}else P=g(A,f,N,T,F,n);N>=S&&(D+=f.slice(S,N)+P,S=N+A.length);}return D+f.slice(S)}];function g(e,r,n,i,a,s){var u=n+e.length,l=i.length,c=m;return void 0!==a&&(a=o(a),c=d),t.call(s,c,(function(t,o){var s;switch(o.charAt(0)){case"$":return "$";case"&":return e;case"`":return r.slice(0,n);case"'":return r.slice(u);case"<":s=a[o.slice(1,-1)];break;default:var c=+o;if(0===c)return t;if(c>l){var h=f(c/10);return 0===h?t:h<=l?void 0===i[h-1]?o.charAt(1):i[h-1]+o.charAt(1):t}s=i[c-1];}return void 0===s?"":s}))}}));},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this._items={},this._nullItems=[];}return e.prototype.copy=function(){var t=new e;for(var r in this._items)t._items[r]=this._items[r].slice(0);return t._nullItems=this._nullItems.slice(0),t},e.prototype.get=function(e,t){var r=null===t?this._nullItems:this._items[t]||null;if(null===r)return null;for(var n=null,i=0;i<r.length;i++)if((n=r[i])===e)return n;return n},e.prototype.has=function(e,t){var r=null===t?this._nullItems:this._items[t]||null;return null!==r&&-1!==r.indexOf(e)},e.prototype.hasPrefix=function(e){if(-1!==this._nullItems.indexOf(e))return !0;for(var t in this._items)if(-1!==this._items[t].indexOf(e))return !0;return !1},e.prototype.set=function(e,t){var r=null===t?this._nullItems:this._items[t]||null;null!==t&&null===r?this._items[t]=[e]:r.push(e);},e}();t.NamespacePrefixMap=n;},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.Surrogate=/[\uD800-\uDFFF]/,t.ScalarValue=/[\uD800-\uDFFF]/,t.NonCharacter=/[\uFDD0-\uFDEF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]/,t.ASCIICodePoint=/[\u0000-\u007F]/,t.ASCIITabOrNewLine=/[\t\n\r]/,t.ASCIIWhiteSpace=/[\t\n\f\r ]/,t.C0Control=/[\u0000-\u001F]/,t.C0ControlOrSpace=/[\u0000-\u001F ]/,t.Control=/[\u0000-\u001F\u007F-\u009F]/,t.ASCIIDigit=/[0-9]/,t.ASCIIUpperHexDigit=/[0-9A-F]/,t.ASCIILowerHexDigit=/[0-9a-f]/,t.ASCIIHexDigit=/[0-9A-Fa-f]/,t.ASCIIUpperAlpha=/[A-Z]/,t.ASCIILowerAlpha=/[a-z]/,t.ASCIIAlpha=/[A-Za-z]/,t.ASCIIAlphanumeric=/[0-9A-Za-z]/;},function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},i=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value);}catch(e){i={error:e};}finally{try{n&&!n.done&&(r=o.return)&&r.call(o);}finally{if(i)throw i.error}}return a},o=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(i(arguments[t]));return e};Object.defineProperty(t,"__esModule",{value:!0});var a=r(6),s=r(2),u=r(3),l=r(171),c=r(104),h=r(9),p=r(17),f=r(72),d=r(30);function m(e,t){void 0===t&&(t=void 0),void 0===t&&(t=null);var r=y(e,t,new Date,{});return r._isTrusted=!0,r}function y(e,t,r,n){var i=new e("");return i._initializedFlag=!0,i._timeStamp=r.getTime(),Object.assign(i,n),a.dom.features.steps&&d.dom_runEventConstructingSteps(i),i}function v(e,t,r,i){var o,a,l,c;void 0===r&&(r=!1),void 0===i&&(i={value:!1});var h=!1;e._dispatchFlag=!0;var d=t;if(r){var m=t._associatedDocument;u.Guard.isDocumentNode(m)&&(d=m);}var y=null,v=p.tree_retarget(e._relatedTarget,t);if(t!==v||t===e._relatedTarget){var b=[];try{for(var x=n(e._touchTargetList),w=x.next();!w.done;w=x.next()){var E=w.value;b.push(p.tree_retarget(E,t));}}catch(e){o={error:e};}finally{try{w&&!w.done&&(a=x.return)&&a.call(x);}finally{if(o)throw o.error}}_(e,t,d,v,b,!1);var D=u.Guard.isMouseEvent(e)&&"click"===e._type;D&&void 0!==t._activationBehavior&&(y=t);for(var S=u.Guard.isSlotable(t)&&f.shadowTree_isAssigned(t)?t:null,C=!1,A=t._getTheParent(e);null!==A&&u.Guard.isNode(A);){if(null!==S){if(!u.Guard.isSlot(A))throw new Error("Parent node of a slotable should be a slot.");S=null;var N=p.tree_rootNode(A,!0);u.Guard.isShadowRoot(N)&&"closed"===N._mode&&(C=!0);}u.Guard.isSlotable(A)&&f.shadowTree_isAssigned(A)&&(S=A),v=p.tree_retarget(e._relatedTarget,A),b=[];try{for(var T=(l=void 0,n(e._touchTargetList)),O=T.next();!O.done;O=T.next()){E=O.value;b.push(p.tree_retarget(E,A));}}catch(e){l={error:e};}finally{try{O&&!O.done&&(c=T.return)&&c.call(T);}finally{if(l)throw l.error}}u.Guard.isWindow(A)||u.Guard.isNode(A)&&u.Guard.isNode(t)&&p.tree_isAncestorOf(p.tree_rootNode(t,!0),A,!0,!0)?(D&&e._bubbles&&null===y&&A._activationBehavior&&(y=A),_(e,A,null,v,b,C)):A===v?A=null:(t=A,D&&null===y&&t._activationBehavior&&(y=t),_(e,A,t,v,b,C)),null!==A&&(A=A._getTheParent(e)),C=!1;}for(var F=null,k=e._path,P=k.length-1;P>=0;P--){if(null!==(L=k[P]).shadowAdjustedTarget){F=L;break}}if(null!==F)if(u.Guard.isNode(F.shadowAdjustedTarget)&&u.Guard.isShadowRoot(p.tree_rootNode(F.shadowAdjustedTarget,!0)))h=!0;else if(u.Guard.isNode(F.relatedTarget)&&u.Guard.isShadowRoot(p.tree_rootNode(F.relatedTarget,!0)))h=!0;else for(var I=0;I<F.touchTargetList.length;I++){var L=F.touchTargetList[I];if(u.Guard.isNode(L)&&u.Guard.isShadowRoot(p.tree_rootNode(L,!0))){h=!0;break}}null!==y&&void 0!==y._legacyPreActivationBehavior&&y._legacyPreActivationBehavior(e);for(P=k.length-1;P>=0;P--){null!==(L=k[P]).shadowAdjustedTarget?e._eventPhase=s.EventPhase.AtTarget:e._eventPhase=s.EventPhase.Capturing,g(L,e,"capturing",i);}for(P=0;P<k.length;P++){if(null!==(L=k[P]).shadowAdjustedTarget)e._eventPhase=s.EventPhase.AtTarget;else {if(!e._bubbles)continue;e._eventPhase=s.EventPhase.Bubbling;}g(L,e,"bubbling",i);}}return e._eventPhase=s.EventPhase.None,e._currentTarget=null,e._path=[],e._dispatchFlag=!1,e._stopPropagationFlag=!1,e._stopImmediatePropagationFlag=!1,h&&(e._target=null,e._relatedTarget=null,e._touchTargetList=[]),null!==y&&(e._canceledFlag||void 0===y._activationBehavior?void 0!==y._legacyCanceledActivationBehavior&&y._legacyCanceledActivationBehavior(e):y._activationBehavior(e)),!e._canceledFlag}function _(e,t,r,n,i,o){var a=!1;u.Guard.isNode(t)&&u.Guard.isShadowRoot(p.tree_rootNode(t))&&(a=!0);var s=!1;u.Guard.isShadowRoot(t)&&"closed"===t._mode&&(s=!0),e._path.push({invocationTarget:t,invocationTargetInShadowTree:a,shadowAdjustedTarget:r,relatedTarget:n,touchTargetList:i,rootOfClosedTree:s,slotInClosedTree:o});}function g(e,t,r,n){void 0===n&&(n={value:!1});for(var i=t._path,a=-1,s=0;s<i.length;s++)if(i[s]===e){a=s;break}if(-1!==a){var u=i[a];(null!==u.shadowAdjustedTarget||a>0&&null!==(u=i[a-1]).shadowAdjustedTarget)&&(t._target=u.shadowAdjustedTarget);}if(t._relatedTarget=e.relatedTarget,t._touchTargetList=e.touchTargetList,!t._stopPropagationFlag){t._currentTarget=e.invocationTarget;var l=t._currentTarget._eventListenerList,c=new(Array.bind.apply(Array,o([void 0],l)));if(!b(t,c,r,e,n)&&t._isTrusted){var h=t._type;"animationend"===h?t._type="webkitAnimationEnd":"animationiteration"===h?t._type="webkitAnimationIteration":"animationstart"===h?t._type="webkitAnimationStart":"transitionend"===h&&(t._type="webkitTransitionEnd"),b(t,c,r,e,n),t._type=h;}}}function b(e,t,r,n,i){void 0===i&&(i={value:!1});for(var o=!1,a=0;a<t.length;a++){var s=t[a];if(!s.removed){if(e._type!==s.type)continue;if(o=!0,"capturing"===r&&!s.capture)continue;if("bubbling"===r&&s.capture)continue;if(s.once&&null!==e._currentTarget){for(var l=e._currentTarget,c=-1,h=0;h<l._eventListenerList.length;h++)if(l._eventListenerList[h]===s){c=h;break}-1!==c&&l._eventListenerList.splice(c,1);}var p=void 0,f=void 0;u.Guard.isWindow(p)&&(f=p._currentEvent,!1===n.invocationTargetInShadowTree&&(p._currentEvent=e)),s.passive&&(e._inPassiveListenerFlag=!0);try{s.callback.handleEvent.call(e._currentTarget,e);}catch(e){i.value=!0;}if(s.passive&&(e._inPassiveListenerFlag=!1),u.Guard.isWindow(p)&&(p._currentEvent=f),e._stopImmediatePropagationFlag)return o}}return o}function x(e,t){return null}function w(e,t){return null}function E(e,t){}function D(e,t){}t.event_setTheCanceledFlag=function(e){e._cancelable&&!e._inPassiveListenerFlag&&(e._canceledFlag=!0);},t.event_initialize=function(e,t,r,n){e._initializedFlag=!0,e._stopPropagationFlag=!1,e._stopImmediatePropagationFlag=!1,e._canceledFlag=!1,e._isTrusted=!1,e._target=null,e._type=t,e._bubbles=r,e._cancelable=n;},t.event_createAnEvent=m,t.event_innerEventCreationSteps=y,t.event_dispatch=v,t.event_appendToAnEventPath=_,t.event_invoke=g,t.event_innerInvoke=b,t.event_fireAnEvent=function(e,t,r,n,i){void 0===r&&(r=c.EventImpl);var o=m(r);if(o._type=e,n)for(var a in n){o[a]=n[a];}return v(o,t,i)},t.event_createLegacyEvent=function(e){var t=null;switch(e.toLowerCase()){case"beforeunloadevent":case"compositionevent":break;case"customevent":t=l.CustomEventImpl;break;case"devicemotionevent":case"deviceorientationevent":case"dragevent":break;case"event":case"events":t=c.EventImpl;}if(null===t)throw new h.NotSupportedError("Event constructor not found for interface "+e+".");var r=new t("");return r._type="",r._timeStamp=(new Date).getTime(),r._isTrusted=!1,r._initializedFlag=!1,r},t.event_getterEventHandlerIDLAttribute=function(e,t){return null},t.event_setterEventHandlerIDLAttribute=function(e,t,r){},t.event_determineTheTargetOfAnEventHandler=x,t.event_getTheCurrentValueOfAnEventHandler=w,t.event_activateAnEventHandler=E,t.event_deactivateAnEventHandler=D;},function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},a=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value);}catch(e){i={error:e};}finally{try{n&&!n.done&&(r=o.return)&&r.call(o);}finally{if(i)throw i.error}}return a};Object.defineProperty(t,"__esModule",{value:!0});var s=r(6),u=r(2),l=r(9),c=r(34),h=r(3),p=r(1),f=r(7),d=r(152),m=r(0),y=r(12),v=function(e){function t(){var t=e.call(this)||this;return t._children=new Set,t._encoding={name:"UTF-8",labels:["unicode-1-1-utf-8","utf-8","utf8"]},t._contentType="application/xml",t._URL={scheme:"about",username:"",password:"",host:null,port:null,path:["blank"],query:null,fragment:null,_cannotBeABaseURLFlag:!0,_blobURLEntry:null},t._origin=null,t._type="xml",t._mode="no-quirks",t._documentElement=null,t._hasNamespaces=!1,t._nodeDocumentOverwrite=null,t}return i(t,e),Object.defineProperty(t.prototype,"_nodeDocument",{get:function(){return this._nodeDocumentOverwrite||this},set:function(e){this._nodeDocumentOverwrite=e;},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"implementation",{get:function(){return this._implementation||(this._implementation=m.create_domImplementation(this))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"URL",{get:function(){return d.urlSerializer(this._URL)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"documentURI",{get:function(){return this.URL},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"origin",{get:function(){return "null"},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"compatMode",{get:function(){return "quirks"===this._mode?"BackCompat":"CSS1Compat"},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"characterSet",{get:function(){return this._encoding.name},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"charset",{get:function(){return this._encoding.name},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"inputEncoding",{get:function(){return this._encoding.name},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"contentType",{get:function(){return this._contentType},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"doctype",{get:function(){var e,t;try{for(var r=o(this._children),n=r.next();!n.done;n=r.next()){var i=n.value;if(h.Guard.isDocumentTypeNode(i))return i}}catch(t){e={error:t};}finally{try{n&&!n.done&&(t=r.return)&&t.call(r);}finally{if(e)throw e.error}}return null},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"documentElement",{get:function(){return this._documentElement},enumerable:!0,configurable:!0}),t.prototype.getElementsByTagName=function(e){return m.node_listOfElementsWithQualifiedName(e,this)},t.prototype.getElementsByTagNameNS=function(e,t){return m.node_listOfElementsWithNamespace(e,t,this)},t.prototype.getElementsByClassName=function(e){return m.node_listOfElementsWithClassNames(e,this)},t.prototype.createElement=function(e,t){if(!m.xml_isName(e))throw new l.InvalidCharacterError;"html"===this._type&&(e=e.toLowerCase());var r=null;void 0!==t&&(r=p.isString(t)?t:t.is);var n="html"===this._type||"application/xhtml+xml"===this._contentType?f.namespace.HTML:null;return m.element_createAnElement(this,e,n,null,r,!0)},t.prototype.createElementNS=function(e,t,r){return m.document_internalCreateElementNS(this,e,t,r)},t.prototype.createDocumentFragment=function(){return m.create_documentFragment(this)},t.prototype.createTextNode=function(e){return m.create_text(this,e)},t.prototype.createCDATASection=function(e){if("html"===this._type)throw new l.NotSupportedError;if(-1!==e.indexOf("]]>"))throw new l.InvalidCharacterError;return m.create_cdataSection(this,e)},t.prototype.createComment=function(e){return m.create_comment(this,e)},t.prototype.createProcessingInstruction=function(e,t){if(!m.xml_isName(e))throw new l.InvalidCharacterError;if(-1!==t.indexOf("?>"))throw new l.InvalidCharacterError;return m.create_processingInstruction(this,e,t)},t.prototype.importNode=function(e,t){if(void 0===t&&(t=!1),h.Guard.isDocumentNode(e)||h.Guard.isShadowRoot(e))throw new l.NotSupportedError;return m.node_clone(e,this,t)},t.prototype.adoptNode=function(e){if(h.Guard.isDocumentNode(e))throw new l.NotSupportedError;if(h.Guard.isShadowRoot(e))throw new l.HierarchyRequestError;return m.document_adopt(e,this),e},t.prototype.createAttribute=function(e){if(!m.xml_isName(e))throw new l.InvalidCharacterError;return "html"===this._type&&(e=e.toLowerCase()),m.create_attr(this,e)},t.prototype.createAttributeNS=function(e,t){var r=a(m.namespace_validateAndExtract(e,t),3),n=r[0],i=r[1],o=r[2],s=m.create_attr(this,o);return s._namespace=n,s._namespacePrefix=i,s},t.prototype.createEvent=function(e){return m.event_createLegacyEvent(e)},t.prototype.createRange=function(){var e=m.create_range();return e._start=[this,0],e._end=[this,0],e},t.prototype.createNodeIterator=function(e,t,r){void 0===t&&(t=u.WhatToShow.All),void 0===r&&(r=null);var n=m.create_nodeIterator(e,e,!0);return n._whatToShow=t,n._iteratorCollection=m.create_nodeList(e),p.isFunction(r)?(n._filter=m.create_nodeFilter(),n._filter.acceptNode=r):n._filter=r,n},t.prototype.createTreeWalker=function(e,t,r){void 0===t&&(t=u.WhatToShow.All),void 0===r&&(r=null);var n=m.create_treeWalker(e,e);return n._whatToShow=t,p.isFunction(r)?(n._filter=m.create_nodeFilter(),n._filter.acceptNode=r):n._filter=r,n},t.prototype._getTheParent=function(e){return "load"===e._type?null:s.dom.window},t.prototype.getElementById=function(e){throw new Error("Mixin: NonElementParentNode not implemented.")},Object.defineProperty(t.prototype,"children",{get:function(){throw new Error("Mixin: ParentNode not implemented.")},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"firstElementChild",{get:function(){throw new Error("Mixin: ParentNode not implemented.")},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"lastElementChild",{get:function(){throw new Error("Mixin: ParentNode not implemented.")},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"childElementCount",{get:function(){throw new Error("Mixin: ParentNode not implemented.")},enumerable:!0,configurable:!0}),t.prototype.prepend=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error("Mixin: ParentNode not implemented.")},t.prototype.append=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error("Mixin: ParentNode not implemented.")},t.prototype.querySelector=function(e){throw new Error("Mixin: ParentNode not implemented.")},t.prototype.querySelectorAll=function(e){throw new Error("Mixin: ParentNode not implemented.")},t}(c.NodeImpl);t.DocumentImpl=v,y.idl_defineConst(v.prototype,"_nodeType",u.NodeType.Document);},function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},a=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value);}catch(e){i={error:e};}finally{try{n&&!n.done&&(r=o.return)&&r.call(o);}finally{if(i)throw i.error}}return a};Object.defineProperty(t,"__esModule",{value:!0});var s=r(2),u=r(34),l=r(9),c=r(7),h=r(0),p=r(12),f=function(e){function t(){var t=e.call(this)||this;return t._children=new Set,t._namespace=null,t._namespacePrefix=null,t._localName="",t._customElementState="undefined",t._customElementDefinition=null,t._is=null,t._shadowRoot=null,t._attributeList=h.create_namedNodeMap(t),t._attributeChangeSteps=[],t._name="",t._assignedSlot=null,t}return i(t,e),Object.defineProperty(t.prototype,"namespaceURI",{get:function(){return this._namespace},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"prefix",{get:function(){return this._namespacePrefix},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"localName",{get:function(){return this._localName},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"tagName",{get:function(){return this._htmlUppercasedQualifiedName},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"id",{get:function(){return h.element_getAnAttributeValue(this,"id")},set:function(e){h.element_setAnAttributeValue(this,"id",e);},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"className",{get:function(){return h.element_getAnAttributeValue(this,"class")},set:function(e){h.element_setAnAttributeValue(this,"class",e);},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"classList",{get:function(){var e=h.element_getAnAttributeByName("class",this);return null===e&&(e=h.create_attr(this._nodeDocument,"class")),h.create_domTokenList(this,e)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"slot",{get:function(){return h.element_getAnAttributeValue(this,"slot")},set:function(e){h.element_setAnAttributeValue(this,"slot",e);},enumerable:!0,configurable:!0}),t.prototype.hasAttributes=function(){return 0!==this._attributeList.length},Object.defineProperty(t.prototype,"attributes",{get:function(){return this._attributeList},enumerable:!0,configurable:!0}),t.prototype.getAttributeNames=function(){var e,t,r=[];try{for(var n=o(this._attributeList),i=n.next();!i.done;i=n.next()){var a=i.value;r.push(a._qualifiedName);}}catch(t){e={error:t};}finally{try{i&&!i.done&&(t=n.return)&&t.call(n);}finally{if(e)throw e.error}}return r},t.prototype.getAttribute=function(e){var t=h.element_getAnAttributeByName(e,this);return t?t._value:null},t.prototype.getAttributeNS=function(e,t){var r=h.element_getAnAttributeByNamespaceAndLocalName(e,t,this);return r?r._value:null},t.prototype.setAttribute=function(e,t){if(!h.xml_isName(e))throw new l.InvalidCharacterError;this._namespace===c.namespace.HTML&&"html"===this._nodeDocument._type&&(e=e.toLowerCase());for(var r=null,n=0;n<this._attributeList.length;n++){var i=this._attributeList[n];if(i._qualifiedName===e){r=i;break}}if(null===r)return (r=h.create_attr(this._nodeDocument,e))._value=t,void h.element_append(r,this);h.element_change(r,this,t);},t.prototype.setAttributeNS=function(e,t,r){var n=a(h.namespace_validateAndExtract(e,t),3),i=n[0],o=n[1],s=n[2];h.element_setAnAttributeValue(this,s,r,o,i);},t.prototype.removeAttribute=function(e){h.element_removeAnAttributeByName(e,this);},t.prototype.removeAttributeNS=function(e,t){h.element_removeAnAttributeByNamespaceAndLocalName(e,t,this);},t.prototype.hasAttribute=function(e){this._namespace===c.namespace.HTML&&"html"===this._nodeDocument._type&&(e=e.toLowerCase());for(var t=0;t<this._attributeList.length;t++){if(this._attributeList[t]._qualifiedName===e)return !0}return !1},t.prototype.toggleAttribute=function(e,t){if(!h.xml_isName(e))throw new l.InvalidCharacterError;this._namespace===c.namespace.HTML&&"html"===this._nodeDocument._type&&(e=e.toLowerCase());for(var r=null,n=0;n<this._attributeList.length;n++){var i=this._attributeList[n];if(i._qualifiedName===e){r=i;break}}return null===r?(void 0===t||!0===t)&&((r=h.create_attr(this._nodeDocument,e))._value="",h.element_append(r,this),!0):void 0!==t&&!1!==t||(h.element_removeAnAttributeByName(e,this),!1)},t.prototype.hasAttributeNS=function(e,t){for(var r=e||null,n=0;n<this._attributeList.length;n++){var i=this._attributeList[n];if(i._namespace===r&&i._localName===t)return !0}return !1},t.prototype.getAttributeNode=function(e){return h.element_getAnAttributeByName(e,this)},t.prototype.getAttributeNodeNS=function(e,t){return h.element_getAnAttributeByNamespaceAndLocalName(e,t,this)},t.prototype.setAttributeNode=function(e){return h.element_setAnAttribute(e,this)},t.prototype.setAttributeNodeNS=function(e){return h.element_setAnAttribute(e,this)},t.prototype.removeAttributeNode=function(e){for(var t=!1,r=0;r<this._attributeList.length;r++){if(this._attributeList[r]===e){t=!0;break}}if(!t)throw new l.NotFoundError;return h.element_remove(e,this),e},t.prototype.attachShadow=function(e){if(this._namespace!==c.namespace.HTML)throw new l.NotSupportedError;if(!h.customElement_isValidCustomElementName(this._localName)&&!h.customElement_isValidShadowHostName(this._localName))throw new l.NotSupportedError;if(h.customElement_isValidCustomElementName(this._localName)||null!==this._is){var t=h.customElement_lookUpACustomElementDefinition(this._nodeDocument,this._namespace,this._localName,this._is);if(null!==t&&!0===t.disableShadow)throw new l.NotSupportedError}if(null!==this._shadowRoot)throw new l.NotSupportedError;var r=h.create_shadowRoot(this._nodeDocument,this);return r._mode=e.mode,this._shadowRoot=r,r},Object.defineProperty(t.prototype,"shadowRoot",{get:function(){var e=this._shadowRoot;return null===e||"closed"===e.mode?null:e},enumerable:!0,configurable:!0}),t.prototype.closest=function(e){throw new l.NotImplementedError},t.prototype.matches=function(e){throw new l.NotImplementedError},t.prototype.webkitMatchesSelector=function(e){return this.matches(e)},t.prototype.getElementsByTagName=function(e){return h.node_listOfElementsWithQualifiedName(e,this)},t.prototype.getElementsByTagNameNS=function(e,t){return h.node_listOfElementsWithNamespace(e,t,this)},t.prototype.getElementsByClassName=function(e){return h.node_listOfElementsWithClassNames(e,this)},t.prototype.insertAdjacentElement=function(e,t){return h.element_insertAdjacent(this,e,t)},t.prototype.insertAdjacentText=function(e,t){var r=h.create_text(this._nodeDocument,t);h.element_insertAdjacent(this,e,r);},Object.defineProperty(t.prototype,"_qualifiedName",{get:function(){return this._namespacePrefix?this._namespacePrefix+":"+this._localName:this._localName},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"_htmlUppercasedQualifiedName",{get:function(){var e=this._qualifiedName;return this._namespace===c.namespace.HTML&&"html"===this._nodeDocument._type&&(e=e.toUpperCase()),e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"children",{get:function(){throw new Error("Mixin: ParentNode not implemented.")},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"firstElementChild",{get:function(){throw new Error("Mixin: ParentNode not implemented.")},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"lastElementChild",{get:function(){throw new Error("Mixin: ParentNode not implemented.")},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"childElementCount",{get:function(){throw new Error("Mixin: ParentNode not implemented.")},enumerable:!0,configurable:!0}),t.prototype.prepend=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error("Mixin: ParentNode not implemented.")},t.prototype.append=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error("Mixin: ParentNode not implemented.")},t.prototype.querySelector=function(e){throw new Error("Mixin: ParentNode not implemented.")},t.prototype.querySelectorAll=function(e){throw new Error("Mixin: ParentNode not implemented.")},Object.defineProperty(t.prototype,"previousElementSibling",{get:function(){throw new Error("Mixin: NonDocumentTypeChildNode not implemented.")},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"nextElementSibling",{get:function(){throw new Error("Mixin: NonDocumentTypeChildNode not implemented.")},enumerable:!0,configurable:!0}),t.prototype.before=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error("Mixin: ChildNode not implemented.")},t.prototype.after=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error("Mixin: ChildNode not implemented.")},t.prototype.replaceWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error("Mixin: ChildNode not implemented.")},t.prototype.remove=function(){throw new Error("Mixin: ChildNode not implemented.")},Object.defineProperty(t.prototype,"assignedSlot",{get:function(){throw new Error("Mixin: Slotable not implemented.")},enumerable:!0,configurable:!0}),t._create=function(e,r,n,i){void 0===n&&(n=null),void 0===i&&(i=null);var o=new t;return o._localName=r,o._namespace=n,o._namespacePrefix=i,o._nodeDocument=e,o},t}(u.NodeImpl);t.ElementImpl=f,p.idl_defineConst(f.prototype,"_nodeType",s.NodeType.Element);},function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0});var o=r(2),a=r(34),s=r(12),u=function(e){function t(t){void 0===t&&(t=null);var r=e.call(this)||this;return r._children=new Set,r._host=t,r}return i(t,e),t.prototype.getElementById=function(e){throw new Error("Mixin: NonElementParentNode not implemented.")},Object.defineProperty(t.prototype,"children",{get:function(){throw new Error("Mixin: ParentNode not implemented.")},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"firstElementChild",{get:function(){throw new Error("Mixin: ParentNode not implemented.")},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"lastElementChild",{get:function(){throw new Error("Mixin: ParentNode not implemented.")},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"childElementCount",{get:function(){throw new Error("Mixin: ParentNode not implemented.")},enumerable:!0,configurable:!0}),t.prototype.prepend=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error("Mixin: ParentNode not implemented.")},t.prototype.append=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error("Mixin: ParentNode not implemented.")},t.prototype.querySelector=function(e){throw new Error("Mixin: ParentNode not implemented.")},t.prototype.querySelectorAll=function(e){throw new Error("Mixin: ParentNode not implemented.")},t._create=function(e,r){void 0===r&&(r=null);var n=new t(r);return n._nodeDocument=e,n},t}(a.NodeImpl);t.DocumentFragmentImpl=u,s.idl_defineConst(u.prototype,"_nodeType",o.NodeType.DocumentFragment);},function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var a=r(2),s=r(71),u=r(0),l=r(12),c=function(e){function t(t){void 0===t&&(t="");var r=e.call(this,t)||this;return r._name="",r._assignedSlot=null,r}return i(t,e),Object.defineProperty(t.prototype,"wholeText",{get:function(){var e,t,r="";try{for(var n=o(u.text_contiguousTextNodes(this,!0)),i=n.next();!i.done;i=n.next()){r+=i.value._data;}}catch(t){e={error:t};}finally{try{i&&!i.done&&(t=n.return)&&t.call(n);}finally{if(e)throw e.error}}return r},enumerable:!0,configurable:!0}),t.prototype.splitText=function(e){return u.text_split(this,e)},Object.defineProperty(t.prototype,"assignedSlot",{get:function(){throw new Error("Mixin: Slotable not implemented.")},enumerable:!0,configurable:!0}),t._create=function(e,r){void 0===r&&(r="");var n=new t(r);return n._nodeDocument=e,n},t}(s.CharacterDataImpl);t.TextImpl=c,l.idl_defineConst(c.prototype,"_nodeType",a.NodeType.Text);},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return Object.defineProperty(e.prototype,"_startNode",{get:function(){return this._start[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"_startOffset",{get:function(){return this._start[1]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"_endNode",{get:function(){return this._end[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"_endOffset",{get:function(){return this._end[1]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"_collapsed",{get:function(){return this._start[0]===this._end[0]&&this._start[1]===this._end[1]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"startContainer",{get:function(){return this._startNode},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"startOffset",{get:function(){return this._startOffset},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"endContainer",{get:function(){return this._endNode},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"endOffset",{get:function(){return this._endOffset},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"collapsed",{get:function(){return this._collapsed},enumerable:!0,configurable:!0}),e}();t.AbstractRangeImpl=n;},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(2),i=function(){function e(e){this._activeFlag=!1,this._root=e,this._whatToShow=n.WhatToShow.All,this._filter=null;}return Object.defineProperty(e.prototype,"root",{get:function(){return this._root},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"whatToShow",{get:function(){return this._whatToShow},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"filter",{get:function(){return this._filter},enumerable:!0,configurable:!0}),e}();t.TraverserImpl=i;},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(2),i=r(0),o=r(12),a=function(){function e(e,t){this._target=null,this._relatedTarget=null,this._touchTargetList=[],this._path=[],this._currentTarget=null,this._eventPhase=n.EventPhase.None,this._stopPropagationFlag=!1,this._stopImmediatePropagationFlag=!1,this._canceledFlag=!1,this._inPassiveListenerFlag=!1,this._composedFlag=!1,this._initializedFlag=!1,this._dispatchFlag=!1,this._isTrusted=!1,this._bubbles=!1,this._cancelable=!1,this._type=e,t&&(this._bubbles=t.bubbles||!1,this._cancelable=t.cancelable||!1,this._composedFlag=t.composed||!1),this._initializedFlag=!0,this._timeStamp=(new Date).getTime();}return Object.defineProperty(e.prototype,"type",{get:function(){return this._type},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"target",{get:function(){return this._target},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"srcElement",{get:function(){return this._target},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"currentTarget",{get:function(){return this._currentTarget},enumerable:!0,configurable:!0}),e.prototype.composedPath=function(){var e=[],t=this._path;if(0===t.length)return e;var r=this._currentTarget;if(null===r)throw new Error("Event currentTarget is null.");e.push(r);for(var n=0,i=0,o=t.length-1;o>=0;){if(t[o].rootOfClosedTree&&i++,t[o].invocationTarget===r){n=o;break}t[o].slotInClosedTree&&i--,o--;}var a=i,s=i;for(o=n-1;o>=0;)t[o].rootOfClosedTree&&a++,a<=s&&e.unshift(t[o].invocationTarget),t[o].slotInClosedTree&&--a<s&&(s=a),o--;for(a=i,s=i,o=n+1;o<t.length;)t[o].slotInClosedTree&&a++,a<=s&&e.push(t[o].invocationTarget),t[o].rootOfClosedTree&&--a<s&&(s=a),o++;return e},Object.defineProperty(e.prototype,"eventPhase",{get:function(){return this._eventPhase},enumerable:!0,configurable:!0}),e.prototype.stopPropagation=function(){this._stopPropagationFlag=!0;},Object.defineProperty(e.prototype,"cancelBubble",{get:function(){return this._stopPropagationFlag},set:function(e){e&&this.stopPropagation();},enumerable:!0,configurable:!0}),e.prototype.stopImmediatePropagation=function(){this._stopPropagationFlag=!0,this._stopImmediatePropagationFlag=!0;},Object.defineProperty(e.prototype,"bubbles",{get:function(){return this._bubbles},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"cancelable",{get:function(){return this._cancelable},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"returnValue",{get:function(){return !this._canceledFlag},set:function(e){e||i.event_setTheCanceledFlag(this);},enumerable:!0,configurable:!0}),e.prototype.preventDefault=function(){i.event_setTheCanceledFlag(this);},Object.defineProperty(e.prototype,"defaultPrevented",{get:function(){return this._canceledFlag},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"composed",{get:function(){return this._composedFlag},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isTrusted",{get:function(){return this._isTrusted},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"timeStamp",{get:function(){return this._timeStamp},enumerable:!0,configurable:!0}),e.prototype.initEvent=function(e,t,r){void 0===t&&(t=!1),void 0===r&&(r=!1),this._dispatchFlag||i.event_initialize(this,e,t,r);},e.NONE=0,e.CAPTURING_PHASE=1,e.AT_TARGET=2,e.BUBBLING_PHASE=3,e}();t.EventImpl=a,o.idl_defineConst(a.prototype,"NONE",0),o.idl_defineConst(a.prototype,"CAPTURING_PHASE",1),o.idl_defineConst(a.prototype,"AT_TARGET",2),o.idl_defineConst(a.prototype,"BUBBLING_PHASE",3);},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(2),i=r(9);t.traversal_filter=function(e,t){if(e._activeFlag)throw new i.InvalidStateError;var r=1<<t._nodeType-1;if(0==(e.whatToShow&r))return n.FilterResult.Skip;if(!e.filter)return n.FilterResult.Accept;e._activeFlag=!0;var o=n.FilterResult.Reject;try{o=e.filter.acceptNode(t);}catch(t){throw e._activeFlag=!1,t}return e._activeFlag=!1,o};},function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value);}catch(e){i={error:e};}finally{try{n&&!n.done&&(r=o.return)&&r.call(o);}finally{if(i)throw i.error}}return a},i=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var o=r(6),a=r(3),s=r(1),u=r(99),l=r(73),c=r(17),h=r(173),p=r(30),f=r(52),d=r(37);t.document_elementInterface=function(e,t){return u.ElementImpl},t.document_internalCreateElementNS=function(e,t,r,i){var o=n(h.namespace_validateAndExtract(t,r),3),a=o[0],u=o[1],l=o[2],c=null;return void 0!==i&&(c=s.isString(i)?i:i.is),f.element_createAnElement(e,l,a,u,c,!0)},t.document_adopt=function(e,t){var r,n;if(e._nodeDocument!==t||null!==e._parent){var s=e._nodeDocument;if(e._parent&&d.mutation_remove(e,e._parent),t!==s)for(var u=c.tree_getFirstDescendantNode(e,!0,!0);null!==u;){if(u._nodeDocument=t,a.Guard.isElementNode(u))try{for(var h=(r=void 0,i(u._attributeList._asArray())),f=h.next();!f.done;f=h.next()){f.value._nodeDocument=t;}}catch(e){r={error:e};}finally{try{f&&!f.done&&(n=h.return)&&n.call(h);}finally{if(r)throw r.error}}o.dom.features.customElements&&a.Guard.isElementNode(u)&&"custom"===u._customElementState&&l.customElement_enqueueACustomElementCallbackReaction(u,"adoptedCallback",[s,t]),o.dom.features.steps&&p.dom_runAdoptingSteps(u,s),u=c.tree_getNextDescendantNode(e,u,!0,!0);}}};},function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var i=r(6),o=r(3),a=r(9),s=r(17),u=r(51),l=r(30);t.characterData_replaceData=function(e,t,r,c){var h,p,f=s.tree_nodeLength(e);if(t>f)throw new a.IndexSizeError("Offset exceeds character data length. Offset: "+t+", Length: "+f+", Node is "+e.nodeName+".");t+r>f&&(r=f-t),i.dom.features.mutationObservers&&u.observer_queueMutationRecord("characterData",e,null,null,e._data,[],[],null,null);var d=e._data.substring(0,t)+c+e._data.substring(t+r);e._data=d;try{for(var m=n(i.dom.rangeList),y=m.next();!y.done;y=m.next()){var v=y.value;v._start[0]===e&&v._start[1]>t&&v._start[1]<=t+r&&(v._start[1]=t),v._end[0]===e&&v._end[1]>t&&v._end[1]<=t+r&&(v._end[1]=t),v._start[0]===e&&v._start[1]>t+r&&(v._start[1]+=c.length-r),v._end[0]===e&&v._end[1]>t+r&&(v._end[1]+=c.length-r);}}catch(e){h={error:e};}finally{try{y&&!y.done&&(p=m.return)&&p.call(m);}finally{if(h)throw h.error}}i.dom.features.steps&&o.Guard.isTextNode(e)&&null!==e._parent&&l.dom_runChildTextContentChangeSteps(e._parent);},t.characterData_substringData=function(e,t,r){var n=s.tree_nodeLength(e);if(t>n)throw new a.IndexSizeError("Offset exceeds character data length. Offset: "+t+", Length: "+n+", Node is "+e.nodeName+".");return t+r>n?e._data.substr(t):e._data.substr(t,r)};},function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value);}catch(e){i={error:e};}finally{try{n&&!n.done&&(r=o.return)&&r.call(o);}finally{if(i)throw i.error}}return a},i=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(n(arguments[t]));return e},o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var a=r(7);function s(e){var t=a.string.splitAStringOnASCIIWhitespace(e);return new Set(t)}function u(e){return i(e).join(" ")}t.orderedSet_parse=s,t.orderedSet_serialize=u,t.orderedSet_sanitize=function(e){return u(s(e))},t.orderedSet_contains=function(e,t,r){var n,i,a,s;try{for(var u=o(t),l=u.next();!l.done;l=u.next()){var c=l.value,h=!1;try{for(var p=(a=void 0,o(e)),f=p.next();!f.done;f=p.next()){var d=f.value;if(r){if(d===c){h=!0;break}}else if(d.toUpperCase()===c.toUpperCase()){h=!0;break}}}catch(e){a={error:e};}finally{try{f&&!f.done&&(s=p.return)&&s.call(p);}finally{if(a)throw a.error}}if(!h)return !1}}catch(e){n={error:e};}finally{try{l&&!l.done&&(i=u.return)&&i.call(u);}finally{if(n)throw n.error}}return !0};},function(e,t,r){r(179),Object.defineProperty(t,"__esModule",{value:!0});var n=r(262),i=r(110),o=r(1);i.dom.setFeatures(!1),t.createDocument=function(){var e=(new n.DOMImplementation).createDocument(null,"root",null);return e.documentElement&&e.removeChild(e.documentElement),e},t.sanitizeInput=function(e,t){if(null==e)return e;if(void 0===t)return e+"";var r="";e+="";for(var n=0;n<e.length;n++){var i=e.charCodeAt(n);if(9===i||10===i||13===i||i>=32&&i<=55295||i>=57344&&i<=65533)r+=e.charAt(n);else if(i>=55296&&i<=56319&&n<e.length-1){var a=e.charCodeAt(n+1);a>=56320&&a<=57343?(i=1024*(i-55296)+a-56320+65536,r+=String.fromCodePoint(i),n++):r+=o.isString(t)?t:t(e.charAt(n),n,e);}else r+=o.isString(t)?t:t(e.charAt(n),n,e);}return r};},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(1),i=r(153);t.AbortController=i.AbortControllerImpl;var o=r(154);t.AbortSignal=o.AbortSignalImpl;var a=r(102);t.AbstractRange=a.AbstractRangeImpl;var s=r(157);t.Attr=s.AttrImpl;var u=r(158);t.CDATASection=u.CDATASectionImpl;var l=r(71);t.CharacterData=l.CharacterDataImpl;var c=r(263),h=r(159);t.Comment=h.CommentImpl;var p=r(171);t.CustomEvent=p.CustomEventImpl;var f=r(100);t.DocumentFragment=f.DocumentFragmentImpl;var d=r(98);t.Document=d.DocumentImpl;var m=r(264),y=r(155);t.DocumentType=y.DocumentTypeImpl;var v=r(6);t.dom=v.dom;var _=r(148);t.DOMImplementation=_.DOMImplementationImpl;var g=r(170);t.DOMTokenList=g.DOMTokenListImpl;var b=r(99);t.Element=b.ElementImpl;var x=r(104);t.Event=x.EventImpl;var w=r(70);t.EventTarget=w.EventTargetImpl;var E=r(161);t.HTMLCollection=E.HTMLCollectionImpl;var D=r(265);t.MutationObserver=D.MutationObserverImpl;var S=r(169);t.MutationRecord=S.MutationRecordImpl;var C=r(164);t.NamedNodeMap=C.NamedNodeMapImpl;var A=r(168);t.NodeFilter=A.NodeFilterImpl;var N=r(34);t.Node=N.NodeImpl;var T=r(166);t.NodeIterator=T.NodeIteratorImpl;var O=r(162);t.NodeList=O.NodeListImpl;var F=r(163);t.NodeListStatic=F.NodeListStaticImpl;var k=r(266),P=r(267),I=r(268),L=r(160);t.ProcessingInstruction=L.ProcessingInstructionImpl;var M=r(165);t.Range=M.RangeImpl;var B=r(156);t.ShadowRoot=B.ShadowRootImpl;var j=r(269),R=r(270);t.StaticRange=R.StaticRangeImpl;var z=r(101);t.Text=z.TextImpl;var U=r(103);t.Traverser=U.TraverserImpl;var G=r(167);t.TreeWalker=G.TreeWalkerImpl;var X=r(149);t.Window=X.WindowImpl;var q=r(151);t.XMLDocument=q.XMLDocumentImpl,n.applyMixin(b.ElementImpl,c.ChildNodeImpl),n.applyMixin(l.CharacterDataImpl,c.ChildNodeImpl),n.applyMixin(y.DocumentTypeImpl,c.ChildNodeImpl),n.applyMixin(d.DocumentImpl,m.DocumentOrShadowRootImpl),n.applyMixin(B.ShadowRootImpl,m.DocumentOrShadowRootImpl),n.applyMixin(b.ElementImpl,k.NonDocumentTypeChildNodeImpl),n.applyMixin(l.CharacterDataImpl,k.NonDocumentTypeChildNodeImpl),n.applyMixin(d.DocumentImpl,P.NonElementParentNodeImpl),n.applyMixin(f.DocumentFragmentImpl,P.NonElementParentNodeImpl),n.applyMixin(d.DocumentImpl,I.ParentNodeImpl),n.applyMixin(f.DocumentFragmentImpl,I.ParentNodeImpl),n.applyMixin(b.ElementImpl,I.ParentNodeImpl),n.applyMixin(z.TextImpl,j.SlotableImpl),n.applyMixin(b.ElementImpl,j.SlotableImpl);},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.EOF=0]="EOF",e[e.Declaration=1]="Declaration",e[e.DocType=2]="DocType",e[e.Element=3]="Element",e[e.Text=4]="Text",e[e.CDATA=5]="CDATA",e[e.PI=6]="PI",e[e.Comment=7]="Comment",e[e.ClosingTag=8]="ClosingTag";}(t.TokenType||(t.TokenType={}));},function(e,t,r){r(64),r(20),r(66);var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0});var o=r(1),a=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype._parse=function(e,t){var r=this,n=this._builderOptions,i=null;return o.isFunction(t)?i=this.parse(e,t.apply(this)):o.isArray(t)||o.isSet(t)?o.forEachArray(t,(function(t){return i=r.parse(e,t)}),this):o.isMap(t)||o.isObject(t)?o.forEachObject(t,(function(t,a){if(o.isFunction(a)&&(a=a.apply(r)),n.ignoreConverters||0!==t.indexOf(n.convert.att))if(n.ignoreConverters||0!==t.indexOf(n.convert.text))if(n.ignoreConverters||0!==t.indexOf(n.convert.cdata))if(n.ignoreConverters||0!==t.indexOf(n.convert.comment))if(n.ignoreConverters||0!==t.indexOf(n.convert.ins))if((o.isArray(a)||o.isSet(a))&&o.isEmpty(a));else if((o.isMap(a)||o.isObject(a))&&o.isEmpty(a))i=r.element(e,void 0,r.sanitize(t))||i;else if(n.keepNullNodes||null!=a)if(o.isArray(a)||o.isSet(a))o.forEachArray(a,(function(n){var o={};o[t]=n,i=r.parse(e,o);}),r);else if(o.isMap(a)||o.isObject(a)){(s=r.element(e,void 0,r.sanitize(t)))&&(i=s,r.parse(s,a));}else if(null!=a&&""!==a){var s;(s=r.element(e,void 0,r.sanitize(t)))&&(i=s,r.text(s,r._decodeText(r.sanitize(a))));}else i=r.element(e,void 0,r.sanitize(t))||i;else;else if(o.isString(a)){var u=a.indexOf(" "),l=-1===u?a:a.substr(0,u),c=-1===u?"":a.substr(u+1);i=r.instruction(e,r.sanitize(l),r.sanitize(c))||i;}else o.isArray(a)||o.isSet(a)?o.forEachArray(a,(function(t){var n=t.indexOf(" "),o=-1===n?t:t.substr(0,n),a=-1===n?"":t.substr(n+1);i=r.instruction(e,r.sanitize(o),r.sanitize(a))||i;}),r):o.forEachObject(a,(function(t,n){return i=r.instruction(e,r.sanitize(t),r.sanitize(n))||i}),r);else o.isArray(a)||o.isSet(a)?o.forEachArray(a,(function(t){return i=r.comment(e,r.sanitize(t))||i}),r):i=r.comment(e,r.sanitize(a))||i;else o.isArray(a)||o.isSet(a)?o.forEachArray(a,(function(t){return i=r.cdata(e,r.sanitize(t))||i}),r):i=r.cdata(e,r.sanitize(a))||i;else i=o.isMap(a)||o.isObject(a)?r.parse(e,a):r.text(e,r._decodeText(r.sanitize(a)))||i;else if(t===n.convert.att){if(o.isArray(a)||o.isSet(a))throw new Error("Invalid attribute: "+a.toString()+". "+e._debugInfo());o.forEachObject(a,(function(t,n){i=r.attribute(e,void 0,r.sanitize(t),r._decodeAttributeValue(r.sanitize(n)))||i;}));}else i=r.attribute(e,void 0,r.sanitize(t.substr(n.convert.att.length)),r._decodeAttributeValue(r.sanitize(a)))||i;}),this):(n.keepNullNodes||null!=t)&&(i=this.text(e,this._decodeText(this.sanitize(t)))||i),i||e},t}(r(75).BaseReader);t.ObjectReader=a;},function(e,t,r){var n=r(39);e.exports=new n({explicit:[r(286),r(287),r(288)]});},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=function(e){this.level=0,this._builderOptions=e,this._writerOptions=e;};t.BaseCBWriter=n;},function(e,t,r){var n=r(16),i=r(8),o=r(116);e.exports=!n&&!i((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}));},function(e,t,r){var n=r(11),i=r(13),o=n.document,a=i(o)&&i(o.createElement);e.exports=function(e){return a?o.createElement(e):{}};},function(e,t,r){var n=r(118),i=Function.toString;"function"!=typeof n.inspectSource&&(n.inspectSource=function(e){return i.call(e)}),e.exports=n.inspectSource;},function(e,t,r){var n=r(11),i=r(80),o=n["__core-js_shared__"]||i("__core-js_shared__",{});e.exports=o;},function(e,t,r){var n=r(14),i=r(187),o=r(55),a=r(15);e.exports=function(e,t){for(var r=i(t),s=a.f,u=o.f,l=0;l<r.length;l++){var c=r[l];n(e,c)||s(e,c,u(t,c));}};},function(e,t,r){var n=r(11);e.exports=n;},function(e,t,r){var n=r(14),i=r(24),o=r(122).indexOf,a=r(45);e.exports=function(e,t){var r,s=i(e),u=0,l=[];for(r in s)!n(a,r)&&n(s,r)&&l.push(r);for(;t.length>u;)n(s,r=t[u++])&&(~o(l,r)||l.push(r));return l};},function(e,t,r){var n=r(24),i=r(26),o=r(83),a=function(e){return function(t,r,a){var s,u=n(t),l=i(u.length),c=o(a,l);if(e&&r!=r){for(;l>c;)if((s=u[c++])!=s)return !0}else for(;l>c;c++)if((e||c in u)&&u[c]===r)return e||c||0;return !e&&-1}};e.exports={includes:a(!0),indexOf:a(!1)};},function(e,t,r){var n=r(8),i=/#|\.prototype\./,o=function(e,t){var r=s[a(e)];return r==l||r!=u&&("function"==typeof t?n(t):!!t)},a=o.normalize=function(e){return String(e).replace(i,".").toLowerCase()},s=o.data={},u=o.NATIVE="N",l=o.POLYFILL="P";e.exports=o;},function(e,t,r){var n=r(86);e.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator;},function(e,t,r){var n=r(5);t.f=n;},function(e,t,r){var n=r(120),i=r(14),o=r(125),a=r(15).f;e.exports=function(e){var t=n.Symbol||(n.Symbol={});i(t,e)||a(t,e,{value:o.f(e)});};},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e};},function(e,t,r){var n=r(13),i=r(59),o=r(5)("species");e.exports=function(e,t){var r;return i(e)&&("function"!=typeof(r=e.constructor)||r!==Array&&!i(r.prototype)?n(r)&&null===(r=r[o])&&(r=void 0):r=void 0),new(void 0===r?Array:r)(0===t?0:t)};},function(e,t,r){var n,i,o=r(11),a=r(193),s=o.process,u=s&&s.versions,l=u&&u.v8;l?i=(n=l.split("."))[0]+n[1]:a&&(!(n=a.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=a.match(/Chrome\/(\d+)/))&&(i=n[1]),e.exports=i&&+i;},function(e,t,r){var n=r(5),i=r(60),o=r(15),a=n("unscopables"),s=Array.prototype;null==s[a]&&o.f(s,a,{configurable:!0,value:i(null)}),e.exports=function(e){s[a][e]=!0;};},function(e,t,r){var n,i,o,a=r(132),s=r(21),u=r(14),l=r(5),c=r(44),h=l("iterator"),p=!1;[].keys&&("next"in(o=[].keys())?(i=a(a(o)))!==Object.prototype&&(n=i):p=!0),null==n&&(n={}),c||u(n,h)||s(n,h,(function(){return this})),e.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:p};},function(e,t,r){var n=r(14),i=r(27),o=r(57),a=r(196),s=o("IE_PROTO"),u=Object.prototype;e.exports=a?Object.getPrototypeOf:function(e){return e=i(e),n(e,s)?e[s]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?u:null};},function(e,t,r){var n=r(18),i=r(197);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,r={};try{(e=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(r,[]),t=r instanceof Array;}catch(e){}return function(r,o){return n(r),i(o),t?e.call(r,o):r.__proto__=o,r}}():void 0);},function(e,t,r){var n=r(56),i=r(15),o=r(40);e.exports=function(e,t,r){var a=n(t);a in e?i.f(e,a,o(0,r)):e[a]=r;};},function(e,t,r){var n=r(90),i=r(42),o=r(5)("toStringTag"),a="Arguments"==i(function(){return arguments}());e.exports=n?i:function(e){var t,r,n;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?r:a?i(t):"Object"==(n=i(t))&&"function"==typeof t.callee?"Arguments":n};},function(e,t,r){var n=r(18);e.exports=function(){var e=n(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t};},function(e,t,r){var n=r(47),i=r(35),o=function(e){return function(t,r){var o,a,s=String(i(t)),u=n(r),l=s.length;return u<0||u>=l?e?"":void 0:(o=s.charCodeAt(u))<55296||o>56319||u+1===l||(a=s.charCodeAt(u+1))<56320||a>57343?e?s.charAt(u):o:e?s.slice(u,u+2):a-56320+(o-55296<<10)+65536}};e.exports={codeAt:o(!1),charAt:o(!0)};},function(e,t,r){var n=r(4),i=r(27),o=r(61);n({target:"Object",stat:!0,forced:r(8)((function(){o(1);}))},{keys:function(e){return o(i(e))}});},function(e,t,r){var n=r(4),i=r(11),o=r(123),a=r(25),s=r(140),u=r(141),l=r(142),c=r(13),h=r(8),p=r(208),f=r(62),d=r(209);e.exports=function(e,t,r){var m=-1!==e.indexOf("Map"),y=-1!==e.indexOf("Weak"),v=m?"set":"add",_=i[e],g=_&&_.prototype,b=_,x={},w=function(e){var t=g[e];a(g,e,"add"==e?function(e){return t.call(this,0===e?0:e),this}:"delete"==e?function(e){return !(y&&!c(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return y&&!c(e)?void 0:t.call(this,0===e?0:e)}:"has"==e?function(e){return !(y&&!c(e))&&t.call(this,0===e?0:e)}:function(e,r){return t.call(this,0===e?0:e,r),this});};if(o(e,"function"!=typeof _||!(y||g.forEach&&!h((function(){(new _).entries().next();})))))b=r.getConstructor(t,e,m,v),s.REQUIRED=!0;else if(o(e,!0)){var E=new b,D=E[v](y?{}:-0,1)!=E,S=h((function(){E.has(1);})),C=p((function(e){new _(e);})),A=!y&&h((function(){for(var e=new _,t=5;t--;)e[v](t,t);return !e.has(-0)}));C||((b=t((function(t,r){l(t,b,e);var n=d(new _,t,b);return null!=r&&u(r,n[v],n,m),n}))).prototype=g,g.constructor=b),(S||A)&&(w("delete"),w("has"),m&&w("get")),(A||D)&&w(v),y&&g.clear&&delete g.clear;}return x[e]=b,n({global:!0,forced:b!=_},x),f(b,e),y||r.setStrong(b,e,m),b};},function(e,t,r){var n=r(45),i=r(13),o=r(14),a=r(15).f,s=r(58),u=r(204),l=s("meta"),c=0,h=Object.isExtensible||function(){return !0},p=function(e){a(e,l,{value:{objectID:"O"+ ++c,weakData:{}}});},f=e.exports={REQUIRED:!1,fastKey:function(e,t){if(!i(e))return "symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!o(e,l)){if(!h(e))return "F";if(!t)return "E";p(e);}return e[l].objectID},getWeakData:function(e,t){if(!o(e,l)){if(!h(e))return !0;if(!t)return !1;p(e);}return e[l].weakData},onFreeze:function(e){return u&&f.REQUIRED&&h(e)&&!o(e,l)&&p(e),e}};n[l]=!0;},function(e,t,r){var n=r(18),i=r(205),o=r(26),a=r(87),s=r(206),u=r(207),l=function(e,t){this.stopped=e,this.result=t;};(e.exports=function(e,t,r,c,h){var p,f,d,m,y,v,_,g=a(t,r,c?2:1);if(h)p=e;else {if("function"!=typeof(f=s(e)))throw TypeError("Target is not iterable");if(i(f)){for(d=0,m=o(e.length);m>d;d++)if((y=c?g(n(_=e[d])[0],_[1]):g(e[d]))&&y instanceof l)return y;return new l(!1)}p=f.call(e);}for(v=p.next;!(_=v.call(p)).done;)if("object"==typeof(y=u(p,g,_.value,c))&&y&&y instanceof l)return y;return new l(!1)}).stop=function(e){return new l(!0,e)};},function(e,t){e.exports=function(e,t,r){if(!(e instanceof t))throw TypeError("Incorrect "+(r?r+" ":"")+"invocation");return e};},function(e,t,r){var n=r(15).f,i=r(60),o=r(210),a=r(87),s=r(142),u=r(141),l=r(88),c=r(211),h=r(16),p=r(140).fastKey,f=r(43),d=f.set,m=f.getterFor;e.exports={getConstructor:function(e,t,r,l){var c=e((function(e,n){s(e,c,t),d(e,{type:t,index:i(null),first:void 0,last:void 0,size:0}),h||(e.size=0),null!=n&&u(n,e[l],e,r);})),f=m(t),y=function(e,t,r){var n,i,o=f(e),a=v(e,t);return a?a.value=r:(o.last=a={index:i=p(t,!0),key:t,value:r,previous:n=o.last,next:void 0,removed:!1},o.first||(o.first=a),n&&(n.next=a),h?o.size++:e.size++,"F"!==i&&(o.index[i]=a)),e},v=function(e,t){var r,n=f(e),i=p(t);if("F"!==i)return n.index[i];for(r=n.first;r;r=r.next)if(r.key==t)return r};return o(c.prototype,{clear:function(){for(var e=f(this),t=e.index,r=e.first;r;)r.removed=!0,r.previous&&(r.previous=r.previous.next=void 0),delete t[r.index],r=r.next;e.first=e.last=void 0,h?e.size=0:this.size=0;},delete:function(e){var t=f(this),r=v(this,e);if(r){var n=r.next,i=r.previous;delete t.index[r.index],r.removed=!0,i&&(i.next=n),n&&(n.previous=i),t.first==r&&(t.first=n),t.last==r&&(t.last=i),h?t.size--:this.size--;}return !!r},forEach:function(e){for(var t,r=f(this),n=a(e,arguments.length>1?arguments[1]:void 0,3);t=t?t.next:r.first;)for(n(t.value,t.key,this);t&&t.removed;)t=t.previous;},has:function(e){return !!v(this,e)}}),o(c.prototype,r?{get:function(e){var t=v(this,e);return t&&t.value},set:function(e,t){return y(this,0===e?0:e,t)}}:{add:function(e){return y(this,e=0===e?0:e,e)}}),h&&n(c.prototype,"size",{get:function(){return f(this).size}}),c},setStrong:function(e,t,r){var n=t+" Iterator",i=m(t),o=m(n);l(e,t,(function(e,t){d(this,{type:n,target:e,state:i(e),kind:t,last:void 0});}),(function(){for(var e=o(this),t=e.kind,r=e.last;r&&r.removed;)r=r.previous;return e.target&&(e.last=r=r?r.next:e.state.first)?"keys"==t?{value:r.key,done:!1}:"values"==t?{value:r.value,done:!1}:{value:[r.key,r.value],done:!1}:(e.target=void 0,{value:void 0,done:!0})}),r?"entries":"values",!r,!0),c(t);}};},function(e,t,r){var n,i=r(4),o=r(55).f,a=r(26),s=r(222),u=r(35),l=r(224),c=r(44),h="".endsWith,p=Math.min,f=l("endsWith");i({target:"String",proto:!0,forced:!!(c||f||(n=o(String.prototype,"endsWith"),!n||n.writable))&&!f},{endsWith:function(e){var t=String(u(this));s(e);var r=arguments.length>1?arguments[1]:void 0,n=a(t.length),i=void 0===r?n:p(a(r),n),o=String(e);return h?h.call(t,o,i):t.slice(i-o.length,i)===o}});},function(e,t,r){(function(e){
  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <http://feross.org>
   * @license  MIT
   */
  var n=r(229),i=r(230),o=r(231);function a(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return h(this,e)}return l(this,e,t,r)}function l(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return "undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=p(e,t);return e}(e,t,r,n):"string"==typeof t?function(e,t,r){"string"==typeof r&&""!==r||(r="utf8");if(!u.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|d(t,r),i=(e=s(e,n)).write(t,r);i!==n&&(e=e.slice(0,i));return e}(e,t,r):function(e,t){if(u.isBuffer(t)){var r=0|f(t.length);return 0===(e=s(e,r)).length||t.copy(e,0,0,r),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return "number"!=typeof t.length||(n=t.length)!=n?s(e,0):p(e,t);if("Buffer"===t.type&&o(t.data))return p(e,t.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function c(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function h(e,t){if(c(t),e=s(e,t<0?0:0|f(t)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function p(e,t){var r=t.length<0?0:0|f(t.length);e=s(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function f(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function d(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return z(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return U(e).length;default:if(n)return z(e).length;t=(""+t).toLowerCase(),n=!0;}}function m(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return "";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return "";if((r>>>=0)<=(t>>>=0))return "";for(e||(e="utf8");;)switch(e){case"hex":return T(this,t,r);case"utf8":case"utf-8":return C(this,t,r);case"ascii":return A(this,t,r);case"latin1":case"binary":return N(this,t,r);case"base64":return S(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return O(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0;}}function y(e,t,r){var n=e[t];e[t]=e[r],e[r]=n;}function v(e,t,r,n,i){if(0===e.length)return -1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return -1;r=e.length-1;}else if(r<0){if(!i)return -1;r=0;}if("string"==typeof t&&(t=u.from(t,n)),u.isBuffer(t))return 0===t.length?-1:_(e,t,r,n,i);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):_(e,[t],r,n,i);throw new TypeError("val must be string, number or Buffer")}function _(e,t,r,n,i){var o,a=1,s=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return -1;a=2,s/=2,u/=2,r/=2;}function l(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(i){var c=-1;for(o=r;o<s;o++)if(l(e,o)===l(t,-1===c?0:o-c)){if(-1===c&&(c=o),o-c+1===u)return c*a}else -1!==c&&(o-=o-c),c=-1;}else for(r+u>s&&(r=s-u),o=r;o>=0;o--){for(var h=!0,p=0;p<u;p++)if(l(e,o+p)!==l(t,p)){h=!1;break}if(h)return o}return -1}function g(e,t,r,n){r=Number(r)||0;var i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;var o=t.length;if(o%2!=0)throw new TypeError("Invalid hex string");n>o/2&&(n=o/2);for(var a=0;a<n;++a){var s=parseInt(t.substr(2*a,2),16);if(isNaN(s))return a;e[r+a]=s;}return a}function b(e,t,r,n){return G(z(t,e.length-r),e,r,n)}function x(e,t,r,n){return G(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function w(e,t,r,n){return x(e,t,r,n)}function E(e,t,r,n){return G(U(t),e,r,n)}function D(e,t,r,n){return G(function(e,t){for(var r,n,i,o=[],a=0;a<e.length&&!((t-=2)<0);++a)r=e.charCodeAt(a),n=r>>8,i=r%256,o.push(i),o.push(n);return o}(t,e.length-r),e,r,n)}function S(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function C(e,t,r){r=Math.min(e.length,r);for(var n=[],i=t;i<r;){var o,a,s,u,l=e[i],c=null,h=l>239?4:l>223?3:l>191?2:1;if(i+h<=r)switch(h){case 1:l<128&&(c=l);break;case 2:128==(192&(o=e[i+1]))&&(u=(31&l)<<6|63&o)>127&&(c=u);break;case 3:o=e[i+1],a=e[i+2],128==(192&o)&&128==(192&a)&&(u=(15&l)<<12|(63&o)<<6|63&a)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:o=e[i+1],a=e[i+2],s=e[i+3],128==(192&o)&&128==(192&a)&&128==(192&s)&&(u=(15&l)<<18|(63&o)<<12|(63&a)<<6|63&s)>65535&&u<1114112&&(c=u);}null===c?(c=65533,h=1):c>65535&&(c-=65536,n.push(c>>>10&1023|55296),c=56320|1023&c),n.push(c),i+=h;}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=4096));return r}(n)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return !1}}(),t.kMaxLength=a(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,r){return l(null,e,t,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,r){return function(e,t,r,n){return c(t),t<=0?s(e,t):void 0!==r?"string"==typeof n?s(e,t).fill(r,n):s(e,t).fill(r):s(e,t)}(null,e,t,r)},u.allocUnsafe=function(e){return h(null,e)},u.allocUnsafeSlow=function(e){return h(null,e)},u.isBuffer=function(e){return !(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,i=0,o=Math.min(r,n);i<o;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return !0;default:return !1}},u.concat=function(e,t){if(!o(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=u.allocUnsafe(t),i=0;for(r=0;r<e.length;++r){var a=e[r];if(!u.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(n,i),i+=a.length;}return n},u.byteLength=d,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)y(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)y(this,t,t+3),y(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)y(this,t,t+7),y(this,t+1,t+6),y(this,t+2,t+5),y(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?C(this,0,e):m.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,r,n,i){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),t<0||r>e.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&t>=r)return 0;if(n>=i)return -1;if(t>=r)return 1;if(this===e)return 0;for(var o=(i>>>=0)-(n>>>=0),a=(r>>>=0)-(t>>>=0),s=Math.min(o,a),l=this.slice(n,i),c=e.slice(t,r),h=0;h<s;++h)if(l[h]!==c[h]){o=l[h],a=c[h];break}return o<a?-1:a<o?1:0},u.prototype.includes=function(e,t,r){return -1!==this.indexOf(e,t,r)},u.prototype.indexOf=function(e,t,r){return v(this,e,t,r,!0)},u.prototype.lastIndexOf=function(e,t,r){return v(this,e,t,r,!1)},u.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else {if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0);}var i=this.length-t;if((void 0===r||r>i)&&(r=i),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var o=!1;;)switch(n){case"hex":return g(this,e,t,r);case"utf8":case"utf-8":return b(this,e,t,r);case"ascii":return x(this,e,t,r);case"latin1":case"binary":return w(this,e,t,r);case"base64":return E(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return D(this,e,t,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0;}},u.prototype.toJSON=function(){return {type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function A(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(127&e[i]);return n}function N(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function T(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var i="",o=t;o<r;++o)i+=R(e[o]);return i}function O(e,t,r){for(var n=e.slice(t,r),i="",o=0;o<n.length;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function F(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function k(e,t,r,n,i,o){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<o)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function P(e,t,r,n){t<0&&(t=65535+t+1);for(var i=0,o=Math.min(e.length-r,2);i<o;++i)e[r+i]=(t&255<<8*(n?i:1-i))>>>8*(n?i:1-i);}function I(e,t,r,n){t<0&&(t=4294967295+t+1);for(var i=0,o=Math.min(e.length-r,4);i<o;++i)e[r+i]=t>>>8*(n?i:3-i)&255;}function L(e,t,r,n,i,o){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function M(e,t,r,n,o){return o||L(e,0,r,4),i.write(e,t,r,n,23,4),r+4}function B(e,t,r,n,o){return o||L(e,0,r,8),i.write(e,t,r,n,52,8),r+8}u.prototype.slice=function(e,t){var r,n=this.length;if((e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=u.prototype;else {var i=t-e;r=new u(i,void 0);for(var o=0;o<i;++o)r[o]=this[o+e];}return r},u.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||F(e,t,this.length);for(var n=this[e],i=1,o=0;++o<t&&(i*=256);)n+=this[e+o]*i;return n},u.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||F(e,t,this.length);for(var n=this[e+--t],i=1;t>0&&(i*=256);)n+=this[e+--t]*i;return n},u.prototype.readUInt8=function(e,t){return t||F(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||F(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||F(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||F(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||F(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||F(e,t,this.length);for(var n=this[e],i=1,o=0;++o<t&&(i*=256);)n+=this[e+o]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*t)),n},u.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||F(e,t,this.length);for(var n=t,i=1,o=this[e+--n];n>0&&(i*=256);)o+=this[e+--n]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*t)),o},u.prototype.readInt8=function(e,t){return t||F(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||F(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(e,t){t||F(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(e,t){return t||F(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||F(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||F(e,4,this.length),i.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||F(e,4,this.length),i.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||F(e,8,this.length),i.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||F(e,8,this.length),i.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||k(this,e,t,r,Math.pow(2,8*r)-1,0);var i=1,o=0;for(this[t]=255&e;++o<r&&(i*=256);)this[t+o]=e/i&255;return t+r},u.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||k(this,e,t,r,Math.pow(2,8*r)-1,0);var i=r-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+r},u.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||k(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||k(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):P(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||k(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):P(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||k(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):I(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||k(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):I(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);k(this,e,t,r,i-1,-i);}var o=0,a=1,s=0;for(this[t]=255&e;++o<r&&(a*=256);)e<0&&0===s&&0!==this[t+o-1]&&(s=1),this[t+o]=(e/a>>0)-s&255;return t+r},u.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);k(this,e,t,r,i-1,-i);}var o=r-1,a=1,s=0;for(this[t+o]=255&e;--o>=0&&(a*=256);)e<0&&0===s&&0!==this[t+o+1]&&(s=1),this[t+o]=(e/a>>0)-s&255;return t+r},u.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||k(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||k(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):P(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||k(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):P(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||k(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):I(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||k(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):I(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,r){return M(this,e,t,!0,r)},u.prototype.writeFloatBE=function(e,t,r){return M(this,e,t,!1,r)},u.prototype.writeDoubleLE=function(e,t,r){return B(this,e,t,!0,r)},u.prototype.writeDoubleBE=function(e,t,r){return B(this,e,t,!1,r)},u.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var i,o=n-r;if(this===e&&r<t&&t<n)for(i=o-1;i>=0;--i)e[i+t]=this[i+r];else if(o<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)e[i+t]=this[i+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+o),t);return o},u.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i);}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else "number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var o;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(o=t;o<r;++o)this[o]=e;else {var a=u.isBuffer(e)?e:z(new u(e,n).toString()),s=a.length;for(o=0;o<r-t;++o)this[o+t]=a[o%s];}return this};var j=/[^+\/0-9A-Za-z-_]/g;function R(e){return e<16?"0"+e.toString(16):e.toString(16)}function z(e,t){var r;t=t||1/0;for(var n=e.length,i=null,o=[],a=0;a<n;++a){if((r=e.charCodeAt(a))>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(a+1===n){(t-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320);}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;o.push(r);}else if(r<2048){if((t-=2)<0)break;o.push(r>>6|192,63&r|128);}else if(r<65536){if((t-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128);}else {if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128);}}return o}function U(e){return n.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(j,"")).length<2)return "";for(;e.length%4!=0;)e+="=";return e}(e))}function G(e,t,r,n){for(var i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}}).call(this,r(78));},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.isASCIIByte=function(e){return e>=0&&e<=127};},function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value);}catch(e){i={error:e};}finally{try{n&&!n.done&&(r=o.return)&&r.call(o);}finally{if(i)throw i.error}}return a},i=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(n(arguments[t]));return e};Object.defineProperty(t,"__esModule",{value:!0}),t.length=function(e){return e.length},t.byteLowercase=function(e){for(var t=0;t<e.length;t++){var r=e[t];r>=65&&r<=90&&(e[t]=r+32);}},t.byteUppercase=function(e){for(var t=0;t<e.length;t++){var r=e[t];r>=97&&r<=122&&(e[t]=r-32);}},t.byteCaseInsensitiveMatch=function(e,t){if(e.length!==t.length)return !1;for(var r=0;r<e.length;r++){var n=e[r],i=t[r];if(n>=65&&n<=90&&(n+=32),i>=65&&i<=90&&(i+=32),n!==i)return !1}return !0},t.startsWith=function(e,t){for(var r=0;;){if(r>=e.length)return !1;if(r>=t.length)return !0;if(e[r]!==t[r])return !1;r++;}},t.byteLessThan=function(e,t){for(var r=0;;){if(r>=e.length)return !1;if(r>=t.length)return !0;var n=e[r],i=t[r];if(n<i)return !0;if(n>i)return !1;r++;}},t.isomorphicDecode=function(e){return String.fromCodePoint.apply(String,i(e))};},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(6),i=r(7),o=r(0),a=r(12),s=function(){function e(e){this._associatedDocument=e||n.dom.window.document;}return e.prototype.createDocumentType=function(e,t,r){return o.namespace_validate(e),o.create_documentType(this._associatedDocument,e,t,r)},e.prototype.createDocument=function(e,t,r){void 0===r&&(r=null);var n=o.create_xmlDocument(),a=null;return t&&(a=o.document_internalCreateElementNS(n,e,t)),r&&n.appendChild(r),a&&n.appendChild(a),n._origin=this._associatedDocument._origin,e===i.namespace.HTML?n._contentType="application/xhtml+xml":e===i.namespace.SVG?n._contentType="image/svg+xml":n._contentType="application/xml",n},e.prototype.createHTMLDocument=function(e){var t=o.create_document();t._type="html",t._contentType="text/html",t.appendChild(o.create_documentType(t,"html","",""));var r=o.element_createAnElement(t,"html",i.namespace.HTML);t.appendChild(r);var n=o.element_createAnElement(t,"head",i.namespace.HTML);if(r.appendChild(n),void 0!==e){var a=o.element_createAnElement(t,"title",i.namespace.HTML);n.appendChild(a);var s=o.create_text(t,e);a.appendChild(s);}var u=o.element_createAnElement(t,"body",i.namespace.HTML);return r.appendChild(u),t._origin=this._associatedDocument._origin,t},e.prototype.hasFeature=function(){return !0},e._create=function(t){return new e(t)},e}();t.DOMImplementationImpl=s,a.idl_defineConst(s.prototype,"_ID","@oozcitak/dom");},function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0});var o=r(70),a=r(1),s=r(0),u=function(e){function t(){var t=e.call(this)||this;return t._signalSlots=new Set,t._mutationObserverMicrotaskQueued=!1,t._mutationObservers=new Set,t._iteratorList=new a.FixedSizeSet,t._associatedDocument=s.create_document(),t}return i(t,e),Object.defineProperty(t.prototype,"document",{get:function(){return this._associatedDocument},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"event",{get:function(){return this._currentEvent},enumerable:!0,configurable:!0}),t._create=function(){return new t},t}(o.EventTargetImpl);t.WindowImpl=u;},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(2),i=function(){function e(){}return e.isNode=function(e){return !!e&&void 0!==e._nodeType},e.isDocumentNode=function(t){return e.isNode(t)&&t._nodeType===n.NodeType.Document},e.isDocumentTypeNode=function(t){return e.isNode(t)&&t._nodeType===n.NodeType.DocumentType},e.isDocumentFragmentNode=function(t){return e.isNode(t)&&t._nodeType===n.NodeType.DocumentFragment},e.isAttrNode=function(t){return e.isNode(t)&&t._nodeType===n.NodeType.Attribute},e.isCharacterDataNode=function(t){if(!e.isNode(t))return !1;var r=t._nodeType;return r===n.NodeType.Text||r===n.NodeType.ProcessingInstruction||r===n.NodeType.Comment||r===n.NodeType.CData},e.isTextNode=function(t){return e.isNode(t)&&(t._nodeType===n.NodeType.Text||t._nodeType===n.NodeType.CData)},e.isExclusiveTextNode=function(t){return e.isNode(t)&&t._nodeType===n.NodeType.Text},e.isCDATASectionNode=function(t){return e.isNode(t)&&t._nodeType===n.NodeType.CData},e.isCommentNode=function(t){return e.isNode(t)&&t._nodeType===n.NodeType.Comment},e.isProcessingInstructionNode=function(t){return e.isNode(t)&&t._nodeType===n.NodeType.ProcessingInstruction},e.isElementNode=function(t){return e.isNode(t)&&t._nodeType===n.NodeType.Element},e.isCustomElementNode=function(t){return e.isElementNode(t)&&"custom"===t._customElementState},e.isShadowRoot=function(e){return !!e&&void 0!==e.host},e.isMouseEvent=function(e){return !!e&&void 0!==e.screenX&&null!=e.screenY},e.isSlotable=function(t){return !!t&&void 0!==t._name&&void 0!==t._assignedSlot&&(e.isTextNode(t)||e.isElementNode(t))},e.isSlot=function(t){return !!t&&void 0!==t._name&&void 0!==t._assignedNodes&&e.isElementNode(t)},e.isWindow=function(e){return !!e&&void 0!==e.navigator},e.isEventListener=function(e){return !!e&&void 0!==e.handleEvent},e.isRegisteredObserver=function(e){return !!e&&void 0!==e.observer&&void 0!==e.options},e.isTransientRegisteredObserver=function(t){return !!t&&void 0!==t.source&&e.isRegisteredObserver(t)},e}();t.Guard=i;},function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(){return e.call(this)||this}return i(t,e),t}(r(98).DocumentImpl);t.XMLDocumentImpl=o;},function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},i=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value);}catch(e){i={error:e};}finally{try{n&&!n.done&&(r=o.return)&&r.call(o);}finally{if(i)throw i.error}}return a};Object.defineProperty(t,"__esModule",{value:!0});var o,a=r(1),s=r(243),u=r(7),l=r(244),c={ftp:21,file:null,http:80,https:443,ws:80,wss:443},h=/[\0-\x1F\x7F-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,p=/[ "<>`]|[\0-\x1F\x7F-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,f=/[ "<>`#?{}]|[\0-\x1F\x7F-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,d=/[ "<>`#?{}/:;=@\[\]\\\^\|]|[\0-\x1F\x7F-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,m=/[0-9A-Za-z!\$&-\/:;=\?@_~\xA0-\uD7FF\uE000-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uD83E\uD840-\uD87E\uD880-\uD8BE\uD8C0-\uD8FE\uD900-\uD93E\uD940-\uD97E\uD980-\uD9BE\uD9C0-\uD9FE\uDA00-\uDA3E\uDA40-\uDA7E\uDA80-\uDABE\uDAC0-\uDAFE\uDB00-\uDB3E\uDB40-\uDB7E\uDB80-\uDBBE\uDBC0-\uDBFE][\uDC00-\uDFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDC00-\uDFFD]/,y=/[\0\t\f\r #%/:?@\[\\\]]/;function v(e){void 0!==o&&o.call(null,"Validation Error: "+e);}function _(){return {scheme:"",username:"",password:"",host:null,port:null,path:[],query:null,fragment:null,_cannotBeABaseURLFlag:!1,_blobURLEntry:null}}function g(e){return e in c}function b(e){return g(e.scheme)}function x(e){return c[e]||null}function w(e){return ""!==e.username||""!==e.password}function E(e,t){var r,i;void 0===t&&(t=!1);var o=e.scheme+":";if(null!==e.host?(o+="//",w(e)&&(o+=e.username,""!==e.password&&(o+=":"+e.password),o+="@"),o+=D(e.host),null!==e.port&&(o+=":"+e.port)):null===e.host&&"file"===e.scheme&&(o+="//"),e._cannotBeABaseURLFlag)o+=e.path[0];else try{for(var a=n(e.path),s=a.next();!s.done;s=a.next()){o+="/"+s.value;}}catch(e){r={error:e};}finally{try{s&&!s.done&&(i=a.return)&&i.call(a);}finally{if(r)throw r.error}}return null!==e.query&&(o+="?"+e.query),t||null===e.fragment||(o+="#"+e.fragment),o}function D(e){return a.isNumber(e)?S(e):a.isArray(e)?"["+C(e)+"]":e}function S(e){for(var t="",r=e,n=1;n<=4;n++)t=(r%256).toString()+t,4!==n&&(t="."+t),r=Math.floor(r/256);return t}function C(e){for(var t="",r=null,n=-1,i=0,o=0,a=0;a<8;a++)if(0===e[a]){i=1;for(var s=a+1;s<8&&0===e[s];s++)i++;i>o&&(o=i,n=a);}o>1&&(r=n);for(var u=!1,l=0;l<8;l++)u&&0===e[l]||(u&&(u=!1),r!==l?(t+=e[l].toString(16),7!==l&&(t+=":")):(t+=0===l?"::":":",u=!0));return t}function A(e,t,r,i,o){var l,c,y,_;if(void 0===i){i={scheme:"",username:"",password:"",host:null,port:null,path:[],query:null,fragment:null,_cannotBeABaseURLFlag:!1,_blobURLEntry:null};var E=/^[\u0000-\u001F\u0020]+/,D=/[\u0000-\u001F\u0020]+$/;(E.test(e)||D.test(e))&&v("Input string contains leading or trailing control characters or space."),e=(e=e.replace(E,"")).replace(D,"");}var S=/[\u0009\u000A\u000D]/g;S.test(e)&&v("Input string contains tab or newline characters."),e=e.replace(S,"");var C=void 0===o?s.ParserState.SchemeStart:o;void 0===t&&(t=null);for(var A=void 0===r||"replacement"===r||"UTF-16BE"===r||"UTF-16LE"===r?"UTF-8":r,L="",M=!1,B=!1,j=!1,R=new a.StringWalker(e);;){switch(C){case s.ParserState.SchemeStart:if(u.codePoint.ASCIIAlpha.test(R.c()))L+=R.c().toLowerCase(),C=s.ParserState.Scheme;else {if(void 0!==o)return v("Invalid scheme start character."),null;C=s.ParserState.NoScheme,R.pointer--;}break;case s.ParserState.Scheme:if(u.codePoint.ASCIIAlphanumeric.test(R.c())||"+"===R.c()||"-"===R.c()||"."===R.c())L+=R.c().toLowerCase();else {if(":"!==R.c()){if(void 0===o){L="",C=s.ParserState.NoScheme,R.pointer=0;continue}return v("Invalid input string."),null}if(void 0!==o){if(g(i.scheme)&&!g(L))return i;if(!g(i.scheme)&&g(L))return i;if((w(i)||null!==i.port)&&"file"===L)return i;if("file"===i.scheme&&(""===i.host||null===i.host))return i}if(i.scheme=L,void 0!==o)return i.port===x(i.scheme)&&(i.port=null),i;L="","file"===i.scheme?(R.remaining().startsWith("//")||v("Invalid file URL scheme, '//' expected."),C=s.ParserState.File):b(i)&&null!==t&&t.scheme===i.scheme?C=s.ParserState.SpecialRelativeOrAuthority:b(i)?C=s.ParserState.SpecialAuthoritySlashes:R.remaining().startsWith("/")?(C=s.ParserState.PathOrAuthority,R.pointer++):(i._cannotBeABaseURLFlag=!0,i.path.push(""),C=s.ParserState.CannotBeABaseURLPath);}break;case s.ParserState.NoScheme:if(null===t||t._cannotBeABaseURLFlag&&"#"!==R.c())return v("Invalid input string."),null;t._cannotBeABaseURLFlag&&"#"===R.c()?(i.scheme=t.scheme,i.path=u.list.clone(t.path),i.query=t.query,i.fragment="",i._cannotBeABaseURLFlag=!0,C=s.ParserState.Fragment):"file"!==t.scheme?(C=s.ParserState.Relative,R.pointer--):(C=s.ParserState.File,R.pointer--);break;case s.ParserState.SpecialRelativeOrAuthority:"/"===R.c()&&R.remaining().startsWith("/")?(C=s.ParserState.SpecialAuthorityIgnoreSlashes,R.pointer++):(v("Invalid input string."),C=s.ParserState.Relative,R.pointer--);break;case s.ParserState.PathOrAuthority:"/"===R.c()?C=s.ParserState.Authority:(C=s.ParserState.Path,R.pointer--);break;case s.ParserState.Relative:if(null===t)throw new Error("Invalid parser state. Base URL is null.");switch(i.scheme=t.scheme,R.c()){case"":i.username=t.username,i.password=t.password,i.host=t.host,i.port=t.port,i.path=u.list.clone(t.path),i.query=t.query;break;case"/":C=s.ParserState.RelativeSlash;break;case"?":i.username=t.username,i.password=t.password,i.host=t.host,i.port=t.port,i.path=u.list.clone(t.path),i.query="",C=s.ParserState.Query;break;case"#":i.username=t.username,i.password=t.password,i.host=t.host,i.port=t.port,i.path=u.list.clone(t.path),i.query=t.query,i.fragment="",C=s.ParserState.Fragment;break;default:b(i)&&"\\"===R.c()?(v("Invalid input string."),C=s.ParserState.RelativeSlash):(i.username=t.username,i.password=t.password,i.host=t.host,i.port=t.port,i.path=u.list.clone(t.path),0!==i.path.length&&i.path.splice(i.path.length-1,1),C=s.ParserState.Path,R.pointer--);}break;case s.ParserState.RelativeSlash:if(!b(i)||"/"!==R.c()&&"\\"!==R.c())if("/"===R.c())C=s.ParserState.Authority;else {if(null===t)throw new Error("Invalid parser state. Base URL is null.");i.username=t.username,i.password=t.password,i.host=t.host,i.port=t.port,C=s.ParserState.Path,R.pointer--;}else "\\"===R.c()&&v("Invalid input string."),C=s.ParserState.SpecialAuthorityIgnoreSlashes;break;case s.ParserState.SpecialAuthoritySlashes:"/"===R.c()&&R.remaining().startsWith("/")?(C=s.ParserState.SpecialAuthorityIgnoreSlashes,R.pointer++):(v("Expected '//'."),C=s.ParserState.SpecialAuthorityIgnoreSlashes,R.pointer--);break;case s.ParserState.SpecialAuthorityIgnoreSlashes:"/"!==R.c()&&"\\"!==R.c()?(C=s.ParserState.Authority,R.pointer--):v("Unexpected '/' or '\\'.");break;case s.ParserState.Authority:if("@"===R.c()){v("Unexpected '@'."),M&&(L="%40"+L),M=!0;try{for(var U=(l=void 0,n(L)),G=U.next();!G.done;G=U.next()){var q=G.value;if(":"!==q||j){var W=X(q,d);j?i.password+=W:i.username+=W;}else j=!0;}}catch(e){l={error:e};}finally{try{G&&!G.done&&(c=U.return)&&c.call(U);}finally{if(l)throw l.error}}L="";}else if(""===R.c()||"/"===R.c()||"?"===R.c()||"#"===R.c()||b(i)&&"\\"===R.c()){if(M&&""===L)return v("Invalid input string."),null;R.pointer-=L.length+1,L="",C=s.ParserState.Host;}else L+=R.c();break;case s.ParserState.Host:case s.ParserState.Hostname:if(void 0!==o&&"file"===i.scheme)R.pointer--,C=s.ParserState.FileHost;else if(":"!==R.c()||B)if(""===R.c()||"/"===R.c()||"?"===R.c()||"#"===R.c()||b(i)&&"\\"===R.c()){if(R.pointer--,b(i)&&""===L)return v("Invalid input string."),null;if(void 0!==o&&""===L&&(w(i)||null!==i.port))return v("Invalid input string."),i;if(null===(J=I(L,!b(i))))return null;if(i.host=J,L="",C=s.ParserState.PathStart,void 0!==o)return i}else "["===R.c()&&(B=!0),"]"===R.c()&&(B=!1),L+=R.c();else {if(""===L)return v("Invalid input string."),null;if(null===(J=I(L,!b(i))))return null;if(i.host=J,L="",C=s.ParserState.Port,o===s.ParserState.Hostname)return i}break;case s.ParserState.Port:if(u.codePoint.ASCIIDigit.test(R.c()))L+=R.c();else {if(!(""===R.c()||"/"===R.c()||"?"===R.c()||"#"===R.c()||b(i)&&"\\"===R.c()||o))return v("Invalid input string."),null;if(""!==L&&""!==L){var H=parseInt(L,10);if(H>Math.pow(2,16)-1)return v("Invalid port number."),null;i.port=H===x(i.scheme)?null:H,L="";}if(void 0!==o)return i;C=s.ParserState.PathStart,R.pointer--;}break;case s.ParserState.File:if(i.scheme="file","/"===R.c()||"\\"===R.c())"\\"===R.c()&&v("Invalid input string."),C=s.ParserState.FileSlash;else if(null!==t&&"file"===t.scheme)switch(R.c()){case"":i.host=t.host,i.path=u.list.clone(t.path),i.query=t.query;break;case"?":i.host=t.host,i.path=u.list.clone(t.path),i.query="",C=s.ParserState.Query;break;case"#":i.host=t.host,i.path=u.list.clone(t.path),i.query=t.query,i.fragment="",C=s.ParserState.Fragment;break;default:P(R.substring())?v("Unexpected windows drive letter in input string."):(i.host=t.host,i.path=u.list.clone(t.path),O(i)),C=s.ParserState.Path,R.pointer--;}else C=s.ParserState.Path,R.pointer--;break;case s.ParserState.FileSlash:"/"===R.c()||"\\"===R.c()?("\\"===R.c()&&v("Invalid input string."),C=s.ParserState.FileHost):(null===t||"file"!==t.scheme||P(R.substring())||(F(t.path[0])?i.path.push(t.path[0]):i.host=t.host),C=s.ParserState.Path,R.pointer--);break;case s.ParserState.FileHost:if(""===R.c()||"/"===R.c()||"\\"===R.c()||"?"===R.c()||"#"===R.c())if(R.pointer--,void 0===o&&k(L))v("Unexpected windows drive letter in input string."),C=s.ParserState.Path;else if(""===L){if(i.host="",void 0!==o)return i;C=s.ParserState.PathStart;}else {var J;if(null===(J=I(L,!b(i))))return null;if("localhost"===J&&(J=""),i.host=J,void 0!==o)return i;L="",C=s.ParserState.PathStart;}else L+=R.c();break;case s.ParserState.PathStart:b(i)?("\\"===R.c()&&v("Invalid input string."),C=s.ParserState.Path,"/"!==R.c()&&"\\"!==R.c()&&R.pointer--):void 0===o&&"?"===R.c()?(i.query="",C=s.ParserState.Query):void 0===o&&"#"===R.c()?(i.fragment="",C=s.ParserState.Fragment):""!==R.c()&&(C=s.ParserState.Path,"/"!==R.c()&&R.pointer--);break;case s.ParserState.Path:if(""===R.c()||"/"===R.c()||b(i)&&"\\"===R.c()||void 0===o&&("?"===R.c()||"#"===R.c())){if(b(i)&&"\\"===R.c()&&v("Invalid input string."),T(L))O(i),"/"===R.c()||b(i)&&"\\"===R.c()||i.path.push("");else if(!N(L)||"/"===R.c()||b(i)&&"\\"===R.c()){if(!N(L)){if("file"===i.scheme&&0===i.path.length&&k(L)){null!==i.host&&""!==i.host&&(v("Invalid input string."),i.host="");var Y=Array.from(L);L=Y.slice(0,1)+":"+Y.slice(2);}i.path.push(L);}}else i.path.push("");if(L="","file"===i.scheme&&(""===R.c()||"?"===R.c()||"#"===R.c()))for(;i.path.length>1&&""===i.path[0];)v("Invalid input string."),i.path.splice(0,1);"?"===R.c()&&(i.query="",C=s.ParserState.Query),"#"===R.c()&&(i.fragment="",C=s.ParserState.Fragment);}else m.test(R.c())||"%"===R.c()||v("Character is not a URL code point or a percent encoded character."),"%"!==R.c()||/^[0-9a-fA-F][0-9a-fA-F]/.test(R.remaining())||v("Percent encoded character must be followed by two hex digits."),L+=X(R.c(),f);break;case s.ParserState.CannotBeABaseURLPath:"?"===R.c()?(i.query="",C=s.ParserState.Query):"#"===R.c()?(i.fragment="",C=s.ParserState.Fragment):(""===R.c()||m.test(R.c())||"%"===R.c()||v("Character is not a URL code point or a percent encoded character."),"%"!==R.c()||/^[0-9a-fA-F][0-9a-fA-F]/.test(R.remaining())||v("Percent encoded character must be followed by two hex digits."),""!==R.c()&&(i.path[0]+=X(R.c(),h)));break;case s.ParserState.Query:if("UTF-8"===A||b(i)&&"ws"!==i.scheme&&"wss"!==i.scheme||(A="UTF-8"),void 0===o&&"#"===R.c())i.fragment="",C=s.ParserState.Fragment;else if(""!==R.c()){if(m.test(R.c())||"%"===R.c()||v("Character is not a URL code point or a percent encoded character."),"%"!==R.c()||/^[0-9a-fA-F][0-9a-fA-F]/.test(R.remaining())||v("Percent encoded character must be followed by two hex digits."),"UTF-8"!==A.toUpperCase())throw new Error("Only UTF-8 encoding is supported.");var V=a.utf8Encode(R.c());if(V.length>=3&&38===V[0]&&35===V[1]&&59===V[V.length-1])V=V.subarray(2,V.length-1),i.query+="%26%23"+u.byteSequence.isomorphicDecode(V)+"%3B";else try{for(var K=(y=void 0,n(V)),$=K.next();!$.done;$=K.next()){var Q=$.value;Q<33||Q>126||34===Q||35===Q||60===Q||62===Q||39===Q&&b(i)?i.query+=z(Q):i.query+=String.fromCharCode(Q);}}catch(e){y={error:e};}finally{try{$&&!$.done&&(_=K.return)&&_.call(K);}finally{if(y)throw y.error}}}break;case s.ParserState.Fragment:""===R.c()||("\0"===R.c()?v("NULL character in input string."):(m.test(R.c())||"%"===R.c()||v("Unexpected character in fragment string."),"%"!==R.c()||/^[A-Za-z0-9][A-Za-z0-9]/.test(R.remaining())||v("Unexpected character in fragment string."),i.fragment+=X(R.c(),p)));}if(R.eof)break;R.pointer++;}return i}function N(e){return "."===e||"%2e"===e.toLowerCase()}function T(e){var t=e.toLowerCase();return ".."===t||".%2e"===t||"%2e."===t||"%2e%2e"===t}function O(e){var t=e.path;0!==t.length&&("file"===e.scheme&&1===t.length&&F(t[0])||e.path.splice(e.path.length-1,1));}function F(e){return e.length>=2&&u.codePoint.ASCIIAlpha.test(e[0])&&":"===e[1]}function k(e){return e.length>=2&&u.codePoint.ASCIIAlpha.test(e[0])&&(":"===e[1]||"|"===e[1])}function P(e){return e.length>=2&&k(e)&&(2===e.length||"/"===e[2]||"\\"===e[2]||"?"===e[2]||"#"===e[2])}function I(e,t){if(void 0===t&&(t=!1),e.startsWith("["))return e.endsWith("]")?B(e.substring(1,e.length-1)):(v("Expected ']' after '['."),null);if(t)return j(e);var r=H(a.utf8Decode(G(e)));if(null===r)return v("Invalid domain."),null;if(y.test(r))return v("Invalid domain."),null;var n=M(r);return null===n||a.isNumber(n)?n:r}function L(e,t){void 0===t&&(t={value:!1});var r=10;return e.startsWith("0x")||e.startsWith("0X")?(t.value=!0,e=e.substr(2),r=16):e.length>=2&&"0"===e[0]&&(t.value=!0,e=e.substr(1),r=8),""===e?0:(10===r?/^[0-9]+$/:16===r?/^[0-9A-Fa-f]+$/:/^[0-7]+$/).test(e)?parseInt(e,r):null}function M(e){var t,r,i,o,a={value:!1},s=e.split(".");if(""===s[s.length-1]&&(a.value=!0,s.length>1&&s.pop()),s.length>4)return e;var u=[];try{for(var l=n(s),c=l.next();!c.done;c=l.next()){var h=c.value;if(""===h)return e;if(null===(_=L(h,a)))return e;u.push(_);}}catch(e){t={error:e};}finally{try{c&&!c.done&&(r=l.return)&&r.call(l);}finally{if(t)throw t.error}}a.value&&v("Invalid IP v4 address.");for(var p=0;p<u.length;p++){if(u[p]>255&&(v("Invalid IP v4 address."),p<u.length-1))return null}if(u[u.length-1]>=Math.pow(256,5-u.length))return v("Invalid IP v4 address."),null;var f=u[u.length-1];u.pop();var d=0;try{for(var m=n(u),y=m.next();!y.done;y=m.next()){var _;f+=(_=y.value)*Math.pow(256,3-d),d++;}}catch(e){i={error:e};}finally{try{y&&!y.done&&(o=m.return)&&o.call(m);}finally{if(i)throw i.error}}return f}function B(e){var t,r=[0,0,0,0,0,0,0,0],n=0,o=null,s=new a.StringWalker(e);if(":"===s.c()){if(!s.remaining().startsWith(":"))return v("Invalid IP v6 address."),null;s.pointer+=2,o=n+=1;}for(;""!==s.c();){if(8===n)return v("Invalid IP v6 address."),null;if(":"!==s.c()){for(var l=0,c=0;c<4&&u.codePoint.ASCIIHexDigit.test(s.c());)l=16*l+parseInt(s.c(),16),s.pointer++,c++;if("."===s.c()){if(0===c)return v("Invalid IP v6 address."),null;if(s.pointer-=c,n>6)return v("Invalid IP v6 address."),null;for(var h=0;""!==s.c();){var p=null;if(h>0){if(!("."===s.c()&&h<4))return v("Invalid IP v6 address."),null;s.pointer++;}if(!u.codePoint.ASCIIDigit.test(s.c()))return v("Invalid IP v6 address."),null;for(;u.codePoint.ASCIIDigit.test(s.c());){var f=parseInt(s.c(),10);if(null===p)p=f;else {if(0===p)return v("Invalid IP v6 address."),null;p=10*p+f;}if(p>255)return v("Invalid IP v6 address."),null;s.pointer++;}if(null===p)return v("Invalid IP v6 address."),null;r[n]=256*r[n]+p,2!==++h&&4!==h||n++;}if(4!==h)return v("Invalid IP v6 address."),null;break}if(":"===s.c()){if(s.pointer++,""===s.c())return v("Invalid IP v6 address."),null}else if(""!==s.c())return v("Invalid IP v6 address."),null;r[n]=l,n++;}else {if(null!==o)return v("Invalid IP v6 address."),null;s.pointer++,o=++n;}}if(null!==o){var d=n-o;for(n=7;0!==n&&d>0;)t=i([r[o+d-1],r[n]],2),r[n]=t[0],r[o+d-1]=t[1],n--,d--;}else if(null===o&&8!==n)return v("Invalid IP v6 address."),null;return r}function j(e){var t,r;if(/[\x00\t\f\r #/:?@\[\\\]]/.test(e))return v("Invalid host string."),null;var i="";try{for(var o=n(e),a=o.next();!a.done;a=o.next()){i+=X(a.value,h);}}catch(e){t={error:e};}finally{try{a&&!a.done&&(r=o.return)&&r.call(o);}finally{if(t)throw t.error}}return i}function R(e){return null}function z(e){return "%"+("00"+e.toString(16).toUpperCase()).slice(-2)}function U(e){for(var t=function(e){return e>=48&&e<=57||e>=65&&e<=70||e>=97&&e<=102},r=new Uint8Array(e.length),n=0,i=0;i<e.length;i++){var o=e[i];if(37!==o)r[n]=o,n++;else if(37===o&&i>=e.length-2)r[n]=o,n++;else if(37!==o||t(e[i+1])&&t(e[i+2])){var s=parseInt(a.utf8Decode(Uint8Array.of(e[i+1],e[i+2])),16);r[n]=s,n++,i+=2;}else r[n]=o,n++;}return r.subarray(0,n)}function G(e){return U(a.utf8Encode(e))}function X(e,t){var r,i;if(!t.test(e))return e;var o=a.utf8Encode(e),s="";try{for(var u=n(o),l=u.next();!l.done;l=u.next()){s+=z(l.value);}}catch(e){r={error:e};}finally{try{l&&!l.done&&(i=u.return)&&i.call(u);}finally{if(r)throw r.error}}return s}function q(e){var t,r,i,o,s=[],u=[];try{for(var l=n(e),c=l.next();!c.done;c=l.next()){var h=c.value;38===h?(s.push(Uint8Array.from(u)),u=[]):u.push(h);}}catch(e){t={error:e};}finally{try{c&&!c.done&&(r=l.return)&&r.call(l);}finally{if(t)throw t.error}}0!==u.length&&s.push(Uint8Array.from(u));var p=[];try{for(var f=n(s),d=f.next();!d.done;d=f.next()){var m=d.value;if(0!==m.length){for(var y=m.indexOf(61),v=-1!==y?m.slice(0,y):m,_=-1!==y?m.slice(y+1):new Uint8Array,g=0;g<v.length;g++)43===v[g]&&(v[g]=32);for(g=0;g<_.length;g++)43===_[g]&&(_[g]=32);var b=a.utf8Decode(v),x=a.utf8Decode(_);p.push([b,x]);}}}catch(e){i={error:e};}finally{try{d&&!d.done&&(o=f.return)&&o.call(f);}finally{if(i)throw i.error}}return p}function W(e){var t,r,i="";try{for(var o=n(e),a=o.next();!a.done;a=o.next()){var s=a.value;i+=32===s?"+":42===s||45===s||46===s||s>=48&&s<=57||s>=65&&s<=90||95===s||s>=97&&s<=122?String.fromCodePoint(s):z(s);}}catch(e){t={error:e};}finally{try{a&&!a.done&&(r=o.return)&&r.call(o);}finally{if(t)throw t.error}}return i}function H(e,t){var r=l.domainToASCII(e);return ""===r?(v("Invalid domain name."),null):r}t.setValidationErrorCallback=function(e){o=e;},t.newURL=_,t.isSpecialScheme=g,t.isSpecial=b,t.defaultPort=x,t.includesCredentials=w,t.cannotHaveAUsernamePasswordPort=function(e){return null===e.host||""===e.host||e._cannotBeABaseURLFlag||"file"===e.scheme},t.urlSerializer=E,t.hostSerializer=D,t.iPv4Serializer=S,t.iPv6Serializer=C,t.urlParser=function(e,t,r){var n=A(e,t,r);return null===n?null:("blob"!==n.scheme||(n._blobURLEntry=null),n)},t.basicURLParser=A,t.setTheUsername=function(e,t){var r,i,o="";try{for(var a=n(t),s=a.next();!s.done;s=a.next()){o+=X(s.value,d);}}catch(e){r={error:e};}finally{try{s&&!s.done&&(i=a.return)&&i.call(a);}finally{if(r)throw r.error}}e.username=o;},t.setThePassword=function(e,t){var r,i,o="";try{for(var a=n(t),s=a.next();!s.done;s=a.next()){o+=X(s.value,d);}}catch(e){r={error:e};}finally{try{s&&!s.done&&(i=a.return)&&i.call(a);}finally{if(r)throw r.error}}e.password=o;},t.isSingleDotPathSegment=N,t.isDoubleDotPathSegment=T,t.shorten=O,t.isNormalizedWindowsDriveLetter=F,t.isWindowsDriveLetter=k,t.startsWithAWindowsDriveLetter=P,t.hostParser=I,t.iPv4NumberParser=L,t.iPv4Parser=M,t.iPv6Parser=B,t.opaqueHostParser=j,t.resolveABlobURL=R,t.percentEncode=z,t.percentDecode=U,t.stringPercentDecode=G,t.utf8PercentEncode=X,t.hostEquals=function(e,t){return e===t},t.urlEquals=function(e,t,r){return void 0===r&&(r=!1),E(e,r)===E(t,r)},t.urlEncodedStringParser=function(e){return q(a.utf8Encode(e))},t.urlEncodedParser=q,t.urlEncodedByteSerializer=W,t.urlEncodedSerializer=function(e,t){var r,i;if("UTF-8"!==(void 0===t||"replacement"===t||"UTF-16BE"===t||"UTF-16LE"===t?"UTF-8":t).toUpperCase())throw new Error("Only UTF-8 encoding is supported.");var o="";try{for(var s=n(e),u=s.next();!u.done;u=s.next()){var l=u.value,c=W(a.utf8Encode(l[0])),h=l[1];h=W(a.utf8Encode(h)),""!==o&&(o+="&"),o+=c+"="+h;}}catch(e){r={error:e};}finally{try{u&&!u.done&&(i=s.return)&&i.call(s);}finally{if(r)throw r.error}}return o},t.origin=function e(t){switch(t.scheme){case"blob":t._blobURLEntry;var r=A(t.path[0]);return null===r?s.OpaqueOrigin:e(r);case"ftp":case"http":case"https":case"ws":case"wss":return [t.scheme,null===t.host?"":t.host,t.port,null];case"file":default:return s.OpaqueOrigin}},t.domainToASCII=H,t.domainToUnicode=function(e,t){var r=l.domainToUnicode(e);return ""===r&&v("Invalid domain name."),r},t.asciiSerializationOfAnOrigin=function(e){if(""===e[0]&&""===e[1]&&null===e[2]&&null===e[3])return "null";var t=e[0]+"://"+D(e[1]);return null!==e[2]&&(t+=":"+e[2].toString()),t};},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(0),i=function(){function e(){this._signal=n.create_abortSignal();}return Object.defineProperty(e.prototype,"signal",{get:function(){return this._signal},enumerable:!0,configurable:!0}),e.prototype.abort=function(){n.abort_signalAbort(this._signal);},e}();t.AbortControllerImpl=i;},function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0});var o=r(70),a=r(0),s=function(e){function t(){var t=e.call(this)||this;return t._abortedFlag=!1,t._abortAlgorithms=new Set,t}return i(t,e),Object.defineProperty(t.prototype,"aborted",{get:function(){return this._abortedFlag},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"onabort",{get:function(){return a.event_getterEventHandlerIDLAttribute(this,"onabort")},set:function(e){a.event_setterEventHandlerIDLAttribute(this,"onabort",e);},enumerable:!0,configurable:!0}),t._create=function(){return new t},t}(o.EventTargetImpl);t.AbortSignalImpl=s;},function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0});var o=r(2),a=r(34),s=r(12),u=function(e){function t(t,r,n){var i=e.call(this)||this;return i._name="",i._publicId="",i._systemId="",i._name=t,i._publicId=r,i._systemId=n,i}return i(t,e),Object.defineProperty(t.prototype,"name",{get:function(){return this._name},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"publicId",{get:function(){return this._publicId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"systemId",{get:function(){return this._systemId},enumerable:!0,configurable:!0}),t.prototype.before=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error("Mixin: ChildNode not implemented.")},t.prototype.after=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error("Mixin: ChildNode not implemented.")},t.prototype.replaceWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];throw new Error("Mixin: ChildNode not implemented.")},t.prototype.remove=function(){throw new Error("Mixin: ChildNode not implemented.")},t._create=function(e,r,n,i){void 0===n&&(n=""),void 0===i&&(i="");var o=new t(r,n,i);return o._nodeDocument=e,o},t}(a.NodeImpl);t.DocumentTypeImpl=u,s.idl_defineConst(u.prototype,"_nodeType",o.NodeType.DocumentType);},function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0});var o=r(100),a=r(1),s=r(0),u=function(e){function t(t,r){var n=e.call(this)||this;return n._host=t,n._mode=r,n}return i(t,e),Object.defineProperty(t.prototype,"mode",{get:function(){return this._mode},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"host",{get:function(){return this._host},enumerable:!0,configurable:!0}),t.prototype._getTheParent=function(e){return e._composedFlag||a.isEmpty(e._path)||s.tree_rootNode(e._path[0].invocationTarget)!==this?this._host:null},t._create=function(e,r){return new t(r,"closed")},t}(o.DocumentFragmentImpl);t.ShadowRootImpl=u;},function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0});var o=r(2),a=r(34),s=r(0),u=r(12),l=function(e){function t(t){var r=e.call(this)||this;return r._namespace=null,r._namespacePrefix=null,r._element=null,r._value="",r._localName=t,r}return i(t,e),Object.defineProperty(t.prototype,"ownerElement",{get:function(){return this._element},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"namespaceURI",{get:function(){return this._namespace},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"prefix",{get:function(){return this._namespacePrefix},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"localName",{get:function(){return this._localName},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"name",{get:function(){return this._qualifiedName},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"value",{get:function(){return this._value},set:function(e){s.attr_setAnExistingAttributeValue(this,e);},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"_qualifiedName",{get:function(){return null!==this._namespacePrefix?this._namespacePrefix+":"+this._localName:this._localName},enumerable:!0,configurable:!0}),t._create=function(e,r){var n=new t(r);return n._nodeDocument=e,n},t}(a.NodeImpl);t.AttrImpl=l,u.idl_defineConst(l.prototype,"_nodeType",o.NodeType.Attribute),u.idl_defineConst(l.prototype,"specified",!0);},function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0});var o=r(101),a=r(2),s=r(12),u=function(e){function t(t){return e.call(this,t)||this}return i(t,e),t._create=function(e,r){void 0===r&&(r="");var n=new t(r);return n._nodeDocument=e,n},t}(o.TextImpl);t.CDATASectionImpl=u,s.idl_defineConst(u.prototype,"_nodeType",a.NodeType.CData);},function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0});var o=r(2),a=r(71),s=r(12),u=function(e){function t(t){return void 0===t&&(t=""),e.call(this,t)||this}return i(t,e),t._create=function(e,r){void 0===r&&(r="");var n=new t(r);return n._nodeDocument=e,n},t}(a.CharacterDataImpl);t.CommentImpl=u,s.idl_defineConst(u.prototype,"_nodeType",o.NodeType.Comment);},function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0});var o=r(2),a=r(71),s=r(12),u=function(e){function t(t,r){var n=e.call(this,r)||this;return n._target=t,n}return i(t,e),Object.defineProperty(t.prototype,"target",{get:function(){return this._target},enumerable:!0,configurable:!0}),t._create=function(e,r,n){var i=new t(r,n);return i._nodeDocument=e,i},t}(a.CharacterDataImpl);t.ProcessingInstructionImpl=u,s.idl_defineConst(u.prototype,"_nodeType",o.NodeType.ProcessingInstruction);},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(7),i=r(0),o=r(3),a=r(1),s=function(){function e(e,t){return this._live=!0,this._root=e,this._filter=t,new Proxy(this,this)}return Object.defineProperty(e.prototype,"length",{get:function(){for(var e=this,t=0,r=i.tree_getFirstDescendantNode(this._root,!1,!1,(function(t){return o.Guard.isElementNode(t)&&e._filter(t)}));null!==r;)t++,r=i.tree_getNextDescendantNode(this._root,r,!1,!1,(function(t){return o.Guard.isElementNode(t)&&e._filter(t)}));return t},enumerable:!0,configurable:!0}),e.prototype.item=function(e){for(var t=this,r=0,n=i.tree_getFirstDescendantNode(this._root,!1,!1,(function(e){return o.Guard.isElementNode(e)&&t._filter(e)}));null!==n;){if(r===e)return n;r++,n=i.tree_getNextDescendantNode(this._root,n,!1,!1,(function(e){return o.Guard.isElementNode(e)&&t._filter(e)}));}return null},e.prototype.namedItem=function(e){var t=this;if(""===e)return null;for(var r=i.tree_getFirstDescendantNode(this._root,!1,!1,(function(e){return o.Guard.isElementNode(e)&&t._filter(e)}));null!=r;){if(r._uniqueIdentifier===e)return r;if(r._namespace===n.namespace.HTML)for(var a=0;a<r._attributeList.length;a++){var s=r._attributeList[a];if("name"===s._localName&&null===s._namespace&&null===s._namespacePrefix&&s._value===e)return r}r=i.tree_getNextDescendantNode(this._root,r,!1,!1,(function(e){return o.Guard.isElementNode(e)&&t._filter(e)}));}return null},e.prototype[Symbol.iterator]=function(){var e=this._root,t=this._filter,r=i.tree_getFirstDescendantNode(e,!1,!1,(function(e){return o.Guard.isElementNode(e)&&t(e)}));return {next:function(){if(null===r)return {done:!0,value:null};var n={done:!1,value:r};return r=i.tree_getNextDescendantNode(e,r,!1,!1,(function(e){return o.Guard.isElementNode(e)&&t(e)})),n}}},e.prototype.get=function(t,r,n){if(!a.isString(r)||-1!==e.reservedNames.indexOf(r))return Reflect.get(t,r,n);var i=Number(r);return isNaN(i)?t.namedItem(r)||void 0:t.item(i)||void 0},e.prototype.set=function(t,r,n,o){if(!a.isString(r)||-1!==e.reservedNames.indexOf(r))return Reflect.set(t,r,n,o);var s=Number(r),u=isNaN(s)?t.namedItem(r)||void 0:t.item(s)||void 0;return !(!u||!u._parent)&&(i.mutation_replace(u,n,u._parent),!0)},e._create=function(t,r){return void 0===r&&(r=function(){return !0}),new e(t,r)},e.reservedNames=["_root","_live","_filter","length","item","namedItem","get","set"],e}();t.HTMLCollectionImpl=s;},function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var i=r(6),o=r(1),a=r(0),s=function(){function e(e){return this._live=!0,this._filter=null,this._length=0,this._root=e,new Proxy(this,this)}return Object.defineProperty(e.prototype,"length",{get:function(){return this._root._children.size},enumerable:!0,configurable:!0}),e.prototype.item=function(e){if(e<0||e>this.length-1)return null;if(e<this.length/2){for(var t=0,r=this._root._firstChild;null!==r&&t!==e;)r=r._nextSibling,t++;return r}for(t=this.length-1,r=this._root._lastChild;null!==r&&t!==e;)r=r._previousSibling,t--;return r},e.prototype.keys=function(){var e;return (e={})[Symbol.iterator]=function(){var e=0;return {next:function(){return e===this.length?{done:!0,value:null}:{done:!1,value:e++}}.bind(this)}}.bind(this),e},e.prototype.values=function(){var e;return (e={})[Symbol.iterator]=function(){var e=this[Symbol.iterator]();return {next:function(){return e.next()}}}.bind(this),e},e.prototype.entries=function(){var e;return (e={})[Symbol.iterator]=function(){var e=this[Symbol.iterator](),t=0;return {next:function(){var r=e.next();return r.done?{done:!0,value:null}:{done:!1,value:[t++,r.value]}}}}.bind(this),e},e.prototype[Symbol.iterator]=function(){return this._root._children[Symbol.iterator]()},e.prototype.forEach=function(e,t){var r,o;void 0===t&&(t=i.dom.window);var a=0;try{for(var s=n(this._root._children),u=s.next();!u.done;u=s.next()){var l=u.value;e.call(t,l,a++,this);}}catch(e){r={error:e};}finally{try{u&&!u.done&&(o=s.return)&&o.call(s);}finally{if(r)throw r.error}}},e.prototype.get=function(e,t,r){if(!o.isString(t))return Reflect.get(e,t,r);var n=Number(t);return isNaN(n)?Reflect.get(e,t,r):e.item(n)||void 0},e.prototype.set=function(e,t,r,n){if(!o.isString(t))return Reflect.set(e,t,r,n);var i=Number(t);if(isNaN(i))return Reflect.set(e,t,r,n);var s=e.item(i)||void 0;return !!s&&(!!s._parent&&(a.mutation_replace(s,r,s._parent),!0))},e._create=function(t){return new e(t)},e}();t.NodeListImpl=s;},function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var i=r(6),o=r(1),a=function(){function e(e){return this._live=!1,this._items=[],this._length=0,this._root=e,this._items=[],this._filter=function(e){return !0},new Proxy(this,this)}return Object.defineProperty(e.prototype,"length",{get:function(){return this._items.length},enumerable:!0,configurable:!0}),e.prototype.item=function(e){return e<0||e>this.length-1?null:this._items[e]},e.prototype.keys=function(){var e;return (e={})[Symbol.iterator]=function(){var e=0;return {next:function(){return e===this.length?{done:!0,value:null}:{done:!1,value:e++}}.bind(this)}}.bind(this),e},e.prototype.values=function(){var e;return (e={})[Symbol.iterator]=function(){var e=this[Symbol.iterator]();return {next:function(){return e.next()}}}.bind(this),e},e.prototype.entries=function(){var e;return (e={})[Symbol.iterator]=function(){var e=this[Symbol.iterator](),t=0;return {next:function(){var r=e.next();return r.done?{done:!0,value:null}:{done:!1,value:[t++,r.value]}}}}.bind(this),e},e.prototype[Symbol.iterator]=function(){var e=this._items[Symbol.iterator]();return {next:function(){return e.next()}}},e.prototype.forEach=function(e,t){var r,o;void 0===t&&(t=i.dom.window);var a=0;try{for(var s=n(this._items),u=s.next();!u.done;u=s.next()){var l=u.value;e.call(t,l,a++,this);}}catch(e){r={error:e};}finally{try{u&&!u.done&&(o=s.return)&&o.call(s);}finally{if(r)throw r.error}}},e.prototype.get=function(e,t,r){if(!o.isString(t))return Reflect.get(e,t,r);var n=Number(t);return isNaN(n)?Reflect.get(e,t,r):e._items[n]||void 0},e.prototype.set=function(e,t,r,n){if(!o.isString(t))return Reflect.set(e,t,r,n);var i=Number(t);return isNaN(i)?Reflect.set(e,t,r,n):i>=0&&i<e._items.length&&(e._items[i]=r,!0)},e._create=function(t,r){var n=new e(t);return n._items=r,n},e}();t.NodeListStaticImpl=a;},function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0});var o=r(9),a=r(0),s=function(e){function t(r){var n=e.call(this)||this;return n._element=r,Object.setPrototypeOf(n,t.prototype),n}return i(t,e),t.prototype._asArray=function(){return this},t.prototype.item=function(e){return this[e]||null},t.prototype.getNamedItem=function(e){return a.element_getAnAttributeByName(e,this._element)},t.prototype.getNamedItemNS=function(e,t){return a.element_getAnAttributeByNamespaceAndLocalName(e||"",t,this._element)},t.prototype.setNamedItem=function(e){return a.element_setAnAttribute(e,this._element)},t.prototype.setNamedItemNS=function(e){return a.element_setAnAttribute(e,this._element)},t.prototype.removeNamedItem=function(e){var t=a.element_removeAnAttributeByName(e,this._element);if(null===t)throw new o.NotFoundError;return t},t.prototype.removeNamedItemNS=function(e,t){var r=a.element_removeAnAttributeByNamespaceAndLocalName(e||"",t,this._element);if(null===r)throw new o.NotFoundError;return r},t._create=function(e){return new t(e)},t}(Array);t.NamedNodeMapImpl=s;},function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var a=r(6),s=r(2),u=r(102),l=r(9),c=r(0),h=r(12),p=r(3),f=function(e){function t(){var t=e.call(this)||this,r=a.dom.window._associatedDocument;return t._start=[r,0],t._end=[r,0],a.dom.rangeList.add(t),t}return i(t,e),Object.defineProperty(t.prototype,"commonAncestorContainer",{get:function(){for(var e=this._start[0];!c.tree_isAncestorOf(this._end[0],e,!0);){if(null===e._parent)throw new Error("Parent node  is null.");e=e._parent;}return e},enumerable:!0,configurable:!0}),t.prototype.setStart=function(e,t){c.range_setTheStart(this,e,t);},t.prototype.setEnd=function(e,t){c.range_setTheEnd(this,e,t);},t.prototype.setStartBefore=function(e){var t=e._parent;if(null===t)throw new l.InvalidNodeTypeError;c.range_setTheStart(this,t,c.tree_index(e));},t.prototype.setStartAfter=function(e){var t=e._parent;if(null===t)throw new l.InvalidNodeTypeError;c.range_setTheStart(this,t,c.tree_index(e)+1);},t.prototype.setEndBefore=function(e){var t=e._parent;if(null===t)throw new l.InvalidNodeTypeError;c.range_setTheEnd(this,t,c.tree_index(e));},t.prototype.setEndAfter=function(e){var t=e._parent;if(null===t)throw new l.InvalidNodeTypeError;c.range_setTheEnd(this,t,c.tree_index(e)+1);},t.prototype.collapse=function(e){e?this._end=this._start:this._start=this._end;},t.prototype.selectNode=function(e){c.range_select(e,this);},t.prototype.selectNodeContents=function(e){if(p.Guard.isDocumentTypeNode(e))throw new l.InvalidNodeTypeError;var t=c.tree_nodeLength(e);this._start=[e,0],this._end=[e,t];},t.prototype.compareBoundaryPoints=function(e,t){if(e!==s.HowToCompare.StartToStart&&e!==s.HowToCompare.StartToEnd&&e!==s.HowToCompare.EndToEnd&&e!==s.HowToCompare.EndToStart)throw new l.NotSupportedError;if(c.range_root(this)!==c.range_root(t))throw new l.WrongDocumentError;var r,n;switch(e){case s.HowToCompare.StartToStart:r=this._start,n=t._start;break;case s.HowToCompare.StartToEnd:r=this._end,n=t._start;break;case s.HowToCompare.EndToEnd:r=this._end,n=t._end;break;case s.HowToCompare.EndToStart:r=this._start,n=t._end;break;default:throw new l.NotSupportedError}var i=c.boundaryPoint_position(r,n);return i===s.BoundaryPosition.Before?-1:i===s.BoundaryPosition.After?1:0},t.prototype.deleteContents=function(){var e,t,r,n;if(!c.range_collapsed(this)){var i=this._startNode,a=this._startOffset,s=this._endNode,u=this._endOffset;if(i===s&&p.Guard.isCharacterDataNode(i))c.characterData_replaceData(i,a,u-a,"");else {var l,h,f=[];try{for(var d=o(c.range_getContainedNodes(this)),m=d.next();!m.done;m=d.next()){var y=(b=m.value)._parent;null!==y&&c.range_isContained(y,this)||f.push(b);}}catch(t){e={error:t};}finally{try{m&&!m.done&&(t=d.return)&&t.call(d);}finally{if(e)throw e.error}}if(c.tree_isAncestorOf(s,i,!0))l=i,h=a;else {for(var v=i;null!==v._parent&&!c.tree_isAncestorOf(s,v._parent,!0);)v=v._parent;if(null===v._parent)throw new Error("Parent node is null.");l=v._parent,h=c.tree_index(v)+1;}p.Guard.isCharacterDataNode(i)&&c.characterData_replaceData(i,a,c.tree_nodeLength(i)-a,"");try{for(var _=o(f),g=_.next();!g.done;g=_.next()){var b;(b=g.value)._parent&&c.mutation_remove(b,b._parent);}}catch(e){r={error:e};}finally{try{g&&!g.done&&(n=_.return)&&n.call(_);}finally{if(r)throw r.error}}p.Guard.isCharacterDataNode(s)&&c.characterData_replaceData(s,0,u,""),this._start=[l,h],this._end=[l,h];}}},t.prototype.extractContents=function(){return c.range_extract(this)},t.prototype.cloneContents=function(){return c.range_cloneTheContents(this)},t.prototype.insertNode=function(e){return c.range_insert(e,this)},t.prototype.surroundContents=function(e){var t,r;try{for(var n=o(c.range_getPartiallyContainedNodes(this)),i=n.next();!i.done;i=n.next()){var a=i.value;if(!p.Guard.isTextNode(a))throw new l.InvalidStateError}}catch(e){t={error:e};}finally{try{i&&!i.done&&(r=n.return)&&r.call(n);}finally{if(t)throw t.error}}if(p.Guard.isDocumentNode(e)||p.Guard.isDocumentTypeNode(e)||p.Guard.isDocumentFragmentNode(e))throw new l.InvalidNodeTypeError;var s=c.range_extract(this);0!==e._children.size&&c.mutation_replaceAll(null,e),c.range_insert(e,this),c.mutation_append(s,e),c.range_select(e,this);},t.prototype.cloneRange=function(){return c.create_range(this._start,this._end)},t.prototype.detach=function(){a.dom.rangeList.delete(this);},t.prototype.isPointInRange=function(e,t){if(c.tree_rootNode(e)!==c.range_root(this))return !1;if(p.Guard.isDocumentTypeNode(e))throw new l.InvalidNodeTypeError;if(t>c.tree_nodeLength(e))throw new l.IndexSizeError;var r=[e,t];return c.boundaryPoint_position(r,this._start)!==s.BoundaryPosition.Before&&c.boundaryPoint_position(r,this._end)!==s.BoundaryPosition.After},t.prototype.comparePoint=function(e,t){if(c.tree_rootNode(e)!==c.range_root(this))throw new l.WrongDocumentError;if(p.Guard.isDocumentTypeNode(e))throw new l.InvalidNodeTypeError;if(t>c.tree_nodeLength(e))throw new l.IndexSizeError;var r=[e,t];return c.boundaryPoint_position(r,this._start)===s.BoundaryPosition.Before?-1:c.boundaryPoint_position(r,this._end)===s.BoundaryPosition.After?1:0},t.prototype.intersectsNode=function(e){if(c.tree_rootNode(e)!==c.range_root(this))return !1;var t=e._parent;if(null===t)return !0;var r=c.tree_index(e);return c.boundaryPoint_position([t,r],this._end)===s.BoundaryPosition.Before&&c.boundaryPoint_position([t,r+1],this._start)===s.BoundaryPosition.After},t.prototype.toString=function(){var e,t,r="";if(this._startNode===this._endNode&&p.Guard.isTextNode(this._startNode))return this._startNode._data.substring(this._startOffset,this._endOffset);p.Guard.isTextNode(this._startNode)&&(r+=this._startNode._data.substring(this._startOffset));try{for(var n=o(c.range_getContainedNodes(this)),i=n.next();!i.done;i=n.next()){var a=i.value;p.Guard.isTextNode(a)&&(r+=a._data);}}catch(t){e={error:t};}finally{try{i&&!i.done&&(t=n.return)&&t.call(n);}finally{if(e)throw e.error}}return p.Guard.isTextNode(this._endNode)&&(r+=this._endNode._data.substring(0,this._endOffset)),r},t._create=function(e,r){var n=new t;return e&&(n._start=e),r&&(n._end=r),n},t.START_TO_START=0,t.START_TO_END=1,t.END_TO_END=2,t.END_TO_START=3,t}(u.AbstractRangeImpl);t.RangeImpl=f,h.idl_defineConst(f.prototype,"START_TO_START",0),h.idl_defineConst(f.prototype,"START_TO_END",1),h.idl_defineConst(f.prototype,"END_TO_END",2),h.idl_defineConst(f.prototype,"END_TO_START",3);},function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0});var o=r(103),a=r(0),s=function(e){function t(t,r,n){var i=e.call(this,t)||this;return i._iteratorCollection=void 0,i._reference=r,i._pointerBeforeReference=n,a.nodeIterator_iteratorList().add(i),i}return i(t,e),Object.defineProperty(t.prototype,"referenceNode",{get:function(){return this._reference},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"pointerBeforeReferenceNode",{get:function(){return this._pointerBeforeReference},enumerable:!0,configurable:!0}),t.prototype.nextNode=function(){return a.nodeIterator_traverse(this,!0)},t.prototype.previousNode=function(){return a.nodeIterator_traverse(this,!1)},t.prototype.detach=function(){a.nodeIterator_iteratorList().delete(this);},t._create=function(e,r,n){return new t(e,r,n)},t}(o.TraverserImpl);t.NodeIteratorImpl=s;},function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0});var o=r(2),a=r(103),s=r(0),u=function(e){function t(t,r){var n=e.call(this,t)||this;return n._current=r,n}return i(t,e),Object.defineProperty(t.prototype,"currentNode",{get:function(){return this._current},set:function(e){this._current=e;},enumerable:!0,configurable:!0}),t.prototype.parentNode=function(){for(var e=this._current;null!==e&&e!==this._root;)if(null!==(e=e._parent)&&s.traversal_filter(this,e)===o.FilterResult.Accept)return this._current=e,e;return null},t.prototype.firstChild=function(){return s.treeWalker_traverseChildren(this,!0)},t.prototype.lastChild=function(){return s.treeWalker_traverseChildren(this,!1)},t.prototype.nextSibling=function(){return s.treeWalker_traverseSiblings(this,!0)},t.prototype.previousNode=function(){for(var e=this._current;e!==this._root;){for(var t=e._previousSibling;t;){e=t;for(var r=s.traversal_filter(this,e);r!==o.FilterResult.Reject&&e._lastChild;)e=e._lastChild,r=s.traversal_filter(this,e);if(r===o.FilterResult.Accept)return this._current=e,e;t=e._previousSibling;}if(e===this._root||null===e._parent)return null;if(e=e._parent,s.traversal_filter(this,e)===o.FilterResult.Accept)return this._current=e,e}return null},t.prototype.previousSibling=function(){return s.treeWalker_traverseSiblings(this,!1)},t.prototype.nextNode=function(){for(var e=this._current,t=o.FilterResult.Accept;;){for(;t!==o.FilterResult.Reject&&e._firstChild;)if(e=e._firstChild,(t=s.traversal_filter(this,e))===o.FilterResult.Accept)return this._current=e,e;for(var r=null,n=e;null!==n;){if(n===this._root)return null;if(null!==(r=n._nextSibling)){e=r;break}n=n._parent;}if((t=s.traversal_filter(this,e))===o.FilterResult.Accept)return this._current=e,e}},t._create=function(e,r){return new t(e,r)},t}(a.TraverserImpl);t.TreeWalkerImpl=u;},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(2),i=r(12),o=function(){function e(){}return e.prototype.acceptNode=function(e){return n.FilterResult.Accept},e._create=function(){return new e},e.FILTER_ACCEPT=1,e.FILTER_REJECT=2,e.FILTER_SKIP=3,e.SHOW_ALL=4294967295,e.SHOW_ELEMENT=1,e.SHOW_ATTRIBUTE=2,e.SHOW_TEXT=4,e.SHOW_CDATA_SECTION=8,e.SHOW_ENTITY_REFERENCE=16,e.SHOW_ENTITY=32,e.SHOW_PROCESSING_INSTRUCTION=64,e.SHOW_COMMENT=128,e.SHOW_DOCUMENT=256,e.SHOW_DOCUMENT_TYPE=512,e.SHOW_DOCUMENT_FRAGMENT=1024,e.SHOW_NOTATION=2048,e}();t.NodeFilterImpl=o,i.idl_defineConst(o.prototype,"FILTER_ACCEPT",1),i.idl_defineConst(o.prototype,"FILTER_REJECT",2),i.idl_defineConst(o.prototype,"FILTER_SKIP",3),i.idl_defineConst(o.prototype,"SHOW_ALL",4294967295),i.idl_defineConst(o.prototype,"SHOW_ELEMENT",1),i.idl_defineConst(o.prototype,"SHOW_ATTRIBUTE",2),i.idl_defineConst(o.prototype,"SHOW_TEXT",4),i.idl_defineConst(o.prototype,"SHOW_CDATA_SECTION",8),i.idl_defineConst(o.prototype,"SHOW_ENTITY_REFERENCE",16),i.idl_defineConst(o.prototype,"SHOW_ENTITY",32),i.idl_defineConst(o.prototype,"SHOW_PROCESSING_INSTRUCTION",64),i.idl_defineConst(o.prototype,"SHOW_COMMENT",128),i.idl_defineConst(o.prototype,"SHOW_DOCUMENT",256),i.idl_defineConst(o.prototype,"SHOW_DOCUMENT_TYPE",512),i.idl_defineConst(o.prototype,"SHOW_DOCUMENT_FRAGMENT",1024),i.idl_defineConst(o.prototype,"SHOW_NOTATION",2048);},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t,r,n,i,o,a,s,u){this._type=e,this._target=t,this._addedNodes=r,this._removedNodes=n,this._previousSibling=i,this._nextSibling=o,this._attributeName=a,this._attributeNamespace=s,this._oldValue=u;}return Object.defineProperty(e.prototype,"type",{get:function(){return this._type},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"target",{get:function(){return this._target},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"addedNodes",{get:function(){return this._addedNodes},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"removedNodes",{get:function(){return this._removedNodes},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"previousSibling",{get:function(){return this._previousSibling},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nextSibling",{get:function(){return this._nextSibling},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"attributeName",{get:function(){return this._attributeName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"attributeNamespace",{get:function(){return this._attributeNamespace},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"oldValue",{get:function(){return this._oldValue},enumerable:!0,configurable:!0}),e._create=function(t,r,n,i,o,a,s,u,l){return new e(t,r,n,i,o,a,s,u,l)},e}();t.MutationRecordImpl=n;},function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var i=r(6),o=r(9),a=r(7),s=r(0),u=function(){function e(e,t){this._element=e,this._attribute=t,this._tokenSet=new Set;var r=t._localName,n=s.element_getAnAttributeValue(e,r),o=this;this._element._attributeChangeSteps.push((function(e,t,r,n,i){t===o._attribute._localName&&null===i&&(n?o._tokenSet=s.orderedSet_parse(n):o._tokenSet.clear());})),i.dom.features.steps&&s.dom_runAttributeChangeSteps(e,r,n,n,null);}return Object.defineProperty(e.prototype,"length",{get:function(){return this._tokenSet.size},enumerable:!0,configurable:!0}),e.prototype.item=function(e){var t,r,i=0;try{for(var o=n(this._tokenSet),a=o.next();!a.done;a=o.next()){var s=a.value;if(i===e)return s;i++;}}catch(e){t={error:e};}finally{try{a&&!a.done&&(r=o.return)&&r.call(o);}finally{if(t)throw t.error}}return null},e.prototype.contains=function(e){return this._tokenSet.has(e)},e.prototype.add=function(){for(var e,t,r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];try{for(var u=n(r),l=u.next();!l.done;l=u.next()){var c=l.value;if(""===c)throw new o.SyntaxError("Cannot add an empty token.");if(a.codePoint.ASCIIWhiteSpace.test(c))throw new o.InvalidCharacterError("Token cannot contain whitespace.");this._tokenSet.add(c);}}catch(t){e={error:t};}finally{try{l&&!l.done&&(t=u.return)&&t.call(u);}finally{if(e)throw e.error}}s.tokenList_updateSteps(this);},e.prototype.remove=function(){for(var e,t,r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];try{for(var u=n(r),l=u.next();!l.done;l=u.next()){var c=l.value;if(""===c)throw new o.SyntaxError("Cannot remove an empty token.");if(a.codePoint.ASCIIWhiteSpace.test(c))throw new o.InvalidCharacterError("Token cannot contain whitespace.");this._tokenSet.delete(c);}}catch(t){e={error:t};}finally{try{l&&!l.done&&(t=u.return)&&t.call(u);}finally{if(e)throw e.error}}s.tokenList_updateSteps(this);},e.prototype.toggle=function(e,t){if(void 0===t&&(t=void 0),""===e)throw new o.SyntaxError("Cannot toggle an empty token.");if(a.codePoint.ASCIIWhiteSpace.test(e))throw new o.InvalidCharacterError("Token cannot contain whitespace.");return this._tokenSet.has(e)?void 0!==t&&!1!==t||(this._tokenSet.delete(e),s.tokenList_updateSteps(this),!1):(void 0===t||!0===t)&&(this._tokenSet.add(e),s.tokenList_updateSteps(this),!0)},e.prototype.replace=function(e,t){if(""===e||""===t)throw new o.SyntaxError("Cannot replace an empty token.");if(a.codePoint.ASCIIWhiteSpace.test(e)||a.codePoint.ASCIIWhiteSpace.test(t))throw new o.InvalidCharacterError("Token cannot contain whitespace.");return !!this._tokenSet.has(e)&&(a.set.replace(this._tokenSet,e,t),s.tokenList_updateSteps(this),!0)},e.prototype.supports=function(e){return s.tokenList_validationSteps(this,e)},Object.defineProperty(e.prototype,"value",{get:function(){return s.tokenList_serializeSteps(this)},set:function(e){s.element_setAnAttributeValue(this._element,this._attribute._localName,e);},enumerable:!0,configurable:!0}),e.prototype[Symbol.iterator]=function(){var e=this._tokenSet[Symbol.iterator]();return {next:function(){return e.next()}}},e._create=function(t,r){return new e(t,r)},e}();t.DOMTokenListImpl=u;},function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0});var o=r(104),a=r(0),s=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n._detail=null,n._detail=r&&r.detail||null,n}return i(t,e),Object.defineProperty(t.prototype,"detail",{get:function(){return this._detail},enumerable:!0,configurable:!0}),t.prototype.initCustomEvent=function(e,t,r,n){void 0===t&&(t=!1),void 0===r&&(r=!1),void 0===n&&(n=null),this._dispatchFlag||(a.event_initialize(this,e,t,r),this._detail=n);},t}(o.EventImpl);t.CustomEventImpl=s;},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(6),i=r(2),o=r(105),a=r(17);t.nodeIterator_traverse=function(e,t){for(var r=e._reference,n=e._pointerBeforeReference;;){if(t)if(n)n=!1;else {var s=a.tree_getFollowingNode(e._root,r);if(!s)return null;r=s;}else if(n){var u=a.tree_getPrecedingNode(e.root,r);if(!u)return null;r=u;}else n=!0;if(o.traversal_filter(e,r)===i.FilterResult.Accept)break}return e._reference=r,e._pointerBeforeReference=n,r},t.nodeIterator_iteratorList=function(){return n.dom.window._iteratorList};},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(9),i=r(7),o=r(174);function a(e){if(!o.xml_isName(e))throw new n.InvalidCharacterError("Invalid XML name: "+e);if(!o.xml_isQName(e))throw new n.InvalidCharacterError("Invalid XML qualified name: "+e+".")}t.namespace_validate=a,t.namespace_validateAndExtract=function(e,t){e||(e=null),a(t);var r=t.split(":"),o=2===r.length?r[0]:null,s=2===r.length?r[1]:t;if(o&&null===e)throw new n.NamespaceError("Qualified name includes a prefix but the namespace is null.");if("xml"===o&&e!==i.namespace.XML)throw new n.NamespaceError('Qualified name includes the "xml" prefix but the namespace is not the XML namespace.');if(e!==i.namespace.XMLNS&&("xmlns"===o||"xmlns"===t))throw new n.NamespaceError('Qualified name includes the "xmlns" prefix but the namespace is not the XMLNS namespace.');if(e===i.namespace.XMLNS&&"xmlns"!==o&&"xmlns"!==t)throw new n.NamespaceError('Qualified name does not include the "xmlns" prefix but the namespace is the XMLNS namespace.');return [e,o,s]},t.namespace_extractQName=function(e){a(e);var t=e.split(":");return [2===t.length?t[0]:null,2===t.length?t[1]:e]};},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.xml_isName=function(e){for(var t=0;t<e.length;t++){var r=e.charCodeAt(t);if(!(r>=97&&r<=122||r>=65&&r<=90||58===r||95===r||r>=192&&r<=214||r>=216&&r<=246||r>=248&&r<=767||r>=880&&r<=893||r>=895&&r<=8191||r>=8204&&r<=8205||r>=8304&&r<=8591||r>=11264&&r<=12271||r>=12289&&r<=55295||r>=63744&&r<=64975||r>=65008&&r<=65533)&&(0===t||!(45===r||46===r||r>=48&&r<=57||183===r||r>=768&&r<=879||r>=8255&&r<=8256))){if(r>=55296&&r<=56319&&t<e.length-1){var n=e.charCodeAt(t+1);if(n>=56320&&n<=57343&&(t++,(r=1024*(r-55296)+n-56320+65536)>=65536&&r<=983039))continue}return !1}}return !0},t.xml_isQName=function(e){for(var t=!1,r=0;r<e.length;r++){var n=e.charCodeAt(r);if(!(n>=97&&n<=122||n>=65&&n<=90||95===n||n>=192&&n<=214||n>=216&&n<=246||n>=248&&n<=767||n>=880&&n<=893||n>=895&&n<=8191||n>=8204&&n<=8205||n>=8304&&n<=8591||n>=11264&&n<=12271||n>=12289&&n<=55295||n>=63744&&n<=64975||n>=65008&&n<=65533)&&(0===r||!(45===n||46===n||n>=48&&n<=57||183===n||n>=768&&n<=879||n>=8255&&n<=8256))){if(0===r||58!==n){if(n>=55296&&n<=56319&&r<e.length-1){var i=e.charCodeAt(r+1);if(i>=56320&&i<=57343&&(r++,(n=1024*(n-55296)+i-56320+65536)>=65536&&n<=983039))continue}return !1}if(t)return !1;if(r===e.length-1)return !1;t=!0;}}return !0},t.xml_isLegalChar=function(e){for(var t=0;t<e.length;t++){var r=e.charCodeAt(t);if(!(9===r||10===r||13===r||r>=32&&r<=55295||r>=57344&&r<=65533)){if(r>=55296&&r<=56319&&t<e.length-1){var n=e.charCodeAt(t+1);if(n>=56320&&n<=57343&&(t++,(r=1024*(r-55296)+n-56320+65536)>=65536&&r<=1114111))continue}return !1}}return !0},t.xml_isPubidChar=function(e){for(var t=0;t<e.length;t++){var r=e.charCodeAt(t);if(!(r>=97&&r<=122||r>=65&&r<=90||r>=39&&r<=59||32===r||13===r||10===r||r>=35&&r<=37||33===r||61===r||63===r||64===r||95===r))return !1}return !0};},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(2),i=r(17);t.boundaryPoint_position=function e(t,r){var o=t[0],a=t[1],s=r[0],u=r[1];if(console.assert(i.tree_rootNode(o)===i.tree_rootNode(s),"Boundary points must share the same root node."),o===s)return a===u?n.BoundaryPosition.Equal:a<u?n.BoundaryPosition.Before:n.BoundaryPosition.After;if(i.tree_isFollowing(s,o)){var l=e([s,u],[o,a]);if(l===n.BoundaryPosition.Before)return n.BoundaryPosition.After;if(l===n.BoundaryPosition.After)return n.BoundaryPosition.Before}if(i.tree_isAncestorOf(s,o)){for(var c=s;!i.tree_isChildOf(o,c);)null!==c._parent&&(c=c._parent);if(i.tree_index(c)<a)return n.BoundaryPosition.After}return n.BoundaryPosition.Before};},function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var i=r(6),o=r(3),a=r(7),s=r(29),u=r(108),l=r(30),c=r(37),h=r(52);t.node_stringReplaceAll=function(e,t){var r=null;""!==e&&(r=s.create_text(t._nodeDocument,e)),c.mutation_replaceAll(r,t);},t.node_clone=function e(t,r,a){var u,p,f,d,m;if(void 0===r&&(r=null),void 0===a&&(a=!1),null===r&&(r=t._nodeDocument),o.Guard.isElementNode(t)){m=h.element_createAnElement(r,t._localName,t._namespace,t._namespacePrefix,t._is,!1);try{for(var y=n(t._attributeList),v=y.next();!v.done;v=y.next()){var _=e(v.value,r);h.element_append(_,m);}}catch(e){u={error:e};}finally{try{v&&!v.done&&(p=y.return)&&p.call(y);}finally{if(u)throw u.error}}}else if(o.Guard.isDocumentNode(t)){var g=s.create_document();g._encoding=t._encoding,g._contentType=t._contentType,g._URL=t._URL,g._origin=t._origin,g._type=t._type,g._mode=t._mode,m=g;}else if(o.Guard.isDocumentTypeNode(t)){m=s.create_documentType(r,t._name,t._publicId,t._systemId);}else if(o.Guard.isAttrNode(t)){var b=s.create_attr(r,t.localName);b._namespace=t._namespace,b._namespacePrefix=t._namespacePrefix,b._value=t._value,m=b;}else m=o.Guard.isExclusiveTextNode(t)?s.create_text(r,t._data):o.Guard.isCDATASectionNode(t)?s.create_cdataSection(r,t._data):o.Guard.isCommentNode(t)?s.create_comment(r,t._data):o.Guard.isProcessingInstructionNode(t)?s.create_processingInstruction(r,t._target,t._data):o.Guard.isDocumentFragmentNode(t)?s.create_documentFragment(r):Object.create(t);if(o.Guard.isDocumentNode(m)?(m._nodeDocument=m,r=m):m._nodeDocument=r,i.dom.features.steps&&l.dom_runCloningSteps(m,t,r,a),a)try{for(var x=n(t._children),w=x.next();!w.done;w=x.next()){var E=e(w.value,r,!0);c.mutation_append(E,m);}}catch(e){f={error:e};}finally{try{w&&!w.done&&(d=x.return)&&d.call(x);}finally{if(f)throw f.error}}return m},t.node_equals=function e(t,r){var i,a,s,u;if(t._nodeType!==r._nodeType)return !1;if(o.Guard.isDocumentTypeNode(t)&&o.Guard.isDocumentTypeNode(r)){if(t._name!==r._name||t._publicId!==r._publicId||t._systemId!==r._systemId)return !1}else if(o.Guard.isElementNode(t)&&o.Guard.isElementNode(r)){if(t._namespace!==r._namespace||t._namespacePrefix!==r._namespacePrefix||t._localName!==r._localName||t._attributeList.length!==r._attributeList.length)return !1}else if(o.Guard.isAttrNode(t)&&o.Guard.isAttrNode(r)){if(t._namespace!==r._namespace||t._localName!==r._localName||t._value!==r._value)return !1}else if(o.Guard.isProcessingInstructionNode(t)&&o.Guard.isProcessingInstructionNode(r)){if(t._target!==r._target||t._data!==r._data)return !1}else if(o.Guard.isCharacterDataNode(t)&&o.Guard.isCharacterDataNode(r)&&t._data!==r._data)return !1;if(o.Guard.isElementNode(t)&&o.Guard.isElementNode(r)){var l={};try{for(var c=n(t._attributeList),h=c.next();!h.done;h=c.next()){l[(d=h.value)._localName]=d;}}catch(e){i={error:e};}finally{try{h&&!h.done&&(a=c.return)&&a.call(c);}finally{if(i)throw i.error}}try{for(var p=n(r._attributeList),f=p.next();!f.done;f=p.next()){var d,m=f.value;if(!(d=l[m._localName]))return !1;if(!e(d,m))return !1}}catch(e){s={error:e};}finally{try{f&&!f.done&&(u=p.return)&&u.call(p);}finally{if(s)throw s.error}}}if(t._children.size!==r._children.size)return !1;for(var y=t._children[Symbol.iterator](),v=r._children[Symbol.iterator](),_=y.next(),g=v.next();!_.done&&!g.done;){if(!e(_.value,g.value))return !1;_=y.next(),g=v.next();}return !0},t.node_listOfElementsWithQualifiedName=function(e,t){return "*"===e?s.create_htmlCollection(t):"html"===t._nodeDocument._type?s.create_htmlCollection(t,(function(t){return t._namespace===a.namespace.HTML&&t._qualifiedName===e.toLowerCase()||t._namespace!==a.namespace.HTML&&t._qualifiedName===e})):s.create_htmlCollection(t,(function(t){return t._qualifiedName===e}))},t.node_listOfElementsWithNamespace=function(e,t,r){return ""===e&&(e=null),"*"===e&&"*"===t?s.create_htmlCollection(r):"*"===e?s.create_htmlCollection(r,(function(e){return e._localName===t})):"*"===t?s.create_htmlCollection(r,(function(t){return t._namespace===e})):s.create_htmlCollection(r,(function(r){return r._localName===t&&r._namespace===e}))},t.node_listOfElementsWithClassNames=function(e,t){var r=u.orderedSet_parse(e);if(0===r.size)return s.create_htmlCollection(t,(function(){return !1}));var n="quirks"!==t._nodeDocument._mode;return s.create_htmlCollection(t,(function(e){var t=e.classList;return u.orderedSet_contains(t._tokenSet,r,n)}))},t.node_locateANamespacePrefix=function e(t,r){if(t._namespace===r&&null!==t._namespacePrefix)return t._namespacePrefix;for(var n=0;n<t._attributeList.length;n++){var i=t._attributeList[n];if("xmlns"===i._namespacePrefix&&i._value===r)return i._localName}return t._parent&&o.Guard.isElementNode(t._parent)?e(t._parent,r):null},t.node_locateANamespace=function e(t,r){if(o.Guard.isElementNode(t)){if(null!==t._namespace&&t._namespacePrefix===r)return t._namespace;for(var n=0;n<t._attributeList.length;n++){var i=t._attributeList[n];if(i._namespace===a.namespace.XMLNS&&"xmlns"===i._namespacePrefix&&i._localName===r)return i._value||null;if(null===r&&i._namespace===a.namespace.XMLNS&&null===i._namespacePrefix&&"xmlns"===i._localName)return i._value||null}return null===t.parentElement?null:e(t.parentElement,r)}return o.Guard.isDocumentNode(t)?null===t.documentElement?null:e(t.documentElement,r):o.Guard.isDocumentTypeNode(t)||o.Guard.isDocumentFragmentNode(t)?null:o.Guard.isAttrNode(t)?null===t._element?null:e(t._element,r):t._parent&&o.Guard.isElementNode(t._parent)?e(t._parent,r):null};},function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var i=r(6),o=r(3),a=r(9),s=r(29),u=r(17),l=r(107),c=r(37);t.text_contiguousTextNodes=function(e,t){var r;return void 0===t&&(t=!1),(r={})[Symbol.iterator]=function(){for(var r=e;r&&o.Guard.isTextNode(r._previousSibling);)r=r._previousSibling;return {next:function(){if(r&&!t&&r===e&&(r=o.Guard.isTextNode(r._nextSibling)?r._nextSibling:null),null===r)return {done:!0,value:null};var n={done:!1,value:r};return r=o.Guard.isTextNode(r._nextSibling)?r._nextSibling:null,n}}},r},t.text_contiguousExclusiveTextNodes=function(e,t){var r;return void 0===t&&(t=!1),(r={})[Symbol.iterator]=function(){for(var r=e;r&&o.Guard.isExclusiveTextNode(r._previousSibling);)r=r._previousSibling;return {next:function(){if(r&&!t&&r===e&&(r=o.Guard.isExclusiveTextNode(r._nextSibling)?r._nextSibling:null),null===r)return {done:!0,value:null};var n={done:!1,value:r};return r=o.Guard.isExclusiveTextNode(r._nextSibling)?r._nextSibling:null,n}}},r},t.text_descendantTextContent=function(e){for(var t="",r=u.tree_getFirstDescendantNode(e,!1,!1,(function(e){return o.Guard.isTextNode(e)}));null!==r;)t+=r._data,r=u.tree_getNextDescendantNode(e,r,!1,!1,(function(e){return o.Guard.isTextNode(e)}));return t},t.text_split=function(e,t){var r,o,h=e._data.length;if(t>h)throw new a.IndexSizeError;var p=h-t,f=l.characterData_substringData(e,t,p),d=s.create_text(e._nodeDocument,f),m=e._parent;if(null!==m){c.mutation_insert(d,m,e._nextSibling);try{for(var y=n(i.dom.rangeList),v=y.next();!v.done;v=y.next()){var _=v.value;_._start[0]===e&&_._start[1]>t&&(_._start[0]=d,_._start[1]-=t),_._end[0]===e&&_._end[1]>t&&(_._end[0]=d,_._end[1]-=t);var g=u.tree_index(e);_._start[0]===m&&_._start[1]===g+1&&_._start[1]++,_._end[0]===m&&_._end[1]===g+1&&_._end[1]++;}}catch(e){r={error:e};}finally{try{v&&!v.done&&(o=y.return)&&o.call(y);}finally{if(r)throw r.error}}}return l.characterData_replaceData(e,t,p,""),d};},function(e,t,r){var n=r(4),i=r(41),o=r(24),a=r(48),s=[].join,u=i!=Object,l=a("join",",");n({target:"Array",proto:!0,forced:u||!l},{join:function(e){return s.call(o(this),void 0===e?",":e)}});},function(e,t,r){var n=r(4),i=r(83),o=String.fromCharCode,a=String.fromCodePoint;n({target:"String",stat:!0,forced:!!a&&1!=a.length},{fromCodePoint:function(e){for(var t,r=[],n=arguments.length,a=0;n>a;){if(t=+arguments[a++],i(t,1114111)!==t)throw RangeError(t+" is not a valid code point");r.push(t<65536?o(t):o(55296+((t-=65536)>>10),t%1024+56320));}return r.join("")}});},function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value);}catch(e){i={error:e};}finally{try{n&&!n.done&&(r=o.return)&&r.call(o);}finally{if(i)throw i.error}}return a};Object.defineProperty(t,"__esModule",{value:!0});var i=r(111),o=function(){function e(e,t){this._options={skipWhitespaceOnlyText:!1},this.err={line:-1,col:-1,index:-1,str:""},this._str=e,this._index=0,this._length=e.length,t&&(this._options.skipWhitespaceOnlyText=t.skipWhitespaceOnlyText||!1);}return e.prototype.nextToken=function(){if(this.eof())return {type:i.TokenType.EOF};var t=this.skipIfStartsWith("<")?this.openBracket():this.text();return this._options.skipWhitespaceOnlyText&&t.type===i.TokenType.Text&&e.isWhiteSpaceToken(t)&&(t=this.nextToken()),t},e.prototype.openBracket=function(){return this.skipIfStartsWith("?")?this.skipIfStartsWith("xml")?e.isSpace(this._str[this._index])?this.declaration():(this.seek(-3),this.pi()):this.pi():this.skipIfStartsWith("!")?this.skipIfStartsWith("--")?this.comment():this.skipIfStartsWith("[CDATA[")?this.cdata():this.skipIfStartsWith("DOCTYPE")?this.doctype():void this.throwError("Invalid '!' in opening tag."):this.skipIfStartsWith("/")?this.closeTag():this.openTag()},e.prototype.declaration=function(){for(var e="",t="",r="";!this.eof();){if(this.skipSpace(),this.skipIfStartsWith("?>"))return {type:i.TokenType.Declaration,version:e,encoding:t,standalone:r};var o=n(this.attribute(),2),a=o[0],s=o[1];"version"===a?e=s:"encoding"===a?t=s:"standalone"===a?r=s:this.throwError("Invalid attribute name: "+a);}this.throwError("Missing declaration end symbol `?>`");},e.prototype.doctype=function(){var e="",t="";this.skipSpace();var r=this.takeUntil2("[",">",!0);return this.skipSpace(),this.skipIfStartsWith("PUBLIC")?(e=this.quotedString(),t=this.quotedString()):this.skipIfStartsWith("SYSTEM")&&(t=this.quotedString()),this.skipSpace(),this.skipIfStartsWith("[")&&(this.skipUntil("]"),this.skipIfStartsWith("]")||this.throwError("Missing end bracket of DTD internal subset")),this.skipSpace(),this.skipIfStartsWith(">")||this.throwError("Missing doctype end symbol `>`"),{type:i.TokenType.DocType,name:r,pubId:e,sysId:t}},e.prototype.pi=function(){var e=this.takeUntilStartsWith("?>",!0);if(this.eof()&&this.throwError("Missing processing instruction end symbol `?>`"),this.skipSpace(),this.skipIfStartsWith("?>"))return {type:i.TokenType.PI,target:e,data:""};var t=this.takeUntilStartsWith("?>");return this.eof()&&this.throwError("Missing processing instruction end symbol `?>`"),this.seek(2),{type:i.TokenType.PI,target:e,data:t}},e.prototype.text=function(){var e=this.takeUntil("<");return {type:i.TokenType.Text,data:e}},e.prototype.comment=function(){var e=this.takeUntilStartsWith("--\x3e");return this.eof()&&this.throwError("Missing comment end symbol `--\x3e`"),this.seek(3),{type:i.TokenType.Comment,data:e}},e.prototype.cdata=function(){var e=this.takeUntilStartsWith("]]>");return this.eof()&&this.throwError("Missing CDATA end symbol `]>`"),this.seek(3),{type:i.TokenType.CDATA,data:e}},e.prototype.openTag=function(){this.skipSpace();var e=this.takeUntil2(">","/",!0);if(this.skipSpace(),this.skipIfStartsWith(">"))return {type:i.TokenType.Element,name:e,attributes:[],selfClosing:!1};if(this.skipIfStartsWith("/>"))return {type:i.TokenType.Element,name:e,attributes:[],selfClosing:!0};for(var t=[];!this.eof();){if(this.skipSpace(),this.skipIfStartsWith(">"))return {type:i.TokenType.Element,name:e,attributes:t,selfClosing:!1};if(this.skipIfStartsWith("/>"))return {type:i.TokenType.Element,name:e,attributes:t,selfClosing:!0};var r=this.attribute();t.push(r);}this.throwError("Missing opening element tag end symbol `>`");},e.prototype.closeTag=function(){this.skipSpace();var e=this.takeUntil(">",!0);return this.skipSpace(),this.skipIfStartsWith(">")||this.throwError("Missing closing element tag end symbol `>`"),{type:i.TokenType.ClosingTag,name:e}},e.prototype.attribute=function(){this.skipSpace();var e=this.takeUntil("=",!0);return this.skipSpace(),this.skipIfStartsWith("=")||this.throwError("Missing equals sign before attribute value"),[e,this.quotedString()]},e.prototype.quotedString=function(){this.skipSpace();var t=this.take(1);e.isQuote(t)||this.throwError("Missing start quote character before quoted value");var r=this.takeUntil(t);return this.skipIfStartsWith(t)||this.throwError("Missing end quote character after quoted value"),r},e.prototype.eof=function(){return this._index>=this._length},e.prototype.skipIfStartsWith=function(e){var t=e.length;if(1===t)return this._str[this._index]===e&&(this._index++,!0);for(var r=0;r<t;r++)if(this._str[this._index+r]!==e[r])return !1;return this._index+=t,!0},e.prototype.seek=function(e){this._index+=e,this._index<0&&(this._index=0),this._index>this._length&&(this._index=this._length);},e.prototype.skipSpace=function(){for(;!this.eof()&&e.isSpace(this._str[this._index]);)this._index++;},e.prototype.take=function(e){if(1===e)return this._str[this._index++];var t=this._index;return this.seek(e),this._str.slice(t,this._index)},e.prototype.takeUntil=function(t,r){void 0===r&&(r=!1);for(var n=this._index;this._index<this._length;){var i=this._str[this._index];if(i===t||r&&e.isSpace(i))break;this._index++;}return this._str.slice(n,this._index)},e.prototype.takeUntil2=function(t,r,n){void 0===n&&(n=!1);for(var i=this._index;this._index<this._length;){var o=this._str[this._index];if(o===t||o===r||n&&e.isSpace(o))break;this._index++;}return this._str.slice(i,this._index)},e.prototype.takeUntilStartsWith=function(t,r){void 0===r&&(r=!1);for(var n=this._index,i=t.length;this._index<this._length;){for(var o=!0,a=0;a<i;a++){var s=this._str[this._index+a],u=t[a];if(r&&e.isSpace(s))return this._str.slice(n,this._index);if(s!==u){this._index++,o=!1;break}}if(o)return this._str.slice(n,this._index)}return this._index=this._length,this._str.slice(n)},e.prototype.skipUntil=function(e){for(;this._index<this._length;){if(this._str[this._index]===e)break;this._index++;}},e.isWhiteSpaceToken=function(e){for(var t=e.data,r=0;r<t.length;r++){var n=t[r];if(" "!==n&&"\n"!==n&&"\r"!==n&&"\t"!==n&&"\f"!==n)return !1}return !0},e.isSpace=function(e){return " "===e||"\n"===e||"\r"===e||"\t"===e},e.isQuote=function(e){return '"'===e||"'"===e},e.prototype.throwError=function(e){for(var t=/\r\n|\r|\n/g,r=null,n=0,i=0,o=this._str.length;null!==(r=t.exec(this._str))&&null!==r;)if(n++,r.index<this._index&&(i=t.lastIndex),r.index>this._index){o=r.index;break}throw this.err={line:n,col:this._index-i,index:this._index,str:this._str.substring(i,o)},new Error(e+"\nIndex: "+this.err.index+"\nLn: "+this.err.line+", Col: "+this.err.col+"\nInput: "+this.err.str)},e.prototype[Symbol.iterator]=function(){return this._index=0,{next:function(){var e=this.nextToken();return e.type===i.TokenType.EOF?{done:!0,value:null}:{done:!1,value:e}}.bind(this)}},e}();t.XMLStringLexer=o;},function(e,t,r){var n=r(39);e.exports=new n({include:[r(182)]});},function(e,t,r){var n=r(39);e.exports=new n({include:[r(113)],implicit:[r(289),r(290),r(291),r(292)]});},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(91),i=r(1),o=r(3),a=r(77),s=r(109);function u(e,t){var r=c(void 0===e||l(e)?e:n.DefaultBuilderOptions),i=l(e)?t:e,o=s.createDocument();h(o,r);var u=new a.XMLBuilderImpl(o);return void 0!==i&&u.ele(i),u}function l(e){if(!i.isPlainObject(e))return !1;for(var t in e)if(e.hasOwnProperty(t)&&!n.XMLBuilderOptionKeys.has(t))return !1;return !0}function c(e){void 0===e&&(e={});var t=i.applyDefaults(e,n.DefaultBuilderOptions);if(0===t.convert.att.length||0===t.convert.ins.length||0===t.convert.text.length||0===t.convert.cdata.length||0===t.convert.comment.length)throw new Error("JS object converter strings cannot be zero length.");return t}function h(e,t,r){var n=e;n._xmlBuilderOptions=t,n._isFragment=r;}t.builder=function(e,t){var r=c(l(e)?e:n.DefaultBuilderOptions),s=o.Guard.isNode(e)||i.isArray(e)?e:t;if(void 0===s)throw new Error("Invalid arguments.");if(i.isArray(s)){for(var u=[],h=0;h<s.length;h++){var p=new a.XMLBuilderImpl(s[h]);p.set(r),u.push(p);}return u}var f=new a.XMLBuilderImpl(s);return f.set(r),f},t.create=u,t.fragment=function(e,t){var r=c(void 0===e||l(e)?e:n.DefaultBuilderOptions),i=l(e)?t:e,o=s.createDocument();h(o,r,!0);var u=new a.XMLBuilderImpl(o.createDocumentFragment());return void 0!==i&&u.ele(i),u},t.convert=function(e,t,r){var i,o,a;return l(e)&&void 0!==t?(i=e,o=t,a=r):(i=n.DefaultBuilderOptions,o=e,a=t||void 0),u(i,o).end(a)};},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(77);t.builder=n.builder,t.create=n.create,t.fragment=n.fragment,t.convert=n.convert,t.createCB=n.createCB,t.fragmentCB=n.fragmentCB;},function(e,t,r){r(31),r(32),r(33),r(191),r(192),r(194),r(64),r(19),r(198),r(199),r(89),r(201),r(65),r(20),r(66),r(22),r(23);var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value);}catch(e){i={error:e};}finally{try{n&&!n.done&&(r=o.return)&&r.call(o);}finally{if(i)throw i.error}}return a},i=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var o=r(91),a=r(1),s=r(217),u=r(2),l=r(3),c=r(0),h=r(109),p=r(7),f=r(276),d=function(){function e(e){this._domNode=e;}return Object.defineProperty(e.prototype,"node",{get:function(){return this._domNode},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"options",{get:function(){return this._options},enumerable:!0,configurable:!0}),e.prototype.set=function(e){return this._options=a.applyDefaults(a.applyDefaults(this._options,e,!0),o.DefaultBuilderOptions),this},e.prototype.ele=function(t,r,i){var o,s,u,l,p,d;if(a.isObject(t))return new f.ObjectReader(this._options).parse(this,t);if(null!==t&&/^\s*</.test(t))return new f.XMLReader(this._options).parse(this,t);if(null!==t&&/^\s*[\{\[]/.test(t))return new f.JSONReader(this._options).parse(this,t);if(null!==t&&/^(\s*|(#.*)|(%.*))*---/.test(t))return new f.YAMLReader(this._options).parse(this,t);if((null===t||a.isString(t))&&a.isString(r))l=(o=n([t,r,i],3))[0],p=o[1],d=o[2];else {if(null===t)throw new Error("Element name cannot be null. "+this._debugInfo());l=(s=n([void 0,t,a.isObject(r)?r:void 0],3))[0],p=s[1],d=s[2];}if(d&&(d=a.getValue(d)),l=(u=n(this._extractNamespace(h.sanitizeInput(l,this._options.invalidCharReplacement),h.sanitizeInput(p,this._options.invalidCharReplacement),!0),2))[0],p=u[1],void 0===l){var m=n(c.namespace_extractQName(p),1)[0];l=this.node.lookupNamespaceURI(m);}var y=null!=l?this._doc.createElementNS(l,p):this._doc.createElement(p);this.node.appendChild(y);var v=new e(y),_=this._doc.doctype;if(y===this._doc.documentElement&&null!==_){var g=this._doc.implementation.createDocumentType(this._doc.documentElement.tagName,_.publicId,_.systemId);this._doc.replaceChild(g,_);}return d&&!a.isEmpty(d)&&v.att(d),v},e.prototype.remove=function(){var e=this.up();return e.node.removeChild(this.node),e},e.prototype.att=function(e,t,r){var i,o,s,u,f,d,m=this;if(a.isMap(e)||a.isObject(e))return a.forEachObject(e,(function(e,t){return m.att(e,t)}),this),this;if(null!=e&&(e=a.getValue(e+"")),null!=t&&(t=a.getValue(t+"")),null!=r&&(r=a.getValue(r+"")),null!==e&&!a.isString(e)||!a.isString(t)||null!==r&&!a.isString(r)){if(!a.isString(e)||null!=t&&!a.isString(t))throw new Error("Attribute name and value not specified. "+this._debugInfo());u=(o=n([void 0,e,t],3))[0],f=o[1],d=o[2];}else u=(i=n([e,t,r],3))[0],f=i[1],d=i[2];if(this._options.keepNullAttributes&&null==d)d="";else if(null==d)return this;if(!l.Guard.isElementNode(this.node))throw new Error("An attribute can only be assigned to an element node.");var y=this.node;u=(s=n(this._extractNamespace(u,f,!1),2))[0],f=s[1],f=h.sanitizeInput(f,this._options.invalidCharReplacement),u=h.sanitizeInput(u,this._options.invalidCharReplacement),d=h.sanitizeInput(d,this._options.invalidCharReplacement);var v=n(c.namespace_extractQName(f),2),_=v[0],g=v[1],b=n(c.namespace_extractQName(y.prefix?y.prefix+":"+y.localName:y.localName),1)[0],x=null;return "xmlns"===_?(u=p.namespace.XMLNS,null===y.namespaceURI&&b===g&&(x=d)):null===_&&"xmlns"===g&&null===b&&(u=p.namespace.XMLNS,x=d),null!==x&&(this._updateNamespace(x),y=this.node),void 0!==u?y.setAttributeNS(u,f,d):y.setAttribute(f,d),this},e.prototype.removeAtt=function(e,t){var r,n,i=this;if(!l.Guard.isElementNode(this.node))throw new Error("An attribute can only be removed from an element node.");if(e=a.getValue(e),void 0!==t&&(t=a.getValue(t)),null!==e&&void 0===t)n=e;else {if(null!==e&&!a.isString(e)||void 0===t)throw new Error("Attribute namespace must be a string. "+this._debugInfo());r=e,n=t;}return a.isArray(n)||a.isSet(n)?a.forEachArray(n,(function(e){return void 0===r?i.removeAtt(e):i.removeAtt(r,e)}),this):void 0!==r?(n=h.sanitizeInput(n,this._options.invalidCharReplacement),r=h.sanitizeInput(r,this._options.invalidCharReplacement),this.node.removeAttributeNS(r,n)):(n=h.sanitizeInput(n,this._options.invalidCharReplacement),this.node.removeAttribute(n)),this},e.prototype.txt=function(e){if(null==e){if(!this._options.keepNullNodes)return this;e="";}var t=this._doc.createTextNode(h.sanitizeInput(e,this._options.invalidCharReplacement));return this.node.appendChild(t),this},e.prototype.com=function(e){if(null==e){if(!this._options.keepNullNodes)return this;e="";}var t=this._doc.createComment(h.sanitizeInput(e,this._options.invalidCharReplacement));return this.node.appendChild(t),this},e.prototype.dat=function(e){if(null==e){if(!this._options.keepNullNodes)return this;e="";}var t=this._doc.createCDATASection(h.sanitizeInput(e,this._options.invalidCharReplacement));return this.node.appendChild(t),this},e.prototype.ins=function(e,t){var r=this;if(void 0===t&&(t=""),null==t){if(!this._options.keepNullNodes)return this;t="";}if(a.isArray(e)||a.isSet(e))a.forEachArray(e,(function(e){var t=(e+="").indexOf(" "),n=-1===t?e:e.substr(0,t),i=-1===t?"":e.substr(t+1);r.ins(n,i);}),this);else if(a.isMap(e)||a.isObject(e))a.forEachObject(e,(function(e,t){return r.ins(e,t)}),this);else {var n=this._doc.createProcessingInstruction(h.sanitizeInput(e,this._options.invalidCharReplacement),h.sanitizeInput(t,this._options.invalidCharReplacement));this.node.appendChild(n);}return this},e.prototype.dec=function(e){return this._options.version=e.version||"1.0",this._options.encoding=e.encoding,this._options.standalone=e.standalone,this},e.prototype.dtd=function(e){var t=h.sanitizeInput(e&&e.name||(this._doc.documentElement?this._doc.documentElement.tagName:"ROOT"),this._options.invalidCharReplacement),r=h.sanitizeInput(e&&e.pubID||"",this._options.invalidCharReplacement),n=h.sanitizeInput(e&&e.sysID||"",this._options.invalidCharReplacement);if(null!==this._doc.documentElement&&t!==this._doc.documentElement.tagName)throw new Error("DocType name does not match document element name.");var i=this._doc.implementation.createDocumentType(t,r,n);return null!==this._doc.doctype?this._doc.replaceChild(i,this._doc.doctype):this._doc.insertBefore(i,this._doc.documentElement),this},e.prototype.import=function(t){var r,o,a=this._domNode,s=this._doc,u=t.node;if(l.Guard.isDocumentNode(u)){var h=u.documentElement;if(null===h)throw new Error("Imported document has no document element node. "+this._debugInfo());var p=s.importNode(h,!0);a.appendChild(p);var f=n(c.namespace_extractQName(p.prefix?p.prefix+":"+p.localName:p.localName),1)[0],d=a.lookupNamespaceURI(f);new e(p)._updateNamespace(d);}else if(l.Guard.isDocumentFragmentNode(u))try{for(var m=i(u.childNodes),y=m.next();!y.done;y=m.next()){var v=y.value;p=s.importNode(v,!0);if(a.appendChild(p),l.Guard.isElementNode(p)){f=n(c.namespace_extractQName(p.prefix?p.prefix+":"+p.localName:p.localName),1)[0],d=a.lookupNamespaceURI(f);new e(p)._updateNamespace(d);}}}catch(e){r={error:e};}finally{try{y&&!y.done&&(o=m.return)&&o.call(m);}finally{if(r)throw r.error}}else {p=s.importNode(u,!0);if(a.appendChild(p),l.Guard.isElementNode(p)){f=n(c.namespace_extractQName(p.prefix?p.prefix+":"+p.localName:p.localName),1)[0],d=a.lookupNamespaceURI(f);new e(p)._updateNamespace(d);}}return this},e.prototype.doc=function(){if(this._doc._isFragment){for(var t=this.node;t&&t.nodeType!==u.NodeType.DocumentFragment;)t=t.parentNode;if(null===t)throw new Error("Node has no parent node while searching for document fragment ancestor. "+this._debugInfo());return new e(t)}return new e(this._doc)},e.prototype.root=function(){var t=this._doc.documentElement;if(!t)throw new Error("Document root element is null. "+this._debugInfo());return new e(t)},e.prototype.up=function(){var t=this._domNode.parentNode;if(!t)throw new Error("Parent node is null. "+this._debugInfo());return new e(t)},e.prototype.prev=function(){var t=this._domNode.previousSibling;if(!t)throw new Error("Previous sibling node is null. "+this._debugInfo());return new e(t)},e.prototype.next=function(){var t=this._domNode.nextSibling;if(!t)throw new Error("Next sibling node is null. "+this._debugInfo());return new e(t)},e.prototype.first=function(){var t=this._domNode.firstChild;if(!t)throw new Error("First child node is null. "+this._debugInfo());return new e(t)},e.prototype.last=function(){var t=this._domNode.lastChild;if(!t)throw new Error("Last child node is null. "+this._debugInfo());return new e(t)},e.prototype.each=function(t,r,n,i){void 0===r&&(r=!1),void 0===n&&(n=!1);for(var o=this._getFirstDescendantNode(this._domNode,r,n);o[0];){var a=this._getNextDescendantNode(this._domNode,o[0],n,o[1],o[2]);t.call(i,new e(o[0]),o[1],o[2]),o=a;}return this},e.prototype.map=function(e,t,r,n){void 0===t&&(t=!1),void 0===r&&(r=!1);var i=[];return this.each((function(t,r,o){return i.push(e.call(n,t,r,o))}),t,r),i},e.prototype.reduce=function(e,t,r,n,i){void 0===r&&(r=!1),void 0===n&&(n=!1);var o=t;return this.each((function(t,r,n){return o=e.call(i,o,t,r,n)}),r,n),o},e.prototype.find=function(t,r,n,i){void 0===r&&(r=!1),void 0===n&&(n=!1);for(var o=this._getFirstDescendantNode(this._domNode,r,n);o[0];){var a=new e(o[0]);if(t.call(i,a,o[1],o[2]))return a;o=this._getNextDescendantNode(this._domNode,o[0],n,o[1],o[2]);}},e.prototype.filter=function(e,t,r,n){void 0===t&&(t=!1),void 0===r&&(r=!1);var i=[];return this.each((function(t,r,o){e.call(n,t,r,o)&&i.push(t);}),t,r),i},e.prototype.every=function(t,r,n,i){void 0===r&&(r=!1),void 0===n&&(n=!1);for(var o=this._getFirstDescendantNode(this._domNode,r,n);o[0];){var a=new e(o[0]);if(!t.call(i,a,o[1],o[2]))return !1;o=this._getNextDescendantNode(this._domNode,o[0],n,o[1],o[2]);}return !0},e.prototype.some=function(t,r,n,i){void 0===r&&(r=!1),void 0===n&&(n=!1);for(var o=this._getFirstDescendantNode(this._domNode,r,n);o[0];){var a=new e(o[0]);if(t.call(i,a,o[1],o[2]))return !0;o=this._getNextDescendantNode(this._domNode,o[0],n,o[1],o[2]);}return !1},e.prototype.toArray=function(e,t){void 0===e&&(e=!1),void 0===t&&(t=!1);var r=[];return this.each((function(e){return r.push(e)}),e,t),r},e.prototype.toString=function(e){return void 0===(e=e||{}).format&&(e.format="xml"),this._serialize(e)},e.prototype.toObject=function(e){return void 0===(e=e||{}).format&&(e.format="object"),this._serialize(e)},e.prototype.end=function(e){return void 0===(e=e||{}).format&&(e.format="xml"),this.doc()._serialize(e)},e.prototype._getFirstDescendantNode=function(e,t,r){return t?[this._domNode,0,0]:r?this._getNextDescendantNode(e,e,r,0,0):[this._domNode.firstChild,0,1]},e.prototype._getNextDescendantNode=function(e,t,r,n,i){if(!r)return e===t?[t.firstChild,0,i+1]:[t.nextSibling,n+1,i];if(t.firstChild)return [t.firstChild,0,i+1];if(t===e)return [null,-1,-1];if(t.nextSibling)return [t.nextSibling,n+1,i];for(var o=t.parentNode;o&&o!==e;){if(o.nextSibling)return [o.nextSibling,c.tree_index(o.nextSibling),i-1];o=o.parentNode,i--;}return [null,-1,-1]},e.prototype._serialize=function(e){if("xml"===e.format)return new s.XMLWriter(this._options,e).serialize(this.node);if("map"===e.format)return new s.MapWriter(this._options,e).serialize(this.node);if("object"===e.format)return new s.ObjectWriter(this._options,e).serialize(this.node);if("json"===e.format)return new s.JSONWriter(this._options,e).serialize(this.node);if("yaml"===e.format)return new s.YAMLWriter(this._options,e).serialize(this.node);throw new Error("Invalid writer format: "+e.format+". "+this._debugInfo())},e.prototype._extractNamespace=function(e,t,r){var n=t.indexOf("@");if(n>0&&(void 0===e&&(e=t.slice(n+1)),t=t.slice(0,n)),void 0===e)e=r?this._options.defaultNamespace.ele:this._options.defaultNamespace.att;else if(null!==e&&"@"===e[0]){var i=e.slice(1);if(void 0===(e=this._options.namespaceAlias[i]))throw new Error("Namespace alias `"+i+"` is not defined. "+this._debugInfo())}return [e,t]},e.prototype._updateNamespace=function(t){var r,o,a,s,u=this._domNode;if(l.Guard.isElementNode(u)&&null!==t&&u.namespaceURI!==t){var h=n(c.namespace_extractQName(u.prefix?u.prefix+":"+u.localName:u.localName),2),p=h[0],f=h[1],d=c.create_element(this._doc,f,t,p);try{for(var m=i(u.attributes),y=m.next();!y.done;y=m.next()){var v=y.value,_=v.prefix?v.prefix+":"+v.localName:v.localName,g=n(c.namespace_extractQName(_),1)[0],b=v.namespaceURI;null===b&&null!==g&&(b=u.lookupNamespaceURI(g)),null===b?d.setAttribute(_,v.value):d.setAttributeNS(b,_,v.value);}}catch(e){r={error:e};}finally{try{y&&!y.done&&(o=m.return)&&o.call(m);}finally{if(r)throw r.error}}var x=u.parentNode;if(null===x)throw new Error("Parent node is null."+this._debugInfo());x.replaceChild(d,u),this._domNode=d;try{for(var w=i(u.childNodes),E=w.next();!E.done;E=w.next()){var D=E.value.cloneNode(!0);if(d.appendChild(D),l.Guard.isElementNode(D)){var S=n(c.namespace_extractQName(D.prefix?D.prefix+":"+D.localName:D.localName),1)[0],C=d.lookupNamespaceURI(S);new e(D)._updateNamespace(C);}}}catch(e){a={error:e};}finally{try{E&&!E.done&&(s=w.return)&&s.call(w);}finally{if(a)throw a.error}}}},Object.defineProperty(e.prototype,"_doc",{get:function(){var e=this.node;if(l.Guard.isDocumentNode(e))return e;var t=e.ownerDocument;if(!t)throw new Error("Owner document is null. "+this._debugInfo());return t},enumerable:!0,configurable:!0}),e.prototype._debugInfo=function(e){var t=this.node,r=t.parentNode;e=e||t.nodeName;var n=r?r.nodeName:"";return n?"node: <"+e+">, parent: <"+n+">":"node: <"+e+">"},Object.defineProperty(e.prototype,"_options",{get:function(){var e=this._doc;if(void 0===e._xmlBuilderOptions)throw new Error("Builder options is not set.");return e._xmlBuilderOptions},set:function(e){this._doc._xmlBuilderOptions=e;},enumerable:!0,configurable:!0}),e}();t.XMLBuilderImpl=d;},function(e,t,r){var n=r(11),i=r(117),o=n.WeakMap;e.exports="function"==typeof o&&/native code/.test(i(o));},function(e,t,r){var n=r(46),i=r(82),o=r(85),a=r(18);e.exports=n("Reflect","ownKeys")||function(e){var t=i.f(a(e)),r=o.f;return r?t.concat(r(e)):t};},function(e,t,r){var n=r(16),i=r(15),o=r(18),a=r(61);e.exports=n?Object.defineProperties:function(e,t){o(e);for(var r,n=a(t),s=n.length,u=0;s>u;)i.f(e,r=n[u++],t[r]);return e};},function(e,t,r){var n=r(46);e.exports=n("document","documentElement");},function(e,t,r){var n=r(24),i=r(82).f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return a&&"[object Window]"==o.call(e)?function(e){try{return i(e)}catch(e){return a.slice()}}(e):i(n(e))};},function(e,t,r){var n=r(4),i=r(36).every,o=r(48),a=r(28),s=o("every"),u=a("every");n({target:"Array",proto:!0,forced:!s||!u},{every:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}});},function(e,t,r){var n=r(4),i=r(36).filter,o=r(63),a=r(28),s=o("filter"),u=a("filter");n({target:"Array",proto:!0,forced:!s||!u},{filter:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}});},function(e,t,r){var n=r(46);e.exports=n("navigator","userAgent")||"";},function(e,t,r){var n=r(4),i=r(36).find,o=r(130),a=r(28),s=!0,u=a("find");"find"in[]&&Array(1).find((function(){s=!1;})),n({target:"Array",proto:!0,forced:s||!u},{find:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}}),o("find");},function(e,t,r){var n=r(131).IteratorPrototype,i=r(60),o=r(40),a=r(62),s=r(49),u=function(){return this};e.exports=function(e,t,r){var l=t+" Iterator";return e.prototype=i(n,{next:o(1,r)}),a(e,l,!1,!0),s[l]=u,e};},function(e,t,r){var n=r(8);e.exports=!n((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}));},function(e,t,r){var n=r(13);e.exports=function(e){if(!n(e)&&null!==e)throw TypeError("Can't set "+String(e)+" as a prototype");return e};},function(e,t,r){var n=r(4),i=r(36).map,o=r(63),a=r(28),s=o("map"),u=a("map");n({target:"Array",proto:!0,forced:!s||!u},{map:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}});},function(e,t,r){var n=r(4),i=r(200).left,o=r(48),a=r(28),s=o("reduce"),u=a("reduce",{1:0});n({target:"Array",proto:!0,forced:!s||!u},{reduce:function(e){return i(this,e,arguments.length,arguments.length>1?arguments[1]:void 0)}});},function(e,t,r){var n=r(127),i=r(27),o=r(41),a=r(26),s=function(e){return function(t,r,s,u){n(r);var l=i(t),c=o(l),h=a(l.length),p=e?h-1:0,f=e?-1:1;if(s<2)for(;;){if(p in c){u=c[p],p+=f;break}if(p+=f,e?p<0:h<=p)throw TypeError("Reduce of empty array with no initial value")}for(;e?p>=0:h>p;p+=f)p in c&&(u=r(u,c[p],p,l));return u}};e.exports={left:s(!1),right:s(!0)};},function(e,t,r){var n=r(4),i=r(36).some,o=r(48),a=r(28),s=o("some"),u=a("some");n({target:"Array",proto:!0,forced:!s||!u},{some:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}});},function(e,t,r){var n=r(90),i=r(135);e.exports=n?{}.toString:function(){return "[object "+i(this)+"]"};},function(e,t){e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0};},function(e,t,r){var n=r(8);e.exports=!n((function(){return Object.isExtensible(Object.preventExtensions({}))}));},function(e,t,r){var n=r(5),i=r(49),o=n("iterator"),a=Array.prototype;e.exports=function(e){return void 0!==e&&(i.Array===e||a[o]===e)};},function(e,t,r){var n=r(135),i=r(49),o=r(5)("iterator");e.exports=function(e){if(null!=e)return e[o]||e["@@iterator"]||i[n(e)]};},function(e,t,r){var n=r(18);e.exports=function(e,t,r,i){try{return i?t(n(r)[0],r[1]):t(r)}catch(t){var o=e.return;throw void 0!==o&&n(o.call(e)),t}};},function(e,t,r){var n=r(5)("iterator"),i=!1;try{var o=0,a={next:function(){return {done:!!o++}},return:function(){i=!0;}};a[n]=function(){return this},Array.from(a,(function(){throw 2}));}catch(e){}e.exports=function(e,t){if(!t&&!i)return !1;var r=!1;try{var o={};o[n]=function(){return {next:function(){return {done:r=!0}}}},e(o);}catch(e){}return r};},function(e,t,r){var n=r(13),i=r(133);e.exports=function(e,t,r){var o,a;return i&&"function"==typeof(o=t.constructor)&&o!==r&&n(a=o.prototype)&&a!==r.prototype&&i(e,a),e};},function(e,t,r){var n=r(25);e.exports=function(e,t,r){for(var i in t)n(e,i,t[i],r);return e};},function(e,t,r){var n=r(46),i=r(15),o=r(5),a=r(16),s=o("species");e.exports=function(e){var t=n(e),r=i.f;a&&t&&!t[s]&&r(t,s,{configurable:!0,get:function(){return this}});};},function(e,t,r){var n=this&&this.__generator||function(e,t){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a);}catch(e){o=[6,e],n=0;}finally{r=i=0;}if(5&o[0])throw o[1];return {value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},i=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e){void 0===e&&(e=1e3),this._items=new Set,this._limit=e;}return e.prototype.add=function(e){if(this._items.add(e),this._items.size>this._limit){var t=this._items.values().next();t.done||this._items.delete(t.value);}return this},e.prototype.delete=function(e){return this._items.delete(e)},e.prototype.has=function(e){return this._items.has(e)},e.prototype.clear=function(){this._items.clear();},Object.defineProperty(e.prototype,"size",{get:function(){return this._items.size},enumerable:!0,configurable:!0}),e.prototype.forEach=function(e,t){var r=this;this._items.forEach((function(n){return e.call(t,n,n,r)}));},e.prototype.keys=function(){return n(this,(function(e){switch(e.label){case 0:return [5,i(this._items.keys())];case 1:return e.sent(),[2]}}))},e.prototype.values=function(){return n(this,(function(e){switch(e.label){case 0:return [5,i(this._items.values())];case 1:return e.sent(),[2]}}))},e.prototype.entries=function(){return n(this,(function(e){switch(e.label){case 0:return [5,i(this._items.entries())];case 1:return e.sent(),[2]}}))},e.prototype[Symbol.iterator]=function(){return n(this,(function(e){switch(e.label){case 0:return [5,i(this._items)];case 1:return e.sent(),[2]}}))},Object.defineProperty(e.prototype,Symbol.toStringTag,{get:function(){return "FixedSizeSet"},enumerable:!0,configurable:!0}),e}();t.FixedSizeSet=o;},function(e,t,r){var n=this&&this.__generator||function(e,t){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a);}catch(e){o=[6,e],n=0;}finally{r=i=0;}if(5&o[0])throw o[1];return {value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},i=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e){void 0===e&&(e=1e3),this._items=new Map,this._limit=e;}return e.prototype.get=function(e){return this._items.get(e)},e.prototype.set=function(e,t){if(this._items.set(e,t),this._items.size>this._limit){var r=this._items.keys().next();r.done||this._items.delete(r.value);}},e.prototype.delete=function(e){return this._items.delete(e)},e.prototype.has=function(e){return this._items.has(e)},e.prototype.clear=function(){this._items.clear();},Object.defineProperty(e.prototype,"size",{get:function(){return this._items.size},enumerable:!0,configurable:!0}),e.prototype.forEach=function(e,t){this._items.forEach((function(r,n){return e.call(t,n,r)}));},e.prototype.keys=function(){return n(this,(function(e){switch(e.label){case 0:return [5,i(this._items.keys())];case 1:return e.sent(),[2]}}))},e.prototype.values=function(){return n(this,(function(e){switch(e.label){case 0:return [5,i(this._items.values())];case 1:return e.sent(),[2]}}))},e.prototype.entries=function(){return n(this,(function(e){switch(e.label){case 0:return [5,i(this._items.entries())];case 1:return e.sent(),[2]}}))},e.prototype[Symbol.iterator]=function(){return n(this,(function(e){switch(e.label){case 0:return [5,i(this._items)];case 1:return e.sent(),[2]}}))},Object.defineProperty(e.prototype,Symbol.toStringTag,{get:function(){return "ObjectCache"},enumerable:!0,configurable:!0}),e}();t.ObjectCache=o;},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e){void 0===e&&(e=1e3),this._items=new Map,this._limit=e;}return e.prototype.check=function(e,t){if(this._items.get(e)===t)return !0;if(this._items.get(t)===e)return !1;var r=Math.random()<.5;if(r?this._items.set(e,t):this._items.set(t,e),this._items.size>this._limit){var n=this._items.keys().next();n.done||this._items.delete(n.value);}return r},e}();t.CompareCache=n;},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e){this._initialized=!1,this._value=void 0,this._initFunc=e;}return Object.defineProperty(e.prototype,"value",{get:function(){return this._initialized||(this._value=this._initFunc(),this._initialized=!0),this._value},enumerable:!0,configurable:!0}),e}();t.Lazy=n;},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e){this._pointer=0,this._chars=Array.from(e),this._length=this._chars.length;}return Object.defineProperty(e.prototype,"eof",{get:function(){return this._pointer>=this._length},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"length",{get:function(){return this._length},enumerable:!0,configurable:!0}),e.prototype.codePoint=function(){if(void 0===this._codePoint)if(this.eof)this._codePoint=-1;else {var e=this._chars[this._pointer].codePointAt(0);this._codePoint=void 0!==e?e:-1;}return this._codePoint},e.prototype.c=function(){return void 0===this._c&&(this._c=this.eof?"":this._chars[this._pointer]),this._c},e.prototype.remaining=function(){return void 0===this._remaining&&(this._remaining=this.eof?"":this._chars.slice(this._pointer+1).join("")),this._remaining},e.prototype.substring=function(){return void 0===this._substring&&(this._substring=this.eof?"":this._chars.slice(this._pointer).join("")),this._substring},Object.defineProperty(e.prototype,"pointer",{get:function(){return this._pointer},set:function(e){e!==this._pointer&&(this._pointer=e,this._codePoint=void 0,this._c=void 0,this._remaining=void 0,this._substring=void 0);},enumerable:!0,configurable:!0}),e}();t.StringWalker=n;},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(218);t.MapWriter=n.MapWriter;var i=r(258);t.XMLWriter=i.XMLWriter;var o=r(67);t.ObjectWriter=o.ObjectWriter;var a=r(260);t.JSONWriter=a.JSONWriter;var s=r(261);t.YAMLWriter=s.YAMLWriter;},function(e,t,r){r(19),r(219),r(20),r(22),r(23);var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0});var o=r(1),a=r(67),s=function(e){function t(t,r){var n=e.call(this,t)||this;return n._writerOptions=o.applyDefaults(r,{format:"map",wellFormed:!1,group:!1,verbose:!1}),n}return i(t,e),t.prototype.serialize=function(e){var t=o.applyDefaults(this._writerOptions,{format:"object",wellFormed:!1,verbose:!1}),r=new a.ObjectWriter(this._builderOptions,t).serialize(e);return this._convertObject(r)},t.prototype._convertObject=function(e){if(o.isArray(e)){for(var t=0;t<e.length;t++)e[t]=this._convertObject(e[t]);return e}if(o.isObject(e)){var r=new Map;for(var n in e)r.set(n,this._convertObject(e[n]));return r}return e},t}(r(50).BaseWriter);t.MapWriter=s;},function(e,t,r){var n=r(139),i=r(143);e.exports=n("Map",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),i);},function(e,t,r){var n=r(4),i=r(8),o=r(59),a=r(13),s=r(27),u=r(26),l=r(134),c=r(128),h=r(63),p=r(5),f=r(129),d=p("isConcatSpreadable"),m=f>=51||!i((function(){var e=[];return e[d]=!1,e.concat()[0]!==e})),y=h("concat"),v=function(e){if(!a(e))return !1;var t=e[d];return void 0!==t?!!t:o(e)};n({target:"Array",proto:!0,forced:!m||!y},{concat:function(e){var t,r,n,i,o,a=s(this),h=c(a,0),p=0;for(t=-1,n=arguments.length;t<n;t++)if(v(o=-1===t?a:arguments[t])){if(p+(i=u(o.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(r=0;r<i;r++,p++)r in o&&l(h,p,o[r]);}else {if(p>=9007199254740991)throw TypeError("Maximum allowed index exceeded");l(h,p++,o);}return h.length=p,h}});},function(e,t,r){var n=r(8);function i(e,t){return RegExp(e,t)}t.UNSUPPORTED_Y=n((function(){var e=i("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),t.BROKEN_CARET=n((function(){var e=i("^r","gy");return e.lastIndex=2,null!=e.exec("str")}));},function(e,t,r){var n=r(223);e.exports=function(e){if(n(e))throw TypeError("The method doesn't accept regular expressions");return e};},function(e,t,r){var n=r(13),i=r(42),o=r(5)("match");e.exports=function(e){var t;return n(e)&&(void 0!==(t=e[o])?!!t:"RegExp"==i(e))};},function(e,t,r){var n=r(5)("match");e.exports=function(e){var t=/./;try{"/./"[e](t);}catch(r){try{return t[n]=!1,"/./"[e](t)}catch(e){}}return !1};},function(e,t,r){r(68);var n=r(25),i=r(8),o=r(5),a=r(93),s=r(21),u=o("species"),l=!i((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")})),c="$0"==="a".replace(/./,"$0"),h=o("replace"),p=!!/./[h]&&""===/./[h]("a","$0"),f=!i((function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var r="ab".split(e);return 2!==r.length||"a"!==r[0]||"b"!==r[1]}));e.exports=function(e,t,r,h){var d=o(e),m=!i((function(){var t={};return t[d]=function(){return 7},7!=""[e](t)})),y=m&&!i((function(){var t=!1,r=/a/;return "split"===e&&((r={}).constructor={},r.constructor[u]=function(){return r},r.flags="",r[d]=/./[d]),r.exec=function(){return t=!0,null},r[d](""),!t}));if(!m||!y||"replace"===e&&(!l||!c||p)||"split"===e&&!f){var v=/./[d],_=r(d,""[e],(function(e,t,r,n,i){return t.exec===a?m&&!i?{done:!0,value:v.call(t,r,n)}:{done:!0,value:e.call(r,t,n)}:{done:!1}}),{REPLACE_KEEPS_$0:c,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:p}),g=_[0],b=_[1];n(String.prototype,e,g),n(RegExp.prototype,d,2==t?function(e,t){return b.call(e,this,t)}:function(e){return b.call(e,this)});}h&&s(RegExp.prototype[d],"sham",!0);};},function(e,t,r){var n=r(137).charAt;e.exports=function(e,t,r){return t+(r?n(e,t).length:1)};},function(e,t,r){var n=r(42),i=r(93);e.exports=function(e,t){var r=e.exec;if("function"==typeof r){var o=r.call(e,t);if("object"!=typeof o)throw TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==n(e))throw TypeError("RegExp#exec called on incompatible receiver");return i.call(e,t)};},function(e,t,r){(function(e){Object.defineProperty(t,"__esModule",{value:!0});var n=r(96);t.forgivingBase64Encode=function(t){return e.from(t).toString("base64")},t.forgivingBase64Decode=function(t){return ""===t?"":((t=t.replace(n.ASCIIWhiteSpace,"")).length%4==0&&(t.endsWith("==")?t=t.substr(0,t.length-2):t.endsWith("=")&&(t=t.substr(0,t.length-1))),t.length%4==1?null:/[0-9A-Za-z+/]/.test(t)?e.from(t,"base64").toString("utf8"):null)};}).call(this,r(145).Buffer);},function(e,t,r){t.byteLength=function(e){var t=l(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,n=l(e),a=n[0],s=n[1],u=new o(function(e,t,r){return 3*(t+r)/4-r}(0,a,s)),c=0,h=s>0?a-4:a;for(r=0;r<h;r+=4)t=i[e.charCodeAt(r)]<<18|i[e.charCodeAt(r+1)]<<12|i[e.charCodeAt(r+2)]<<6|i[e.charCodeAt(r+3)],u[c++]=t>>16&255,u[c++]=t>>8&255,u[c++]=255&t;2===s&&(t=i[e.charCodeAt(r)]<<2|i[e.charCodeAt(r+1)]>>4,u[c++]=255&t);1===s&&(t=i[e.charCodeAt(r)]<<10|i[e.charCodeAt(r+1)]<<4|i[e.charCodeAt(r+2)]>>2,u[c++]=t>>8&255,u[c++]=255&t);return u},t.fromByteArray=function(e){for(var t,r=e.length,i=r%3,o=[],a=0,s=r-i;a<s;a+=16383)o.push(c(e,a,a+16383>s?s:a+16383));1===i?(t=e[r-1],o.push(n[t>>2]+n[t<<4&63]+"==")):2===i&&(t=(e[r-2]<<8)+e[r-1],o.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"="));return o.join("")};for(var n=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=a.length;s<u;++s)n[s]=a[s],i[a.charCodeAt(s)]=s;function l(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return -1===r&&(r=t),[r,r===t?0:4-r%4]}function c(e,t,r){for(var i,o,a=[],s=t;s<r;s+=3)i=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),a.push(n[(o=i)>>18&63]+n[o>>12&63]+n[o>>6&63]+n[63&o]);return a.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63;},function(e,t){t.read=function(e,t,r,n,i){var o,a,s=8*i-n-1,u=(1<<s)-1,l=u>>1,c=-7,h=r?i-1:0,p=r?-1:1,f=e[t+h];for(h+=p,o=f&(1<<-c)-1,f>>=-c,c+=s;c>0;o=256*o+e[t+h],h+=p,c-=8);for(a=o&(1<<-c)-1,o>>=-c,c+=n;c>0;a=256*a+e[t+h],h+=p,c-=8);if(0===o)o=1-l;else {if(o===u)return a?NaN:1/0*(f?-1:1);a+=Math.pow(2,n),o-=l;}return (f?-1:1)*a*Math.pow(2,o-n)},t.write=function(e,t,r,n,i,o){var a,s,u,l=8*o-i-1,c=(1<<l)-1,h=c>>1,p=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,f=n?0:o-1,d=n?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=c):(a=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-a))<1&&(a--,u*=2),(t+=a+h>=1?p/u:p*Math.pow(2,1-h))*u>=2&&(a++,u/=2),a+h>=c?(s=0,a=c):a+h>=1?(s=(t*u-1)*Math.pow(2,i),a+=h):(s=t*Math.pow(2,h-1)*Math.pow(2,i),a=0));i>=8;e[r+f]=255&s,f+=d,s/=256,i-=8);for(a=a<<i|s,l+=i;l>0;e[r+f]=255&a,f+=d,a/=256,l-=8);e[r+f-d]|=128*m;};},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return "[object Array]"==r.call(e)};},function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var i=r(1);function o(e){var t,r;if(null===e||i.isString(e)||i.isNumber(e))return e;if(i.isArray(e)){var a=new Array;try{for(var s=n(e),u=s.next();!u.done;u=s.next()){var l=u.value;a.push(o(l));}}catch(e){t={error:e};}finally{try{u&&!u.done&&(r=s.return)&&r.call(s);}finally{if(t)throw t.error}}return a}if(i.isObject(e)){a=new Map;for(var c in e)if(e.hasOwnProperty(c)){var h=e[c];a.set(c,o(h));}return a}return e}t.parseJSONFromBytes=function(e){var t=i.utf8Decode(e);return JSON.parse.call(void 0,t)},t.serializeJSONToBytes=function(e){var t=JSON.stringify.call(void 0,e);return i.utf8Encode(t)},t.parseJSONIntoInfraValues=function(e){return o(JSON.parse.call(void 0,e))},t.convertAJSONDerivedJavaScriptValueToAnInfraValue=o;},function(e,t,r){var n=this&&this.__generator||function(e,t){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a);}catch(e){o=[6,e],n=0;}finally{r=i=0;}if(5&o[0])throw o[1];return {value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},i=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value);}catch(e){i={error:e};}finally{try{n&&!n.done&&(r=o.return)&&r.call(o);}finally{if(i)throw i.error}}return a},o=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(i(arguments[t]));return e},a=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var s=r(1);t.append=function(e,t){e.push(t);},t.extend=function(e,t){e.push.apply(e,o(t));},t.prepend=function(e,t){e.unshift(t);},t.replace=function(e,t,r){var n,i,o=0;try{for(var u=a(e),l=u.next();!l.done;l=u.next()){var c=l.value;if(s.isFunction(t))t.call(null,c)&&(e[o]=r);else if(c===t)return void(e[o]=r);o++;}}catch(e){n={error:e};}finally{try{l&&!l.done&&(i=u.return)&&i.call(u);}finally{if(n)throw n.error}}},t.insert=function(e,t,r){e.splice(r,0,t);},t.remove=function(e,t){for(var r=e.length;r--;){var n=e[r];if(s.isFunction(t))t.call(null,n)&&e.splice(r,1);else if(n===t)return void e.splice(r,1)}},t.empty=function(e){e.length=0;},t.contains=function(e,t){var r,n;try{for(var i=a(e),o=i.next();!o.done;o=i.next()){var u=o.value;if(s.isFunction(t)){if(t.call(null,u))return !0}else if(u===t)return !0}}catch(e){r={error:e};}finally{try{o&&!o.done&&(n=i.return)&&n.call(i);}finally{if(r)throw r.error}}return !1},t.size=function(e,t){var r,n;if(void 0===t)return e.length;var i=0;try{for(var o=a(e),s=o.next();!s.done;s=o.next()){var u=s.value;t.call(null,u)&&i++;}}catch(e){r={error:e};}finally{try{s&&!s.done&&(n=o.return)&&n.call(o);}finally{if(r)throw r.error}}return i},t.isEmpty=function(e){return 0===e.length},t.forEach=function(e,t){var r,i,o,s,u,l;return n(this,(function(n){switch(n.label){case 0:return void 0!==t?[3,2]:[5,a(e)];case 1:return n.sent(),[3,9];case 2:n.trys.push([2,7,8,9]),r=a(e),i=r.next(),n.label=3;case 3:return i.done?[3,6]:(o=i.value,t.call(null,o)?[4,o]:[3,5]);case 4:n.sent(),n.label=5;case 5:return i=r.next(),[3,3];case 6:return [3,9];case 7:return s=n.sent(),u={error:s},[3,9];case 8:try{i&&!i.done&&(l=r.return)&&l.call(r);}finally{if(u)throw u.error}return [7];case 9:return [2]}}))},t.clone=function(e){return new(Array.bind.apply(Array,o([void 0],e)))},t.sortInAscendingOrder=function(e,t){return e.sort((function(e,r){return t.call(null,e,r)?-1:1}))},t.sortInDescendingOrder=function(e,t){return e.sort((function(e,r){return t.call(null,e,r)?1:-1}))};},function(e,t,r){var n=this&&this.__generator||function(e,t){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a);}catch(e){o=[6,e],n=0;}finally{r=i=0;}if(5&o[0])throw o[1];return {value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},i=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},o=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value);}catch(e){i={error:e};}finally{try{n&&!n.done&&(r=o.return)&&r.call(o);}finally{if(i)throw i.error}}return a},a=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(o(arguments[t]));return e};Object.defineProperty(t,"__esModule",{value:!0});var s=r(1);t.get=function(e,t){return e.get(t)},t.set=function(e,t,r){e.set(t,r);},t.remove=function(e,t){var r,n,o,a;if(s.isFunction(t)){var u=[];try{for(var l=i(e),c=l.next();!c.done;c=l.next()){var h=c.value;t.call(null,h)&&u.push(h[0]);}}catch(e){r={error:e};}finally{try{c&&!c.done&&(n=l.return)&&n.call(l);}finally{if(r)throw r.error}}try{for(var p=i(u),f=p.next();!f.done;f=p.next()){var d=f.value;e.delete(d);}}catch(e){o={error:e};}finally{try{f&&!f.done&&(a=p.return)&&a.call(p);}finally{if(o)throw o.error}}}else e.delete(t);},t.contains=function(e,t){var r,n;if(s.isFunction(t)){try{for(var o=i(e),a=o.next();!a.done;a=o.next()){var u=a.value;if(t.call(null,u))return !0}}catch(e){r={error:e};}finally{try{a&&!a.done&&(n=o.return)&&n.call(o);}finally{if(r)throw r.error}}return !1}return e.has(t)},t.keys=function(e){return new Set(e.keys())},t.values=function(e){return a(e.values())},t.size=function(e,t){var r,n;if(void 0===t)return e.size;var o=0;try{for(var a=i(e),s=a.next();!s.done;s=a.next()){var u=s.value;t.call(null,u)&&o++;}}catch(e){r={error:e};}finally{try{s&&!s.done&&(n=a.return)&&n.call(a);}finally{if(r)throw r.error}}return o},t.isEmpty=function(e){return 0===e.size},t.forEach=function(e,t){var r,o,a,s,u,l;return n(this,(function(n){switch(n.label){case 0:return void 0!==t?[3,2]:[5,i(e)];case 1:return n.sent(),[3,9];case 2:n.trys.push([2,7,8,9]),r=i(e),o=r.next(),n.label=3;case 3:return o.done?[3,6]:(a=o.value,t.call(null,a)?[4,a]:[3,5]);case 4:n.sent(),n.label=5;case 5:return o=r.next(),[3,3];case 6:return [3,9];case 7:return s=n.sent(),u={error:s},[3,9];case 8:try{o&&!o.done&&(l=r.return)&&l.call(r);}finally{if(u)throw u.error}return [7];case 9:return [2]}}))},t.clone=function(e){return new Map(e)},t.sortInAscendingOrder=function(e,t){var r=new(Array.bind.apply(Array,a([void 0],e)));return r.sort((function(e,r){return t.call(null,e,r)?-1:1})),new Map(r)},t.sortInDescendingOrder=function(e,t){var r=new(Array.bind.apply(Array,a([void 0],e)));return r.sort((function(e,r){return t.call(null,e,r)?1:-1})),new Map(r)};},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.HTML="http://www.w3.org/1999/xhtml",t.XML="http://www.w3.org/XML/1998/namespace",t.XMLNS="http://www.w3.org/2000/xmlns/",t.MathML="http://www.w3.org/1998/Math/MathML",t.SVG="http://www.w3.org/2000/svg",t.XLink="http://www.w3.org/1999/xlink";},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.enqueue=function(e,t){e.push(t);},t.dequeue=function(e){return e.shift()||null};},function(e,t,r){var n=this&&this.__generator||function(e,t){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a);}catch(e){o=[6,e],n=0;}finally{r=i=0;}if(5&o[0])throw o[1];return {value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},i=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},o=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value);}catch(e){i={error:e};}finally{try{n&&!n.done&&(r=o.return)&&r.call(o);}finally{if(i)throw i.error}}return a},a=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(o(arguments[t]));return e};Object.defineProperty(t,"__esModule",{value:!0});var s=r(1);function u(e,t){var r,n;try{for(var o=i(e),a=o.next();!a.done;a=o.next()){var s=a.value;if(!t.has(s))return !1}}catch(e){r={error:e};}finally{try{a&&!a.done&&(n=o.return)&&n.call(o);}finally{if(r)throw r.error}}return !0}t.append=function(e,t){e.add(t);},t.extend=function(e,t){t.forEach(e.add,e);},t.prepend=function(e,t){var r=new Set(e);e.clear(),e.add(t),r.forEach(e.add,e);},t.replace=function(e,t,r){var n,o,a=new Set;try{for(var u=i(e),l=u.next();!l.done;l=u.next()){var c=l.value;s.isFunction(t)?t.call(null,c)?a.add(r):a.add(c):c===t?a.add(r):a.add(c);}}catch(e){n={error:e};}finally{try{l&&!l.done&&(o=u.return)&&o.call(u);}finally{if(n)throw n.error}}e.clear(),a.forEach(e.add,e);},t.insert=function(e,t,r){var n,o,a=new Set,s=0;try{for(var u=i(e),l=u.next();!l.done;l=u.next()){var c=l.value;s===r&&a.add(t),a.add(c),s++;}}catch(e){n={error:e};}finally{try{l&&!l.done&&(o=u.return)&&o.call(u);}finally{if(n)throw n.error}}e.clear(),a.forEach(e.add,e);},t.remove=function(e,t){var r,n,o,a;if(s.isFunction(t)){var u=[];try{for(var l=i(e),c=l.next();!c.done;c=l.next()){var h=c.value;t.call(null,h)&&u.push(h);}}catch(e){r={error:e};}finally{try{c&&!c.done&&(n=l.return)&&n.call(l);}finally{if(r)throw r.error}}try{for(var p=i(u),f=p.next();!f.done;f=p.next()){var d=f.value;e.delete(d);}}catch(e){o={error:e};}finally{try{f&&!f.done&&(a=p.return)&&a.call(p);}finally{if(o)throw o.error}}}else e.delete(t);},t.empty=function(e){e.clear();},t.contains=function(e,t){var r,n;if(!s.isFunction(t))return e.has(t);try{for(var o=i(e),a=o.next();!a.done;a=o.next()){var u=a.value;if(t.call(null,u))return !0}}catch(e){r={error:e};}finally{try{a&&!a.done&&(n=o.return)&&n.call(o);}finally{if(r)throw r.error}}return !1},t.size=function(e,t){var r,n;if(void 0===t)return e.size;var o=0;try{for(var a=i(e),s=a.next();!s.done;s=a.next()){var u=s.value;t.call(null,u)&&o++;}}catch(e){r={error:e};}finally{try{s&&!s.done&&(n=a.return)&&n.call(a);}finally{if(r)throw r.error}}return o},t.isEmpty=function(e){return 0===e.size},t.forEach=function(e,t){var r,o,a,s,u,l;return n(this,(function(n){switch(n.label){case 0:return void 0!==t?[3,2]:[5,i(e)];case 1:return n.sent(),[3,9];case 2:n.trys.push([2,7,8,9]),r=i(e),o=r.next(),n.label=3;case 3:return o.done?[3,6]:(a=o.value,t.call(null,a)?[4,a]:[3,5]);case 4:n.sent(),n.label=5;case 5:return o=r.next(),[3,3];case 6:return [3,9];case 7:return s=n.sent(),u={error:s},[3,9];case 8:try{o&&!o.done&&(l=r.return)&&l.call(r);}finally{if(u)throw u.error}return [7];case 9:return [2]}}))},t.clone=function(e){return new Set(e)},t.sortInAscendingOrder=function(e,t){var r=new(Array.bind.apply(Array,a([void 0],e)));return r.sort((function(e,r){return t.call(null,e,r)?-1:1})),new Set(r)},t.sortInDescendingOrder=function(e,t){var r=new(Array.bind.apply(Array,a([void 0],e)));return r.sort((function(e,r){return t.call(null,e,r)?1:-1})),new Set(r)},t.isSubsetOf=u,t.isSupersetOf=function(e,t){return u(t,e)},t.intersection=function(e,t){var r,n,o=new Set;try{for(var a=i(e),s=a.next();!s.done;s=a.next()){var u=s.value;t.has(u)&&o.add(u);}}catch(e){r={error:e};}finally{try{s&&!s.done&&(n=a.return)&&n.call(a);}finally{if(r)throw r.error}}return o},t.union=function(e,t){var r=new Set(e);return t.forEach(r.add,r),r},t.range=function(e,t){for(var r=new Set,n=e;n<=t;n++)r.add(n);return r};},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.push=function(e,t){e.push(t);},t.pop=function(e){return e.pop()||null};},function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var i=r(96),o=r(147),a=r(146),s=r(1);function u(e,t){for(var r=0;;){var n=r<e.length?e.charCodeAt(r):null,i=r<t.length?t.charCodeAt(r):null;if(null===n)return !0;if(n!==i)return !1;r++;}}function l(e){var t,r,i=Array.from(e),o=new Uint8Array(i.length),a=0;try{for(var s=n(e),u=s.next();!u.done;u=s.next()){var l=u.value.codePointAt(0);console.assert(void 0!==l&&l<=255,"isomorphicEncode requires string bytes to be less than or equal to 0x00FF."),void 0!==l&&l<=255&&(o[a++]=l);}}catch(e){t={error:e};}finally{try{u&&!u.done&&(r=s.return)&&r.call(s);}finally{if(t)throw t.error}}return o}function c(e){return /^[\u0000-\u007F]*$/.test(e)}function h(e){var t,r,i="";try{for(var o=n(e),a=o.next();!a.done;a=o.next()){var s=a.value,u=s.codePointAt(0);i+=void 0!==u&&u>=65&&u<=90?String.fromCodePoint(u+32):s;}}catch(e){t={error:e};}finally{try{a&&!a.done&&(r=o.return)&&r.call(o);}finally{if(t)throw t.error}}return i}function p(e){return e.replace(/^[\t\n\f\r ]+/,"").replace(/[\t\n\f\r ]+$/,"")}function f(e,t,r){if(!s.isArray(t))return f(e,Array.from(t),r);for(var n="";r.position<t.length&&e.call(null,t[r.position]);)n+=t[r.position],r.position++;return n}function d(e,t){f((function(e){return i.ASCIIWhiteSpace.test(e)}),e,t);}t.isCodeUnitPrefix=u,t.isCodeUnitLessThan=function(e,t){if(u(t,e))return !1;if(u(e,t))return !0;for(var r=0;r<Math.min(e.length,t.length);r++){var n=e.charCodeAt(r),i=t.charCodeAt(r);if(n!==i)return n<i}return !1},t.isomorphicEncode=l,t.isASCIIString=c,t.asciiLowercase=h,t.asciiUppercase=function(e){var t,r,i="";try{for(var o=n(e),a=o.next();!a.done;a=o.next()){var s=a.value,u=s.codePointAt(0);i+=void 0!==u&&u>=97&&u<=122?String.fromCodePoint(u-32):s;}}catch(e){t={error:e};}finally{try{a&&!a.done&&(r=o.return)&&r.call(o);}finally{if(t)throw t.error}}return i},t.asciiCaseInsensitiveMatch=function(e,t){return h(e)===h(t)},t.asciiEncode=function(e){return console.assert(c(e),"asciiEncode requires an ASCII string."),l(e)},t.asciiDecode=function(e){var t,r;try{for(var i=n(e),s=i.next();!s.done;s=i.next()){var u=s.value;console.assert(a.isASCIIByte(u),"asciiDecode requires an ASCII byte sequence.");}}catch(e){t={error:e};}finally{try{s&&!s.done&&(r=i.return)&&r.call(i);}finally{if(t)throw t.error}}return o.isomorphicDecode(e)},t.stripNewlines=function(e){return e.replace(/[\n\r]/g,"")},t.normalizeNewlines=function(e){return e.replace(/\r\n/g,"\n").replace(/\r/g,"\n")},t.stripLeadingAndTrailingASCIIWhitespace=p,t.stripAndCollapseASCIIWhitespace=function(e){return p(e.replace(/[\t\n\f\r ]{2,}/g," "))},t.collectASequenceOfCodePoints=f,t.skipASCIIWhitespace=d,t.strictlySplit=function e(t,r){if(!s.isArray(t))return e(Array.from(t),r);var n={position:0},i=[],o=f((function(e){return r!==e}),t,n);for(i.push(o);n.position<t.length;)console.assert(t[n.position]===r,"strictlySplit found no delimiter in input string."),n.position++,o=f((function(e){return r!==e}),t,n),i.push(o);return i},t.splitAStringOnASCIIWhitespace=function e(t){if(!s.isArray(t))return e(Array.from(t));var r={position:0},n=[];for(d(t,r);r.position<t.length;){var o=f((function(e){return !i.ASCIIWhiteSpace.test(e)}),t,r);n.push(o),d(t,r);}return n},t.splitAStringOnCommas=function e(t){if(!s.isArray(t))return e(Array.from(t));for(var r={position:0},n=[];r.position<t.length;){var i=f((function(e){return ","!==e}),t,r);n.push(p(i)),r.position<t.length&&(console.assert(","===t[r.position],"splitAStringOnCommas found no delimiter in input string."),r.position++);}return n},t.concatenate=function(e,t){return void 0===t&&(t=""),0===e.length?"":e.join(t)};},function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var i=r(97);t.abort_add=function(e,t){t._abortedFlag||t._abortAlgorithms.add(e);},t.abort_remove=function(e,t){t._abortAlgorithms.delete(e);},t.abort_signalAbort=function(e){var t,r;if(!e._abortedFlag){e._abortedFlag=!0;try{for(var o=n(e._abortAlgorithms),a=o.next();!a.done;a=o.next()){a.value.call(e);}}catch(e){t={error:e};}finally{try{a&&!a.done&&(r=o.return)&&r.call(o);}finally{if(t)throw t.error}}e._abortAlgorithms.clear(),i.event_fireAnEvent("abort",e);}};},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(150),i=function(){function e(){}return e.asNode=function(e){if(n.Guard.isNode(e))return e;throw new Error("Invalid object. Node expected.")},e}();t.Cast=i;},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return Object.defineProperty(e.prototype,"size",{get:function(){return 0},enumerable:!0,configurable:!0}),e.prototype.add=function(e){throw new Error("Cannot add to an empty set.")},e.prototype.clear=function(){},e.prototype.delete=function(e){return !1},e.prototype.forEach=function(e,t){},e.prototype.has=function(e){return !1},e.prototype[Symbol.iterator]=function(){return new i},e.prototype.entries=function(){return new i},e.prototype.keys=function(){return new i},e.prototype.values=function(){return new i},Object.defineProperty(e.prototype,Symbol.toStringTag,{get:function(){return "EmptySet"},enumerable:!0,configurable:!0}),e}();t.EmptySet=n;var i=function(){function e(){}return e.prototype[Symbol.iterator]=function(){return this},e.prototype.next=function(){return {done:!0,value:null}},e}();},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.SchemeStart=0]="SchemeStart",e[e.Scheme=1]="Scheme",e[e.NoScheme=2]="NoScheme",e[e.SpecialRelativeOrAuthority=3]="SpecialRelativeOrAuthority",e[e.PathOrAuthority=4]="PathOrAuthority",e[e.Relative=5]="Relative",e[e.RelativeSlash=6]="RelativeSlash",e[e.SpecialAuthoritySlashes=7]="SpecialAuthoritySlashes",e[e.SpecialAuthorityIgnoreSlashes=8]="SpecialAuthorityIgnoreSlashes",e[e.Authority=9]="Authority",e[e.Host=10]="Host",e[e.Hostname=11]="Hostname",e[e.Port=12]="Port",e[e.File=13]="File",e[e.FileSlash=14]="FileSlash",e[e.FileHost=15]="FileHost",e[e.PathStart=16]="PathStart",e[e.Path=17]="Path",e[e.CannotBeABaseURLPath=18]="CannotBeABaseURLPath",e[e.Query=19]="Query",e[e.Fragment=20]="Fragment";}(t.ParserState||(t.ParserState={})),t.OpaqueOrigin=["","",null,null];},function(e,t,r){var n=r(245),i=r(247);function o(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null;}t.parse=g,t.resolve=function(e,t){return g(e,!1,!0).resolve(t)},t.resolveObject=function(e,t){return e?g(e,!1,!0).resolveObject(t):t},t.format=function(e){i.isString(e)&&(e=g(e));return e instanceof o?e.format():o.prototype.format.call(e)},t.Url=o;var a=/^([a-z0-9.+-]+:)/i,s=/:[0-9]*$/,u=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,l=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),c=["'"].concat(l),h=["%","/","?",";","#"].concat(c),p=["/","?","#"],f=/^[+a-z0-9A-Z_-]{0,63}$/,d=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,m={javascript:!0,"javascript:":!0},y={javascript:!0,"javascript:":!0},v={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},_=r(248);function g(e,t,r){if(e&&i.isObject(e)&&e instanceof o)return e;var n=new o;return n.parse(e,t,r),n}o.prototype.parse=function(e,t,r){if(!i.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var o=e.indexOf("?"),s=-1!==o&&o<e.indexOf("#")?"?":"#",l=e.split(s);l[0]=l[0].replace(/\\/g,"/");var g=e=l.join(s);if(g=g.trim(),!r&&1===e.split("#").length){var b=u.exec(g);if(b)return this.path=g,this.href=g,this.pathname=b[1],b[2]?(this.search=b[2],this.query=t?_.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var x=a.exec(g);if(x){var w=(x=x[0]).toLowerCase();this.protocol=w,g=g.substr(x.length);}if(r||x||g.match(/^\/\/[^@\/]+@[^@\/]+/)){var E="//"===g.substr(0,2);!E||x&&y[x]||(g=g.substr(2),this.slashes=!0);}if(!y[x]&&(E||x&&!v[x])){for(var D,S,C=-1,A=0;A<p.length;A++){-1!==(N=g.indexOf(p[A]))&&(-1===C||N<C)&&(C=N);}-1!==(S=-1===C?g.lastIndexOf("@"):g.lastIndexOf("@",C))&&(D=g.slice(0,S),g=g.slice(S+1),this.auth=decodeURIComponent(D)),C=-1;for(A=0;A<h.length;A++){var N;-1!==(N=g.indexOf(h[A]))&&(-1===C||N<C)&&(C=N);}-1===C&&(C=g.length),this.host=g.slice(0,C),g=g.slice(C),this.parseHost(),this.hostname=this.hostname||"";var T="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!T)for(var O=this.hostname.split(/\./),F=(A=0,O.length);A<F;A++){var k=O[A];if(k&&!k.match(f)){for(var P="",I=0,L=k.length;I<L;I++)k.charCodeAt(I)>127?P+="x":P+=k[I];if(!P.match(f)){var M=O.slice(0,A),B=O.slice(A+1),j=k.match(d);j&&(M.push(j[1]),B.unshift(j[2])),B.length&&(g="/"+B.join(".")+g),this.hostname=M.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),T||(this.hostname=n.toASCII(this.hostname));var R=this.port?":"+this.port:"",z=this.hostname||"";this.host=z+R,this.href+=this.host,T&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==g[0]&&(g="/"+g));}if(!m[w])for(A=0,F=c.length;A<F;A++){var U=c[A];if(-1!==g.indexOf(U)){var G=encodeURIComponent(U);G===U&&(G=escape(U)),g=g.split(U).join(G);}}var X=g.indexOf("#");-1!==X&&(this.hash=g.substr(X),g=g.slice(0,X));var q=g.indexOf("?");if(-1!==q?(this.search=g.substr(q),this.query=g.substr(q+1),t&&(this.query=_.parse(this.query)),g=g.slice(0,q)):t&&(this.search="",this.query={}),g&&(this.pathname=g),v[w]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){R=this.pathname||"";var W=this.search||"";this.path=R+W;}return this.href=this.format(),this},o.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",r=this.pathname||"",n=this.hash||"",o=!1,a="";this.host?o=e+this.host:this.hostname&&(o=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(o+=":"+this.port)),this.query&&i.isObject(this.query)&&Object.keys(this.query).length&&(a=_.stringify(this.query));var s=this.search||a&&"?"+a||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||v[t])&&!1!==o?(o="//"+(o||""),r&&"/"!==r.charAt(0)&&(r="/"+r)):o||(o=""),n&&"#"!==n.charAt(0)&&(n="#"+n),s&&"?"!==s.charAt(0)&&(s="?"+s),t+o+(r=r.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(s=s.replace("#","%23"))+n},o.prototype.resolve=function(e){return this.resolveObject(g(e,!1,!0)).format()},o.prototype.resolveObject=function(e){if(i.isString(e)){var t=new o;t.parse(e,!1,!0),e=t;}for(var r=new o,n=Object.keys(this),a=0;a<n.length;a++){var s=n[a];r[s]=this[s];}if(r.hash=e.hash,""===e.href)return r.href=r.format(),r;if(e.slashes&&!e.protocol){for(var u=Object.keys(e),l=0;l<u.length;l++){var c=u[l];"protocol"!==c&&(r[c]=e[c]);}return v[r.protocol]&&r.hostname&&!r.pathname&&(r.path=r.pathname="/"),r.href=r.format(),r}if(e.protocol&&e.protocol!==r.protocol){if(!v[e.protocol]){for(var h=Object.keys(e),p=0;p<h.length;p++){var f=h[p];r[f]=e[f];}return r.href=r.format(),r}if(r.protocol=e.protocol,e.host||y[e.protocol])r.pathname=e.pathname;else {for(var d=(e.pathname||"").split("/");d.length&&!(e.host=d.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==d[0]&&d.unshift(""),d.length<2&&d.unshift(""),r.pathname=d.join("/");}if(r.search=e.search,r.query=e.query,r.host=e.host||"",r.auth=e.auth,r.hostname=e.hostname||e.host,r.port=e.port,r.pathname||r.search){var m=r.pathname||"",_=r.search||"";r.path=m+_;}return r.slashes=r.slashes||e.slashes,r.href=r.format(),r}var g=r.pathname&&"/"===r.pathname.charAt(0),b=e.host||e.pathname&&"/"===e.pathname.charAt(0),x=b||g||r.host&&e.pathname,w=x,E=r.pathname&&r.pathname.split("/")||[],D=(d=e.pathname&&e.pathname.split("/")||[],r.protocol&&!v[r.protocol]);if(D&&(r.hostname="",r.port=null,r.host&&(""===E[0]?E[0]=r.host:E.unshift(r.host)),r.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===d[0]?d[0]=e.host:d.unshift(e.host)),e.host=null),x=x&&(""===d[0]||""===E[0])),b)r.host=e.host||""===e.host?e.host:r.host,r.hostname=e.hostname||""===e.hostname?e.hostname:r.hostname,r.search=e.search,r.query=e.query,E=d;else if(d.length)E||(E=[]),E.pop(),E=E.concat(d),r.search=e.search,r.query=e.query;else if(!i.isNullOrUndefined(e.search)){if(D)r.hostname=r.host=E.shift(),(T=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=T.shift(),r.host=r.hostname=T.shift());return r.search=e.search,r.query=e.query,i.isNull(r.pathname)&&i.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.href=r.format(),r}if(!E.length)return r.pathname=null,r.search?r.path="/"+r.search:r.path=null,r.href=r.format(),r;for(var S=E.slice(-1)[0],C=(r.host||e.host||E.length>1)&&("."===S||".."===S)||""===S,A=0,N=E.length;N>=0;N--)"."===(S=E[N])?E.splice(N,1):".."===S?(E.splice(N,1),A++):A&&(E.splice(N,1),A--);if(!x&&!w)for(;A--;A)E.unshift("..");!x||""===E[0]||E[0]&&"/"===E[0].charAt(0)||E.unshift(""),C&&"/"!==E.join("/").substr(-1)&&E.push("");var T,O=""===E[0]||E[0]&&"/"===E[0].charAt(0);D&&(r.hostname=r.host=O?"":E.length?E.shift():"",(T=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=T.shift(),r.host=r.hostname=T.shift()));return (x=x||r.host&&E.length)&&!O&&E.unshift(""),E.length?r.pathname=E.join("/"):(r.pathname=null,r.path=null),i.isNull(r.pathname)&&i.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.auth=e.auth||r.auth,r.slashes=r.slashes||e.slashes,r.href=r.format(),r},o.prototype.parseHost=function(){var e=this.host,t=s.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e);};},function(e,t,r){(function(e,n){var i;/*! https://mths.be/punycode v1.4.1 by @mathias */!function(o){t&&t.nodeType,e&&e.nodeType;var a="object"==typeof n&&n;a.global!==a&&a.window!==a&&a.self;var s,u=2147483647,l=/^xn--/,c=/[^\x20-\x7E]/,h=/[\x2E\u3002\uFF0E\uFF61]/g,p={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},f=Math.floor,d=String.fromCharCode;function m(e){throw new RangeError(p[e])}function y(e,t){for(var r=e.length,n=[];r--;)n[r]=t(e[r]);return n}function v(e,t){var r=e.split("@"),n="";return r.length>1&&(n=r[0]+"@",e=r[1]),n+y((e=e.replace(h,".")).split("."),t).join(".")}function _(e){for(var t,r,n=[],i=0,o=e.length;i<o;)(t=e.charCodeAt(i++))>=55296&&t<=56319&&i<o?56320==(64512&(r=e.charCodeAt(i++)))?n.push(((1023&t)<<10)+(1023&r)+65536):(n.push(t),i--):n.push(t);return n}function g(e){return y(e,(function(e){var t="";return e>65535&&(t+=d((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=d(e)})).join("")}function b(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function x(e,t,r){var n=0;for(e=r?f(e/700):e>>1,e+=f(e/t);e>455;n+=36)e=f(e/35);return f(n+36*e/(e+38))}function w(e){var t,r,n,i,o,a,s,l,c,h,p,d=[],y=e.length,v=0,_=128,b=72;for((r=e.lastIndexOf("-"))<0&&(r=0),n=0;n<r;++n)e.charCodeAt(n)>=128&&m("not-basic"),d.push(e.charCodeAt(n));for(i=r>0?r+1:0;i<y;){for(o=v,a=1,s=36;i>=y&&m("invalid-input"),((l=(p=e.charCodeAt(i++))-48<10?p-22:p-65<26?p-65:p-97<26?p-97:36)>=36||l>f((u-v)/a))&&m("overflow"),v+=l*a,!(l<(c=s<=b?1:s>=b+26?26:s-b));s+=36)a>f(u/(h=36-c))&&m("overflow"),a*=h;b=x(v-o,t=d.length+1,0==o),f(v/t)>u-_&&m("overflow"),_+=f(v/t),v%=t,d.splice(v++,0,_);}return g(d)}function E(e){var t,r,n,i,o,a,s,l,c,h,p,y,v,g,w,E=[];for(y=(e=_(e)).length,t=128,r=0,o=72,a=0;a<y;++a)(p=e[a])<128&&E.push(d(p));for(n=i=E.length,i&&E.push("-");n<y;){for(s=u,a=0;a<y;++a)(p=e[a])>=t&&p<s&&(s=p);for(s-t>f((u-r)/(v=n+1))&&m("overflow"),r+=(s-t)*v,t=s,a=0;a<y;++a)if((p=e[a])<t&&++r>u&&m("overflow"),p==t){for(l=r,c=36;!(l<(h=c<=o?1:c>=o+26?26:c-o));c+=36)w=l-h,g=36-h,E.push(d(b(h+w%g,0))),l=f(w/g);E.push(d(b(l,0))),o=x(r,v,n==i),r=0,++n;}++r,++t;}return E.join("")}s={version:"1.4.1",ucs2:{decode:_,encode:g},decode:w,encode:E,toASCII:function(e){return v(e,(function(e){return c.test(e)?"xn--"+E(e):e}))},toUnicode:function(e){return v(e,(function(e){return l.test(e)?w(e.slice(4).toLowerCase()):e}))}},void 0===(i=function(){return s}.call(t,r,t,e))||(e.exports=i);}();}).call(this,r(246)(e),r(78));},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e};},function(e,t,r){e.exports={isString:function(e){return "string"==typeof e},isObject:function(e){return "object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}};},function(e,t,r){t.decode=t.parse=r(249),t.encode=t.stringify=r(250);},function(e,t,r){function n(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,t,r,o){t=t||"&",r=r||"=";var a={};if("string"!=typeof e||0===e.length)return a;var s=/\+/g;e=e.split(t);var u=1e3;o&&"number"==typeof o.maxKeys&&(u=o.maxKeys);var l=e.length;u>0&&l>u&&(l=u);for(var c=0;c<l;++c){var h,p,f,d,m=e[c].replace(s,"%20"),y=m.indexOf(r);y>=0?(h=m.substr(0,y),p=m.substr(y+1)):(h=m,p=""),f=decodeURIComponent(h),d=decodeURIComponent(p),n(a,f)?i(a[f])?a[f].push(d):a[f]=[a[f],d]:a[f]=d;}return a};var i=Array.isArray||function(e){return "[object Array]"===Object.prototype.toString.call(e)};},function(e,t,r){var n=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return ""}};e.exports=function(e,t,r,s){return t=t||"&",r=r||"=",null===e&&(e=void 0),"object"==typeof e?o(a(e),(function(a){var s=encodeURIComponent(n(a))+r;return i(e[a])?o(e[a],(function(e){return s+encodeURIComponent(n(e))})).join(t):s+encodeURIComponent(n(e[a]))})).join(t):s?encodeURIComponent(n(s))+r+encodeURIComponent(n(e)):""};var i=Array.isArray||function(e){return "[object Array]"===Object.prototype.toString.call(e)};function o(e,t){if(e.map)return e.map(t);for(var r=[],n=0;n<e.length;n++)r.push(t(e[n],n));return r}var a=Object.keys||function(e){var t=[];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.push(r);return t};},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(52);t.attr_setAnExistingAttributeValue=function(e,t){null===e._element?e._value=t:n.element_change(e,e._element,t);};},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(108),i=r(30),o=r(52);t.tokenList_validationSteps=function(e,t){if(!i.dom_hasSupportedTokens(e._attribute._localName))throw new TypeError("There are no supported tokens defined for attribute name: '"+e._attribute._localName+"'.");return i.dom_getSupportedTokens(e._attribute._localName).has(t.toLowerCase())},t.tokenList_updateSteps=function(e){(e._element.hasAttribute(e._attribute._localName)||0!==e._tokenSet.size)&&o.element_setAnAttributeValue(e._element,e._attribute._localName,n.orderedSet_serialize(e._tokenSet));},t.tokenList_serializeSteps=function(e){return o.element_getAnAttributeValue(e._element,e._attribute._localName)};},function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var i=r(1);function o(e){return i.isBoolean(e)?e:e.capture||!1}t.eventTarget_flatten=o,t.eventTarget_flattenMore=function(e){var t=o(e),r=!1,n=!1;return i.isBoolean(e)||(r=e.once||!1,n=e.passive||!1),[t,n,r]},t.eventTarget_addEventListener=function(e,t){if(null!==t.callback){for(var r=0;r<e._eventListenerList.length;r++){var n=e._eventListenerList[r];if(n.type===t.type&&n.callback.handleEvent===t.callback.handleEvent&&n.capture===t.capture)return}e._eventListenerList.push(t);}},t.eventTarget_removeEventListener=function(e,t,r){t.removed=!0,e._eventListenerList.splice(r,1);},t.eventTarget_removeAllEventListeners=function(e){var t,r;try{for(var i=n(e._eventListenerList),o=i.next();!o.done;o=i.next()){o.value.removed=!0;}}catch(e){t={error:e};}finally{try{o&&!o.done&&(r=i.return)&&r.call(i);}finally{if(t)throw t.error}}e._eventListenerList.length=0;};},function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var i=r(1),o=r(29);t.parentNode_convertNodesIntoANode=function(e,t){for(var r,a,s=null,u=0;u<e.length;u++){var l=e[u];if(i.isString(l)){var c=o.create_text(t,l);e[u]=c;}}if(1===e.length)s=e[0];else {var h=s=o.create_documentFragment(t);try{for(var p=n(e),f=p.next();!f.done;f=p.next()){l=f.value;h.appendChild(l);}}catch(e){r={error:e};}finally{try{f&&!f.done&&(a=p.return)&&a.call(p);}finally{if(r)throw r.error}}}return s};},function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},i=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value);}catch(e){i={error:e};}finally{try{n&&!n.done&&(r=o.return)&&r.call(o);}finally{if(i)throw i.error}}return a},o=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(i(arguments[t]));return e};Object.defineProperty(t,"__esModule",{value:!0});var a=r(2),s=r(9),u=r(3),l=r(29),c=r(17),h=r(175),p=r(107),f=r(176),d=r(37),m=r(177);function y(e){return e._startNode===e._endNode&&e._startOffset===e._endOffset}function v(e){return c.tree_rootNode(e._startNode)}function _(e,t){return c.tree_rootNode(e)===v(t)&&h.boundaryPoint_position([e,0],t._start)===a.BoundaryPosition.After&&h.boundaryPoint_position([e,c.tree_nodeLength(e)],t._end)===a.BoundaryPosition.Before}function g(e,t){var r=c.tree_isAncestorOf(t._startNode,e,!0),n=c.tree_isAncestorOf(t._endNode,e,!0);return r&&!n||!r&&n}function b(e){var t,r,i,a,h,m,v=l.create_documentFragment(e._startNode._nodeDocument);if(y(e))return v;var x=e._startNode,w=e._startOffset,E=e._endNode,D=e._endOffset;if(x===E&&u.Guard.isCharacterDataNode(x))return (R=f.node_clone(x))._data=p.characterData_substringData(x,w,D-w),d.mutation_append(R,v),p.characterData_replaceData(x,w,D-w,""),v;for(var S=x;!c.tree_isAncestorOf(E,S,!0);){if(null===S._parent)throw new Error("Parent node  is null.");S=S._parent;}var C=null;if(!c.tree_isAncestorOf(E,x,!0))try{for(var A=n(S._children),N=A.next();!N.done;N=A.next()){if(g(k=N.value,e)){C=k;break}}}catch(e){t={error:e};}finally{try{N&&!N.done&&(r=A.return)&&r.call(A);}finally{if(t)throw t.error}}var T=null;if(!c.tree_isAncestorOf(x,E,!0))for(var O=o(S._children),F=O.length-1;F>0;F--){var k;if(g(k=O[F],e)){T=k;break}}var P,I,L=[];try{for(var M=n(S._children),B=M.next();!B.done;B=M.next()){if(_(X=B.value,e)){if(u.Guard.isDocumentTypeNode(X))throw new s.HierarchyRequestError;L.push(X);}}}catch(e){i={error:e};}finally{try{B&&!B.done&&(a=M.return)&&a.call(M);}finally{if(i)throw i.error}}if(c.tree_isAncestorOf(E,x,!0))P=x,I=w;else {for(var j=x;null!==j._parent&&!c.tree_isAncestorOf(E,j._parent);)j=j._parent;if(null===j._parent)throw new Error("Parent node is null.");P=j._parent,I=1+c.tree_index(j);}if(u.Guard.isCharacterDataNode(C))(R=f.node_clone(x))._data=p.characterData_substringData(x,w,c.tree_nodeLength(x)-w),d.mutation_append(R,v),p.characterData_replaceData(x,w,c.tree_nodeLength(x)-w,"");else if(null!==C){var R=f.node_clone(C);d.mutation_append(R,v);var z=b(l.create_range([x,w],[C,c.tree_nodeLength(C)]));d.mutation_append(z,R);}try{for(var U=n(L),G=U.next();!G.done;G=U.next()){var X=G.value;d.mutation_append(X,v);}}catch(e){h={error:e};}finally{try{G&&!G.done&&(m=U.return)&&m.call(U);}finally{if(h)throw h.error}}if(u.Guard.isCharacterDataNode(T))(R=f.node_clone(E))._data=p.characterData_substringData(E,0,D),d.mutation_append(R,v),p.characterData_replaceData(E,0,D,"");else if(null!==T){R=f.node_clone(T);d.mutation_append(R,v);z=b(l.create_range([T,0],[E,D]));d.mutation_append(z,R);}return e._start=[P,I],e._end=[P,I],v}t.range_collapsed=y,t.range_root=v,t.range_isContained=_,t.range_isPartiallyContained=g,t.range_setTheStart=function(e,t,r){if(u.Guard.isDocumentTypeNode(t))throw new s.InvalidNodeTypeError;if(r>c.tree_nodeLength(t))throw new s.IndexSizeError;var n=[t,r];v(e)===c.tree_rootNode(t)&&h.boundaryPoint_position(n,e._end)!==a.BoundaryPosition.After||(e._end=n),e._start=n;},t.range_setTheEnd=function(e,t,r){if(u.Guard.isDocumentTypeNode(t))throw new s.InvalidNodeTypeError;if(r>c.tree_nodeLength(t))throw new s.IndexSizeError;var n=[t,r];v(e)===c.tree_rootNode(t)&&h.boundaryPoint_position(n,e._start)!==a.BoundaryPosition.Before||(e._start=n),e._end=n;},t.range_select=function(e,t){var r=e._parent;if(null===r)throw new s.InvalidNodeTypeError;var n=c.tree_index(e);t._start=[r,n],t._end=[r,n+1];},t.range_extract=b,t.range_cloneTheContents=function e(t){var r,i,a,h,m,v,x=l.create_documentFragment(t._startNode._nodeDocument);if(y(t))return x;var w=t._startNode,E=t._startOffset,D=t._endNode,S=t._endOffset;w===D&&u.Guard.isCharacterDataNode(w)&&((B=f.node_clone(w))._data=p.characterData_substringData(w,E,S-E),d.mutation_append(B,x));for(var C=w;!c.tree_isAncestorOf(D,C,!0);){if(null===C._parent)throw new Error("Parent node  is null.");C=C._parent;}var A=null;if(!c.tree_isAncestorOf(D,w,!0))try{for(var N=n(C._children),T=N.next();!T.done;T=N.next()){if(g(P=T.value,t)){A=P;break}}}catch(e){r={error:e};}finally{try{T&&!T.done&&(i=N.return)&&i.call(N);}finally{if(r)throw r.error}}var O=null;if(!c.tree_isAncestorOf(w,D,!0))for(var F=o(C._children),k=F.length-1;k>0;k--){var P;if(g(P=F[k],t)){O=P;break}}var I=[];try{for(var L=n(C._children),M=L.next();!M.done;M=L.next()){if(_(U=M.value,t)){if(u.Guard.isDocumentTypeNode(U))throw new s.HierarchyRequestError;I.push(U);}}}catch(e){a={error:e};}finally{try{M&&!M.done&&(h=L.return)&&h.call(L);}finally{if(a)throw a.error}}if(u.Guard.isCharacterDataNode(A))(B=f.node_clone(w))._data=p.characterData_substringData(w,E,c.tree_nodeLength(w)-E),d.mutation_append(B,x);else if(null!==A){var B=f.node_clone(A);d.mutation_append(B,x);var j=e(l.create_range([w,E],[A,c.tree_nodeLength(A)]));d.mutation_append(j,B);}try{for(var R=n(I),z=R.next();!z.done;z=R.next()){var U=z.value,B=f.node_clone(U);d.mutation_append(B,x);}}catch(e){m={error:e};}finally{try{z&&!z.done&&(v=R.return)&&v.call(R);}finally{if(m)throw m.error}}if(u.Guard.isCharacterDataNode(O))(B=f.node_clone(D))._data=p.characterData_substringData(D,0,S),d.mutation_append(B,x);else if(null!==O){B=f.node_clone(O);x.append(B);j=b(l.create_range([O,0],[D,S]));d.mutation_append(j,B);}return x},t.range_insert=function(e,t){var r,i;if(u.Guard.isProcessingInstructionNode(t._startNode)||u.Guard.isCommentNode(t._startNode)||u.Guard.isTextNode(t._startNode)&&null===t._startNode._parent||t._startNode===e)throw new s.HierarchyRequestError;var o,a=null;if(u.Guard.isTextNode(t._startNode))a=t._startNode;else {var l=0;try{for(var h=n(t._startNode._children),p=h.next();!p.done;p=h.next()){var f=p.value;if(l===t._startOffset){a=f;break}l++;}}catch(e){r={error:e};}finally{try{p&&!p.done&&(i=h.return)&&i.call(h);}finally{if(r)throw r.error}}}if(null===a)o=t._startNode;else {if(null===a._parent)throw new Error("Parent node is null.");o=a._parent;}d.mutation_ensurePreInsertionValidity(e,o,a),u.Guard.isTextNode(t._startNode)&&(a=m.text_split(t._startNode,t._startOffset)),e===a&&(a=e._nextSibling),null!==e._parent&&d.mutation_remove(e,e._parent);var v=null===a?c.tree_nodeLength(o):c.tree_index(a);u.Guard.isDocumentFragmentNode(e)?v+=c.tree_nodeLength(e):v++,d.mutation_preInsert(e,o,a),y(t)&&(t._end=[o,v]);},t.range_getContainedNodes=function(e){var t;return (t={})[Symbol.iterator]=function(){var t=e.commonAncestorContainer,r=c.tree_getFirstDescendantNode(t);return {next:function(){for(;r&&!_(r,e);)r=c.tree_getNextDescendantNode(t,r);if(null===r)return {done:!0,value:null};var n={done:!1,value:r};return r=c.tree_getNextDescendantNode(t,r),n}}},t},t.range_getPartiallyContainedNodes=function(e){var t;return (t={})[Symbol.iterator]=function(){var t=e.commonAncestorContainer,r=c.tree_getFirstDescendantNode(t);return {next:function(){for(;r&&!g(r,e);)r=c.tree_getNextDescendantNode(t,r);if(null===r)return {done:!0,value:null};var n={done:!1,value:r};return r=c.tree_getNextDescendantNode(t,r),n}}},t};},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(9);t.selectors_scopeMatchASelectorsString=function(e,t){throw new n.NotSupportedError};},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(2),i=r(105);t.treeWalker_traverseChildren=function(e,t){for(var r=t?e._current._firstChild:e._current._lastChild;null!==r;){var o=i.traversal_filter(e,r);if(o===n.FilterResult.Accept)return e._current=r,r;if(o===n.FilterResult.Skip){var a=t?r._firstChild:r._lastChild;if(null!==a){r=a;continue}}for(;null!==r;){var s=t?r._nextSibling:r._previousSibling;if(null!==s){r=s;break}var u=r._parent;if(null===u||u===e._root||u===e._current)return null;r=u;}}return null},t.treeWalker_traverseSiblings=function(e,t){var r=e._current;if(r===e._root)return null;for(;;){for(var o=t?r._nextSibling:r._previousSibling;null!==o;){r=o;var a=i.traversal_filter(e,r);if(a===n.FilterResult.Accept)return e._current=r,r;o=t?r._firstChild:r._lastChild,a!==n.FilterResult.Reject&&null!==o||(o=t?r._nextSibling:r._previousSibling);}if(null===(r=r._parent)||r===e._root)return null;if(i.traversal_filter(e,r)===n.FilterResult.Accept)return null}};},function(e,t,r){r(89),r(74);var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0});var o=r(1),a=r(2),s=r(50),u=r(3),l=function(e){function t(t,r){var n=e.call(this,t)||this;return n._indentation={},n._lengthToLastNewline=0,n._writerOptions=o.applyDefaults(r,{wellFormed:!1,headless:!1,prettyPrint:!1,indent:"  ",newline:"\n",offset:0,width:0,allowEmptyTags:!1,indentTextOnlyNodes:!1,spaceBeforeSlash:!1}),n}return i(t,e),t.prototype.serialize=function(e){return this._refs={suppressPretty:!1,emptyNode:!1,markup:""},e.nodeType!==a.NodeType.Document||this._writerOptions.headless||this.declaration(this._builderOptions.version,this._builderOptions.encoding,this._builderOptions.standalone),this.serializeNode(e,this._writerOptions.wellFormed),this._writerOptions.prettyPrint&&this._refs.markup.slice(-this._writerOptions.newline.length)===this._writerOptions.newline&&(this._refs.markup=this._refs.markup.slice(0,-this._writerOptions.newline.length)),this._refs.markup},t.prototype.declaration=function(e,t,r){this._beginLine(),this._refs.markup+='<?xml version="'+e+'"',void 0!==t&&(this._refs.markup+=' encoding="'+t+'"'),void 0!==r&&(this._refs.markup+=' standalone="'+(r?"yes":"no")+'"'),this._refs.markup+="?>",this._endLine();},t.prototype.docType=function(e,t,r){this._beginLine(),this._refs.markup+=t&&r?"<!DOCTYPE "+e+' PUBLIC "'+t+'" "'+r+'">':t?"<!DOCTYPE "+e+' PUBLIC "'+t+'">':r?"<!DOCTYPE "+e+' SYSTEM "'+r+'">':"<!DOCTYPE "+e+">",this._endLine();},t.prototype.openTagBegin=function(e){this._beginLine(),this._refs.markup+="<"+e;},t.prototype.openTagEnd=function(e,t,r){if(this._refs.suppressPretty=!1,this._refs.emptyNode=!1,this._writerOptions.prettyPrint&&!t&&!r){for(var n=!0,i=!0,o=this.currentNode.firstChild,a=0,s=0;o;){if(u.Guard.isExclusiveTextNode(o))s++;else {if(!u.Guard.isCDATASectionNode(o)){n=!1,i=!1;break}a++;}""!==o.data&&(i=!1),o=o.nextSibling;}this._refs.suppressPretty=!this._writerOptions.indentTextOnlyNodes&&n&&(a<=1&&0===s||0===a),this._refs.emptyNode=i;}(r||t||this._refs.emptyNode)&&this._writerOptions.allowEmptyTags?this._refs.markup+="></"+e+">":this._refs.markup+=r?" />":t||this._refs.emptyNode?this._writerOptions.spaceBeforeSlash?" />":"/>":">",this._endLine();},t.prototype.closeTag=function(e){this._refs.emptyNode||(this._beginLine(),this._refs.markup+="</"+e+">"),this._refs.suppressPretty=!1,this._refs.emptyNode=!1,this._endLine();},t.prototype.attribute=function(e,t){var r=e+'="'+t+'"';this._writerOptions.prettyPrint&&this._writerOptions.width>0&&this._refs.markup.length-this._lengthToLastNewline+1+r.length>this._writerOptions.width?(this._endLine(),this._beginLine(),this._refs.markup+=this._indent(1)+r):this._refs.markup+=" "+r;},t.prototype.text=function(e){""!==e&&(this._beginLine(),this._refs.markup+=e,this._endLine());},t.prototype.cdata=function(e){""!==e&&(this._beginLine(),this._refs.markup+="<![CDATA["+e+"]]>",this._endLine());},t.prototype.comment=function(e){this._beginLine(),this._refs.markup+="\x3c!--"+e+"--\x3e",this._endLine();},t.prototype.instruction=function(e,t){this._beginLine(),this._refs.markup+="<?"+(""===t?e:e+" "+t)+"?>",this._endLine();},t.prototype._beginLine=function(){this._writerOptions.prettyPrint&&!this._refs.suppressPretty&&(this._refs.markup+=this._indent(this._writerOptions.offset+this.level));},t.prototype._endLine=function(){this._writerOptions.prettyPrint&&!this._refs.suppressPretty&&(this._refs.markup+=this._writerOptions.newline,this._lengthToLastNewline=this._refs.markup.length);},t.prototype._indent=function(e){if(e<=0)return "";if(void 0!==this._indentation[e])return this._indentation[e];var t=this._writerOptions.indent.repeat(e);return this._indentation[e]=t,t},t}(s.BaseWriter);t.XMLWriter=l;},function(e,t,r){var n=r(47),i=r(35);e.exports="".repeat||function(e){var t=String(i(this)),r="",o=n(e);if(o<0||o==1/0)throw RangeError("Wrong number of repetitions");for(;o>0;(o>>>=1)&&(t+=t))1&o&&(r+=t);return r};},function(e,t,r){r(31),r(32),r(33),r(19),r(178),r(20),r(22),r(23);var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var a=r(67),s=r(1),u=function(e){function t(t,r){var n=e.call(this,t)||this;return n._writerOptions=s.applyDefaults(r,{wellFormed:!1,prettyPrint:!1,indent:"  ",newline:"\n",offset:0,group:!1,verbose:!1}),n}return i(t,e),t.prototype.serialize=function(e){var t=s.applyDefaults(this._writerOptions,{format:"object",wellFormed:!1}),r=new a.ObjectWriter(this._builderOptions,t).serialize(e);return this._beginLine(this._writerOptions,0)+this._convertObject(r,this._writerOptions)},t.prototype._convertObject=function(e,t,r){var n,i,a=this;void 0===r&&(r=0);var u="",l=this._isLeafNode(e);if(s.isArray(e)){u+="[";var c=e.length,h=0;try{for(var p=o(e),f=p.next();!f.done;f=p.next()){var d=f.value;u+=this._endLine(t,r+1)+this._beginLine(t,r+1)+this._convertObject(d,t,r+1),h<c-1&&(u+=","),h++;}}catch(e){n={error:e};}finally{try{f&&!f.done&&(i=p.return)&&i.call(p);}finally{if(n)throw n.error}}u+=this._endLine(t,r)+this._beginLine(t,r),u+="]";}else if(s.isObject(e)){u+="{";var m=s.objectLength(e),y=0;s.forEachObject(e,(function(e,n){l&&t.prettyPrint?u+=" ":u+=a._endLine(t,r+1)+a._beginLine(t,r+1),u+=a._key(e),t.prettyPrint&&(u+=" "),u+=a._convertObject(n,t,r+1),y<m-1&&(u+=","),y++;}),this),l&&t.prettyPrint?u+=" ":u+=this._endLine(t,r)+this._beginLine(t,r),u+="}";}else u+=this._val(e);return u},t.prototype._beginLine=function(e,t){if(!e.prettyPrint)return "";var r=e.offset+t+1;return r>0?new Array(r).join(e.indent):""},t.prototype._endLine=function(e,t){return e.prettyPrint?e.newline:""},t.prototype._key=function(e){return '"'+e+'":'},t.prototype._val=function(e){return JSON.stringify(e)},t.prototype._isLeafNode=function(e){return this._descendantCount(e)<=1},t.prototype._descendantCount=function(e,t){var r=this;return void 0===t&&(t=0),s.isArray(e)?s.forEachArray(e,(function(e){return t+=r._descendantCount(e,t)}),this):s.isObject(e)?s.forEachObject(e,(function(e,n){return t+=r._descendantCount(n,t)}),this):t++,t},t}(r(50).BaseWriter);t.JSONWriter=u;},function(e,t,r){r(31),r(32),r(33),r(19),r(178),r(89),r(20),r(22),r(23);var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var a=r(67),s=r(1),u=function(e){function t(t,r){var n=e.call(this,t)||this;if(n._writerOptions=s.applyDefaults(r,{wellFormed:!1,indent:"  ",newline:"\n",offset:0,group:!1,verbose:!1}),n._writerOptions.indent.length<2)throw new Error("YAML indententation string must be at least two characters long.");if(n._writerOptions.offset<0)throw new Error("YAML offset should be zero or a positive number.");return n}return i(t,e),t.prototype.serialize=function(e){var t=s.applyDefaults(this._writerOptions,{format:"object",wellFormed:!1}),r=new a.ObjectWriter(this._builderOptions,t).serialize(e),n=this._beginLine(this._writerOptions,0)+"---"+this._endLine(this._writerOptions)+this._convertObject(r,this._writerOptions,0);return n.slice(-this._writerOptions.newline.length)===this._writerOptions.newline&&(n=n.slice(0,-this._writerOptions.newline.length)),n},t.prototype._convertObject=function(e,t,r,n){var i,a,u=this;void 0===n&&(n=!1);var l="";if(s.isArray(e))try{for(var c=o(e),h=c.next();!h.done;h=c.next()){var p=h.value;l+=this._beginLine(t,r,!0),s.isObject(p)?s.isEmpty(p)?l+='""'+this._endLine(t):l+=this._convertObject(p,t,r,!0):l+=this._val(p)+this._endLine(t);}}catch(e){i={error:e};}finally{try{h&&!h.done&&(a=c.return)&&a.call(c);}finally{if(i)throw i.error}}else s.forEachObject(e,(function(e,i){n?(l+=u._key(e),n=!1):l+=u._beginLine(t,r)+u._key(e),s.isObject(i)?s.isEmpty(i)?l+=' ""'+u._endLine(t):l+=u._endLine(t)+u._convertObject(i,t,r+1):l+=" "+u._val(i)+u._endLine(t);}),this);return l},t.prototype._beginLine=function(e,t,r){void 0===r&&(r=!1);var n=e.offset+t+1,i=new Array(n).join(e.indent);return r?i.substr(0,i.length-2)+"-"+i.substr(-1,1):i},t.prototype._endLine=function(e){return e.newline},t.prototype._key=function(e){return '"'+e+'":'},t.prototype._val=function(e){return JSON.stringify(e)},t}(r(50).BaseWriter);t.YAMLWriter=u;},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),r(110).dom.setFeatures(!0);var n=r(110);t.DOMImplementation=n.DOMImplementation;var i=r(271);t.DOMParser=i.DOMParser;var o=r(274);t.XMLSerializer=o.XMLSerializer;},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(3),i=r(0),o=function(){function e(){}return e.prototype.before=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=n.Cast.asNode(this),o=r._parent;if(null!==o){for(var a=r._previousSibling,s=!0;s&&a;){s=!1;for(var u=0;u<e.length;u++){var l=e[u];if(l===a){a=a._previousSibling,s=!0;break}}}var c=i.parentNode_convertNodesIntoANode(e,r._nodeDocument);a=null===a?o._firstChild:a._nextSibling,i.mutation_preInsert(c,o,a);}},e.prototype.after=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=n.Cast.asNode(this),o=r._parent;if(o){for(var a=r._nextSibling,s=!0;s&&a;){s=!1;for(var u=0;u<e.length;u++){var l=e[u];if(l===a){a=a._nextSibling,s=!0;break}}}var c=i.parentNode_convertNodesIntoANode(e,r._nodeDocument);i.mutation_preInsert(c,o,a);}},e.prototype.replaceWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=n.Cast.asNode(this),o=r._parent;if(o){for(var a=r._nextSibling,s=!0;s&&a;){s=!1;for(var u=0;u<e.length;u++){var l=e[u];if(l===a){a=a._nextSibling,s=!0;break}}}var c=i.parentNode_convertNodesIntoANode(e,r._nodeDocument);r._parent===o?i.mutation_replace(r,c,o):i.mutation_preInsert(c,o,a);}},e.prototype.remove=function(){var e=n.Cast.asNode(this),t=e._parent;t&&i.mutation_remove(e,t);},e}();t.ChildNodeImpl=o;},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=function(){};t.DocumentOrShadowRootImpl=n;},function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var i=r(6),o=r(3),a=r(7),s=function(){function e(e){this._nodeList=[],this._recordQueue=[],this._callback=e;var t=i.dom.window;a.set.append(t._mutationObservers,this);}return e.prototype.observe=function(e,t){var r,i;if(void 0===(t=t||{childList:!1,subtree:!1}).attributeOldValue&&void 0===t.attributeFilter||void 0!==t.attributes||(t.attributes=!0),void 0!==t.characterDataOldValue&&void 0===t.characterData&&(t.characterData=!0),!t.childList&&!t.attributes&&!t.characterData)throw new TypeError;if(t.attributeOldValue&&!t.attributes)throw new TypeError;if(void 0!==t.attributeFilter&&!t.attributes)throw new TypeError;if(t.characterDataOldValue&&!t.characterData)throw new TypeError;var s=!1,u=t,l=function(e){var t,r;if(e.observer===c){s=!0;try{for(var i=(t=void 0,n(c._nodeList)),l=i.next();!l.done;l=i.next()){var h=l.value;a.list.remove(h._registeredObserverList,(function(t){return o.Guard.isTransientRegisteredObserver(t)&&t.source===e}));}}catch(e){t={error:e};}finally{try{l&&!l.done&&(r=i.return)&&r.call(i);}finally{if(t)throw t.error}}e.options=u;}},c=this;try{for(var h=n(e._registeredObserverList),p=h.next();!p.done;p=h.next()){l(p.value);}}catch(e){r={error:e};}finally{try{p&&!p.done&&(i=h.return)&&i.call(h);}finally{if(r)throw r.error}}s||(e._registeredObserverList.push({observer:this,options:t}),this._nodeList.push(e));},e.prototype.disconnect=function(){var e,t,r=this;try{for(var i=n(this._nodeList),o=i.next();!o.done;o=i.next()){var s=o.value;a.list.remove(s._registeredObserverList,(function(e){return e.observer===r}));}}catch(t){e={error:t};}finally{try{o&&!o.done&&(t=i.return)&&t.call(i);}finally{if(e)throw e.error}}this._recordQueue=[];},e.prototype.takeRecords=function(){var e=this._recordQueue;return this._recordQueue=[],e},e}();t.MutationObserverImpl=s;},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(3),i=function(){function e(){}return Object.defineProperty(e.prototype,"previousElementSibling",{get:function(){for(var e=n.Cast.asNode(this)._previousSibling;e;){if(n.Guard.isElementNode(e))return e;e=e._previousSibling;}return null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nextElementSibling",{get:function(){for(var e=n.Cast.asNode(this)._nextSibling;e;){if(n.Guard.isElementNode(e))return e;e=e._nextSibling;}return null},enumerable:!0,configurable:!0}),e}();t.NonDocumentTypeChildNodeImpl=i;},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(3),i=r(0),o=function(){function e(){}return e.prototype.getElementById=function(e){for(var t=i.tree_getFirstDescendantNode(n.Cast.asNode(this),!1,!1,(function(e){return n.Guard.isElementNode(e)}));null!==t;){if(t._uniqueIdentifier===e)return t;t=i.tree_getNextDescendantNode(n.Cast.asNode(this),t,!1,!1,(function(e){return n.Guard.isElementNode(e)}));}return null},e}();t.NonElementParentNodeImpl=o;},function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var i=r(3),o=r(0),a=function(){function e(){}return Object.defineProperty(e.prototype,"children",{get:function(){return o.create_htmlCollection(i.Cast.asNode(this))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"firstElementChild",{get:function(){for(var e=i.Cast.asNode(this)._firstChild;e;){if(i.Guard.isElementNode(e))return e;e=e._nextSibling;}return null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"lastElementChild",{get:function(){for(var e=i.Cast.asNode(this)._lastChild;e;){if(i.Guard.isElementNode(e))return e;e=e._previousSibling;}return null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"childElementCount",{get:function(){var e,t,r=0;try{for(var o=n(i.Cast.asNode(this)._children),a=o.next();!a.done;a=o.next()){var s=a.value;i.Guard.isElementNode(s)&&r++;}}catch(t){e={error:t};}finally{try{a&&!a.done&&(t=o.return)&&t.call(o);}finally{if(e)throw e.error}}return r},enumerable:!0,configurable:!0}),e.prototype.prepend=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=i.Cast.asNode(this),n=o.parentNode_convertNodesIntoANode(e,r._nodeDocument);o.mutation_preInsert(n,r,r._firstChild);},e.prototype.append=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=i.Cast.asNode(this),n=o.parentNode_convertNodesIntoANode(e,r._nodeDocument);o.mutation_append(n,r);},e.prototype.querySelector=function(e){var t=i.Cast.asNode(this),r=o.selectors_scopeMatchASelectorsString(e,t);return 0===r.length?null:r[0]},e.prototype.querySelectorAll=function(e){var t=i.Cast.asNode(this),r=o.selectors_scopeMatchASelectorsString(e,t);return o.create_nodeListStatic(t,r)},e}();t.ParentNodeImpl=a;},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(0),i=function(){function e(){}return Object.defineProperty(e.prototype,"_name",{get:function(){return this.__name||""},set:function(e){this.__name=e;},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"_assignedSlot",{get:function(){return this.__assignedSlot||null},set:function(e){this.__assignedSlot=e;},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"assignedSlot",{get:function(){return n.shadowTree_findASlot(this,!0)},enumerable:!0,configurable:!0}),e}();t.SlotableImpl=i;},function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0});var o=r(102),a=r(9),s=r(3),u=function(e){function t(t){var r=e.call(this)||this;if(s.Guard.isDocumentTypeNode(t.startContainer)||s.Guard.isAttrNode(t.startContainer)||s.Guard.isDocumentTypeNode(t.endContainer)||s.Guard.isAttrNode(t.endContainer))throw new a.InvalidNodeTypeError;return r._start=[t.startContainer,t.startOffset],r._end=[t.endContainer,t.endOffset],r}return i(t,e),t}(o.AbstractRangeImpl);t.StaticRangeImpl=u;},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(272);t.DOMParser=n.DOMParserImpl;},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(0),i=r(273),o=function(){function e(){}return e.prototype.parseFromString=function(e,t){if("text/html"===t)throw new Error("HTML parser not implemented.");try{return (r=(new i.XMLParserImpl).parse(e))._contentType=t,r}catch(e){var r,o="http://www.mozilla.org/newlayout/xml/parsererror.xml",a=(r=n.create_xmlDocument()).createElementNS(o,"parsererror"),s=r.createElementNS(o,"error");return s.setAttribute("message",e.message),a.appendChild(s),r.appendChild(a),r}},e}();t.DOMParserImpl=o;},function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value);}catch(e){i={error:e};}finally{try{n&&!n.done&&(r=o.return)&&r.call(o);}finally{if(i)throw i.error}}return a},i=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var o=r(180),a=r(111),s=r(7),u=r(0),l=r(69),c=function(){function e(){}return e.prototype.parse=function(e){for(var t,r,c,h,p=new o.XMLStringLexer(e,{skipWhitespaceOnlyText:!0}),f=u.create_document(),d=f,m=p.nextToken();m.type!==a.TokenType.EOF;){switch(m.type){case a.TokenType.Declaration:var y=m;if("1.0"!==y.version)throw new Error("Invalid xml version: "+y.version);break;case a.TokenType.DocType:var v=m;if(!u.xml_isPubidChar(v.pubId))throw new Error("DocType public identifier does not match PubidChar construct.");if(!u.xml_isLegalChar(v.sysId)||-1!==v.sysId.indexOf('"')&&-1!==v.sysId.indexOf("'"))throw new Error("DocType system identifier contains invalid characters.");d.appendChild(f.implementation.createDocumentType(v.name,v.pubId,v.sysId));break;case a.TokenType.CDATA:var _=m;if(!u.xml_isLegalChar(_.data)||-1!==_.data.indexOf("]]>"))throw new Error("CDATA contains invalid characters.");d.appendChild(f.createCDATASection(_.data));break;case a.TokenType.Comment:var g=m;if(!u.xml_isLegalChar(g.data)||-1!==g.data.indexOf("--")||g.data.endsWith("-"))throw new Error("Comment data contains invalid characters.");d.appendChild(f.createComment(g.data));break;case a.TokenType.PI:var b=m;if(-1!==b.target.indexOf(":")||/^xml$/i.test(b.target))throw new Error("Processing instruction target contains invalid characters.");if(!u.xml_isLegalChar(b.data)||-1!==b.data.indexOf("?>"))throw new Error("Processing instruction data contains invalid characters.");d.appendChild(f.createProcessingInstruction(b.target,b.data));break;case a.TokenType.Text:var x=m;if(!u.xml_isLegalChar(x.data))throw new Error("Text data contains invalid characters.");d.appendChild(f.createTextNode(this._decodeText(x.data)));break;case a.TokenType.Element:var w=m,E=n(u.namespace_extractQName(w.name),2),D=E[0],S=E[1];if(-1!==S.indexOf(":")||!u.xml_isName(S))throw new Error("Node local name contains invalid characters.");if("xmlns"===D)throw new Error("An element cannot have the 'xmlns' prefix.");var C=d.lookupNamespaceURI(D),A={};try{for(var N=(t=void 0,i(w.attributes)),T=N.next();!T.done;T=N.next()){var O=n(T.value,2),F=O[0],k=O[1];if("xmlns"===F)C=k;else {var P=n(u.namespace_extractQName(F),2),I=P[0],L=P[1];"xmlns"===I&&(L===D&&(C=k),A[L]=k);}}}catch(e){t={error:e};}finally{try{T&&!T.done&&(r=N.return)&&r.call(N);}finally{if(t)throw t.error}}var M=null!==C?f.createElementNS(C,w.name):f.createElement(w.name);d.appendChild(M);var B=new l.LocalNameSet;try{for(var j=(c=void 0,i(w.attributes)),R=j.next();!R.done;R=j.next()){var z=n(R.value,2),U=(F=z[0],k=z[1],n(u.namespace_extractQName(F),2)),G=(I=U[0],L=U[1],null);if("xmlns"===I||null===I&&"xmlns"===L?G=s.namespace.XMLNS:null!==(G=M.lookupNamespaceURI(I))&&M.isDefaultNamespace(G)?G=null:null===G&&null!==I&&(G=A[I]||null),B.has(G,L))throw new Error("Element contains duplicate attributes.");if(B.set(G,L),G===s.namespace.XMLNS&&k===s.namespace.XMLNS)throw new Error("XMLNS namespace is reserved.");if(-1!==L.indexOf(":")||!u.xml_isName(L))throw new Error("Attribute local name contains invalid characters.");if("xmlns"===I&&""===k)throw new Error("Empty XML namespace is not allowed.");null!==G?M.setAttributeNS(G,F,this._decodeAttributeValue(k)):M.setAttribute(F,this._decodeAttributeValue(k));}}catch(e){c={error:e};}finally{try{R&&!R.done&&(h=j.return)&&h.call(j);}finally{if(c)throw c.error}}w.selfClosing||(d=M);break;case a.TokenType.ClosingTag:if(m.name!==d.nodeName)throw new Error("Closing tag name does not match opening tag name.");d._parent&&(d=d._parent);}m=p.nextToken();}return f},e.prototype._decodeText=function(e){return null==e?e:e.replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&amp;/g,"&")},e.prototype._decodeAttributeValue=function(e){return null==e?e:e.replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&amp;/g,"&")},e}();t.XMLParserImpl=c;},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(275);t.XMLSerializer=n.XMLSerializerImpl;},function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var i=r(2),o=r(69),a=r(95),s=r(9),u=r(7),l=r(0),c=function(){function e(){}return e.prototype.serializeToString=function(e){return this._xmlSerialization(e,!1)},e.prototype._xmlSerialization=function(e,t){if(void 0===e._nodeDocument||e._nodeDocument._hasNamespaces){var r=new a.NamespacePrefixMap;r.set("xml",u.namespace.XML);try{return this._serializeNodeNS(e,null,r,{value:1},t)}catch(e){throw new s.InvalidStateError}}else try{return this._serializeNode(e,t)}catch(e){throw new s.InvalidStateError}},e.prototype._serializeNodeNS=function(e,t,r,n,o){switch(e.nodeType){case i.NodeType.Element:return this._serializeElementNS(e,t,r,n,o);case i.NodeType.Document:return this._serializeDocumentNS(e,t,r,n,o);case i.NodeType.Comment:return this._serializeComment(e,o);case i.NodeType.Text:return this._serializeText(e,o);case i.NodeType.DocumentFragment:return this._serializeDocumentFragmentNS(e,t,r,n,o);case i.NodeType.DocumentType:return this._serializeDocumentType(e,o);case i.NodeType.ProcessingInstruction:return this._serializeProcessingInstruction(e,o);case i.NodeType.CData:return this._serializeCData(e,o);default:throw new Error("Unknown node type: "+e.nodeType)}},e.prototype._serializeNode=function(e,t){switch(e.nodeType){case i.NodeType.Element:return this._serializeElement(e,t);case i.NodeType.Document:return this._serializeDocument(e,t);case i.NodeType.Comment:return this._serializeComment(e,t);case i.NodeType.Text:return this._serializeText(e,t);case i.NodeType.DocumentFragment:return this._serializeDocumentFragment(e,t);case i.NodeType.DocumentType:return this._serializeDocumentType(e,t);case i.NodeType.ProcessingInstruction:return this._serializeProcessingInstruction(e,t);case i.NodeType.CData:return this._serializeCData(e,t);default:throw new Error("Unknown node type: "+e.nodeType)}},e.prototype._serializeElementNS=function(t,r,i,o,a){var s,c;if(a&&(-1!==t.localName.indexOf(":")||!l.xml_isName(t.localName)))throw new Error("Node local name contains invalid characters (well-formed required).");var h="<",p="",f=!1,d=!1,m=i.copy(),y={},v=this._recordNamespaceInformation(t,m,y),_=r,g=t.namespaceURI;if(_===g)null!==v&&(d=!0),h+=p=g===u.namespace.XML?"xml:"+t.localName:t.localName;else {var b=t.prefix,x=null;if(null===b&&g===v||(x=m.get(b,g)),"xmlns"===b){if(a)throw new Error("An element cannot have the 'xmlns' prefix (well-formed required).");x=b;}null!==x?(p=x+":"+t.localName,null!==v&&v!==u.namespace.XML&&(_=v||null),h+=p):null!==b?(b in y&&(b=this._generatePrefix(g,m,o)),m.set(b,g),h+=p+=b+":"+t.localName,h+=" xmlns:"+b+'="'+this._serializeAttributeValue(g,a)+'"',null!==v&&(_=v||null)):null===v||null!==v&&v!==g?(d=!0,_=g,h+=p+=t.localName,h+=' xmlns="'+this._serializeAttributeValue(g,a)+'"'):(_=g,h+=p+=t.localName);}h+=this._serializeAttributesNS(t,m,o,y,d,a);var w=g===u.namespace.HTML;if(w&&0===t.childNodes.length&&e._VoidElementNames.has(t.localName)?(h+=" /",f=!0):w||0!==t.childNodes.length||(h+="/",f=!0),h+=">",f)return h;if(w&&"template"===t.localName);else try{for(var E=n(t._children||t.childNodes),D=E.next();!D.done;D=E.next()){var S=D.value;h+=this._serializeNodeNS(S,_,m,o,a);}}catch(e){s={error:e};}finally{try{D&&!D.done&&(c=E.return)&&c.call(E);}finally{if(s)throw s.error}}return h+="</"+p+">"},e.prototype._serializeDocumentNS=function(e,t,r,i,o){var a,s;if(o&&null===e.documentElement)throw new Error("Missing document element (well-formed required).");var u="";try{for(var l=n(e._children||e.childNodes),c=l.next();!c.done;c=l.next()){var h=c.value;u+=this._serializeNodeNS(h,t,r,i,o);}}catch(e){a={error:e};}finally{try{c&&!c.done&&(s=l.return)&&s.call(l);}finally{if(a)throw a.error}}return u},e.prototype._serializeComment=function(e,t){if(t&&(!l.xml_isLegalChar(e.data)||-1!==e.data.indexOf("--")||e.data.endsWith("-")))throw new Error("Comment data contains invalid characters (well-formed required).");return "\x3c!--"+e.data+"--\x3e"},e.prototype._serializeText=function(e,t){if(t&&!l.xml_isLegalChar(e.data))throw new Error("Text data contains invalid characters (well-formed required).");for(var r="",n=0;n<e.data.length;n++){var i=e.data[n];r+="&"===i?"&amp;":"<"===i?"&lt;":">"===i?"&gt;":i;}return r},e.prototype._serializeDocumentFragmentNS=function(e,t,r,i,o){var a,s,u="";try{for(var l=n(e._children||e.childNodes),c=l.next();!c.done;c=l.next()){var h=c.value;u+=this._serializeNodeNS(h,t,r,i,o);}}catch(e){a={error:e};}finally{try{c&&!c.done&&(s=l.return)&&s.call(l);}finally{if(a)throw a.error}}return u},e.prototype._serializeDocumentType=function(e,t){if(t&&!l.xml_isPubidChar(e.publicId))throw new Error("DocType public identifier does not match PubidChar construct (well-formed required).");if(t&&(!l.xml_isLegalChar(e.systemId)||-1!==e.systemId.indexOf('"')&&-1!==e.systemId.indexOf("'")))throw new Error("DocType system identifier contains invalid characters (well-formed required).");return e.publicId&&e.systemId?"<!DOCTYPE "+e.name+' PUBLIC "'+e.publicId+'" "'+e.systemId+'">':e.publicId?"<!DOCTYPE "+e.name+' PUBLIC "'+e.publicId+'">':e.systemId?"<!DOCTYPE "+e.name+' SYSTEM "'+e.systemId+'">':"<!DOCTYPE "+e.name+">"},e.prototype._serializeProcessingInstruction=function(e,t){if(t&&(-1!==e.target.indexOf(":")||/^xml$/i.test(e.target)))throw new Error("Processing instruction target contains invalid characters (well-formed required).");if(t&&(!l.xml_isLegalChar(e.data)||-1!==e.data.indexOf("?>")))throw new Error("Processing instruction data contains invalid characters (well-formed required).");return "<?"+(""===e.data?e.target:e.target+" "+e.data)+"?>"},e.prototype._serializeCData=function(e,t){if(t&&-1!==e.data.indexOf("]]>"))throw new Error("CDATA contains invalid characters (well-formed required).");return "<![CDATA["+e.data+"]]>"},e.prototype._serializeAttributesNS=function(e,t,r,i,a,s){var c,h,p="",f=s?new o.LocalNameSet:void 0;try{for(var d=n(e.attributes),m=d.next();!m.done;m=d.next()){var y=m.value;if(a||s||null!==y.namespaceURI){if(s&&f&&f.has(y.namespaceURI,y.localName))throw new Error("Element contains duplicate attributes (well-formed required).");s&&f&&f.set(y.namespaceURI,y.localName);var v=y.namespaceURI,_=null;if(null!==v)if(_=t.get(y.prefix,v),v===u.namespace.XMLNS){if(y.value===u.namespace.XML||null===y.prefix&&a||null!==y.prefix&&(!(y.localName in i)||i[y.localName]!==y.value)&&t.has(y.localName,y.value))continue;if(s&&y.value===u.namespace.XMLNS)throw new Error("XMLNS namespace is reserved (well-formed required).");if(s&&""===y.value)throw new Error("Namespace prefix declarations cannot be used to undeclare a namespace (well-formed required).");"xmlns"===y.prefix&&(_="xmlns");}else null===_&&(p+=" xmlns:"+(_=null===y.prefix||t.hasPrefix(y.prefix)&&!t.has(y.prefix,v)?this._generatePrefix(v,t,r):y.prefix)+'="'+this._serializeAttributeValue(v,s)+'"');if(p+=" ",null!==_&&(p+=_+":"),s&&(-1!==y.localName.indexOf(":")||!l.xml_isName(y.localName)||"xmlns"===y.localName&&null===v))throw new Error("Attribute local name contains invalid characters (well-formed required).");p+=y.localName+'="'+this._serializeAttributeValue(y.value,s)+'"';}else p+=" "+y.localName+'="'+this._serializeAttributeValue(y.value,s)+'"';}}catch(e){c={error:e};}finally{try{m&&!m.done&&(h=d.return)&&h.call(d);}finally{if(c)throw c.error}}return p},e.prototype._recordNamespaceInformation=function(e,t,r){var i,o,a=null;try{for(var s=n(e.attributes),l=s.next();!l.done;l=s.next()){var c=l.value,h=c.namespaceURI,p=c.prefix;if(h===u.namespace.XMLNS){if(null===p){a=c.value;continue}var f=c.localName,d=c.value;if(d===u.namespace.XML)continue;if(""===d&&(d=null),t.has(f,d))continue;t.set(f,d),r[f]=d||"";}}}catch(e){i={error:e};}finally{try{l&&!l.done&&(o=s.return)&&o.call(s);}finally{if(i)throw i.error}}return a},e.prototype._generatePrefix=function(e,t,r){var n="ns"+r.value;return r.value++,t.set(n,e),n},e.prototype._serializeAttributeValue=function(e,t){if(t&&null!==e&&!l.xml_isLegalChar(e))throw new Error("Invalid characters in attribute value.");if(null===e)return "";for(var r="",n=0;n<e.length;n++){var i=e[n];r+='"'===i?"&quot;":"&"===i?"&amp;":"<"===i?"&lt;":">"===i?"&gt;":i;}return r},e.prototype._serializeElement=function(e,t){var r,i;if(t&&(-1!==e.localName.indexOf(":")||!l.xml_isName(e.localName)))throw new Error("Node local name contains invalid characters (well-formed required).");var o=!1,a=e.localName,s="<"+a;if(s+=this._serializeAttributes(e,t),0===e._children.size&&(s+="/",o=!0),s+=">",o)return s;try{for(var u=n(e._children),c=u.next();!c.done;c=u.next()){var h=c.value;s+=this._serializeNode(h,t);}}catch(e){r={error:e};}finally{try{c&&!c.done&&(i=u.return)&&i.call(u);}finally{if(r)throw r.error}}return s+="</"+a+">"},e.prototype._serializeDocument=function(e,t){var r,i;if(t&&null===e.documentElement)throw new Error("Missing document element (well-formed required).");var o="";try{for(var a=n(e._children),s=a.next();!s.done;s=a.next()){var u=s.value;o+=this._serializeNode(u,t);}}catch(e){r={error:e};}finally{try{s&&!s.done&&(i=a.return)&&i.call(a);}finally{if(r)throw r.error}}return o},e.prototype._serializeDocumentFragment=function(e,t){var r,i,o="";try{for(var a=n(e._children),s=a.next();!s.done;s=a.next()){var u=s.value;o+=this._serializeNode(u,t);}}catch(e){r={error:e};}finally{try{s&&!s.done&&(i=a.return)&&i.call(a);}finally{if(r)throw r.error}}return o},e.prototype._serializeAttributes=function(e,t){var r,i,o="",a=t?{}:void 0;try{for(var s=n(e.attributes),u=s.next();!u.done;u=s.next()){var c=u.value;if(t&&a&&c.localName in a)throw new Error("Element contains duplicate attributes (well-formed required).");if(t&&a&&(a[c.localName]=!0),t&&(-1!==c.localName.indexOf(":")||!l.xml_isName(c.localName)))throw new Error("Attribute local name contains invalid characters (well-formed required).");o+=" "+c.localName+'="'+this._serializeAttributeValue(c.value,t)+'"';}}catch(e){r={error:e};}finally{try{u&&!u.done&&(i=s.return)&&i.call(s);}finally{if(r)throw r.error}}return o},e._VoidElementNames=new Set(["area","base","basefont","bgsound","br","col","embed","frame","hr","img","input","keygen","link","menuitem","meta","param","source","track","wbr"]),e}();t.XMLSerializerImpl=c;},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(277);t.XMLReader=n.XMLReader;var i=r(112);t.ObjectReader=i.ObjectReader;var o=r(280);t.JSONReader=o.JSONReader;var a=r(281);t.YAMLReader=a.YAMLReader;},function(e,t,r){r(31),r(32),r(33),r(19),r(65),r(20),r(22),r(23);var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value);}catch(e){i={error:e};}finally{try{n&&!n.done&&(r=o.return)&&r.call(o);}finally{if(i)throw i.error}}return a},a=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var s=r(180),u=r(111),l=r(7),c=r(0),h=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype._parse=function(e,t){for(var r,n,i,h,p=new s.XMLStringLexer(t,{skipWhitespaceOnlyText:!0}),f=e,d=e,m=p.nextToken();m.type!==u.TokenType.EOF;){switch(m.type){case u.TokenType.Declaration:var y=m,v=this.sanitize(y.version);if("1.0"!==v)throw new Error("Invalid xml version: "+v);var _={version:v};y.encoding&&(_.encoding=this.sanitize(y.encoding)),y.standalone&&(_.standalone="yes"===this.sanitize(y.standalone)),d.set(_);break;case u.TokenType.DocType:var g=m;d=this.docType(d,this.sanitize(g.name),this.sanitize(g.pubId),this.sanitize(g.sysId))||d;break;case u.TokenType.CDATA:var b=m;d=this.cdata(d,this.sanitize(b.data))||d;break;case u.TokenType.Comment:var x=m;d=this.comment(d,this.sanitize(x.data))||d;break;case u.TokenType.PI:var w=m;d=this.instruction(d,this.sanitize(w.target),this.sanitize(w.data))||d;break;case u.TokenType.Text:var E=m;d=this.text(d,this._decodeText(this.sanitize(E.data)))||d;break;case u.TokenType.Element:var D=m,S=this.sanitize(D.name),C=o(c.namespace_extractQName(S),1)[0],A=d.node.lookupNamespaceURI(C),N={};try{for(var T=(r=void 0,a(D.attributes)),O=T.next();!O.done;O=T.next()){var F=o(O.value,2),k=F[0],P=F[1];if(k=this.sanitize(k),P=this.sanitize(P),"xmlns"===k)A=P;else {var I=o(c.namespace_extractQName(k),2),L=I[0],M=I[1];"xmlns"===L&&(M===C&&(A=P),N[M]=P);}}}catch(e){r={error:e};}finally{try{O&&!O.done&&(n=T.return)&&n.call(T);}finally{if(r)throw r.error}}var B=null!==A?this.element(d,A,S):this.element(d,void 0,S);if(void 0===B)break;d.node===e.node&&(f=B);try{for(var j=(i=void 0,a(D.attributes)),R=j.next();!R.done;R=j.next()){var z=o(R.value,2);k=z[0],P=z[1];k=this.sanitize(k),P=this.sanitize(P);var U=o(c.namespace_extractQName(k),2),G=(L=U[0],M=U[1],null);"xmlns"===L||null===L&&"xmlns"===M?G=l.namespace.XMLNS:null!==(G=B.node.lookupNamespaceURI(L))&&B.node.isDefaultNamespace(G)?G=null:null===G&&null!==L&&(G=N[L]||null),null!==G?this.attribute(B,G,k,this._decodeAttributeValue(P)):this.attribute(B,void 0,k,this._decodeAttributeValue(P));}}catch(e){i={error:e};}finally{try{R&&!R.done&&(h=j.return)&&h.call(j);}finally{if(i)throw i.error}}D.selfClosing||(d=B);break;case u.TokenType.ClosingTag:d.node.parentNode&&(d=d.up());}m=p.nextToken();}return f},t}(r(75).BaseReader);t.XMLReader=h;},function(e,t,r){var n=r(4),i=r(279);n({target:"Object",stat:!0,forced:Object.assign!==i},{assign:i});},function(e,t,r){var n=r(16),i=r(8),o=r(61),a=r(85),s=r(79),u=r(27),l=r(41),c=Object.assign,h=Object.defineProperty;e.exports=!c||i((function(){if(n&&1!==c({b:1},c(h({},"a",{enumerable:!0,get:function(){h(this,"b",{value:3,enumerable:!1});}}),{b:2})).b)return !0;var e={},t={},r=Symbol();return e[r]=7,"abcdefghijklmnopqrst".split("").forEach((function(e){t[e]=e;})),7!=c({},e)[r]||"abcdefghijklmnopqrst"!=o(c({},t)).join("")}))?function(e,t){for(var r=u(e),i=arguments.length,c=1,h=a.f,p=s.f;i>c;)for(var f,d=l(arguments[c++]),m=h?o(d).concat(h(d)):o(d),y=m.length,v=0;y>v;)f=m[v++],n&&!p.call(d,f)||(r[f]=d[f]);return r}:c;},function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0});var o=r(112),a=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype._parse=function(e,t){return new o.ObjectReader(this._builderOptions).parse(e,JSON.parse(t))},t}(r(75).BaseReader);t.JSONReader=a;},function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0});var o=r(112),a=r(75),s=r(282),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype._parse=function(e,t){var r=s.safeLoad(t);if(void 0===r)throw new Error("Unable to parse YAML document.");return new o.ObjectReader(this._builderOptions).parse(e,r)},t}(a.BaseReader);t.YAMLReader=u;},function(e,t,r){var n=r(283);e.exports=n;},function(e,t,r){var n=r(284),i=r(303);function o(e){return function(){throw new Error("Function "+e+" is deprecated and cannot be used.")}}e.exports.Type=r(10),e.exports.Schema=r(39),e.exports.FAILSAFE_SCHEMA=r(113),e.exports.JSON_SCHEMA=r(182),e.exports.CORE_SCHEMA=r(181),e.exports.DEFAULT_SAFE_SCHEMA=r(54),e.exports.DEFAULT_FULL_SCHEMA=r(76),e.exports.load=n.load,e.exports.loadAll=n.loadAll,e.exports.safeLoad=n.safeLoad,e.exports.safeLoadAll=n.safeLoadAll,e.exports.dump=i.dump,e.exports.safeDump=i.safeDump,e.exports.YAMLException=r(53),e.exports.MINIMAL_SCHEMA=r(113),e.exports.SAFE_SCHEMA=r(54),e.exports.DEFAULT_SCHEMA=r(76),e.exports.scan=o("scan"),e.exports.parse=o("parse"),e.exports.compose=o("compose"),e.exports.addConstructor=o("addConstructor");},function(e,t,r){var n=r(38),i=r(53),o=r(285),a=r(54),s=r(76),u=Object.prototype.hasOwnProperty,l=/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,c=/[\x85\u2028\u2029]/,h=/[,\[\]\{\}]/,p=/^(?:!|!!|![a-z\-]+!)$/i,f=/^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;function d(e){return Object.prototype.toString.call(e)}function m(e){return 10===e||13===e}function y(e){return 9===e||32===e}function v(e){return 9===e||32===e||10===e||13===e}function _(e){return 44===e||91===e||93===e||123===e||125===e}function g(e){var t;return 48<=e&&e<=57?e-48:97<=(t=32|e)&&t<=102?t-97+10:-1}function b(e){return 48===e?"\0":97===e?"":98===e?"\b":116===e||9===e?"\t":110===e?"\n":118===e?"\v":102===e?"\f":114===e?"\r":101===e?"":32===e?" ":34===e?'"':47===e?"/":92===e?"\\":78===e?"":95===e?" ":76===e?"\u2028":80===e?"\u2029":""}function x(e){return e<=65535?String.fromCharCode(e):String.fromCharCode(55296+(e-65536>>10),56320+(e-65536&1023))}for(var w=new Array(256),E=new Array(256),D=0;D<256;D++)w[D]=b(D)?1:0,E[D]=b(D);function S(e,t){this.input=e,this.filename=t.filename||null,this.schema=t.schema||s,this.onWarning=t.onWarning||null,this.legacy=t.legacy||!1,this.json=t.json||!1,this.listener=t.listener||null,this.implicitTypes=this.schema.compiledImplicit,this.typeMap=this.schema.compiledTypeMap,this.length=e.length,this.position=0,this.line=0,this.lineStart=0,this.lineIndent=0,this.documents=[];}function C(e,t){return new i(t,new o(e.filename,e.input,e.position,e.line,e.position-e.lineStart))}function A(e,t){throw C(e,t)}function N(e,t){e.onWarning&&e.onWarning.call(null,C(e,t));}var T={YAML:function(e,t,r){var n,i,o;null!==e.version&&A(e,"duplication of %YAML directive"),1!==r.length&&A(e,"YAML directive accepts exactly one argument"),null===(n=/^([0-9]+)\.([0-9]+)$/.exec(r[0]))&&A(e,"ill-formed argument of the YAML directive"),i=parseInt(n[1],10),o=parseInt(n[2],10),1!==i&&A(e,"unacceptable YAML version of the document"),e.version=r[0],e.checkLineBreaks=o<2,1!==o&&2!==o&&N(e,"unsupported YAML version of the document");},TAG:function(e,t,r){var n,i;2!==r.length&&A(e,"TAG directive accepts exactly two arguments"),n=r[0],i=r[1],p.test(n)||A(e,"ill-formed tag handle (first argument) of the TAG directive"),u.call(e.tagMap,n)&&A(e,'there is a previously declared suffix for "'+n+'" tag handle'),f.test(i)||A(e,"ill-formed tag prefix (second argument) of the TAG directive"),e.tagMap[n]=i;}};function O(e,t,r,n){var i,o,a,s;if(t<r){if(s=e.input.slice(t,r),n)for(i=0,o=s.length;i<o;i+=1)9===(a=s.charCodeAt(i))||32<=a&&a<=1114111||A(e,"expected valid JSON character");else l.test(s)&&A(e,"the stream contains non-printable characters");e.result+=s;}}function F(e,t,r,i){var o,a,s,l;for(n.isObject(r)||A(e,"cannot merge mappings; the provided source object is unacceptable"),s=0,l=(o=Object.keys(r)).length;s<l;s+=1)a=o[s],u.call(t,a)||(t[a]=r[a],i[a]=!0);}function k(e,t,r,n,i,o,a,s){var l,c;if(Array.isArray(i))for(l=0,c=(i=Array.prototype.slice.call(i)).length;l<c;l+=1)Array.isArray(i[l])&&A(e,"nested arrays are not supported inside keys"),"object"==typeof i&&"[object Object]"===d(i[l])&&(i[l]="[object Object]");if("object"==typeof i&&"[object Object]"===d(i)&&(i="[object Object]"),i=String(i),null===t&&(t={}),"tag:yaml.org,2002:merge"===n)if(Array.isArray(o))for(l=0,c=o.length;l<c;l+=1)F(e,t,o[l],r);else F(e,t,o,r);else e.json||u.call(r,i)||!u.call(t,i)||(e.line=a||e.line,e.position=s||e.position,A(e,"duplicated mapping key")),t[i]=o,delete r[i];return t}function P(e){var t;10===(t=e.input.charCodeAt(e.position))?e.position++:13===t?(e.position++,10===e.input.charCodeAt(e.position)&&e.position++):A(e,"a line break is expected"),e.line+=1,e.lineStart=e.position;}function I(e,t,r){for(var n=0,i=e.input.charCodeAt(e.position);0!==i;){for(;y(i);)i=e.input.charCodeAt(++e.position);if(t&&35===i)do{i=e.input.charCodeAt(++e.position);}while(10!==i&&13!==i&&0!==i);if(!m(i))break;for(P(e),i=e.input.charCodeAt(e.position),n++,e.lineIndent=0;32===i;)e.lineIndent++,i=e.input.charCodeAt(++e.position);}return -1!==r&&0!==n&&e.lineIndent<r&&N(e,"deficient indentation"),n}function L(e){var t,r=e.position;return !(45!==(t=e.input.charCodeAt(r))&&46!==t||t!==e.input.charCodeAt(r+1)||t!==e.input.charCodeAt(r+2)||(r+=3,0!==(t=e.input.charCodeAt(r))&&!v(t)))}function M(e,t){1===t?e.result+=" ":t>1&&(e.result+=n.repeat("\n",t-1));}function B(e,t){var r,n,i=e.tag,o=e.anchor,a=[],s=!1;for(null!==e.anchor&&(e.anchorMap[e.anchor]=a),n=e.input.charCodeAt(e.position);0!==n&&45===n&&v(e.input.charCodeAt(e.position+1));)if(s=!0,e.position++,I(e,!0,-1)&&e.lineIndent<=t)a.push(null),n=e.input.charCodeAt(e.position);else if(r=e.line,z(e,t,3,!1,!0),a.push(e.result),I(e,!0,-1),n=e.input.charCodeAt(e.position),(e.line===r||e.lineIndent>t)&&0!==n)A(e,"bad indentation of a sequence entry");else if(e.lineIndent<t)break;return !!s&&(e.tag=i,e.anchor=o,e.kind="sequence",e.result=a,!0)}function j(e){var t,r,n,i,o=!1,a=!1;if(33!==(i=e.input.charCodeAt(e.position)))return !1;if(null!==e.tag&&A(e,"duplication of a tag property"),60===(i=e.input.charCodeAt(++e.position))?(o=!0,i=e.input.charCodeAt(++e.position)):33===i?(a=!0,r="!!",i=e.input.charCodeAt(++e.position)):r="!",t=e.position,o){do{i=e.input.charCodeAt(++e.position);}while(0!==i&&62!==i);e.position<e.length?(n=e.input.slice(t,e.position),i=e.input.charCodeAt(++e.position)):A(e,"unexpected end of the stream within a verbatim tag");}else {for(;0!==i&&!v(i);)33===i&&(a?A(e,"tag suffix cannot contain exclamation marks"):(r=e.input.slice(t-1,e.position+1),p.test(r)||A(e,"named tag handle cannot contain such characters"),a=!0,t=e.position+1)),i=e.input.charCodeAt(++e.position);n=e.input.slice(t,e.position),h.test(n)&&A(e,"tag suffix cannot contain flow indicator characters");}return n&&!f.test(n)&&A(e,"tag name cannot contain such characters: "+n),o?e.tag=n:u.call(e.tagMap,r)?e.tag=e.tagMap[r]+n:"!"===r?e.tag="!"+n:"!!"===r?e.tag="tag:yaml.org,2002:"+n:A(e,'undeclared tag handle "'+r+'"'),!0}function R(e){var t,r;if(38!==(r=e.input.charCodeAt(e.position)))return !1;for(null!==e.anchor&&A(e,"duplication of an anchor property"),r=e.input.charCodeAt(++e.position),t=e.position;0!==r&&!v(r)&&!_(r);)r=e.input.charCodeAt(++e.position);return e.position===t&&A(e,"name of an anchor node must contain at least one character"),e.anchor=e.input.slice(t,e.position),!0}function z(e,t,r,i,o){var a,s,l,c,h,p,f,d,b=1,D=!1,S=!1;if(null!==e.listener&&e.listener("open",e),e.tag=null,e.anchor=null,e.kind=null,e.result=null,a=s=l=4===r||3===r,i&&I(e,!0,-1)&&(D=!0,e.lineIndent>t?b=1:e.lineIndent===t?b=0:e.lineIndent<t&&(b=-1)),1===b)for(;j(e)||R(e);)I(e,!0,-1)?(D=!0,l=a,e.lineIndent>t?b=1:e.lineIndent===t?b=0:e.lineIndent<t&&(b=-1)):l=!1;if(l&&(l=D||o),1!==b&&4!==r||(f=1===r||2===r?t:t+1,d=e.position-e.lineStart,1===b?l&&(B(e,d)||function(e,t,r){var n,i,o,a,s,u=e.tag,l=e.anchor,c={},h={},p=null,f=null,d=null,m=!1,_=!1;for(null!==e.anchor&&(e.anchorMap[e.anchor]=c),s=e.input.charCodeAt(e.position);0!==s;){if(n=e.input.charCodeAt(e.position+1),o=e.line,a=e.position,63!==s&&58!==s||!v(n)){if(!z(e,r,2,!1,!0))break;if(e.line===o){for(s=e.input.charCodeAt(e.position);y(s);)s=e.input.charCodeAt(++e.position);if(58===s)v(s=e.input.charCodeAt(++e.position))||A(e,"a whitespace character is expected after the key-value separator within a block mapping"),m&&(k(e,c,h,p,f,null),p=f=d=null),_=!0,m=!1,i=!1,p=e.tag,f=e.result;else {if(!_)return e.tag=u,e.anchor=l,!0;A(e,"can not read an implicit mapping pair; a colon is missed");}}else {if(!_)return e.tag=u,e.anchor=l,!0;A(e,"can not read a block mapping entry; a multiline key may not be an implicit key");}}else 63===s?(m&&(k(e,c,h,p,f,null),p=f=d=null),_=!0,m=!0,i=!0):m?(m=!1,i=!0):A(e,"incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line"),e.position+=1,s=n;if((e.line===o||e.lineIndent>t)&&(z(e,t,4,!0,i)&&(m?f=e.result:d=e.result),m||(k(e,c,h,p,f,d,o,a),p=f=d=null),I(e,!0,-1),s=e.input.charCodeAt(e.position)),e.lineIndent>t&&0!==s)A(e,"bad indentation of a mapping entry");else if(e.lineIndent<t)break}return m&&k(e,c,h,p,f,null),_&&(e.tag=u,e.anchor=l,e.kind="mapping",e.result=c),_}(e,d,f))||function(e,t){var r,n,i,o,a,s,u,l,c,h,p=!0,f=e.tag,d=e.anchor,m={};if(91===(h=e.input.charCodeAt(e.position)))i=93,s=!1,n=[];else {if(123!==h)return !1;i=125,s=!0,n={};}for(null!==e.anchor&&(e.anchorMap[e.anchor]=n),h=e.input.charCodeAt(++e.position);0!==h;){if(I(e,!0,t),(h=e.input.charCodeAt(e.position))===i)return e.position++,e.tag=f,e.anchor=d,e.kind=s?"mapping":"sequence",e.result=n,!0;p||A(e,"missed comma between flow collection entries"),c=null,o=a=!1,63===h&&v(e.input.charCodeAt(e.position+1))&&(o=a=!0,e.position++,I(e,!0,t)),r=e.line,z(e,t,1,!1,!0),l=e.tag,u=e.result,I(e,!0,t),h=e.input.charCodeAt(e.position),!a&&e.line!==r||58!==h||(o=!0,h=e.input.charCodeAt(++e.position),I(e,!0,t),z(e,t,1,!1,!0),c=e.result),s?k(e,n,m,l,u,c):o?n.push(k(e,null,m,l,u,c)):n.push(u),I(e,!0,t),44===(h=e.input.charCodeAt(e.position))?(p=!0,h=e.input.charCodeAt(++e.position)):p=!1;}A(e,"unexpected end of the stream within a flow collection");}(e,f)?S=!0:(s&&function(e,t){var r,i,o,a,s,u=1,l=!1,c=!1,h=t,p=0,f=!1;if(124===(a=e.input.charCodeAt(e.position)))i=!1;else {if(62!==a)return !1;i=!0;}for(e.kind="scalar",e.result="";0!==a;)if(43===(a=e.input.charCodeAt(++e.position))||45===a)1===u?u=43===a?3:2:A(e,"repeat of a chomping mode identifier");else {if(!((o=48<=(s=a)&&s<=57?s-48:-1)>=0))break;0===o?A(e,"bad explicit indentation width of a block scalar; it cannot be less than one"):c?A(e,"repeat of an indentation width identifier"):(h=t+o-1,c=!0);}if(y(a)){do{a=e.input.charCodeAt(++e.position);}while(y(a));if(35===a)do{a=e.input.charCodeAt(++e.position);}while(!m(a)&&0!==a)}for(;0!==a;){for(P(e),e.lineIndent=0,a=e.input.charCodeAt(e.position);(!c||e.lineIndent<h)&&32===a;)e.lineIndent++,a=e.input.charCodeAt(++e.position);if(!c&&e.lineIndent>h&&(h=e.lineIndent),m(a))p++;else {if(e.lineIndent<h){3===u?e.result+=n.repeat("\n",l?1+p:p):1===u&&l&&(e.result+="\n");break}for(i?y(a)?(f=!0,e.result+=n.repeat("\n",l?1+p:p)):f?(f=!1,e.result+=n.repeat("\n",p+1)):0===p?l&&(e.result+=" "):e.result+=n.repeat("\n",p):e.result+=n.repeat("\n",l?1+p:p),l=!0,c=!0,p=0,r=e.position;!m(a)&&0!==a;)a=e.input.charCodeAt(++e.position);O(e,r,e.position,!1);}}return !0}(e,f)||function(e,t){var r,n,i;if(39!==(r=e.input.charCodeAt(e.position)))return !1;for(e.kind="scalar",e.result="",e.position++,n=i=e.position;0!==(r=e.input.charCodeAt(e.position));)if(39===r){if(O(e,n,e.position,!0),39!==(r=e.input.charCodeAt(++e.position)))return !0;n=e.position,e.position++,i=e.position;}else m(r)?(O(e,n,i,!0),M(e,I(e,!1,t)),n=i=e.position):e.position===e.lineStart&&L(e)?A(e,"unexpected end of the document within a single quoted scalar"):(e.position++,i=e.position);A(e,"unexpected end of the stream within a single quoted scalar");}(e,f)||function(e,t){var r,n,i,o,a,s,u;if(34!==(s=e.input.charCodeAt(e.position)))return !1;for(e.kind="scalar",e.result="",e.position++,r=n=e.position;0!==(s=e.input.charCodeAt(e.position));){if(34===s)return O(e,r,e.position,!0),e.position++,!0;if(92===s){if(O(e,r,e.position,!0),m(s=e.input.charCodeAt(++e.position)))I(e,!1,t);else if(s<256&&w[s])e.result+=E[s],e.position++;else if((a=120===(u=s)?2:117===u?4:85===u?8:0)>0){for(i=a,o=0;i>0;i--)(a=g(s=e.input.charCodeAt(++e.position)))>=0?o=(o<<4)+a:A(e,"expected hexadecimal character");e.result+=x(o),e.position++;}else A(e,"unknown escape sequence");r=n=e.position;}else m(s)?(O(e,r,n,!0),M(e,I(e,!1,t)),r=n=e.position):e.position===e.lineStart&&L(e)?A(e,"unexpected end of the document within a double quoted scalar"):(e.position++,n=e.position);}A(e,"unexpected end of the stream within a double quoted scalar");}(e,f)?S=!0:!function(e){var t,r,n;if(42!==(n=e.input.charCodeAt(e.position)))return !1;for(n=e.input.charCodeAt(++e.position),t=e.position;0!==n&&!v(n)&&!_(n);)n=e.input.charCodeAt(++e.position);return e.position===t&&A(e,"name of an alias node must contain at least one character"),r=e.input.slice(t,e.position),e.anchorMap.hasOwnProperty(r)||A(e,'unidentified alias "'+r+'"'),e.result=e.anchorMap[r],I(e,!0,-1),!0}(e)?function(e,t,r){var n,i,o,a,s,u,l,c,h=e.kind,p=e.result;if(v(c=e.input.charCodeAt(e.position))||_(c)||35===c||38===c||42===c||33===c||124===c||62===c||39===c||34===c||37===c||64===c||96===c)return !1;if((63===c||45===c)&&(v(n=e.input.charCodeAt(e.position+1))||r&&_(n)))return !1;for(e.kind="scalar",e.result="",i=o=e.position,a=!1;0!==c;){if(58===c){if(v(n=e.input.charCodeAt(e.position+1))||r&&_(n))break}else if(35===c){if(v(e.input.charCodeAt(e.position-1)))break}else {if(e.position===e.lineStart&&L(e)||r&&_(c))break;if(m(c)){if(s=e.line,u=e.lineStart,l=e.lineIndent,I(e,!1,-1),e.lineIndent>=t){a=!0,c=e.input.charCodeAt(e.position);continue}e.position=o,e.line=s,e.lineStart=u,e.lineIndent=l;break}}a&&(O(e,i,o,!1),M(e,e.line-s),i=o=e.position,a=!1),y(c)||(o=e.position+1),c=e.input.charCodeAt(++e.position);}return O(e,i,o,!1),!!e.result||(e.kind=h,e.result=p,!1)}(e,f,1===r)&&(S=!0,null===e.tag&&(e.tag="?")):(S=!0,null===e.tag&&null===e.anchor||A(e,"alias node should not have any properties")),null!==e.anchor&&(e.anchorMap[e.anchor]=e.result)):0===b&&(S=l&&B(e,d))),null!==e.tag&&"!"!==e.tag)if("?"===e.tag){for(null!==e.result&&"scalar"!==e.kind&&A(e,'unacceptable node kind for !<?> tag; it should be "scalar", not "'+e.kind+'"'),c=0,h=e.implicitTypes.length;c<h;c+=1)if((p=e.implicitTypes[c]).resolve(e.result)){e.result=p.construct(e.result),e.tag=p.tag,null!==e.anchor&&(e.anchorMap[e.anchor]=e.result);break}}else u.call(e.typeMap[e.kind||"fallback"],e.tag)?(p=e.typeMap[e.kind||"fallback"][e.tag],null!==e.result&&p.kind!==e.kind&&A(e,"unacceptable node kind for !<"+e.tag+'> tag; it should be "'+p.kind+'", not "'+e.kind+'"'),p.resolve(e.result)?(e.result=p.construct(e.result),null!==e.anchor&&(e.anchorMap[e.anchor]=e.result)):A(e,"cannot resolve a node with !<"+e.tag+"> explicit tag")):A(e,"unknown tag !<"+e.tag+">");return null!==e.listener&&e.listener("close",e),null!==e.tag||null!==e.anchor||S}function U(e){var t,r,n,i,o=e.position,a=!1;for(e.version=null,e.checkLineBreaks=e.legacy,e.tagMap={},e.anchorMap={};0!==(i=e.input.charCodeAt(e.position))&&(I(e,!0,-1),i=e.input.charCodeAt(e.position),!(e.lineIndent>0||37!==i));){for(a=!0,i=e.input.charCodeAt(++e.position),t=e.position;0!==i&&!v(i);)i=e.input.charCodeAt(++e.position);for(n=[],(r=e.input.slice(t,e.position)).length<1&&A(e,"directive name must not be less than one character in length");0!==i;){for(;y(i);)i=e.input.charCodeAt(++e.position);if(35===i){do{i=e.input.charCodeAt(++e.position);}while(0!==i&&!m(i));break}if(m(i))break;for(t=e.position;0!==i&&!v(i);)i=e.input.charCodeAt(++e.position);n.push(e.input.slice(t,e.position));}0!==i&&P(e),u.call(T,r)?T[r](e,r,n):N(e,'unknown document directive "'+r+'"');}I(e,!0,-1),0===e.lineIndent&&45===e.input.charCodeAt(e.position)&&45===e.input.charCodeAt(e.position+1)&&45===e.input.charCodeAt(e.position+2)?(e.position+=3,I(e,!0,-1)):a&&A(e,"directives end mark is expected"),z(e,e.lineIndent-1,4,!1,!0),I(e,!0,-1),e.checkLineBreaks&&c.test(e.input.slice(o,e.position))&&N(e,"non-ASCII line breaks are interpreted as content"),e.documents.push(e.result),e.position===e.lineStart&&L(e)?46===e.input.charCodeAt(e.position)&&(e.position+=3,I(e,!0,-1)):e.position<e.length-1&&A(e,"end of the stream or a document separator is expected");}function G(e,t){t=t||{},0!==(e=String(e)).length&&(10!==e.charCodeAt(e.length-1)&&13!==e.charCodeAt(e.length-1)&&(e+="\n"),65279===e.charCodeAt(0)&&(e=e.slice(1)));var r=new S(e,t),n=e.indexOf("\0");for(-1!==n&&(r.position=n,A(r,"null byte is not allowed in input")),r.input+="\0";32===r.input.charCodeAt(r.position);)r.lineIndent+=1,r.position+=1;for(;r.position<r.length-1;)U(r);return r.documents}function X(e,t,r){null!==t&&"object"==typeof t&&void 0===r&&(r=t,t=null);var n=G(e,r);if("function"!=typeof t)return n;for(var i=0,o=n.length;i<o;i+=1)t(n[i]);}function q(e,t){var r=G(e,t);if(0!==r.length){if(1===r.length)return r[0];throw new i("expected a single document in the stream, but found more")}}e.exports.loadAll=X,e.exports.load=q,e.exports.safeLoadAll=function(e,t,r){return "object"==typeof t&&null!==t&&void 0===r&&(r=t,t=null),X(e,t,n.extend({schema:a},r))},e.exports.safeLoad=function(e,t){return q(e,n.extend({schema:a},t))};},function(e,t,r){var n=r(38);function i(e,t,r,n,i){this.name=e,this.buffer=t,this.position=r,this.line=n,this.column=i;}i.prototype.getSnippet=function(e,t){var r,i,o,a,s;if(!this.buffer)return null;for(e=e||4,t=t||75,r="",i=this.position;i>0&&-1==="\0\r\n\u2028\u2029".indexOf(this.buffer.charAt(i-1));)if(i-=1,this.position-i>t/2-1){r=" ... ",i+=5;break}for(o="",a=this.position;a<this.buffer.length&&-1==="\0\r\n\u2028\u2029".indexOf(this.buffer.charAt(a));)if((a+=1)-this.position>t/2-1){o=" ... ",a-=5;break}return s=this.buffer.slice(i,a),n.repeat(" ",e)+r+s+o+"\n"+n.repeat(" ",e+this.position-i+r.length)+"^"},i.prototype.toString=function(e){var t,r="";return this.name&&(r+='in "'+this.name+'" '),r+="at line "+(this.line+1)+", column "+(this.column+1),e||(t=this.getSnippet())&&(r+=":\n"+t),r},e.exports=i;},function(e,t,r){var n=r(10);e.exports=new n("tag:yaml.org,2002:str",{kind:"scalar",construct:function(e){return null!==e?e:""}});},function(e,t,r){var n=r(10);e.exports=new n("tag:yaml.org,2002:seq",{kind:"sequence",construct:function(e){return null!==e?e:[]}});},function(e,t,r){var n=r(10);e.exports=new n("tag:yaml.org,2002:map",{kind:"mapping",construct:function(e){return null!==e?e:{}}});},function(e,t,r){var n=r(10);e.exports=new n("tag:yaml.org,2002:null",{kind:"scalar",resolve:function(e){if(null===e)return !0;var t=e.length;return 1===t&&"~"===e||4===t&&("null"===e||"Null"===e||"NULL"===e)},construct:function(){return null},predicate:function(e){return null===e},represent:{canonical:function(){return "~"},lowercase:function(){return "null"},uppercase:function(){return "NULL"},camelcase:function(){return "Null"}},defaultStyle:"lowercase"});},function(e,t,r){var n=r(10);e.exports=new n("tag:yaml.org,2002:bool",{kind:"scalar",resolve:function(e){if(null===e)return !1;var t=e.length;return 4===t&&("true"===e||"True"===e||"TRUE"===e)||5===t&&("false"===e||"False"===e||"FALSE"===e)},construct:function(e){return "true"===e||"True"===e||"TRUE"===e},predicate:function(e){return "[object Boolean]"===Object.prototype.toString.call(e)},represent:{lowercase:function(e){return e?"true":"false"},uppercase:function(e){return e?"TRUE":"FALSE"},camelcase:function(e){return e?"True":"False"}},defaultStyle:"lowercase"});},function(e,t,r){var n=r(38),i=r(10);function o(e){return 48<=e&&e<=55}function a(e){return 48<=e&&e<=57}e.exports=new i("tag:yaml.org,2002:int",{kind:"scalar",resolve:function(e){if(null===e)return !1;var t,r,n=e.length,i=0,s=!1;if(!n)return !1;if("-"!==(t=e[i])&&"+"!==t||(t=e[++i]),"0"===t){if(i+1===n)return !0;if("b"===(t=e[++i])){for(i++;i<n;i++)if("_"!==(t=e[i])){if("0"!==t&&"1"!==t)return !1;s=!0;}return s&&"_"!==t}if("x"===t){for(i++;i<n;i++)if("_"!==(t=e[i])){if(!(48<=(r=e.charCodeAt(i))&&r<=57||65<=r&&r<=70||97<=r&&r<=102))return !1;s=!0;}return s&&"_"!==t}for(;i<n;i++)if("_"!==(t=e[i])){if(!o(e.charCodeAt(i)))return !1;s=!0;}return s&&"_"!==t}if("_"===t)return !1;for(;i<n;i++)if("_"!==(t=e[i])){if(":"===t)break;if(!a(e.charCodeAt(i)))return !1;s=!0;}return !(!s||"_"===t)&&(":"!==t||/^(:[0-5]?[0-9])+$/.test(e.slice(i)))},construct:function(e){var t,r,n=e,i=1,o=[];return -1!==n.indexOf("_")&&(n=n.replace(/_/g,"")),"-"!==(t=n[0])&&"+"!==t||("-"===t&&(i=-1),t=(n=n.slice(1))[0]),"0"===n?0:"0"===t?"b"===n[1]?i*parseInt(n.slice(2),2):"x"===n[1]?i*parseInt(n,16):i*parseInt(n,8):-1!==n.indexOf(":")?(n.split(":").forEach((function(e){o.unshift(parseInt(e,10));})),n=0,r=1,o.forEach((function(e){n+=e*r,r*=60;})),i*n):i*parseInt(n,10)},predicate:function(e){return "[object Number]"===Object.prototype.toString.call(e)&&e%1==0&&!n.isNegativeZero(e)},represent:{binary:function(e){return e>=0?"0b"+e.toString(2):"-0b"+e.toString(2).slice(1)},octal:function(e){return e>=0?"0"+e.toString(8):"-0"+e.toString(8).slice(1)},decimal:function(e){return e.toString(10)},hexadecimal:function(e){return e>=0?"0x"+e.toString(16).toUpperCase():"-0x"+e.toString(16).toUpperCase().slice(1)}},defaultStyle:"decimal",styleAliases:{binary:[2,"bin"],octal:[8,"oct"],decimal:[10,"dec"],hexadecimal:[16,"hex"]}});},function(e,t,r){var n=r(38),i=r(10),o=new RegExp("^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");var a=/^[-+]?[0-9]+e/;e.exports=new i("tag:yaml.org,2002:float",{kind:"scalar",resolve:function(e){return null!==e&&!(!o.test(e)||"_"===e[e.length-1])},construct:function(e){var t,r,n,i;return r="-"===(t=e.replace(/_/g,"").toLowerCase())[0]?-1:1,i=[],"+-".indexOf(t[0])>=0&&(t=t.slice(1)),".inf"===t?1===r?Number.POSITIVE_INFINITY:Number.NEGATIVE_INFINITY:".nan"===t?NaN:t.indexOf(":")>=0?(t.split(":").forEach((function(e){i.unshift(parseFloat(e,10));})),t=0,n=1,i.forEach((function(e){t+=e*n,n*=60;})),r*t):r*parseFloat(t,10)},predicate:function(e){return "[object Number]"===Object.prototype.toString.call(e)&&(e%1!=0||n.isNegativeZero(e))},represent:function(e,t){var r;if(isNaN(e))switch(t){case"lowercase":return ".nan";case"uppercase":return ".NAN";case"camelcase":return ".NaN"}else if(Number.POSITIVE_INFINITY===e)switch(t){case"lowercase":return ".inf";case"uppercase":return ".INF";case"camelcase":return ".Inf"}else if(Number.NEGATIVE_INFINITY===e)switch(t){case"lowercase":return "-.inf";case"uppercase":return "-.INF";case"camelcase":return "-.Inf"}else if(n.isNegativeZero(e))return "-0.0";return r=e.toString(10),a.test(r)?r.replace("e",".e"):r},defaultStyle:"lowercase"});},function(e,t,r){var n=r(10),i=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"),o=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");e.exports=new n("tag:yaml.org,2002:timestamp",{kind:"scalar",resolve:function(e){return null!==e&&(null!==i.exec(e)||null!==o.exec(e))},construct:function(e){var t,r,n,a,s,u,l,c,h=0,p=null;if(null===(t=i.exec(e))&&(t=o.exec(e)),null===t)throw new Error("Date resolve error");if(r=+t[1],n=+t[2]-1,a=+t[3],!t[4])return new Date(Date.UTC(r,n,a));if(s=+t[4],u=+t[5],l=+t[6],t[7]){for(h=t[7].slice(0,3);h.length<3;)h+="0";h=+h;}return t[9]&&(p=6e4*(60*+t[10]+ +(t[11]||0)),"-"===t[9]&&(p=-p)),c=new Date(Date.UTC(r,n,a,s,u,l,h)),p&&c.setTime(c.getTime()-p),c},instanceOf:Date,represent:function(e){return e.toISOString()}});},function(e,t,r){var n=r(10);e.exports=new n("tag:yaml.org,2002:merge",{kind:"scalar",resolve:function(e){return "<<"===e||null===e}});},function(e,t,r){var n;try{n=r(145).Buffer;}catch(e){}var i=r(10),o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";e.exports=new i("tag:yaml.org,2002:binary",{kind:"scalar",resolve:function(e){if(null===e)return !1;var t,r,n=0,i=e.length,a=o;for(r=0;r<i;r++)if(!((t=a.indexOf(e.charAt(r)))>64)){if(t<0)return !1;n+=6;}return n%8==0},construct:function(e){var t,r,i=e.replace(/[\r\n=]/g,""),a=i.length,s=o,u=0,l=[];for(t=0;t<a;t++)t%4==0&&t&&(l.push(u>>16&255),l.push(u>>8&255),l.push(255&u)),u=u<<6|s.indexOf(i.charAt(t));return 0===(r=a%4*6)?(l.push(u>>16&255),l.push(u>>8&255),l.push(255&u)):18===r?(l.push(u>>10&255),l.push(u>>2&255)):12===r&&l.push(u>>4&255),n?n.from?n.from(l):new n(l):l},predicate:function(e){return n&&n.isBuffer(e)},represent:function(e){var t,r,n="",i=0,a=e.length,s=o;for(t=0;t<a;t++)t%3==0&&t&&(n+=s[i>>18&63],n+=s[i>>12&63],n+=s[i>>6&63],n+=s[63&i]),i=(i<<8)+e[t];return 0===(r=a%3)?(n+=s[i>>18&63],n+=s[i>>12&63],n+=s[i>>6&63],n+=s[63&i]):2===r?(n+=s[i>>10&63],n+=s[i>>4&63],n+=s[i<<2&63],n+=s[64]):1===r&&(n+=s[i>>2&63],n+=s[i<<4&63],n+=s[64],n+=s[64]),n}});},function(e,t,r){var n=r(10),i=Object.prototype.hasOwnProperty,o=Object.prototype.toString;e.exports=new n("tag:yaml.org,2002:omap",{kind:"sequence",resolve:function(e){if(null===e)return !0;var t,r,n,a,s,u=[],l=e;for(t=0,r=l.length;t<r;t+=1){if(n=l[t],s=!1,"[object Object]"!==o.call(n))return !1;for(a in n)if(i.call(n,a)){if(s)return !1;s=!0;}if(!s)return !1;if(-1!==u.indexOf(a))return !1;u.push(a);}return !0},construct:function(e){return null!==e?e:[]}});},function(e,t,r){var n=r(10),i=Object.prototype.toString;e.exports=new n("tag:yaml.org,2002:pairs",{kind:"sequence",resolve:function(e){if(null===e)return !0;var t,r,n,o,a,s=e;for(a=new Array(s.length),t=0,r=s.length;t<r;t+=1){if(n=s[t],"[object Object]"!==i.call(n))return !1;if(1!==(o=Object.keys(n)).length)return !1;a[t]=[o[0],n[o[0]]];}return !0},construct:function(e){if(null===e)return [];var t,r,n,i,o,a=e;for(o=new Array(a.length),t=0,r=a.length;t<r;t+=1)n=a[t],i=Object.keys(n),o[t]=[i[0],n[i[0]]];return o}});},function(e,t,r){var n=r(10),i=Object.prototype.hasOwnProperty;e.exports=new n("tag:yaml.org,2002:set",{kind:"mapping",resolve:function(e){if(null===e)return !0;var t,r=e;for(t in r)if(i.call(r,t)&&null!==r[t])return !1;return !0},construct:function(e){return null!==e?e:{}}});},function(e,t,r){var n=r(10);e.exports=new n("tag:yaml.org,2002:js/undefined",{kind:"scalar",resolve:function(){return !0},construct:function(){},predicate:function(e){return void 0===e},represent:function(){return ""}});},function(e,t,r){var n=r(10);e.exports=new n("tag:yaml.org,2002:js/regexp",{kind:"scalar",resolve:function(e){if(null===e)return !1;if(0===e.length)return !1;var t=e,r=/\/([gim]*)$/.exec(e),n="";if("/"===t[0]){if(r&&(n=r[1]),n.length>3)return !1;if("/"!==t[t.length-n.length-1])return !1}return !0},construct:function(e){var t=e,r=/\/([gim]*)$/.exec(e),n="";return "/"===t[0]&&(r&&(n=r[1]),t=t.slice(1,t.length-n.length-1)),new RegExp(t,n)},predicate:function(e){return "[object RegExp]"===Object.prototype.toString.call(e)},represent:function(e){var t="/"+e.source+"/";return e.global&&(t+="g"),e.multiline&&(t+="m"),e.ignoreCase&&(t+="i"),t}});},function(e,t,r){var n;try{n=r(302);}catch(e){"undefined"!=typeof window&&(n=window.esprima);}var i=r(10);e.exports=new i("tag:yaml.org,2002:js/function",{kind:"scalar",resolve:function(e){if(null===e)return !1;try{var t="("+e+")",r=n.parse(t,{range:!0});return "Program"===r.type&&1===r.body.length&&"ExpressionStatement"===r.body[0].type&&("ArrowFunctionExpression"===r.body[0].expression.type||"FunctionExpression"===r.body[0].expression.type)}catch(e){return !1}},construct:function(e){var t,r="("+e+")",i=n.parse(r,{range:!0}),o=[];if("Program"!==i.type||1!==i.body.length||"ExpressionStatement"!==i.body[0].type||"ArrowFunctionExpression"!==i.body[0].expression.type&&"FunctionExpression"!==i.body[0].expression.type)throw new Error("Failed to resolve function");return i.body[0].expression.params.forEach((function(e){o.push(e.name);})),t=i.body[0].expression.body.range,"BlockStatement"===i.body[0].expression.body.type?new Function(o,r.slice(t[0]+1,t[1]-1)):new Function(o,"return "+r.slice(t[0],t[1]))},predicate:function(e){return "[object Function]"===Object.prototype.toString.call(e)},represent:function(e){return e.toString()}});},function(e,t,r){var n;n=function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={exports:{},id:n,loaded:!1};return e[n].call(i.exports,i,i.exports,r),i.loaded=!0,i.exports}return r.m=e,r.c=t,r.p="",r(0)}([function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(1),i=r(3),o=r(8),a=r(15);function s(e,t,r){var a=null,s=function(e,t){r&&r(e,t),a&&a.visit(e,t);},u="function"==typeof r?s:null,l=!1;if(t){l="boolean"==typeof t.comment&&t.comment;var c="boolean"==typeof t.attachComment&&t.attachComment;(l||c)&&((a=new n.CommentHandler).attach=c,t.comment=!0,u=s);}var h,p=!1;t&&"string"==typeof t.sourceType&&(p="module"===t.sourceType),h=t&&"boolean"==typeof t.jsx&&t.jsx?new i.JSXParser(e,t,u):new o.Parser(e,t,u);var f=p?h.parseModule():h.parseScript();return l&&a&&(f.comments=a.comments),h.config.tokens&&(f.tokens=h.tokens),h.config.tolerant&&(f.errors=h.errorHandler.errors),f}t.parse=s,t.parseModule=function(e,t,r){var n=t||{};return n.sourceType="module",s(e,n,r)},t.parseScript=function(e,t,r){var n=t||{};return n.sourceType="script",s(e,n,r)},t.tokenize=function(e,t,r){var n,i=new a.Tokenizer(e,t);n=[];try{for(;;){var o=i.getNextToken();if(!o)break;r&&(o=r(o)),n.push(o);}}catch(e){i.errorHandler.tolerate(e);}return i.errorHandler.tolerant&&(n.errors=i.errors()),n};var u=r(2);t.Syntax=u.Syntax,t.version="4.0.1";},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(2),i=function(){function e(){this.attach=!1,this.comments=[],this.stack=[],this.leading=[],this.trailing=[];}return e.prototype.insertInnerComments=function(e,t){if(e.type===n.Syntax.BlockStatement&&0===e.body.length){for(var r=[],i=this.leading.length-1;i>=0;--i){var o=this.leading[i];t.end.offset>=o.start&&(r.unshift(o.comment),this.leading.splice(i,1),this.trailing.splice(i,1));}r.length&&(e.innerComments=r);}},e.prototype.findTrailingComments=function(e){var t=[];if(this.trailing.length>0){for(var r=this.trailing.length-1;r>=0;--r){var n=this.trailing[r];n.start>=e.end.offset&&t.unshift(n.comment);}return this.trailing.length=0,t}var i=this.stack[this.stack.length-1];if(i&&i.node.trailingComments){var o=i.node.trailingComments[0];o&&o.range[0]>=e.end.offset&&(t=i.node.trailingComments,delete i.node.trailingComments);}return t},e.prototype.findLeadingComments=function(e){for(var t,r=[];this.stack.length>0&&((o=this.stack[this.stack.length-1])&&o.start>=e.start.offset);)t=o.node,this.stack.pop();if(t){for(var n=(t.leadingComments?t.leadingComments.length:0)-1;n>=0;--n){var i=t.leadingComments[n];i.range[1]<=e.start.offset&&(r.unshift(i),t.leadingComments.splice(n,1));}return t.leadingComments&&0===t.leadingComments.length&&delete t.leadingComments,r}for(n=this.leading.length-1;n>=0;--n){var o;(o=this.leading[n]).start<=e.start.offset&&(r.unshift(o.comment),this.leading.splice(n,1));}return r},e.prototype.visitNode=function(e,t){if(!(e.type===n.Syntax.Program&&e.body.length>0)){this.insertInnerComments(e,t);var r=this.findTrailingComments(t),i=this.findLeadingComments(t);i.length>0&&(e.leadingComments=i),r.length>0&&(e.trailingComments=r),this.stack.push({node:e,start:t.start.offset});}},e.prototype.visitComment=function(e,t){var r="L"===e.type[0]?"Line":"Block",n={type:r,value:e.value};if(e.range&&(n.range=e.range),e.loc&&(n.loc=e.loc),this.comments.push(n),this.attach){var i={comment:{type:r,value:e.value,range:[t.start.offset,t.end.offset]},start:t.start.offset};e.loc&&(i.comment.loc=e.loc),e.type=r,this.leading.push(i),this.trailing.push(i);}},e.prototype.visit=function(e,t){"LineComment"===e.type||"BlockComment"===e.type?this.visitComment(e,t):this.attach&&this.visitNode(e,t);},e}();t.CommentHandler=i;},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Syntax={AssignmentExpression:"AssignmentExpression",AssignmentPattern:"AssignmentPattern",ArrayExpression:"ArrayExpression",ArrayPattern:"ArrayPattern",ArrowFunctionExpression:"ArrowFunctionExpression",AwaitExpression:"AwaitExpression",BlockStatement:"BlockStatement",BinaryExpression:"BinaryExpression",BreakStatement:"BreakStatement",CallExpression:"CallExpression",CatchClause:"CatchClause",ClassBody:"ClassBody",ClassDeclaration:"ClassDeclaration",ClassExpression:"ClassExpression",ConditionalExpression:"ConditionalExpression",ContinueStatement:"ContinueStatement",DoWhileStatement:"DoWhileStatement",DebuggerStatement:"DebuggerStatement",EmptyStatement:"EmptyStatement",ExportAllDeclaration:"ExportAllDeclaration",ExportDefaultDeclaration:"ExportDefaultDeclaration",ExportNamedDeclaration:"ExportNamedDeclaration",ExportSpecifier:"ExportSpecifier",ExpressionStatement:"ExpressionStatement",ForStatement:"ForStatement",ForOfStatement:"ForOfStatement",ForInStatement:"ForInStatement",FunctionDeclaration:"FunctionDeclaration",FunctionExpression:"FunctionExpression",Identifier:"Identifier",IfStatement:"IfStatement",ImportDeclaration:"ImportDeclaration",ImportDefaultSpecifier:"ImportDefaultSpecifier",ImportNamespaceSpecifier:"ImportNamespaceSpecifier",ImportSpecifier:"ImportSpecifier",Literal:"Literal",LabeledStatement:"LabeledStatement",LogicalExpression:"LogicalExpression",MemberExpression:"MemberExpression",MetaProperty:"MetaProperty",MethodDefinition:"MethodDefinition",NewExpression:"NewExpression",ObjectExpression:"ObjectExpression",ObjectPattern:"ObjectPattern",Program:"Program",Property:"Property",RestElement:"RestElement",ReturnStatement:"ReturnStatement",SequenceExpression:"SequenceExpression",SpreadElement:"SpreadElement",Super:"Super",SwitchCase:"SwitchCase",SwitchStatement:"SwitchStatement",TaggedTemplateExpression:"TaggedTemplateExpression",TemplateElement:"TemplateElement",TemplateLiteral:"TemplateLiteral",ThisExpression:"ThisExpression",ThrowStatement:"ThrowStatement",TryStatement:"TryStatement",UnaryExpression:"UnaryExpression",UpdateExpression:"UpdateExpression",VariableDeclaration:"VariableDeclaration",VariableDeclarator:"VariableDeclarator",WhileStatement:"WhileStatement",WithStatement:"WithStatement",YieldExpression:"YieldExpression"};},function(e,t,r){var n,i=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0});var o=r(4),a=r(5),s=r(6),u=r(7),l=r(8),c=r(13),h=r(14);function p(e){var t;switch(e.type){case s.JSXSyntax.JSXIdentifier:t=e.name;break;case s.JSXSyntax.JSXNamespacedName:var r=e;t=p(r.namespace)+":"+p(r.name);break;case s.JSXSyntax.JSXMemberExpression:var n=e;t=p(n.object)+"."+p(n.property);}return t}c.TokenName[100]="JSXIdentifier",c.TokenName[101]="JSXText";var f=function(e){function t(t,r,n){return e.call(this,t,r,n)||this}return i(t,e),t.prototype.parsePrimaryExpression=function(){return this.match("<")?this.parseJSXRoot():e.prototype.parsePrimaryExpression.call(this)},t.prototype.startJSX=function(){this.scanner.index=this.startMarker.index,this.scanner.lineNumber=this.startMarker.line,this.scanner.lineStart=this.startMarker.index-this.startMarker.column;},t.prototype.finishJSX=function(){this.nextToken();},t.prototype.reenterJSX=function(){this.startJSX(),this.expectJSX("}"),this.config.tokens&&this.tokens.pop();},t.prototype.createJSXNode=function(){return this.collectComments(),{index:this.scanner.index,line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}},t.prototype.createJSXChildNode=function(){return {index:this.scanner.index,line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}},t.prototype.scanXHTMLEntity=function(e){for(var t="&",r=!0,n=!1,i=!1,a=!1;!this.scanner.eof()&&r&&!n;){var s=this.scanner.source[this.scanner.index];if(s===e)break;if(n=";"===s,t+=s,++this.scanner.index,!n)switch(t.length){case 2:i="#"===s;break;case 3:i&&(r=(a="x"===s)||o.Character.isDecimalDigit(s.charCodeAt(0)),i=i&&!a);break;default:r=(r=r&&!(i&&!o.Character.isDecimalDigit(s.charCodeAt(0))))&&!(a&&!o.Character.isHexDigit(s.charCodeAt(0)));}}if(r&&n&&t.length>2){var u=t.substr(1,t.length-2);i&&u.length>1?t=String.fromCharCode(parseInt(u.substr(1),10)):a&&u.length>2?t=String.fromCharCode(parseInt("0"+u.substr(1),16)):i||a||!h.XHTMLEntities[u]||(t=h.XHTMLEntities[u]);}return t},t.prototype.lexJSX=function(){var e=this.scanner.source.charCodeAt(this.scanner.index);if(60===e||62===e||47===e||58===e||61===e||123===e||125===e)return {type:7,value:s=this.scanner.source[this.scanner.index++],lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:this.scanner.index-1,end:this.scanner.index};if(34===e||39===e){for(var t=this.scanner.index,r=this.scanner.source[this.scanner.index++],n="";!this.scanner.eof()&&(u=this.scanner.source[this.scanner.index++])!==r;)n+="&"===u?this.scanXHTMLEntity(r):u;return {type:8,value:n,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:t,end:this.scanner.index}}if(46===e){var i=this.scanner.source.charCodeAt(this.scanner.index+1),a=this.scanner.source.charCodeAt(this.scanner.index+2),s=46===i&&46===a?"...":".";return t=this.scanner.index,this.scanner.index+=s.length,{type:7,value:s,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:t,end:this.scanner.index}}if(96===e)return {type:10,value:"",lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:this.scanner.index,end:this.scanner.index};if(o.Character.isIdentifierStart(e)&&92!==e){for(t=this.scanner.index,++this.scanner.index;!this.scanner.eof();){var u=this.scanner.source.charCodeAt(this.scanner.index);if(o.Character.isIdentifierPart(u)&&92!==u)++this.scanner.index;else {if(45!==u)break;++this.scanner.index;}}return {type:100,value:this.scanner.source.slice(t,this.scanner.index),lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:t,end:this.scanner.index}}return this.scanner.lex()},t.prototype.nextJSXToken=function(){this.collectComments(),this.startMarker.index=this.scanner.index,this.startMarker.line=this.scanner.lineNumber,this.startMarker.column=this.scanner.index-this.scanner.lineStart;var e=this.lexJSX();return this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart,this.config.tokens&&this.tokens.push(this.convertToken(e)),e},t.prototype.nextJSXText=function(){this.startMarker.index=this.scanner.index,this.startMarker.line=this.scanner.lineNumber,this.startMarker.column=this.scanner.index-this.scanner.lineStart;for(var e=this.scanner.index,t="";!this.scanner.eof();){var r=this.scanner.source[this.scanner.index];if("{"===r||"<"===r)break;++this.scanner.index,t+=r,o.Character.isLineTerminator(r.charCodeAt(0))&&(++this.scanner.lineNumber,"\r"===r&&"\n"===this.scanner.source[this.scanner.index]&&++this.scanner.index,this.scanner.lineStart=this.scanner.index);}this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart;var n={type:101,value:t,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:e,end:this.scanner.index};return t.length>0&&this.config.tokens&&this.tokens.push(this.convertToken(n)),n},t.prototype.peekJSXToken=function(){var e=this.scanner.saveState();this.scanner.scanComments();var t=this.lexJSX();return this.scanner.restoreState(e),t},t.prototype.expectJSX=function(e){var t=this.nextJSXToken();7===t.type&&t.value===e||this.throwUnexpectedToken(t);},t.prototype.matchJSX=function(e){var t=this.peekJSXToken();return 7===t.type&&t.value===e},t.prototype.parseJSXIdentifier=function(){var e=this.createJSXNode(),t=this.nextJSXToken();return 100!==t.type&&this.throwUnexpectedToken(t),this.finalize(e,new a.JSXIdentifier(t.value))},t.prototype.parseJSXElementName=function(){var e=this.createJSXNode(),t=this.parseJSXIdentifier();if(this.matchJSX(":")){var r=t;this.expectJSX(":");var n=this.parseJSXIdentifier();t=this.finalize(e,new a.JSXNamespacedName(r,n));}else if(this.matchJSX("."))for(;this.matchJSX(".");){var i=t;this.expectJSX(".");var o=this.parseJSXIdentifier();t=this.finalize(e,new a.JSXMemberExpression(i,o));}return t},t.prototype.parseJSXAttributeName=function(){var e,t=this.createJSXNode(),r=this.parseJSXIdentifier();if(this.matchJSX(":")){var n=r;this.expectJSX(":");var i=this.parseJSXIdentifier();e=this.finalize(t,new a.JSXNamespacedName(n,i));}else e=r;return e},t.prototype.parseJSXStringLiteralAttribute=function(){var e=this.createJSXNode(),t=this.nextJSXToken();8!==t.type&&this.throwUnexpectedToken(t);var r=this.getTokenRaw(t);return this.finalize(e,new u.Literal(t.value,r))},t.prototype.parseJSXExpressionAttribute=function(){var e=this.createJSXNode();this.expectJSX("{"),this.finishJSX(),this.match("}")&&this.tolerateError("JSX attributes must only be assigned a non-empty expression");var t=this.parseAssignmentExpression();return this.reenterJSX(),this.finalize(e,new a.JSXExpressionContainer(t))},t.prototype.parseJSXAttributeValue=function(){return this.matchJSX("{")?this.parseJSXExpressionAttribute():this.matchJSX("<")?this.parseJSXElement():this.parseJSXStringLiteralAttribute()},t.prototype.parseJSXNameValueAttribute=function(){var e=this.createJSXNode(),t=this.parseJSXAttributeName(),r=null;return this.matchJSX("=")&&(this.expectJSX("="),r=this.parseJSXAttributeValue()),this.finalize(e,new a.JSXAttribute(t,r))},t.prototype.parseJSXSpreadAttribute=function(){var e=this.createJSXNode();this.expectJSX("{"),this.expectJSX("..."),this.finishJSX();var t=this.parseAssignmentExpression();return this.reenterJSX(),this.finalize(e,new a.JSXSpreadAttribute(t))},t.prototype.parseJSXAttributes=function(){for(var e=[];!this.matchJSX("/")&&!this.matchJSX(">");){var t=this.matchJSX("{")?this.parseJSXSpreadAttribute():this.parseJSXNameValueAttribute();e.push(t);}return e},t.prototype.parseJSXOpeningElement=function(){var e=this.createJSXNode();this.expectJSX("<");var t=this.parseJSXElementName(),r=this.parseJSXAttributes(),n=this.matchJSX("/");return n&&this.expectJSX("/"),this.expectJSX(">"),this.finalize(e,new a.JSXOpeningElement(t,n,r))},t.prototype.parseJSXBoundaryElement=function(){var e=this.createJSXNode();if(this.expectJSX("<"),this.matchJSX("/")){this.expectJSX("/");var t=this.parseJSXElementName();return this.expectJSX(">"),this.finalize(e,new a.JSXClosingElement(t))}var r=this.parseJSXElementName(),n=this.parseJSXAttributes(),i=this.matchJSX("/");return i&&this.expectJSX("/"),this.expectJSX(">"),this.finalize(e,new a.JSXOpeningElement(r,i,n))},t.prototype.parseJSXEmptyExpression=function(){var e=this.createJSXChildNode();return this.collectComments(),this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart,this.finalize(e,new a.JSXEmptyExpression)},t.prototype.parseJSXExpressionContainer=function(){var e,t=this.createJSXNode();return this.expectJSX("{"),this.matchJSX("}")?(e=this.parseJSXEmptyExpression(),this.expectJSX("}")):(this.finishJSX(),e=this.parseAssignmentExpression(),this.reenterJSX()),this.finalize(t,new a.JSXExpressionContainer(e))},t.prototype.parseJSXChildren=function(){for(var e=[];!this.scanner.eof();){var t=this.createJSXChildNode(),r=this.nextJSXText();if(r.start<r.end){var n=this.getTokenRaw(r),i=this.finalize(t,new a.JSXText(r.value,n));e.push(i);}if("{"!==this.scanner.source[this.scanner.index])break;var o=this.parseJSXExpressionContainer();e.push(o);}return e},t.prototype.parseComplexJSXElement=function(e){for(var t=[];!this.scanner.eof();){e.children=e.children.concat(this.parseJSXChildren());var r=this.createJSXChildNode(),n=this.parseJSXBoundaryElement();if(n.type===s.JSXSyntax.JSXOpeningElement){var i=n;if(i.selfClosing){var o=this.finalize(r,new a.JSXElement(i,[],null));e.children.push(o);}else t.push(e),e={node:r,opening:i,closing:null,children:[]};}if(n.type===s.JSXSyntax.JSXClosingElement){e.closing=n;var u=p(e.opening.name);if(u!==p(e.closing.name)&&this.tolerateError("Expected corresponding JSX closing tag for %0",u),!(t.length>0))break;o=this.finalize(e.node,new a.JSXElement(e.opening,e.children,e.closing)),(e=t[t.length-1]).children.push(o),t.pop();}}return e},t.prototype.parseJSXElement=function(){var e=this.createJSXNode(),t=this.parseJSXOpeningElement(),r=[],n=null;if(!t.selfClosing){var i=this.parseComplexJSXElement({node:e,opening:t,closing:n,children:r});r=i.children,n=i.closing;}return this.finalize(e,new a.JSXElement(t,r,n))},t.prototype.parseJSXRoot=function(){this.config.tokens&&this.tokens.pop(),this.startJSX();var e=this.parseJSXElement();return this.finishJSX(),e},t.prototype.isStartOfExpression=function(){return e.prototype.isStartOfExpression.call(this)||this.match("<")},t}(l.Parser);t.JSXParser=f;},function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var r={NonAsciiIdentifierStart:/[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,NonAsciiIdentifierPart:/[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/};t.Character={fromCodePoint:function(e){return e<65536?String.fromCharCode(e):String.fromCharCode(55296+(e-65536>>10))+String.fromCharCode(56320+(e-65536&1023))},isWhiteSpace:function(e){return 32===e||9===e||11===e||12===e||160===e||e>=5760&&[5760,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8239,8287,12288,65279].indexOf(e)>=0},isLineTerminator:function(e){return 10===e||13===e||8232===e||8233===e},isIdentifierStart:function(e){return 36===e||95===e||e>=65&&e<=90||e>=97&&e<=122||92===e||e>=128&&r.NonAsciiIdentifierStart.test(t.Character.fromCodePoint(e))},isIdentifierPart:function(e){return 36===e||95===e||e>=65&&e<=90||e>=97&&e<=122||e>=48&&e<=57||92===e||e>=128&&r.NonAsciiIdentifierPart.test(t.Character.fromCodePoint(e))},isDecimalDigit:function(e){return e>=48&&e<=57},isHexDigit:function(e){return e>=48&&e<=57||e>=65&&e<=70||e>=97&&e<=102},isOctalDigit:function(e){return e>=48&&e<=55}};},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(6),i=function(e){this.type=n.JSXSyntax.JSXClosingElement,this.name=e;};t.JSXClosingElement=i;var o=function(e,t,r){this.type=n.JSXSyntax.JSXElement,this.openingElement=e,this.children=t,this.closingElement=r;};t.JSXElement=o;var a=function(){this.type=n.JSXSyntax.JSXEmptyExpression;};t.JSXEmptyExpression=a;var s=function(e){this.type=n.JSXSyntax.JSXExpressionContainer,this.expression=e;};t.JSXExpressionContainer=s;var u=function(e){this.type=n.JSXSyntax.JSXIdentifier,this.name=e;};t.JSXIdentifier=u;var l=function(e,t){this.type=n.JSXSyntax.JSXMemberExpression,this.object=e,this.property=t;};t.JSXMemberExpression=l;var c=function(e,t){this.type=n.JSXSyntax.JSXAttribute,this.name=e,this.value=t;};t.JSXAttribute=c;var h=function(e,t){this.type=n.JSXSyntax.JSXNamespacedName,this.namespace=e,this.name=t;};t.JSXNamespacedName=h;var p=function(e,t,r){this.type=n.JSXSyntax.JSXOpeningElement,this.name=e,this.selfClosing=t,this.attributes=r;};t.JSXOpeningElement=p;var f=function(e){this.type=n.JSXSyntax.JSXSpreadAttribute,this.argument=e;};t.JSXSpreadAttribute=f;var d=function(e,t){this.type=n.JSXSyntax.JSXText,this.value=e,this.raw=t;};t.JSXText=d;},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.JSXSyntax={JSXAttribute:"JSXAttribute",JSXClosingElement:"JSXClosingElement",JSXElement:"JSXElement",JSXEmptyExpression:"JSXEmptyExpression",JSXExpressionContainer:"JSXExpressionContainer",JSXIdentifier:"JSXIdentifier",JSXMemberExpression:"JSXMemberExpression",JSXNamespacedName:"JSXNamespacedName",JSXOpeningElement:"JSXOpeningElement",JSXSpreadAttribute:"JSXSpreadAttribute",JSXText:"JSXText"};},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(2),i=function(e){this.type=n.Syntax.ArrayExpression,this.elements=e;};t.ArrayExpression=i;var o=function(e){this.type=n.Syntax.ArrayPattern,this.elements=e;};t.ArrayPattern=o;var a=function(e,t,r){this.type=n.Syntax.ArrowFunctionExpression,this.id=null,this.params=e,this.body=t,this.generator=!1,this.expression=r,this.async=!1;};t.ArrowFunctionExpression=a;var s=function(e,t,r){this.type=n.Syntax.AssignmentExpression,this.operator=e,this.left=t,this.right=r;};t.AssignmentExpression=s;var u=function(e,t){this.type=n.Syntax.AssignmentPattern,this.left=e,this.right=t;};t.AssignmentPattern=u;var l=function(e,t,r){this.type=n.Syntax.ArrowFunctionExpression,this.id=null,this.params=e,this.body=t,this.generator=!1,this.expression=r,this.async=!0;};t.AsyncArrowFunctionExpression=l;var c=function(e,t,r){this.type=n.Syntax.FunctionDeclaration,this.id=e,this.params=t,this.body=r,this.generator=!1,this.expression=!1,this.async=!0;};t.AsyncFunctionDeclaration=c;var h=function(e,t,r){this.type=n.Syntax.FunctionExpression,this.id=e,this.params=t,this.body=r,this.generator=!1,this.expression=!1,this.async=!0;};t.AsyncFunctionExpression=h;var p=function(e){this.type=n.Syntax.AwaitExpression,this.argument=e;};t.AwaitExpression=p;var f=function(e,t,r){var i="||"===e||"&&"===e;this.type=i?n.Syntax.LogicalExpression:n.Syntax.BinaryExpression,this.operator=e,this.left=t,this.right=r;};t.BinaryExpression=f;var d=function(e){this.type=n.Syntax.BlockStatement,this.body=e;};t.BlockStatement=d;var m=function(e){this.type=n.Syntax.BreakStatement,this.label=e;};t.BreakStatement=m;var y=function(e,t){this.type=n.Syntax.CallExpression,this.callee=e,this.arguments=t;};t.CallExpression=y;var v=function(e,t){this.type=n.Syntax.CatchClause,this.param=e,this.body=t;};t.CatchClause=v;var _=function(e){this.type=n.Syntax.ClassBody,this.body=e;};t.ClassBody=_;var g=function(e,t,r){this.type=n.Syntax.ClassDeclaration,this.id=e,this.superClass=t,this.body=r;};t.ClassDeclaration=g;var b=function(e,t,r){this.type=n.Syntax.ClassExpression,this.id=e,this.superClass=t,this.body=r;};t.ClassExpression=b;var x=function(e,t){this.type=n.Syntax.MemberExpression,this.computed=!0,this.object=e,this.property=t;};t.ComputedMemberExpression=x;var w=function(e,t,r){this.type=n.Syntax.ConditionalExpression,this.test=e,this.consequent=t,this.alternate=r;};t.ConditionalExpression=w;var E=function(e){this.type=n.Syntax.ContinueStatement,this.label=e;};t.ContinueStatement=E;var D=function(){this.type=n.Syntax.DebuggerStatement;};t.DebuggerStatement=D;var S=function(e,t){this.type=n.Syntax.ExpressionStatement,this.expression=e,this.directive=t;};t.Directive=S;var C=function(e,t){this.type=n.Syntax.DoWhileStatement,this.body=e,this.test=t;};t.DoWhileStatement=C;var A=function(){this.type=n.Syntax.EmptyStatement;};t.EmptyStatement=A;var N=function(e){this.type=n.Syntax.ExportAllDeclaration,this.source=e;};t.ExportAllDeclaration=N;var T=function(e){this.type=n.Syntax.ExportDefaultDeclaration,this.declaration=e;};t.ExportDefaultDeclaration=T;var O=function(e,t,r){this.type=n.Syntax.ExportNamedDeclaration,this.declaration=e,this.specifiers=t,this.source=r;};t.ExportNamedDeclaration=O;var F=function(e,t){this.type=n.Syntax.ExportSpecifier,this.exported=t,this.local=e;};t.ExportSpecifier=F;var k=function(e){this.type=n.Syntax.ExpressionStatement,this.expression=e;};t.ExpressionStatement=k;var P=function(e,t,r){this.type=n.Syntax.ForInStatement,this.left=e,this.right=t,this.body=r,this.each=!1;};t.ForInStatement=P;var I=function(e,t,r){this.type=n.Syntax.ForOfStatement,this.left=e,this.right=t,this.body=r;};t.ForOfStatement=I;var L=function(e,t,r,i){this.type=n.Syntax.ForStatement,this.init=e,this.test=t,this.update=r,this.body=i;};t.ForStatement=L;var M=function(e,t,r,i){this.type=n.Syntax.FunctionDeclaration,this.id=e,this.params=t,this.body=r,this.generator=i,this.expression=!1,this.async=!1;};t.FunctionDeclaration=M;var B=function(e,t,r,i){this.type=n.Syntax.FunctionExpression,this.id=e,this.params=t,this.body=r,this.generator=i,this.expression=!1,this.async=!1;};t.FunctionExpression=B;var j=function(e){this.type=n.Syntax.Identifier,this.name=e;};t.Identifier=j;var R=function(e,t,r){this.type=n.Syntax.IfStatement,this.test=e,this.consequent=t,this.alternate=r;};t.IfStatement=R;var z=function(e,t){this.type=n.Syntax.ImportDeclaration,this.specifiers=e,this.source=t;};t.ImportDeclaration=z;var U=function(e){this.type=n.Syntax.ImportDefaultSpecifier,this.local=e;};t.ImportDefaultSpecifier=U;var G=function(e){this.type=n.Syntax.ImportNamespaceSpecifier,this.local=e;};t.ImportNamespaceSpecifier=G;var X=function(e,t){this.type=n.Syntax.ImportSpecifier,this.local=e,this.imported=t;};t.ImportSpecifier=X;var q=function(e,t){this.type=n.Syntax.LabeledStatement,this.label=e,this.body=t;};t.LabeledStatement=q;var W=function(e,t){this.type=n.Syntax.Literal,this.value=e,this.raw=t;};t.Literal=W;var H=function(e,t){this.type=n.Syntax.MetaProperty,this.meta=e,this.property=t;};t.MetaProperty=H;var J=function(e,t,r,i,o){this.type=n.Syntax.MethodDefinition,this.key=e,this.computed=t,this.value=r,this.kind=i,this.static=o;};t.MethodDefinition=J;var Y=function(e){this.type=n.Syntax.Program,this.body=e,this.sourceType="module";};t.Module=Y;var V=function(e,t){this.type=n.Syntax.NewExpression,this.callee=e,this.arguments=t;};t.NewExpression=V;var K=function(e){this.type=n.Syntax.ObjectExpression,this.properties=e;};t.ObjectExpression=K;var $=function(e){this.type=n.Syntax.ObjectPattern,this.properties=e;};t.ObjectPattern=$;var Q=function(e,t,r,i,o,a){this.type=n.Syntax.Property,this.key=t,this.computed=r,this.value=i,this.kind=e,this.method=o,this.shorthand=a;};t.Property=Q;var Z=function(e,t,r,i){this.type=n.Syntax.Literal,this.value=e,this.raw=t,this.regex={pattern:r,flags:i};};t.RegexLiteral=Z;var ee=function(e){this.type=n.Syntax.RestElement,this.argument=e;};t.RestElement=ee;var te=function(e){this.type=n.Syntax.ReturnStatement,this.argument=e;};t.ReturnStatement=te;var re=function(e){this.type=n.Syntax.Program,this.body=e,this.sourceType="script";};t.Script=re;var ne=function(e){this.type=n.Syntax.SequenceExpression,this.expressions=e;};t.SequenceExpression=ne;var ie=function(e){this.type=n.Syntax.SpreadElement,this.argument=e;};t.SpreadElement=ie;var oe=function(e,t){this.type=n.Syntax.MemberExpression,this.computed=!1,this.object=e,this.property=t;};t.StaticMemberExpression=oe;var ae=function(){this.type=n.Syntax.Super;};t.Super=ae;var se=function(e,t){this.type=n.Syntax.SwitchCase,this.test=e,this.consequent=t;};t.SwitchCase=se;var ue=function(e,t){this.type=n.Syntax.SwitchStatement,this.discriminant=e,this.cases=t;};t.SwitchStatement=ue;var le=function(e,t){this.type=n.Syntax.TaggedTemplateExpression,this.tag=e,this.quasi=t;};t.TaggedTemplateExpression=le;var ce=function(e,t){this.type=n.Syntax.TemplateElement,this.value=e,this.tail=t;};t.TemplateElement=ce;var he=function(e,t){this.type=n.Syntax.TemplateLiteral,this.quasis=e,this.expressions=t;};t.TemplateLiteral=he;var pe=function(){this.type=n.Syntax.ThisExpression;};t.ThisExpression=pe;var fe=function(e){this.type=n.Syntax.ThrowStatement,this.argument=e;};t.ThrowStatement=fe;var de=function(e,t,r){this.type=n.Syntax.TryStatement,this.block=e,this.handler=t,this.finalizer=r;};t.TryStatement=de;var me=function(e,t){this.type=n.Syntax.UnaryExpression,this.operator=e,this.argument=t,this.prefix=!0;};t.UnaryExpression=me;var ye=function(e,t,r){this.type=n.Syntax.UpdateExpression,this.operator=e,this.argument=t,this.prefix=r;};t.UpdateExpression=ye;var ve=function(e,t){this.type=n.Syntax.VariableDeclaration,this.declarations=e,this.kind=t;};t.VariableDeclaration=ve;var _e=function(e,t){this.type=n.Syntax.VariableDeclarator,this.id=e,this.init=t;};t.VariableDeclarator=_e;var ge=function(e,t){this.type=n.Syntax.WhileStatement,this.test=e,this.body=t;};t.WhileStatement=ge;var be=function(e,t){this.type=n.Syntax.WithStatement,this.object=e,this.body=t;};t.WithStatement=be;var xe=function(e,t){this.type=n.Syntax.YieldExpression,this.argument=e,this.delegate=t;};t.YieldExpression=xe;},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(9),i=r(10),o=r(11),a=r(7),s=r(12),u=r(2),l=r(13),c=function(){function e(e,t,r){void 0===t&&(t={}),this.config={range:"boolean"==typeof t.range&&t.range,loc:"boolean"==typeof t.loc&&t.loc,source:null,tokens:"boolean"==typeof t.tokens&&t.tokens,comment:"boolean"==typeof t.comment&&t.comment,tolerant:"boolean"==typeof t.tolerant&&t.tolerant},this.config.loc&&t.source&&null!==t.source&&(this.config.source=String(t.source)),this.delegate=r,this.errorHandler=new i.ErrorHandler,this.errorHandler.tolerant=this.config.tolerant,this.scanner=new s.Scanner(e,this.errorHandler),this.scanner.trackComment=this.config.comment,this.operatorPrecedence={")":0,";":0,",":0,"=":0,"]":0,"||":1,"&&":2,"|":3,"^":4,"&":5,"==":6,"!=":6,"===":6,"!==":6,"<":7,">":7,"<=":7,">=":7,"<<":8,">>":8,">>>":8,"+":9,"-":9,"*":11,"/":11,"%":11},this.lookahead={type:2,value:"",lineNumber:this.scanner.lineNumber,lineStart:0,start:0,end:0},this.hasLineTerminator=!1,this.context={isModule:!1,await:!1,allowIn:!0,allowStrictDirective:!0,allowYield:!0,firstCoverInitializedNameError:null,isAssignmentTarget:!1,isBindingElement:!1,inFunctionBody:!1,inIteration:!1,inSwitch:!1,labelSet:{},strict:!1},this.tokens=[],this.startMarker={index:0,line:this.scanner.lineNumber,column:0},this.lastMarker={index:0,line:this.scanner.lineNumber,column:0},this.nextToken(),this.lastMarker={index:this.scanner.index,line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart};}return e.prototype.throwError=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];var i=Array.prototype.slice.call(arguments,1),o=e.replace(/%(\d)/g,(function(e,t){return n.assert(t<i.length,"Message reference must be in range"),i[t]})),a=this.lastMarker.index,s=this.lastMarker.line,u=this.lastMarker.column+1;throw this.errorHandler.createError(a,s,u,o)},e.prototype.tolerateError=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];var i=Array.prototype.slice.call(arguments,1),o=e.replace(/%(\d)/g,(function(e,t){return n.assert(t<i.length,"Message reference must be in range"),i[t]})),a=this.lastMarker.index,s=this.scanner.lineNumber,u=this.lastMarker.column+1;this.errorHandler.tolerateError(a,s,u,o);},e.prototype.unexpectedTokenError=function(e,t){var r,n=t||o.Messages.UnexpectedToken;if(e?(t||(n=2===e.type?o.Messages.UnexpectedEOS:3===e.type?o.Messages.UnexpectedIdentifier:6===e.type?o.Messages.UnexpectedNumber:8===e.type?o.Messages.UnexpectedString:10===e.type?o.Messages.UnexpectedTemplate:o.Messages.UnexpectedToken,4===e.type&&(this.scanner.isFutureReservedWord(e.value)?n=o.Messages.UnexpectedReserved:this.context.strict&&this.scanner.isStrictModeReservedWord(e.value)&&(n=o.Messages.StrictReservedWord))),r=e.value):r="ILLEGAL",n=n.replace("%0",r),e&&"number"==typeof e.lineNumber){var i=e.start,a=e.lineNumber,s=this.lastMarker.index-this.lastMarker.column,u=e.start-s+1;return this.errorHandler.createError(i,a,u,n)}return i=this.lastMarker.index,a=this.lastMarker.line,u=this.lastMarker.column+1,this.errorHandler.createError(i,a,u,n)},e.prototype.throwUnexpectedToken=function(e,t){throw this.unexpectedTokenError(e,t)},e.prototype.tolerateUnexpectedToken=function(e,t){this.errorHandler.tolerate(this.unexpectedTokenError(e,t));},e.prototype.collectComments=function(){if(this.config.comment){var e=this.scanner.scanComments();if(e.length>0&&this.delegate)for(var t=0;t<e.length;++t){var r=e[t],n=void 0;n={type:r.multiLine?"BlockComment":"LineComment",value:this.scanner.source.slice(r.slice[0],r.slice[1])},this.config.range&&(n.range=r.range),this.config.loc&&(n.loc=r.loc);var i={start:{line:r.loc.start.line,column:r.loc.start.column,offset:r.range[0]},end:{line:r.loc.end.line,column:r.loc.end.column,offset:r.range[1]}};this.delegate(n,i);}}else this.scanner.scanComments();},e.prototype.getTokenRaw=function(e){return this.scanner.source.slice(e.start,e.end)},e.prototype.convertToken=function(e){var t={type:l.TokenName[e.type],value:this.getTokenRaw(e)};if(this.config.range&&(t.range=[e.start,e.end]),this.config.loc&&(t.loc={start:{line:this.startMarker.line,column:this.startMarker.column},end:{line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}}),9===e.type){var r=e.pattern,n=e.flags;t.regex={pattern:r,flags:n};}return t},e.prototype.nextToken=function(){var e=this.lookahead;this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart,this.collectComments(),this.scanner.index!==this.startMarker.index&&(this.startMarker.index=this.scanner.index,this.startMarker.line=this.scanner.lineNumber,this.startMarker.column=this.scanner.index-this.scanner.lineStart);var t=this.scanner.lex();return this.hasLineTerminator=e.lineNumber!==t.lineNumber,t&&this.context.strict&&3===t.type&&this.scanner.isStrictModeReservedWord(t.value)&&(t.type=4),this.lookahead=t,this.config.tokens&&2!==t.type&&this.tokens.push(this.convertToken(t)),e},e.prototype.nextRegexToken=function(){this.collectComments();var e=this.scanner.scanRegExp();return this.config.tokens&&(this.tokens.pop(),this.tokens.push(this.convertToken(e))),this.lookahead=e,this.nextToken(),e},e.prototype.createNode=function(){return {index:this.startMarker.index,line:this.startMarker.line,column:this.startMarker.column}},e.prototype.startNode=function(e,t){void 0===t&&(t=0);var r=e.start-e.lineStart,n=e.lineNumber;return r<0&&(r+=t,n--),{index:e.start,line:n,column:r}},e.prototype.finalize=function(e,t){if(this.config.range&&(t.range=[e.index,this.lastMarker.index]),this.config.loc&&(t.loc={start:{line:e.line,column:e.column},end:{line:this.lastMarker.line,column:this.lastMarker.column}},this.config.source&&(t.loc.source=this.config.source)),this.delegate){var r={start:{line:e.line,column:e.column,offset:e.index},end:{line:this.lastMarker.line,column:this.lastMarker.column,offset:this.lastMarker.index}};this.delegate(t,r);}return t},e.prototype.expect=function(e){var t=this.nextToken();7===t.type&&t.value===e||this.throwUnexpectedToken(t);},e.prototype.expectCommaSeparator=function(){if(this.config.tolerant){var e=this.lookahead;7===e.type&&","===e.value?this.nextToken():7===e.type&&";"===e.value?(this.nextToken(),this.tolerateUnexpectedToken(e)):this.tolerateUnexpectedToken(e,o.Messages.UnexpectedToken);}else this.expect(",");},e.prototype.expectKeyword=function(e){var t=this.nextToken();4===t.type&&t.value===e||this.throwUnexpectedToken(t);},e.prototype.match=function(e){return 7===this.lookahead.type&&this.lookahead.value===e},e.prototype.matchKeyword=function(e){return 4===this.lookahead.type&&this.lookahead.value===e},e.prototype.matchContextualKeyword=function(e){return 3===this.lookahead.type&&this.lookahead.value===e},e.prototype.matchAssign=function(){if(7!==this.lookahead.type)return !1;var e=this.lookahead.value;return "="===e||"*="===e||"**="===e||"/="===e||"%="===e||"+="===e||"-="===e||"<<="===e||">>="===e||">>>="===e||"&="===e||"^="===e||"|="===e},e.prototype.isolateCoverGrammar=function(e){var t=this.context.isBindingElement,r=this.context.isAssignmentTarget,n=this.context.firstCoverInitializedNameError;this.context.isBindingElement=!0,this.context.isAssignmentTarget=!0,this.context.firstCoverInitializedNameError=null;var i=e.call(this);return null!==this.context.firstCoverInitializedNameError&&this.throwUnexpectedToken(this.context.firstCoverInitializedNameError),this.context.isBindingElement=t,this.context.isAssignmentTarget=r,this.context.firstCoverInitializedNameError=n,i},e.prototype.inheritCoverGrammar=function(e){var t=this.context.isBindingElement,r=this.context.isAssignmentTarget,n=this.context.firstCoverInitializedNameError;this.context.isBindingElement=!0,this.context.isAssignmentTarget=!0,this.context.firstCoverInitializedNameError=null;var i=e.call(this);return this.context.isBindingElement=this.context.isBindingElement&&t,this.context.isAssignmentTarget=this.context.isAssignmentTarget&&r,this.context.firstCoverInitializedNameError=n||this.context.firstCoverInitializedNameError,i},e.prototype.consumeSemicolon=function(){this.match(";")?this.nextToken():this.hasLineTerminator||(2===this.lookahead.type||this.match("}")||this.throwUnexpectedToken(this.lookahead),this.lastMarker.index=this.startMarker.index,this.lastMarker.line=this.startMarker.line,this.lastMarker.column=this.startMarker.column);},e.prototype.parsePrimaryExpression=function(){var e,t,r,n=this.createNode();switch(this.lookahead.type){case 3:(this.context.isModule||this.context.await)&&"await"===this.lookahead.value&&this.tolerateUnexpectedToken(this.lookahead),e=this.matchAsyncFunction()?this.parseFunctionExpression():this.finalize(n,new a.Identifier(this.nextToken().value));break;case 6:case 8:this.context.strict&&this.lookahead.octal&&this.tolerateUnexpectedToken(this.lookahead,o.Messages.StrictOctalLiteral),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,t=this.nextToken(),r=this.getTokenRaw(t),e=this.finalize(n,new a.Literal(t.value,r));break;case 1:this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,t=this.nextToken(),r=this.getTokenRaw(t),e=this.finalize(n,new a.Literal("true"===t.value,r));break;case 5:this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,t=this.nextToken(),r=this.getTokenRaw(t),e=this.finalize(n,new a.Literal(null,r));break;case 10:e=this.parseTemplateLiteral();break;case 7:switch(this.lookahead.value){case"(":this.context.isBindingElement=!1,e=this.inheritCoverGrammar(this.parseGroupExpression);break;case"[":e=this.inheritCoverGrammar(this.parseArrayInitializer);break;case"{":e=this.inheritCoverGrammar(this.parseObjectInitializer);break;case"/":case"/=":this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,this.scanner.index=this.startMarker.index,t=this.nextRegexToken(),r=this.getTokenRaw(t),e=this.finalize(n,new a.RegexLiteral(t.regex,r,t.pattern,t.flags));break;default:e=this.throwUnexpectedToken(this.nextToken());}break;case 4:!this.context.strict&&this.context.allowYield&&this.matchKeyword("yield")?e=this.parseIdentifierName():!this.context.strict&&this.matchKeyword("let")?e=this.finalize(n,new a.Identifier(this.nextToken().value)):(this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,this.matchKeyword("function")?e=this.parseFunctionExpression():this.matchKeyword("this")?(this.nextToken(),e=this.finalize(n,new a.ThisExpression)):e=this.matchKeyword("class")?this.parseClassExpression():this.throwUnexpectedToken(this.nextToken()));break;default:e=this.throwUnexpectedToken(this.nextToken());}return e},e.prototype.parseSpreadElement=function(){var e=this.createNode();this.expect("...");var t=this.inheritCoverGrammar(this.parseAssignmentExpression);return this.finalize(e,new a.SpreadElement(t))},e.prototype.parseArrayInitializer=function(){var e=this.createNode(),t=[];for(this.expect("[");!this.match("]");)if(this.match(","))this.nextToken(),t.push(null);else if(this.match("...")){var r=this.parseSpreadElement();this.match("]")||(this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,this.expect(",")),t.push(r);}else t.push(this.inheritCoverGrammar(this.parseAssignmentExpression)),this.match("]")||this.expect(",");return this.expect("]"),this.finalize(e,new a.ArrayExpression(t))},e.prototype.parsePropertyMethod=function(e){this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var t=this.context.strict,r=this.context.allowStrictDirective;this.context.allowStrictDirective=e.simple;var n=this.isolateCoverGrammar(this.parseFunctionSourceElements);return this.context.strict&&e.firstRestricted&&this.tolerateUnexpectedToken(e.firstRestricted,e.message),this.context.strict&&e.stricted&&this.tolerateUnexpectedToken(e.stricted,e.message),this.context.strict=t,this.context.allowStrictDirective=r,n},e.prototype.parsePropertyMethodFunction=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!0;var r=this.parseFormalParameters(),n=this.parsePropertyMethod(r);return this.context.allowYield=t,this.finalize(e,new a.FunctionExpression(null,r.params,n,!1))},e.prototype.parsePropertyMethodAsyncFunction=function(){var e=this.createNode(),t=this.context.allowYield,r=this.context.await;this.context.allowYield=!1,this.context.await=!0;var n=this.parseFormalParameters(),i=this.parsePropertyMethod(n);return this.context.allowYield=t,this.context.await=r,this.finalize(e,new a.AsyncFunctionExpression(null,n.params,i))},e.prototype.parseObjectPropertyKey=function(){var e,t=this.createNode(),r=this.nextToken();switch(r.type){case 8:case 6:this.context.strict&&r.octal&&this.tolerateUnexpectedToken(r,o.Messages.StrictOctalLiteral);var n=this.getTokenRaw(r);e=this.finalize(t,new a.Literal(r.value,n));break;case 3:case 1:case 5:case 4:e=this.finalize(t,new a.Identifier(r.value));break;case 7:"["===r.value?(e=this.isolateCoverGrammar(this.parseAssignmentExpression),this.expect("]")):e=this.throwUnexpectedToken(r);break;default:e=this.throwUnexpectedToken(r);}return e},e.prototype.isPropertyKey=function(e,t){return e.type===u.Syntax.Identifier&&e.name===t||e.type===u.Syntax.Literal&&e.value===t},e.prototype.parseObjectProperty=function(e){var t,r=this.createNode(),n=this.lookahead,i=null,s=null,u=!1,l=!1,c=!1,h=!1;if(3===n.type){var p=n.value;this.nextToken(),u=this.match("["),i=(h=!(this.hasLineTerminator||"async"!==p||this.match(":")||this.match("(")||this.match("*")||this.match(",")))?this.parseObjectPropertyKey():this.finalize(r,new a.Identifier(p));}else this.match("*")?this.nextToken():(u=this.match("["),i=this.parseObjectPropertyKey());var f=this.qualifiedPropertyName(this.lookahead);if(3===n.type&&!h&&"get"===n.value&&f)t="get",u=this.match("["),i=this.parseObjectPropertyKey(),this.context.allowYield=!1,s=this.parseGetterMethod();else if(3===n.type&&!h&&"set"===n.value&&f)t="set",u=this.match("["),i=this.parseObjectPropertyKey(),s=this.parseSetterMethod();else if(7===n.type&&"*"===n.value&&f)t="init",u=this.match("["),i=this.parseObjectPropertyKey(),s=this.parseGeneratorMethod(),l=!0;else if(i||this.throwUnexpectedToken(this.lookahead),t="init",this.match(":")&&!h)!u&&this.isPropertyKey(i,"__proto__")&&(e.value&&this.tolerateError(o.Messages.DuplicateProtoProperty),e.value=!0),this.nextToken(),s=this.inheritCoverGrammar(this.parseAssignmentExpression);else if(this.match("("))s=h?this.parsePropertyMethodAsyncFunction():this.parsePropertyMethodFunction(),l=!0;else if(3===n.type)if(p=this.finalize(r,new a.Identifier(n.value)),this.match("=")){this.context.firstCoverInitializedNameError=this.lookahead,this.nextToken(),c=!0;var d=this.isolateCoverGrammar(this.parseAssignmentExpression);s=this.finalize(r,new a.AssignmentPattern(p,d));}else c=!0,s=p;else this.throwUnexpectedToken(this.nextToken());return this.finalize(r,new a.Property(t,i,u,s,l,c))},e.prototype.parseObjectInitializer=function(){var e=this.createNode();this.expect("{");for(var t=[],r={value:!1};!this.match("}");)t.push(this.parseObjectProperty(r)),this.match("}")||this.expectCommaSeparator();return this.expect("}"),this.finalize(e,new a.ObjectExpression(t))},e.prototype.parseTemplateHead=function(){n.assert(this.lookahead.head,"Template literal must start with a template head");var e=this.createNode(),t=this.nextToken(),r=t.value,i=t.cooked;return this.finalize(e,new a.TemplateElement({raw:r,cooked:i},t.tail))},e.prototype.parseTemplateElement=function(){10!==this.lookahead.type&&this.throwUnexpectedToken();var e=this.createNode(),t=this.nextToken(),r=t.value,n=t.cooked;return this.finalize(e,new a.TemplateElement({raw:r,cooked:n},t.tail))},e.prototype.parseTemplateLiteral=function(){var e=this.createNode(),t=[],r=[],n=this.parseTemplateHead();for(r.push(n);!n.tail;)t.push(this.parseExpression()),n=this.parseTemplateElement(),r.push(n);return this.finalize(e,new a.TemplateLiteral(r,t))},e.prototype.reinterpretExpressionAsPattern=function(e){switch(e.type){case u.Syntax.Identifier:case u.Syntax.MemberExpression:case u.Syntax.RestElement:case u.Syntax.AssignmentPattern:break;case u.Syntax.SpreadElement:e.type=u.Syntax.RestElement,this.reinterpretExpressionAsPattern(e.argument);break;case u.Syntax.ArrayExpression:e.type=u.Syntax.ArrayPattern;for(var t=0;t<e.elements.length;t++)null!==e.elements[t]&&this.reinterpretExpressionAsPattern(e.elements[t]);break;case u.Syntax.ObjectExpression:for(e.type=u.Syntax.ObjectPattern,t=0;t<e.properties.length;t++)this.reinterpretExpressionAsPattern(e.properties[t].value);break;case u.Syntax.AssignmentExpression:e.type=u.Syntax.AssignmentPattern,delete e.operator,this.reinterpretExpressionAsPattern(e.left);}},e.prototype.parseGroupExpression=function(){var e;if(this.expect("("),this.match(")"))this.nextToken(),this.match("=>")||this.expect("=>"),e={type:"ArrowParameterPlaceHolder",params:[],async:!1};else {var t=this.lookahead,r=[];if(this.match("..."))e=this.parseRestElement(r),this.expect(")"),this.match("=>")||this.expect("=>"),e={type:"ArrowParameterPlaceHolder",params:[e],async:!1};else {var n=!1;if(this.context.isBindingElement=!0,e=this.inheritCoverGrammar(this.parseAssignmentExpression),this.match(",")){var i=[];for(this.context.isAssignmentTarget=!1,i.push(e);2!==this.lookahead.type&&this.match(",");){if(this.nextToken(),this.match(")")){this.nextToken();for(var o=0;o<i.length;o++)this.reinterpretExpressionAsPattern(i[o]);n=!0,e={type:"ArrowParameterPlaceHolder",params:i,async:!1};}else if(this.match("...")){for(this.context.isBindingElement||this.throwUnexpectedToken(this.lookahead),i.push(this.parseRestElement(r)),this.expect(")"),this.match("=>")||this.expect("=>"),this.context.isBindingElement=!1,o=0;o<i.length;o++)this.reinterpretExpressionAsPattern(i[o]);n=!0,e={type:"ArrowParameterPlaceHolder",params:i,async:!1};}else i.push(this.inheritCoverGrammar(this.parseAssignmentExpression));if(n)break}n||(e=this.finalize(this.startNode(t),new a.SequenceExpression(i)));}if(!n){if(this.expect(")"),this.match("=>")&&(e.type===u.Syntax.Identifier&&"yield"===e.name&&(n=!0,e={type:"ArrowParameterPlaceHolder",params:[e],async:!1}),!n)){if(this.context.isBindingElement||this.throwUnexpectedToken(this.lookahead),e.type===u.Syntax.SequenceExpression)for(o=0;o<e.expressions.length;o++)this.reinterpretExpressionAsPattern(e.expressions[o]);else this.reinterpretExpressionAsPattern(e);e={type:"ArrowParameterPlaceHolder",params:e.type===u.Syntax.SequenceExpression?e.expressions:[e],async:!1};}this.context.isBindingElement=!1;}}}return e},e.prototype.parseArguments=function(){this.expect("(");var e=[];if(!this.match(")"))for(;;){var t=this.match("...")?this.parseSpreadElement():this.isolateCoverGrammar(this.parseAssignmentExpression);if(e.push(t),this.match(")"))break;if(this.expectCommaSeparator(),this.match(")"))break}return this.expect(")"),e},e.prototype.isIdentifierName=function(e){return 3===e.type||4===e.type||1===e.type||5===e.type},e.prototype.parseIdentifierName=function(){var e=this.createNode(),t=this.nextToken();return this.isIdentifierName(t)||this.throwUnexpectedToken(t),this.finalize(e,new a.Identifier(t.value))},e.prototype.parseNewExpression=function(){var e,t=this.createNode(),r=this.parseIdentifierName();if(n.assert("new"===r.name,"New expression must start with `new`"),this.match("."))if(this.nextToken(),3===this.lookahead.type&&this.context.inFunctionBody&&"target"===this.lookahead.value){var i=this.parseIdentifierName();e=new a.MetaProperty(r,i);}else this.throwUnexpectedToken(this.lookahead);else {var o=this.isolateCoverGrammar(this.parseLeftHandSideExpression),s=this.match("(")?this.parseArguments():[];e=new a.NewExpression(o,s),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;}return this.finalize(t,e)},e.prototype.parseAsyncArgument=function(){var e=this.parseAssignmentExpression();return this.context.firstCoverInitializedNameError=null,e},e.prototype.parseAsyncArguments=function(){this.expect("(");var e=[];if(!this.match(")"))for(;;){var t=this.match("...")?this.parseSpreadElement():this.isolateCoverGrammar(this.parseAsyncArgument);if(e.push(t),this.match(")"))break;if(this.expectCommaSeparator(),this.match(")"))break}return this.expect(")"),e},e.prototype.parseLeftHandSideExpressionAllowCall=function(){var e,t=this.lookahead,r=this.matchContextualKeyword("async"),n=this.context.allowIn;for(this.context.allowIn=!0,this.matchKeyword("super")&&this.context.inFunctionBody?(e=this.createNode(),this.nextToken(),e=this.finalize(e,new a.Super),this.match("(")||this.match(".")||this.match("[")||this.throwUnexpectedToken(this.lookahead)):e=this.inheritCoverGrammar(this.matchKeyword("new")?this.parseNewExpression:this.parsePrimaryExpression);;)if(this.match(".")){this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect(".");var i=this.parseIdentifierName();e=this.finalize(this.startNode(t),new a.StaticMemberExpression(e,i));}else if(this.match("(")){var o=r&&t.lineNumber===this.lookahead.lineNumber;this.context.isBindingElement=!1,this.context.isAssignmentTarget=!1;var s=o?this.parseAsyncArguments():this.parseArguments();if(e=this.finalize(this.startNode(t),new a.CallExpression(e,s)),o&&this.match("=>")){for(var u=0;u<s.length;++u)this.reinterpretExpressionAsPattern(s[u]);e={type:"ArrowParameterPlaceHolder",params:s,async:!0};}}else if(this.match("["))this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect("["),i=this.isolateCoverGrammar(this.parseExpression),this.expect("]"),e=this.finalize(this.startNode(t),new a.ComputedMemberExpression(e,i));else {if(10!==this.lookahead.type||!this.lookahead.head)break;var l=this.parseTemplateLiteral();e=this.finalize(this.startNode(t),new a.TaggedTemplateExpression(e,l));}return this.context.allowIn=n,e},e.prototype.parseSuper=function(){var e=this.createNode();return this.expectKeyword("super"),this.match("[")||this.match(".")||this.throwUnexpectedToken(this.lookahead),this.finalize(e,new a.Super)},e.prototype.parseLeftHandSideExpression=function(){n.assert(this.context.allowIn,"callee of new expression always allow in keyword.");for(var e=this.startNode(this.lookahead),t=this.matchKeyword("super")&&this.context.inFunctionBody?this.parseSuper():this.inheritCoverGrammar(this.matchKeyword("new")?this.parseNewExpression:this.parsePrimaryExpression);;)if(this.match("[")){this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect("[");var r=this.isolateCoverGrammar(this.parseExpression);this.expect("]"),t=this.finalize(e,new a.ComputedMemberExpression(t,r));}else if(this.match("."))this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect("."),r=this.parseIdentifierName(),t=this.finalize(e,new a.StaticMemberExpression(t,r));else {if(10!==this.lookahead.type||!this.lookahead.head)break;var i=this.parseTemplateLiteral();t=this.finalize(e,new a.TaggedTemplateExpression(t,i));}return t},e.prototype.parseUpdateExpression=function(){var e,t=this.lookahead;if(this.match("++")||this.match("--")){var r=this.startNode(t),n=this.nextToken();e=this.inheritCoverGrammar(this.parseUnaryExpression),this.context.strict&&e.type===u.Syntax.Identifier&&this.scanner.isRestrictedWord(e.name)&&this.tolerateError(o.Messages.StrictLHSPrefix),this.context.isAssignmentTarget||this.tolerateError(o.Messages.InvalidLHSInAssignment);var i=!0;e=this.finalize(r,new a.UpdateExpression(n.value,e,i)),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;}else if(e=this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall),!this.hasLineTerminator&&7===this.lookahead.type&&(this.match("++")||this.match("--"))){this.context.strict&&e.type===u.Syntax.Identifier&&this.scanner.isRestrictedWord(e.name)&&this.tolerateError(o.Messages.StrictLHSPostfix),this.context.isAssignmentTarget||this.tolerateError(o.Messages.InvalidLHSInAssignment),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var s=this.nextToken().value;i=!1,e=this.finalize(this.startNode(t),new a.UpdateExpression(s,e,i));}return e},e.prototype.parseAwaitExpression=function(){var e=this.createNode();this.nextToken();var t=this.parseUnaryExpression();return this.finalize(e,new a.AwaitExpression(t))},e.prototype.parseUnaryExpression=function(){var e;if(this.match("+")||this.match("-")||this.match("~")||this.match("!")||this.matchKeyword("delete")||this.matchKeyword("void")||this.matchKeyword("typeof")){var t=this.startNode(this.lookahead),r=this.nextToken();e=this.inheritCoverGrammar(this.parseUnaryExpression),e=this.finalize(t,new a.UnaryExpression(r.value,e)),this.context.strict&&"delete"===e.operator&&e.argument.type===u.Syntax.Identifier&&this.tolerateError(o.Messages.StrictDelete),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;}else e=this.context.await&&this.matchContextualKeyword("await")?this.parseAwaitExpression():this.parseUpdateExpression();return e},e.prototype.parseExponentiationExpression=function(){var e=this.lookahead,t=this.inheritCoverGrammar(this.parseUnaryExpression);if(t.type!==u.Syntax.UnaryExpression&&this.match("**")){this.nextToken(),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var r=t,n=this.isolateCoverGrammar(this.parseExponentiationExpression);t=this.finalize(this.startNode(e),new a.BinaryExpression("**",r,n));}return t},e.prototype.binaryPrecedence=function(e){var t=e.value;return 7===e.type?this.operatorPrecedence[t]||0:4===e.type&&("instanceof"===t||this.context.allowIn&&"in"===t)?7:0},e.prototype.parseBinaryExpression=function(){var e=this.lookahead,t=this.inheritCoverGrammar(this.parseExponentiationExpression),r=this.lookahead,n=this.binaryPrecedence(r);if(n>0){this.nextToken(),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;for(var i=[e,this.lookahead],o=t,s=this.isolateCoverGrammar(this.parseExponentiationExpression),u=[o,r.value,s],l=[n];!((n=this.binaryPrecedence(this.lookahead))<=0);){for(;u.length>2&&n<=l[l.length-1];){s=u.pop();var c=u.pop();l.pop(),o=u.pop(),i.pop();var h=this.startNode(i[i.length-1]);u.push(this.finalize(h,new a.BinaryExpression(c,o,s)));}u.push(this.nextToken().value),l.push(n),i.push(this.lookahead),u.push(this.isolateCoverGrammar(this.parseExponentiationExpression));}var p=u.length-1;t=u[p];for(var f=i.pop();p>1;){var d=i.pop(),m=f&&f.lineStart;h=this.startNode(d,m),c=u[p-1],t=this.finalize(h,new a.BinaryExpression(c,u[p-2],t)),p-=2,f=d;}}return t},e.prototype.parseConditionalExpression=function(){var e=this.lookahead,t=this.inheritCoverGrammar(this.parseBinaryExpression);if(this.match("?")){this.nextToken();var r=this.context.allowIn;this.context.allowIn=!0;var n=this.isolateCoverGrammar(this.parseAssignmentExpression);this.context.allowIn=r,this.expect(":");var i=this.isolateCoverGrammar(this.parseAssignmentExpression);t=this.finalize(this.startNode(e),new a.ConditionalExpression(t,n,i)),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;}return t},e.prototype.checkPatternParam=function(e,t){switch(t.type){case u.Syntax.Identifier:this.validateParam(e,t,t.name);break;case u.Syntax.RestElement:this.checkPatternParam(e,t.argument);break;case u.Syntax.AssignmentPattern:this.checkPatternParam(e,t.left);break;case u.Syntax.ArrayPattern:for(var r=0;r<t.elements.length;r++)null!==t.elements[r]&&this.checkPatternParam(e,t.elements[r]);break;case u.Syntax.ObjectPattern:for(r=0;r<t.properties.length;r++)this.checkPatternParam(e,t.properties[r].value);}e.simple=e.simple&&t instanceof a.Identifier;},e.prototype.reinterpretAsCoverFormalsList=function(e){var t,r=[e],n=!1;switch(e.type){case u.Syntax.Identifier:break;case"ArrowParameterPlaceHolder":r=e.params,n=e.async;break;default:return null}t={simple:!0,paramSet:{}};for(var i=0;i<r.length;++i)(a=r[i]).type===u.Syntax.AssignmentPattern?a.right.type===u.Syntax.YieldExpression&&(a.right.argument&&this.throwUnexpectedToken(this.lookahead),a.right.type=u.Syntax.Identifier,a.right.name="yield",delete a.right.argument,delete a.right.delegate):n&&a.type===u.Syntax.Identifier&&"await"===a.name&&this.throwUnexpectedToken(this.lookahead),this.checkPatternParam(t,a),r[i]=a;if(this.context.strict||!this.context.allowYield)for(i=0;i<r.length;++i){var a;(a=r[i]).type===u.Syntax.YieldExpression&&this.throwUnexpectedToken(this.lookahead);}if(t.message===o.Messages.StrictParamDupe){var s=this.context.strict?t.stricted:t.firstRestricted;this.throwUnexpectedToken(s,t.message);}return {simple:t.simple,params:r,stricted:t.stricted,firstRestricted:t.firstRestricted,message:t.message}},e.prototype.parseAssignmentExpression=function(){var e;if(!this.context.allowYield&&this.matchKeyword("yield"))e=this.parseYieldExpression();else {var t=this.lookahead,r=t;if(e=this.parseConditionalExpression(),3===r.type&&r.lineNumber===this.lookahead.lineNumber&&"async"===r.value&&(3===this.lookahead.type||this.matchKeyword("yield"))){var n=this.parsePrimaryExpression();this.reinterpretExpressionAsPattern(n),e={type:"ArrowParameterPlaceHolder",params:[n],async:!0};}if("ArrowParameterPlaceHolder"===e.type||this.match("=>")){this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var i=e.async,s=this.reinterpretAsCoverFormalsList(e);if(s){this.hasLineTerminator&&this.tolerateUnexpectedToken(this.lookahead),this.context.firstCoverInitializedNameError=null;var l=this.context.strict,c=this.context.allowStrictDirective;this.context.allowStrictDirective=s.simple;var h=this.context.allowYield,p=this.context.await;this.context.allowYield=!0,this.context.await=i;var f=this.startNode(t);this.expect("=>");var d=void 0;if(this.match("{")){var m=this.context.allowIn;this.context.allowIn=!0,d=this.parseFunctionSourceElements(),this.context.allowIn=m;}else d=this.isolateCoverGrammar(this.parseAssignmentExpression);var y=d.type!==u.Syntax.BlockStatement;this.context.strict&&s.firstRestricted&&this.throwUnexpectedToken(s.firstRestricted,s.message),this.context.strict&&s.stricted&&this.tolerateUnexpectedToken(s.stricted,s.message),e=i?this.finalize(f,new a.AsyncArrowFunctionExpression(s.params,d,y)):this.finalize(f,new a.ArrowFunctionExpression(s.params,d,y)),this.context.strict=l,this.context.allowStrictDirective=c,this.context.allowYield=h,this.context.await=p;}}else if(this.matchAssign()){if(this.context.isAssignmentTarget||this.tolerateError(o.Messages.InvalidLHSInAssignment),this.context.strict&&e.type===u.Syntax.Identifier){var v=e;this.scanner.isRestrictedWord(v.name)&&this.tolerateUnexpectedToken(r,o.Messages.StrictLHSAssignment),this.scanner.isStrictModeReservedWord(v.name)&&this.tolerateUnexpectedToken(r,o.Messages.StrictReservedWord);}this.match("=")?this.reinterpretExpressionAsPattern(e):(this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1);var _=(r=this.nextToken()).value,g=this.isolateCoverGrammar(this.parseAssignmentExpression);e=this.finalize(this.startNode(t),new a.AssignmentExpression(_,e,g)),this.context.firstCoverInitializedNameError=null;}}return e},e.prototype.parseExpression=function(){var e=this.lookahead,t=this.isolateCoverGrammar(this.parseAssignmentExpression);if(this.match(",")){var r=[];for(r.push(t);2!==this.lookahead.type&&this.match(",");)this.nextToken(),r.push(this.isolateCoverGrammar(this.parseAssignmentExpression));t=this.finalize(this.startNode(e),new a.SequenceExpression(r));}return t},e.prototype.parseStatementListItem=function(){var e;if(this.context.isAssignmentTarget=!0,this.context.isBindingElement=!0,4===this.lookahead.type)switch(this.lookahead.value){case"export":this.context.isModule||this.tolerateUnexpectedToken(this.lookahead,o.Messages.IllegalExportDeclaration),e=this.parseExportDeclaration();break;case"import":this.context.isModule||this.tolerateUnexpectedToken(this.lookahead,o.Messages.IllegalImportDeclaration),e=this.parseImportDeclaration();break;case"const":e=this.parseLexicalDeclaration({inFor:!1});break;case"function":e=this.parseFunctionDeclaration();break;case"class":e=this.parseClassDeclaration();break;case"let":e=this.isLexicalDeclaration()?this.parseLexicalDeclaration({inFor:!1}):this.parseStatement();break;default:e=this.parseStatement();}else e=this.parseStatement();return e},e.prototype.parseBlock=function(){var e=this.createNode();this.expect("{");for(var t=[];!this.match("}");)t.push(this.parseStatementListItem());return this.expect("}"),this.finalize(e,new a.BlockStatement(t))},e.prototype.parseLexicalBinding=function(e,t){var r=this.createNode(),n=this.parsePattern([],e);this.context.strict&&n.type===u.Syntax.Identifier&&this.scanner.isRestrictedWord(n.name)&&this.tolerateError(o.Messages.StrictVarName);var i=null;return "const"===e?this.matchKeyword("in")||this.matchContextualKeyword("of")||(this.match("=")?(this.nextToken(),i=this.isolateCoverGrammar(this.parseAssignmentExpression)):this.throwError(o.Messages.DeclarationMissingInitializer,"const")):(!t.inFor&&n.type!==u.Syntax.Identifier||this.match("="))&&(this.expect("="),i=this.isolateCoverGrammar(this.parseAssignmentExpression)),this.finalize(r,new a.VariableDeclarator(n,i))},e.prototype.parseBindingList=function(e,t){for(var r=[this.parseLexicalBinding(e,t)];this.match(",");)this.nextToken(),r.push(this.parseLexicalBinding(e,t));return r},e.prototype.isLexicalDeclaration=function(){var e=this.scanner.saveState();this.scanner.scanComments();var t=this.scanner.lex();return this.scanner.restoreState(e),3===t.type||7===t.type&&"["===t.value||7===t.type&&"{"===t.value||4===t.type&&"let"===t.value||4===t.type&&"yield"===t.value},e.prototype.parseLexicalDeclaration=function(e){var t=this.createNode(),r=this.nextToken().value;n.assert("let"===r||"const"===r,"Lexical declaration must be either let or const");var i=this.parseBindingList(r,e);return this.consumeSemicolon(),this.finalize(t,new a.VariableDeclaration(i,r))},e.prototype.parseBindingRestElement=function(e,t){var r=this.createNode();this.expect("...");var n=this.parsePattern(e,t);return this.finalize(r,new a.RestElement(n))},e.prototype.parseArrayPattern=function(e,t){var r=this.createNode();this.expect("[");for(var n=[];!this.match("]");)if(this.match(","))this.nextToken(),n.push(null);else {if(this.match("...")){n.push(this.parseBindingRestElement(e,t));break}n.push(this.parsePatternWithDefault(e,t)),this.match("]")||this.expect(",");}return this.expect("]"),this.finalize(r,new a.ArrayPattern(n))},e.prototype.parsePropertyPattern=function(e,t){var r,n,i=this.createNode(),o=!1,s=!1;if(3===this.lookahead.type){var u=this.lookahead;r=this.parseVariableIdentifier();var l=this.finalize(i,new a.Identifier(u.value));if(this.match("=")){e.push(u),s=!0,this.nextToken();var c=this.parseAssignmentExpression();n=this.finalize(this.startNode(u),new a.AssignmentPattern(l,c));}else this.match(":")?(this.expect(":"),n=this.parsePatternWithDefault(e,t)):(e.push(u),s=!0,n=l);}else o=this.match("["),r=this.parseObjectPropertyKey(),this.expect(":"),n=this.parsePatternWithDefault(e,t);return this.finalize(i,new a.Property("init",r,o,n,!1,s))},e.prototype.parseObjectPattern=function(e,t){var r=this.createNode(),n=[];for(this.expect("{");!this.match("}");)n.push(this.parsePropertyPattern(e,t)),this.match("}")||this.expect(",");return this.expect("}"),this.finalize(r,new a.ObjectPattern(n))},e.prototype.parsePattern=function(e,t){var r;return this.match("[")?r=this.parseArrayPattern(e,t):this.match("{")?r=this.parseObjectPattern(e,t):(!this.matchKeyword("let")||"const"!==t&&"let"!==t||this.tolerateUnexpectedToken(this.lookahead,o.Messages.LetInLexicalBinding),e.push(this.lookahead),r=this.parseVariableIdentifier(t)),r},e.prototype.parsePatternWithDefault=function(e,t){var r=this.lookahead,n=this.parsePattern(e,t);if(this.match("=")){this.nextToken();var i=this.context.allowYield;this.context.allowYield=!0;var o=this.isolateCoverGrammar(this.parseAssignmentExpression);this.context.allowYield=i,n=this.finalize(this.startNode(r),new a.AssignmentPattern(n,o));}return n},e.prototype.parseVariableIdentifier=function(e){var t=this.createNode(),r=this.nextToken();return 4===r.type&&"yield"===r.value?this.context.strict?this.tolerateUnexpectedToken(r,o.Messages.StrictReservedWord):this.context.allowYield||this.throwUnexpectedToken(r):3!==r.type?this.context.strict&&4===r.type&&this.scanner.isStrictModeReservedWord(r.value)?this.tolerateUnexpectedToken(r,o.Messages.StrictReservedWord):(this.context.strict||"let"!==r.value||"var"!==e)&&this.throwUnexpectedToken(r):(this.context.isModule||this.context.await)&&3===r.type&&"await"===r.value&&this.tolerateUnexpectedToken(r),this.finalize(t,new a.Identifier(r.value))},e.prototype.parseVariableDeclaration=function(e){var t=this.createNode(),r=this.parsePattern([],"var");this.context.strict&&r.type===u.Syntax.Identifier&&this.scanner.isRestrictedWord(r.name)&&this.tolerateError(o.Messages.StrictVarName);var n=null;return this.match("=")?(this.nextToken(),n=this.isolateCoverGrammar(this.parseAssignmentExpression)):r.type===u.Syntax.Identifier||e.inFor||this.expect("="),this.finalize(t,new a.VariableDeclarator(r,n))},e.prototype.parseVariableDeclarationList=function(e){var t={inFor:e.inFor},r=[];for(r.push(this.parseVariableDeclaration(t));this.match(",");)this.nextToken(),r.push(this.parseVariableDeclaration(t));return r},e.prototype.parseVariableStatement=function(){var e=this.createNode();this.expectKeyword("var");var t=this.parseVariableDeclarationList({inFor:!1});return this.consumeSemicolon(),this.finalize(e,new a.VariableDeclaration(t,"var"))},e.prototype.parseEmptyStatement=function(){var e=this.createNode();return this.expect(";"),this.finalize(e,new a.EmptyStatement)},e.prototype.parseExpressionStatement=function(){var e=this.createNode(),t=this.parseExpression();return this.consumeSemicolon(),this.finalize(e,new a.ExpressionStatement(t))},e.prototype.parseIfClause=function(){return this.context.strict&&this.matchKeyword("function")&&this.tolerateError(o.Messages.StrictFunction),this.parseStatement()},e.prototype.parseIfStatement=function(){var e,t=this.createNode(),r=null;this.expectKeyword("if"),this.expect("(");var n=this.parseExpression();return !this.match(")")&&this.config.tolerant?(this.tolerateUnexpectedToken(this.nextToken()),e=this.finalize(this.createNode(),new a.EmptyStatement)):(this.expect(")"),e=this.parseIfClause(),this.matchKeyword("else")&&(this.nextToken(),r=this.parseIfClause())),this.finalize(t,new a.IfStatement(n,e,r))},e.prototype.parseDoWhileStatement=function(){var e=this.createNode();this.expectKeyword("do");var t=this.context.inIteration;this.context.inIteration=!0;var r=this.parseStatement();this.context.inIteration=t,this.expectKeyword("while"),this.expect("(");var n=this.parseExpression();return !this.match(")")&&this.config.tolerant?this.tolerateUnexpectedToken(this.nextToken()):(this.expect(")"),this.match(";")&&this.nextToken()),this.finalize(e,new a.DoWhileStatement(r,n))},e.prototype.parseWhileStatement=function(){var e,t=this.createNode();this.expectKeyword("while"),this.expect("(");var r=this.parseExpression();if(!this.match(")")&&this.config.tolerant)this.tolerateUnexpectedToken(this.nextToken()),e=this.finalize(this.createNode(),new a.EmptyStatement);else {this.expect(")");var n=this.context.inIteration;this.context.inIteration=!0,e=this.parseStatement(),this.context.inIteration=n;}return this.finalize(t,new a.WhileStatement(r,e))},e.prototype.parseForStatement=function(){var e,t,r,n=null,i=null,s=null,l=!0,c=this.createNode();if(this.expectKeyword("for"),this.expect("("),this.match(";"))this.nextToken();else if(this.matchKeyword("var")){n=this.createNode(),this.nextToken();var h=this.context.allowIn;this.context.allowIn=!1;var p=this.parseVariableDeclarationList({inFor:!0});if(this.context.allowIn=h,1===p.length&&this.matchKeyword("in")){var f=p[0];f.init&&(f.id.type===u.Syntax.ArrayPattern||f.id.type===u.Syntax.ObjectPattern||this.context.strict)&&this.tolerateError(o.Messages.ForInOfLoopInitializer,"for-in"),n=this.finalize(n,new a.VariableDeclaration(p,"var")),this.nextToken(),e=n,t=this.parseExpression(),n=null;}else 1===p.length&&null===p[0].init&&this.matchContextualKeyword("of")?(n=this.finalize(n,new a.VariableDeclaration(p,"var")),this.nextToken(),e=n,t=this.parseAssignmentExpression(),n=null,l=!1):(n=this.finalize(n,new a.VariableDeclaration(p,"var")),this.expect(";"));}else if(this.matchKeyword("const")||this.matchKeyword("let")){n=this.createNode();var d=this.nextToken().value;this.context.strict||"in"!==this.lookahead.value?(h=this.context.allowIn,this.context.allowIn=!1,p=this.parseBindingList(d,{inFor:!0}),this.context.allowIn=h,1===p.length&&null===p[0].init&&this.matchKeyword("in")?(n=this.finalize(n,new a.VariableDeclaration(p,d)),this.nextToken(),e=n,t=this.parseExpression(),n=null):1===p.length&&null===p[0].init&&this.matchContextualKeyword("of")?(n=this.finalize(n,new a.VariableDeclaration(p,d)),this.nextToken(),e=n,t=this.parseAssignmentExpression(),n=null,l=!1):(this.consumeSemicolon(),n=this.finalize(n,new a.VariableDeclaration(p,d)))):(n=this.finalize(n,new a.Identifier(d)),this.nextToken(),e=n,t=this.parseExpression(),n=null);}else {var m=this.lookahead;if(h=this.context.allowIn,this.context.allowIn=!1,n=this.inheritCoverGrammar(this.parseAssignmentExpression),this.context.allowIn=h,this.matchKeyword("in"))this.context.isAssignmentTarget&&n.type!==u.Syntax.AssignmentExpression||this.tolerateError(o.Messages.InvalidLHSInForIn),this.nextToken(),this.reinterpretExpressionAsPattern(n),e=n,t=this.parseExpression(),n=null;else if(this.matchContextualKeyword("of"))this.context.isAssignmentTarget&&n.type!==u.Syntax.AssignmentExpression||this.tolerateError(o.Messages.InvalidLHSInForLoop),this.nextToken(),this.reinterpretExpressionAsPattern(n),e=n,t=this.parseAssignmentExpression(),n=null,l=!1;else {if(this.match(",")){for(var y=[n];this.match(",");)this.nextToken(),y.push(this.isolateCoverGrammar(this.parseAssignmentExpression));n=this.finalize(this.startNode(m),new a.SequenceExpression(y));}this.expect(";");}}if(void 0===e&&(this.match(";")||(i=this.parseExpression()),this.expect(";"),this.match(")")||(s=this.parseExpression())),!this.match(")")&&this.config.tolerant)this.tolerateUnexpectedToken(this.nextToken()),r=this.finalize(this.createNode(),new a.EmptyStatement);else {this.expect(")");var v=this.context.inIteration;this.context.inIteration=!0,r=this.isolateCoverGrammar(this.parseStatement),this.context.inIteration=v;}return void 0===e?this.finalize(c,new a.ForStatement(n,i,s,r)):l?this.finalize(c,new a.ForInStatement(e,t,r)):this.finalize(c,new a.ForOfStatement(e,t,r))},e.prototype.parseContinueStatement=function(){var e=this.createNode();this.expectKeyword("continue");var t=null;if(3===this.lookahead.type&&!this.hasLineTerminator){var r=this.parseVariableIdentifier();t=r;var n="$"+r.name;Object.prototype.hasOwnProperty.call(this.context.labelSet,n)||this.throwError(o.Messages.UnknownLabel,r.name);}return this.consumeSemicolon(),null!==t||this.context.inIteration||this.throwError(o.Messages.IllegalContinue),this.finalize(e,new a.ContinueStatement(t))},e.prototype.parseBreakStatement=function(){var e=this.createNode();this.expectKeyword("break");var t=null;if(3===this.lookahead.type&&!this.hasLineTerminator){var r=this.parseVariableIdentifier(),n="$"+r.name;Object.prototype.hasOwnProperty.call(this.context.labelSet,n)||this.throwError(o.Messages.UnknownLabel,r.name),t=r;}return this.consumeSemicolon(),null!==t||this.context.inIteration||this.context.inSwitch||this.throwError(o.Messages.IllegalBreak),this.finalize(e,new a.BreakStatement(t))},e.prototype.parseReturnStatement=function(){this.context.inFunctionBody||this.tolerateError(o.Messages.IllegalReturn);var e=this.createNode();this.expectKeyword("return");var t=(this.match(";")||this.match("}")||this.hasLineTerminator||2===this.lookahead.type)&&8!==this.lookahead.type&&10!==this.lookahead.type?null:this.parseExpression();return this.consumeSemicolon(),this.finalize(e,new a.ReturnStatement(t))},e.prototype.parseWithStatement=function(){this.context.strict&&this.tolerateError(o.Messages.StrictModeWith);var e,t=this.createNode();this.expectKeyword("with"),this.expect("(");var r=this.parseExpression();return !this.match(")")&&this.config.tolerant?(this.tolerateUnexpectedToken(this.nextToken()),e=this.finalize(this.createNode(),new a.EmptyStatement)):(this.expect(")"),e=this.parseStatement()),this.finalize(t,new a.WithStatement(r,e))},e.prototype.parseSwitchCase=function(){var e,t=this.createNode();this.matchKeyword("default")?(this.nextToken(),e=null):(this.expectKeyword("case"),e=this.parseExpression()),this.expect(":");for(var r=[];!(this.match("}")||this.matchKeyword("default")||this.matchKeyword("case"));)r.push(this.parseStatementListItem());return this.finalize(t,new a.SwitchCase(e,r))},e.prototype.parseSwitchStatement=function(){var e=this.createNode();this.expectKeyword("switch"),this.expect("(");var t=this.parseExpression();this.expect(")");var r=this.context.inSwitch;this.context.inSwitch=!0;var n=[],i=!1;for(this.expect("{");!this.match("}");){var s=this.parseSwitchCase();null===s.test&&(i&&this.throwError(o.Messages.MultipleDefaultsInSwitch),i=!0),n.push(s);}return this.expect("}"),this.context.inSwitch=r,this.finalize(e,new a.SwitchStatement(t,n))},e.prototype.parseLabelledStatement=function(){var e,t=this.createNode(),r=this.parseExpression();if(r.type===u.Syntax.Identifier&&this.match(":")){this.nextToken();var n=r,i="$"+n.name;Object.prototype.hasOwnProperty.call(this.context.labelSet,i)&&this.throwError(o.Messages.Redeclaration,"Label",n.name),this.context.labelSet[i]=!0;var s=void 0;if(this.matchKeyword("class"))this.tolerateUnexpectedToken(this.lookahead),s=this.parseClassDeclaration();else if(this.matchKeyword("function")){var l=this.lookahead,c=this.parseFunctionDeclaration();this.context.strict?this.tolerateUnexpectedToken(l,o.Messages.StrictFunction):c.generator&&this.tolerateUnexpectedToken(l,o.Messages.GeneratorInLegacyContext),s=c;}else s=this.parseStatement();delete this.context.labelSet[i],e=new a.LabeledStatement(n,s);}else this.consumeSemicolon(),e=new a.ExpressionStatement(r);return this.finalize(t,e)},e.prototype.parseThrowStatement=function(){var e=this.createNode();this.expectKeyword("throw"),this.hasLineTerminator&&this.throwError(o.Messages.NewlineAfterThrow);var t=this.parseExpression();return this.consumeSemicolon(),this.finalize(e,new a.ThrowStatement(t))},e.prototype.parseCatchClause=function(){var e=this.createNode();this.expectKeyword("catch"),this.expect("("),this.match(")")&&this.throwUnexpectedToken(this.lookahead);for(var t=[],r=this.parsePattern(t),n={},i=0;i<t.length;i++){var s="$"+t[i].value;Object.prototype.hasOwnProperty.call(n,s)&&this.tolerateError(o.Messages.DuplicateBinding,t[i].value),n[s]=!0;}this.context.strict&&r.type===u.Syntax.Identifier&&this.scanner.isRestrictedWord(r.name)&&this.tolerateError(o.Messages.StrictCatchVariable),this.expect(")");var l=this.parseBlock();return this.finalize(e,new a.CatchClause(r,l))},e.prototype.parseFinallyClause=function(){return this.expectKeyword("finally"),this.parseBlock()},e.prototype.parseTryStatement=function(){var e=this.createNode();this.expectKeyword("try");var t=this.parseBlock(),r=this.matchKeyword("catch")?this.parseCatchClause():null,n=this.matchKeyword("finally")?this.parseFinallyClause():null;return r||n||this.throwError(o.Messages.NoCatchOrFinally),this.finalize(e,new a.TryStatement(t,r,n))},e.prototype.parseDebuggerStatement=function(){var e=this.createNode();return this.expectKeyword("debugger"),this.consumeSemicolon(),this.finalize(e,new a.DebuggerStatement)},e.prototype.parseStatement=function(){var e;switch(this.lookahead.type){case 1:case 5:case 6:case 8:case 10:case 9:e=this.parseExpressionStatement();break;case 7:var t=this.lookahead.value;e="{"===t?this.parseBlock():"("===t?this.parseExpressionStatement():";"===t?this.parseEmptyStatement():this.parseExpressionStatement();break;case 3:e=this.matchAsyncFunction()?this.parseFunctionDeclaration():this.parseLabelledStatement();break;case 4:switch(this.lookahead.value){case"break":e=this.parseBreakStatement();break;case"continue":e=this.parseContinueStatement();break;case"debugger":e=this.parseDebuggerStatement();break;case"do":e=this.parseDoWhileStatement();break;case"for":e=this.parseForStatement();break;case"function":e=this.parseFunctionDeclaration();break;case"if":e=this.parseIfStatement();break;case"return":e=this.parseReturnStatement();break;case"switch":e=this.parseSwitchStatement();break;case"throw":e=this.parseThrowStatement();break;case"try":e=this.parseTryStatement();break;case"var":e=this.parseVariableStatement();break;case"while":e=this.parseWhileStatement();break;case"with":e=this.parseWithStatement();break;default:e=this.parseExpressionStatement();}break;default:e=this.throwUnexpectedToken(this.lookahead);}return e},e.prototype.parseFunctionSourceElements=function(){var e=this.createNode();this.expect("{");var t=this.parseDirectivePrologues(),r=this.context.labelSet,n=this.context.inIteration,i=this.context.inSwitch,o=this.context.inFunctionBody;for(this.context.labelSet={},this.context.inIteration=!1,this.context.inSwitch=!1,this.context.inFunctionBody=!0;2!==this.lookahead.type&&!this.match("}");)t.push(this.parseStatementListItem());return this.expect("}"),this.context.labelSet=r,this.context.inIteration=n,this.context.inSwitch=i,this.context.inFunctionBody=o,this.finalize(e,new a.BlockStatement(t))},e.prototype.validateParam=function(e,t,r){var n="$"+r;this.context.strict?(this.scanner.isRestrictedWord(r)&&(e.stricted=t,e.message=o.Messages.StrictParamName),Object.prototype.hasOwnProperty.call(e.paramSet,n)&&(e.stricted=t,e.message=o.Messages.StrictParamDupe)):e.firstRestricted||(this.scanner.isRestrictedWord(r)?(e.firstRestricted=t,e.message=o.Messages.StrictParamName):this.scanner.isStrictModeReservedWord(r)?(e.firstRestricted=t,e.message=o.Messages.StrictReservedWord):Object.prototype.hasOwnProperty.call(e.paramSet,n)&&(e.stricted=t,e.message=o.Messages.StrictParamDupe)),"function"==typeof Object.defineProperty?Object.defineProperty(e.paramSet,n,{value:!0,enumerable:!0,writable:!0,configurable:!0}):e.paramSet[n]=!0;},e.prototype.parseRestElement=function(e){var t=this.createNode();this.expect("...");var r=this.parsePattern(e);return this.match("=")&&this.throwError(o.Messages.DefaultRestParameter),this.match(")")||this.throwError(o.Messages.ParameterAfterRestParameter),this.finalize(t,new a.RestElement(r))},e.prototype.parseFormalParameter=function(e){for(var t=[],r=this.match("...")?this.parseRestElement(t):this.parsePatternWithDefault(t),n=0;n<t.length;n++)this.validateParam(e,t[n],t[n].value);e.simple=e.simple&&r instanceof a.Identifier,e.params.push(r);},e.prototype.parseFormalParameters=function(e){var t;if(t={simple:!0,params:[],firstRestricted:e},this.expect("("),!this.match(")"))for(t.paramSet={};2!==this.lookahead.type&&(this.parseFormalParameter(t),!this.match(")"))&&(this.expect(","),!this.match(")")););return this.expect(")"),{simple:t.simple,params:t.params,stricted:t.stricted,firstRestricted:t.firstRestricted,message:t.message}},e.prototype.matchAsyncFunction=function(){var e=this.matchContextualKeyword("async");if(e){var t=this.scanner.saveState();this.scanner.scanComments();var r=this.scanner.lex();this.scanner.restoreState(t),e=t.lineNumber===r.lineNumber&&4===r.type&&"function"===r.value;}return e},e.prototype.parseFunctionDeclaration=function(e){var t=this.createNode(),r=this.matchContextualKeyword("async");r&&this.nextToken(),this.expectKeyword("function");var n,i=!r&&this.match("*");i&&this.nextToken();var s=null,u=null;if(!e||!this.match("(")){var l=this.lookahead;s=this.parseVariableIdentifier(),this.context.strict?this.scanner.isRestrictedWord(l.value)&&this.tolerateUnexpectedToken(l,o.Messages.StrictFunctionName):this.scanner.isRestrictedWord(l.value)?(u=l,n=o.Messages.StrictFunctionName):this.scanner.isStrictModeReservedWord(l.value)&&(u=l,n=o.Messages.StrictReservedWord);}var c=this.context.await,h=this.context.allowYield;this.context.await=r,this.context.allowYield=!i;var p=this.parseFormalParameters(u),f=p.params,d=p.stricted;u=p.firstRestricted,p.message&&(n=p.message);var m=this.context.strict,y=this.context.allowStrictDirective;this.context.allowStrictDirective=p.simple;var v=this.parseFunctionSourceElements();return this.context.strict&&u&&this.throwUnexpectedToken(u,n),this.context.strict&&d&&this.tolerateUnexpectedToken(d,n),this.context.strict=m,this.context.allowStrictDirective=y,this.context.await=c,this.context.allowYield=h,r?this.finalize(t,new a.AsyncFunctionDeclaration(s,f,v)):this.finalize(t,new a.FunctionDeclaration(s,f,v,i))},e.prototype.parseFunctionExpression=function(){var e=this.createNode(),t=this.matchContextualKeyword("async");t&&this.nextToken(),this.expectKeyword("function");var r,n=!t&&this.match("*");n&&this.nextToken();var i,s=null,u=this.context.await,l=this.context.allowYield;if(this.context.await=t,this.context.allowYield=!n,!this.match("(")){var c=this.lookahead;s=this.context.strict||n||!this.matchKeyword("yield")?this.parseVariableIdentifier():this.parseIdentifierName(),this.context.strict?this.scanner.isRestrictedWord(c.value)&&this.tolerateUnexpectedToken(c,o.Messages.StrictFunctionName):this.scanner.isRestrictedWord(c.value)?(i=c,r=o.Messages.StrictFunctionName):this.scanner.isStrictModeReservedWord(c.value)&&(i=c,r=o.Messages.StrictReservedWord);}var h=this.parseFormalParameters(i),p=h.params,f=h.stricted;i=h.firstRestricted,h.message&&(r=h.message);var d=this.context.strict,m=this.context.allowStrictDirective;this.context.allowStrictDirective=h.simple;var y=this.parseFunctionSourceElements();return this.context.strict&&i&&this.throwUnexpectedToken(i,r),this.context.strict&&f&&this.tolerateUnexpectedToken(f,r),this.context.strict=d,this.context.allowStrictDirective=m,this.context.await=u,this.context.allowYield=l,t?this.finalize(e,new a.AsyncFunctionExpression(s,p,y)):this.finalize(e,new a.FunctionExpression(s,p,y,n))},e.prototype.parseDirective=function(){var e=this.lookahead,t=this.createNode(),r=this.parseExpression(),n=r.type===u.Syntax.Literal?this.getTokenRaw(e).slice(1,-1):null;return this.consumeSemicolon(),this.finalize(t,n?new a.Directive(r,n):new a.ExpressionStatement(r))},e.prototype.parseDirectivePrologues=function(){for(var e=null,t=[];;){var r=this.lookahead;if(8!==r.type)break;var n=this.parseDirective();t.push(n);var i=n.directive;if("string"!=typeof i)break;"use strict"===i?(this.context.strict=!0,e&&this.tolerateUnexpectedToken(e,o.Messages.StrictOctalLiteral),this.context.allowStrictDirective||this.tolerateUnexpectedToken(r,o.Messages.IllegalLanguageModeDirective)):!e&&r.octal&&(e=r);}return t},e.prototype.qualifiedPropertyName=function(e){switch(e.type){case 3:case 8:case 1:case 5:case 6:case 4:return !0;case 7:return "["===e.value}return !1},e.prototype.parseGetterMethod=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!0;var r=this.parseFormalParameters();r.params.length>0&&this.tolerateError(o.Messages.BadGetterArity);var n=this.parsePropertyMethod(r);return this.context.allowYield=t,this.finalize(e,new a.FunctionExpression(null,r.params,n,!1))},e.prototype.parseSetterMethod=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!0;var r=this.parseFormalParameters();1!==r.params.length?this.tolerateError(o.Messages.BadSetterArity):r.params[0]instanceof a.RestElement&&this.tolerateError(o.Messages.BadSetterRestParameter);var n=this.parsePropertyMethod(r);return this.context.allowYield=t,this.finalize(e,new a.FunctionExpression(null,r.params,n,!1))},e.prototype.parseGeneratorMethod=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!0;var r=this.parseFormalParameters();this.context.allowYield=!1;var n=this.parsePropertyMethod(r);return this.context.allowYield=t,this.finalize(e,new a.FunctionExpression(null,r.params,n,!0))},e.prototype.isStartOfExpression=function(){var e=!0,t=this.lookahead.value;switch(this.lookahead.type){case 7:e="["===t||"("===t||"{"===t||"+"===t||"-"===t||"!"===t||"~"===t||"++"===t||"--"===t||"/"===t||"/="===t;break;case 4:e="class"===t||"delete"===t||"function"===t||"let"===t||"new"===t||"super"===t||"this"===t||"typeof"===t||"void"===t||"yield"===t;}return e},e.prototype.parseYieldExpression=function(){var e=this.createNode();this.expectKeyword("yield");var t=null,r=!1;if(!this.hasLineTerminator){var n=this.context.allowYield;this.context.allowYield=!1,(r=this.match("*"))?(this.nextToken(),t=this.parseAssignmentExpression()):this.isStartOfExpression()&&(t=this.parseAssignmentExpression()),this.context.allowYield=n;}return this.finalize(e,new a.YieldExpression(t,r))},e.prototype.parseClassElement=function(e){var t=this.lookahead,r=this.createNode(),n="",i=null,s=null,u=!1,l=!1,c=!1,h=!1;if(this.match("*"))this.nextToken();else if(u=this.match("["),"static"===(i=this.parseObjectPropertyKey()).name&&(this.qualifiedPropertyName(this.lookahead)||this.match("*"))&&(t=this.lookahead,c=!0,u=this.match("["),this.match("*")?this.nextToken():i=this.parseObjectPropertyKey()),3===t.type&&!this.hasLineTerminator&&"async"===t.value){var p=this.lookahead.value;":"!==p&&"("!==p&&"*"!==p&&(h=!0,t=this.lookahead,i=this.parseObjectPropertyKey(),3===t.type&&"constructor"===t.value&&this.tolerateUnexpectedToken(t,o.Messages.ConstructorIsAsync));}var f=this.qualifiedPropertyName(this.lookahead);return 3===t.type?"get"===t.value&&f?(n="get",u=this.match("["),i=this.parseObjectPropertyKey(),this.context.allowYield=!1,s=this.parseGetterMethod()):"set"===t.value&&f&&(n="set",u=this.match("["),i=this.parseObjectPropertyKey(),s=this.parseSetterMethod()):7===t.type&&"*"===t.value&&f&&(n="init",u=this.match("["),i=this.parseObjectPropertyKey(),s=this.parseGeneratorMethod(),l=!0),!n&&i&&this.match("(")&&(n="init",s=h?this.parsePropertyMethodAsyncFunction():this.parsePropertyMethodFunction(),l=!0),n||this.throwUnexpectedToken(this.lookahead),"init"===n&&(n="method"),u||(c&&this.isPropertyKey(i,"prototype")&&this.throwUnexpectedToken(t,o.Messages.StaticPrototype),!c&&this.isPropertyKey(i,"constructor")&&(("method"!==n||!l||s&&s.generator)&&this.throwUnexpectedToken(t,o.Messages.ConstructorSpecialMethod),e.value?this.throwUnexpectedToken(t,o.Messages.DuplicateConstructor):e.value=!0,n="constructor")),this.finalize(r,new a.MethodDefinition(i,u,s,n,c))},e.prototype.parseClassElementList=function(){var e=[],t={value:!1};for(this.expect("{");!this.match("}");)this.match(";")?this.nextToken():e.push(this.parseClassElement(t));return this.expect("}"),e},e.prototype.parseClassBody=function(){var e=this.createNode(),t=this.parseClassElementList();return this.finalize(e,new a.ClassBody(t))},e.prototype.parseClassDeclaration=function(e){var t=this.createNode(),r=this.context.strict;this.context.strict=!0,this.expectKeyword("class");var n=e&&3!==this.lookahead.type?null:this.parseVariableIdentifier(),i=null;this.matchKeyword("extends")&&(this.nextToken(),i=this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));var o=this.parseClassBody();return this.context.strict=r,this.finalize(t,new a.ClassDeclaration(n,i,o))},e.prototype.parseClassExpression=function(){var e=this.createNode(),t=this.context.strict;this.context.strict=!0,this.expectKeyword("class");var r=3===this.lookahead.type?this.parseVariableIdentifier():null,n=null;this.matchKeyword("extends")&&(this.nextToken(),n=this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));var i=this.parseClassBody();return this.context.strict=t,this.finalize(e,new a.ClassExpression(r,n,i))},e.prototype.parseModule=function(){this.context.strict=!0,this.context.isModule=!0,this.scanner.isModule=!0;for(var e=this.createNode(),t=this.parseDirectivePrologues();2!==this.lookahead.type;)t.push(this.parseStatementListItem());return this.finalize(e,new a.Module(t))},e.prototype.parseScript=function(){for(var e=this.createNode(),t=this.parseDirectivePrologues();2!==this.lookahead.type;)t.push(this.parseStatementListItem());return this.finalize(e,new a.Script(t))},e.prototype.parseModuleSpecifier=function(){var e=this.createNode();8!==this.lookahead.type&&this.throwError(o.Messages.InvalidModuleSpecifier);var t=this.nextToken(),r=this.getTokenRaw(t);return this.finalize(e,new a.Literal(t.value,r))},e.prototype.parseImportSpecifier=function(){var e,t,r=this.createNode();return 3===this.lookahead.type?(t=e=this.parseVariableIdentifier(),this.matchContextualKeyword("as")&&(this.nextToken(),t=this.parseVariableIdentifier())):(t=e=this.parseIdentifierName(),this.matchContextualKeyword("as")?(this.nextToken(),t=this.parseVariableIdentifier()):this.throwUnexpectedToken(this.nextToken())),this.finalize(r,new a.ImportSpecifier(t,e))},e.prototype.parseNamedImports=function(){this.expect("{");for(var e=[];!this.match("}");)e.push(this.parseImportSpecifier()),this.match("}")||this.expect(",");return this.expect("}"),e},e.prototype.parseImportDefaultSpecifier=function(){var e=this.createNode(),t=this.parseIdentifierName();return this.finalize(e,new a.ImportDefaultSpecifier(t))},e.prototype.parseImportNamespaceSpecifier=function(){var e=this.createNode();this.expect("*"),this.matchContextualKeyword("as")||this.throwError(o.Messages.NoAsAfterImportNamespace),this.nextToken();var t=this.parseIdentifierName();return this.finalize(e,new a.ImportNamespaceSpecifier(t))},e.prototype.parseImportDeclaration=function(){this.context.inFunctionBody&&this.throwError(o.Messages.IllegalImportDeclaration);var e,t=this.createNode();this.expectKeyword("import");var r=[];if(8===this.lookahead.type)e=this.parseModuleSpecifier();else {if(this.match("{")?r=r.concat(this.parseNamedImports()):this.match("*")?r.push(this.parseImportNamespaceSpecifier()):this.isIdentifierName(this.lookahead)&&!this.matchKeyword("default")?(r.push(this.parseImportDefaultSpecifier()),this.match(",")&&(this.nextToken(),this.match("*")?r.push(this.parseImportNamespaceSpecifier()):this.match("{")?r=r.concat(this.parseNamedImports()):this.throwUnexpectedToken(this.lookahead))):this.throwUnexpectedToken(this.nextToken()),!this.matchContextualKeyword("from")){var n=this.lookahead.value?o.Messages.UnexpectedToken:o.Messages.MissingFromClause;this.throwError(n,this.lookahead.value);}this.nextToken(),e=this.parseModuleSpecifier();}return this.consumeSemicolon(),this.finalize(t,new a.ImportDeclaration(r,e))},e.prototype.parseExportSpecifier=function(){var e=this.createNode(),t=this.parseIdentifierName(),r=t;return this.matchContextualKeyword("as")&&(this.nextToken(),r=this.parseIdentifierName()),this.finalize(e,new a.ExportSpecifier(t,r))},e.prototype.parseExportDeclaration=function(){this.context.inFunctionBody&&this.throwError(o.Messages.IllegalExportDeclaration);var e,t=this.createNode();if(this.expectKeyword("export"),this.matchKeyword("default"))if(this.nextToken(),this.matchKeyword("function")){var r=this.parseFunctionDeclaration(!0);e=this.finalize(t,new a.ExportDefaultDeclaration(r));}else this.matchKeyword("class")?(r=this.parseClassDeclaration(!0),e=this.finalize(t,new a.ExportDefaultDeclaration(r))):this.matchContextualKeyword("async")?(r=this.matchAsyncFunction()?this.parseFunctionDeclaration(!0):this.parseAssignmentExpression(),e=this.finalize(t,new a.ExportDefaultDeclaration(r))):(this.matchContextualKeyword("from")&&this.throwError(o.Messages.UnexpectedToken,this.lookahead.value),r=this.match("{")?this.parseObjectInitializer():this.match("[")?this.parseArrayInitializer():this.parseAssignmentExpression(),this.consumeSemicolon(),e=this.finalize(t,new a.ExportDefaultDeclaration(r)));else if(this.match("*")){if(this.nextToken(),!this.matchContextualKeyword("from")){var n=this.lookahead.value?o.Messages.UnexpectedToken:o.Messages.MissingFromClause;this.throwError(n,this.lookahead.value);}this.nextToken();var i=this.parseModuleSpecifier();this.consumeSemicolon(),e=this.finalize(t,new a.ExportAllDeclaration(i));}else if(4===this.lookahead.type){switch(r=void 0,this.lookahead.value){case"let":case"const":r=this.parseLexicalDeclaration({inFor:!1});break;case"var":case"class":case"function":r=this.parseStatementListItem();break;default:this.throwUnexpectedToken(this.lookahead);}e=this.finalize(t,new a.ExportNamedDeclaration(r,[],null));}else if(this.matchAsyncFunction())r=this.parseFunctionDeclaration(),e=this.finalize(t,new a.ExportNamedDeclaration(r,[],null));else {var s=[],u=null,l=!1;for(this.expect("{");!this.match("}");)l=l||this.matchKeyword("default"),s.push(this.parseExportSpecifier()),this.match("}")||this.expect(",");this.expect("}"),this.matchContextualKeyword("from")?(this.nextToken(),u=this.parseModuleSpecifier(),this.consumeSemicolon()):l?(n=this.lookahead.value?o.Messages.UnexpectedToken:o.Messages.MissingFromClause,this.throwError(n,this.lookahead.value)):this.consumeSemicolon(),e=this.finalize(t,new a.ExportNamedDeclaration(null,s,u));}return e},e}();t.Parser=c;},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.assert=function(e,t){if(!e)throw new Error("ASSERT: "+t)};},function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.errors=[],this.tolerant=!1;}return e.prototype.recordError=function(e){this.errors.push(e);},e.prototype.tolerate=function(e){if(!this.tolerant)throw e;this.recordError(e);},e.prototype.constructError=function(e,t){var r=new Error(e);try{throw r}catch(e){Object.create&&Object.defineProperty&&(r=Object.create(e),Object.defineProperty(r,"column",{value:t}));}return r},e.prototype.createError=function(e,t,r,n){var i="Line "+t+": "+n,o=this.constructError(i,r);return o.index=e,o.lineNumber=t,o.description=n,o},e.prototype.throwError=function(e,t,r,n){throw this.createError(e,t,r,n)},e.prototype.tolerateError=function(e,t,r,n){var i=this.createError(e,t,r,n);if(!this.tolerant)throw i;this.recordError(i);},e}();t.ErrorHandler=r;},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Messages={BadGetterArity:"Getter must not have any formal parameters",BadSetterArity:"Setter must have exactly one formal parameter",BadSetterRestParameter:"Setter function argument must not be a rest parameter",ConstructorIsAsync:"Class constructor may not be an async method",ConstructorSpecialMethod:"Class constructor may not be an accessor",DeclarationMissingInitializer:"Missing initializer in %0 declaration",DefaultRestParameter:"Unexpected token =",DuplicateBinding:"Duplicate binding %0",DuplicateConstructor:"A class may only have one constructor",DuplicateProtoProperty:"Duplicate __proto__ fields are not allowed in object literals",ForInOfLoopInitializer:"%0 loop variable declaration may not have an initializer",GeneratorInLegacyContext:"Generator declarations are not allowed in legacy contexts",IllegalBreak:"Illegal break statement",IllegalContinue:"Illegal continue statement",IllegalExportDeclaration:"Unexpected token",IllegalImportDeclaration:"Unexpected token",IllegalLanguageModeDirective:"Illegal 'use strict' directive in function with non-simple parameter list",IllegalReturn:"Illegal return statement",InvalidEscapedReservedWord:"Keyword must not contain escaped characters",InvalidHexEscapeSequence:"Invalid hexadecimal escape sequence",InvalidLHSInAssignment:"Invalid left-hand side in assignment",InvalidLHSInForIn:"Invalid left-hand side in for-in",InvalidLHSInForLoop:"Invalid left-hand side in for-loop",InvalidModuleSpecifier:"Unexpected token",InvalidRegExp:"Invalid regular expression",LetInLexicalBinding:"let is disallowed as a lexically bound name",MissingFromClause:"Unexpected token",MultipleDefaultsInSwitch:"More than one default clause in switch statement",NewlineAfterThrow:"Illegal newline after throw",NoAsAfterImportNamespace:"Unexpected token",NoCatchOrFinally:"Missing catch or finally after try",ParameterAfterRestParameter:"Rest parameter must be last formal parameter",Redeclaration:"%0 '%1' has already been declared",StaticPrototype:"Classes may not have static property named prototype",StrictCatchVariable:"Catch variable may not be eval or arguments in strict mode",StrictDelete:"Delete of an unqualified identifier in strict mode.",StrictFunction:"In strict mode code, functions can only be declared at top level or inside a block",StrictFunctionName:"Function name may not be eval or arguments in strict mode",StrictLHSAssignment:"Assignment to eval or arguments is not allowed in strict mode",StrictLHSPostfix:"Postfix increment/decrement may not have eval or arguments operand in strict mode",StrictLHSPrefix:"Prefix increment/decrement may not have eval or arguments operand in strict mode",StrictModeWith:"Strict mode code may not include a with statement",StrictOctalLiteral:"Octal literals are not allowed in strict mode.",StrictParamDupe:"Strict mode function may not have duplicate parameter names",StrictParamName:"Parameter name eval or arguments is not allowed in strict mode",StrictReservedWord:"Use of future reserved word in strict mode",StrictVarName:"Variable name may not be eval or arguments in strict mode",TemplateOctalLiteral:"Octal literals are not allowed in template strings.",UnexpectedEOS:"Unexpected end of input",UnexpectedIdentifier:"Unexpected identifier",UnexpectedNumber:"Unexpected number",UnexpectedReserved:"Unexpected reserved word",UnexpectedString:"Unexpected string",UnexpectedTemplate:"Unexpected quasi %0",UnexpectedToken:"Unexpected token %0",UnexpectedTokenIllegal:"Unexpected token ILLEGAL",UnknownLabel:"Undefined label '%0'",UnterminatedRegExp:"Invalid regular expression: missing /"};},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(9),i=r(4),o=r(11);function a(e){return "0123456789abcdef".indexOf(e.toLowerCase())}function s(e){return "01234567".indexOf(e)}var u=function(){function e(e,t){this.source=e,this.errorHandler=t,this.trackComment=!1,this.isModule=!1,this.length=e.length,this.index=0,this.lineNumber=e.length>0?1:0,this.lineStart=0,this.curlyStack=[];}return e.prototype.saveState=function(){return {index:this.index,lineNumber:this.lineNumber,lineStart:this.lineStart}},e.prototype.restoreState=function(e){this.index=e.index,this.lineNumber=e.lineNumber,this.lineStart=e.lineStart;},e.prototype.eof=function(){return this.index>=this.length},e.prototype.throwUnexpectedToken=function(e){return void 0===e&&(e=o.Messages.UnexpectedTokenIllegal),this.errorHandler.throwError(this.index,this.lineNumber,this.index-this.lineStart+1,e)},e.prototype.tolerateUnexpectedToken=function(e){void 0===e&&(e=o.Messages.UnexpectedTokenIllegal),this.errorHandler.tolerateError(this.index,this.lineNumber,this.index-this.lineStart+1,e);},e.prototype.skipSingleLineComment=function(e){var t,r,n=[];for(this.trackComment&&(n=[],t=this.index-e,r={start:{line:this.lineNumber,column:this.index-this.lineStart-e},end:{}});!this.eof();){var o=this.source.charCodeAt(this.index);if(++this.index,i.Character.isLineTerminator(o)){if(this.trackComment){r.end={line:this.lineNumber,column:this.index-this.lineStart-1};var a={multiLine:!1,slice:[t+e,this.index-1],range:[t,this.index-1],loc:r};n.push(a);}return 13===o&&10===this.source.charCodeAt(this.index)&&++this.index,++this.lineNumber,this.lineStart=this.index,n}}return this.trackComment&&(r.end={line:this.lineNumber,column:this.index-this.lineStart},a={multiLine:!1,slice:[t+e,this.index],range:[t,this.index],loc:r},n.push(a)),n},e.prototype.skipMultiLineComment=function(){var e,t,r=[];for(this.trackComment&&(r=[],e=this.index-2,t={start:{line:this.lineNumber,column:this.index-this.lineStart-2},end:{}});!this.eof();){var n=this.source.charCodeAt(this.index);if(i.Character.isLineTerminator(n))13===n&&10===this.source.charCodeAt(this.index+1)&&++this.index,++this.lineNumber,++this.index,this.lineStart=this.index;else if(42===n){if(47===this.source.charCodeAt(this.index+1)){if(this.index+=2,this.trackComment){t.end={line:this.lineNumber,column:this.index-this.lineStart};var o={multiLine:!0,slice:[e+2,this.index-2],range:[e,this.index],loc:t};r.push(o);}return r}++this.index;}else ++this.index;}return this.trackComment&&(t.end={line:this.lineNumber,column:this.index-this.lineStart},o={multiLine:!0,slice:[e+2,this.index],range:[e,this.index],loc:t},r.push(o)),this.tolerateUnexpectedToken(),r},e.prototype.scanComments=function(){var e;this.trackComment&&(e=[]);for(var t=0===this.index;!this.eof();){var r=this.source.charCodeAt(this.index);if(i.Character.isWhiteSpace(r))++this.index;else if(i.Character.isLineTerminator(r))++this.index,13===r&&10===this.source.charCodeAt(this.index)&&++this.index,++this.lineNumber,this.lineStart=this.index,t=!0;else if(47===r)if(47===(r=this.source.charCodeAt(this.index+1))){this.index+=2;var n=this.skipSingleLineComment(2);this.trackComment&&(e=e.concat(n)),t=!0;}else {if(42!==r)break;this.index+=2,n=this.skipMultiLineComment(),this.trackComment&&(e=e.concat(n));}else if(t&&45===r){if(45!==this.source.charCodeAt(this.index+1)||62!==this.source.charCodeAt(this.index+2))break;this.index+=3,n=this.skipSingleLineComment(3),this.trackComment&&(e=e.concat(n));}else {if(60!==r||this.isModule)break;if("!--"!==this.source.slice(this.index+1,this.index+4))break;this.index+=4,n=this.skipSingleLineComment(4),this.trackComment&&(e=e.concat(n));}}return e},e.prototype.isFutureReservedWord=function(e){switch(e){case"enum":case"export":case"import":case"super":return !0;default:return !1}},e.prototype.isStrictModeReservedWord=function(e){switch(e){case"implements":case"interface":case"package":case"private":case"protected":case"public":case"static":case"yield":case"let":return !0;default:return !1}},e.prototype.isRestrictedWord=function(e){return "eval"===e||"arguments"===e},e.prototype.isKeyword=function(e){switch(e.length){case 2:return "if"===e||"in"===e||"do"===e;case 3:return "var"===e||"for"===e||"new"===e||"try"===e||"let"===e;case 4:return "this"===e||"else"===e||"case"===e||"void"===e||"with"===e||"enum"===e;case 5:return "while"===e||"break"===e||"catch"===e||"throw"===e||"const"===e||"yield"===e||"class"===e||"super"===e;case 6:return "return"===e||"typeof"===e||"delete"===e||"switch"===e||"export"===e||"import"===e;case 7:return "default"===e||"finally"===e||"extends"===e;case 8:return "function"===e||"continue"===e||"debugger"===e;case 10:return "instanceof"===e;default:return !1}},e.prototype.codePointAt=function(e){var t=this.source.charCodeAt(e);if(t>=55296&&t<=56319){var r=this.source.charCodeAt(e+1);r>=56320&&r<=57343&&(t=1024*(t-55296)+r-56320+65536);}return t},e.prototype.scanHexEscape=function(e){for(var t="u"===e?4:2,r=0,n=0;n<t;++n){if(this.eof()||!i.Character.isHexDigit(this.source.charCodeAt(this.index)))return null;r=16*r+a(this.source[this.index++]);}return String.fromCharCode(r)},e.prototype.scanUnicodeCodePointEscape=function(){var e=this.source[this.index],t=0;for("}"===e&&this.throwUnexpectedToken();!this.eof()&&(e=this.source[this.index++],i.Character.isHexDigit(e.charCodeAt(0)));)t=16*t+a(e);return (t>1114111||"}"!==e)&&this.throwUnexpectedToken(),i.Character.fromCodePoint(t)},e.prototype.getIdentifier=function(){for(var e=this.index++;!this.eof();){var t=this.source.charCodeAt(this.index);if(92===t)return this.index=e,this.getComplexIdentifier();if(t>=55296&&t<57343)return this.index=e,this.getComplexIdentifier();if(!i.Character.isIdentifierPart(t))break;++this.index;}return this.source.slice(e,this.index)},e.prototype.getComplexIdentifier=function(){var e,t=this.codePointAt(this.index),r=i.Character.fromCodePoint(t);for(this.index+=r.length,92===t&&(117!==this.source.charCodeAt(this.index)&&this.throwUnexpectedToken(),++this.index,"{"===this.source[this.index]?(++this.index,e=this.scanUnicodeCodePointEscape()):null!==(e=this.scanHexEscape("u"))&&"\\"!==e&&i.Character.isIdentifierStart(e.charCodeAt(0))||this.throwUnexpectedToken(),r=e);!this.eof()&&(t=this.codePointAt(this.index),i.Character.isIdentifierPart(t));)r+=e=i.Character.fromCodePoint(t),this.index+=e.length,92===t&&(r=r.substr(0,r.length-1),117!==this.source.charCodeAt(this.index)&&this.throwUnexpectedToken(),++this.index,"{"===this.source[this.index]?(++this.index,e=this.scanUnicodeCodePointEscape()):null!==(e=this.scanHexEscape("u"))&&"\\"!==e&&i.Character.isIdentifierPart(e.charCodeAt(0))||this.throwUnexpectedToken(),r+=e);return r},e.prototype.octalToDecimal=function(e){var t="0"!==e,r=s(e);return !this.eof()&&i.Character.isOctalDigit(this.source.charCodeAt(this.index))&&(t=!0,r=8*r+s(this.source[this.index++]),"0123".indexOf(e)>=0&&!this.eof()&&i.Character.isOctalDigit(this.source.charCodeAt(this.index))&&(r=8*r+s(this.source[this.index++]))),{code:r,octal:t}},e.prototype.scanIdentifier=function(){var e,t=this.index,r=92===this.source.charCodeAt(t)?this.getComplexIdentifier():this.getIdentifier();if(3!=(e=1===r.length?3:this.isKeyword(r)?4:"null"===r?5:"true"===r||"false"===r?1:3)&&t+r.length!==this.index){var n=this.index;this.index=t,this.tolerateUnexpectedToken(o.Messages.InvalidEscapedReservedWord),this.index=n;}return {type:e,value:r,lineNumber:this.lineNumber,lineStart:this.lineStart,start:t,end:this.index}},e.prototype.scanPunctuator=function(){var e=this.index,t=this.source[this.index];switch(t){case"(":case"{":"{"===t&&this.curlyStack.push("{"),++this.index;break;case".":++this.index,"."===this.source[this.index]&&"."===this.source[this.index+1]&&(this.index+=2,t="...");break;case"}":++this.index,this.curlyStack.pop();break;case")":case";":case",":case"[":case"]":case":":case"?":case"~":++this.index;break;default:">>>="===(t=this.source.substr(this.index,4))?this.index+=4:"==="===(t=t.substr(0,3))||"!=="===t||">>>"===t||"<<="===t||">>="===t||"**="===t?this.index+=3:"&&"===(t=t.substr(0,2))||"||"===t||"=="===t||"!="===t||"+="===t||"-="===t||"*="===t||"/="===t||"++"===t||"--"===t||"<<"===t||">>"===t||"&="===t||"|="===t||"^="===t||"%="===t||"<="===t||">="===t||"=>"===t||"**"===t?this.index+=2:(t=this.source[this.index],"<>=!+-*%&|^/".indexOf(t)>=0&&++this.index);}return this.index===e&&this.throwUnexpectedToken(),{type:7,value:t,lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanHexLiteral=function(e){for(var t="";!this.eof()&&i.Character.isHexDigit(this.source.charCodeAt(this.index));)t+=this.source[this.index++];return 0===t.length&&this.throwUnexpectedToken(),i.Character.isIdentifierStart(this.source.charCodeAt(this.index))&&this.throwUnexpectedToken(),{type:6,value:parseInt("0x"+t,16),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanBinaryLiteral=function(e){for(var t,r="";!this.eof()&&("0"===(t=this.source[this.index])||"1"===t);)r+=this.source[this.index++];return 0===r.length&&this.throwUnexpectedToken(),this.eof()||(t=this.source.charCodeAt(this.index),(i.Character.isIdentifierStart(t)||i.Character.isDecimalDigit(t))&&this.throwUnexpectedToken()),{type:6,value:parseInt(r,2),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanOctalLiteral=function(e,t){var r="",n=!1;for(i.Character.isOctalDigit(e.charCodeAt(0))?(n=!0,r="0"+this.source[this.index++]):++this.index;!this.eof()&&i.Character.isOctalDigit(this.source.charCodeAt(this.index));)r+=this.source[this.index++];return n||0!==r.length||this.throwUnexpectedToken(),(i.Character.isIdentifierStart(this.source.charCodeAt(this.index))||i.Character.isDecimalDigit(this.source.charCodeAt(this.index)))&&this.throwUnexpectedToken(),{type:6,value:parseInt(r,8),octal:n,lineNumber:this.lineNumber,lineStart:this.lineStart,start:t,end:this.index}},e.prototype.isImplicitOctalLiteral=function(){for(var e=this.index+1;e<this.length;++e){var t=this.source[e];if("8"===t||"9"===t)return !1;if(!i.Character.isOctalDigit(t.charCodeAt(0)))return !0}return !0},e.prototype.scanNumericLiteral=function(){var e=this.index,t=this.source[e];n.assert(i.Character.isDecimalDigit(t.charCodeAt(0))||"."===t,"Numeric literal must start with a decimal digit or a decimal point");var r="";if("."!==t){if(r=this.source[this.index++],t=this.source[this.index],"0"===r){if("x"===t||"X"===t)return ++this.index,this.scanHexLiteral(e);if("b"===t||"B"===t)return ++this.index,this.scanBinaryLiteral(e);if("o"===t||"O"===t)return this.scanOctalLiteral(t,e);if(t&&i.Character.isOctalDigit(t.charCodeAt(0))&&this.isImplicitOctalLiteral())return this.scanOctalLiteral(t,e)}for(;i.Character.isDecimalDigit(this.source.charCodeAt(this.index));)r+=this.source[this.index++];t=this.source[this.index];}if("."===t){for(r+=this.source[this.index++];i.Character.isDecimalDigit(this.source.charCodeAt(this.index));)r+=this.source[this.index++];t=this.source[this.index];}if("e"===t||"E"===t)if(r+=this.source[this.index++],"+"!==(t=this.source[this.index])&&"-"!==t||(r+=this.source[this.index++]),i.Character.isDecimalDigit(this.source.charCodeAt(this.index)))for(;i.Character.isDecimalDigit(this.source.charCodeAt(this.index));)r+=this.source[this.index++];else this.throwUnexpectedToken();return i.Character.isIdentifierStart(this.source.charCodeAt(this.index))&&this.throwUnexpectedToken(),{type:6,value:parseFloat(r),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanStringLiteral=function(){var e=this.index,t=this.source[e];n.assert("'"===t||'"'===t,"String literal must starts with a quote"),++this.index;for(var r=!1,a="";!this.eof();){var s=this.source[this.index++];if(s===t){t="";break}if("\\"===s)if((s=this.source[this.index++])&&i.Character.isLineTerminator(s.charCodeAt(0)))++this.lineNumber,"\r"===s&&"\n"===this.source[this.index]&&++this.index,this.lineStart=this.index;else switch(s){case"u":if("{"===this.source[this.index])++this.index,a+=this.scanUnicodeCodePointEscape();else {var u=this.scanHexEscape(s);null===u&&this.throwUnexpectedToken(),a+=u;}break;case"x":var l=this.scanHexEscape(s);null===l&&this.throwUnexpectedToken(o.Messages.InvalidHexEscapeSequence),a+=l;break;case"n":a+="\n";break;case"r":a+="\r";break;case"t":a+="\t";break;case"b":a+="\b";break;case"f":a+="\f";break;case"v":a+="\v";break;case"8":case"9":a+=s,this.tolerateUnexpectedToken();break;default:if(s&&i.Character.isOctalDigit(s.charCodeAt(0))){var c=this.octalToDecimal(s);r=c.octal||r,a+=String.fromCharCode(c.code);}else a+=s;}else {if(i.Character.isLineTerminator(s.charCodeAt(0)))break;a+=s;}}return ""!==t&&(this.index=e,this.throwUnexpectedToken()),{type:8,value:a,octal:r,lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanTemplate=function(){var e="",t=!1,r=this.index,n="`"===this.source[r],a=!1,s=2;for(++this.index;!this.eof();){var u=this.source[this.index++];if("`"===u){s=1,a=!0,t=!0;break}if("$"===u){if("{"===this.source[this.index]){this.curlyStack.push("${"),++this.index,t=!0;break}e+=u;}else if("\\"===u)if(u=this.source[this.index++],i.Character.isLineTerminator(u.charCodeAt(0)))++this.lineNumber,"\r"===u&&"\n"===this.source[this.index]&&++this.index,this.lineStart=this.index;else switch(u){case"n":e+="\n";break;case"r":e+="\r";break;case"t":e+="\t";break;case"u":if("{"===this.source[this.index])++this.index,e+=this.scanUnicodeCodePointEscape();else {var l=this.index,c=this.scanHexEscape(u);null!==c?e+=c:(this.index=l,e+=u);}break;case"x":var h=this.scanHexEscape(u);null===h&&this.throwUnexpectedToken(o.Messages.InvalidHexEscapeSequence),e+=h;break;case"b":e+="\b";break;case"f":e+="\f";break;case"v":e+="\v";break;default:"0"===u?(i.Character.isDecimalDigit(this.source.charCodeAt(this.index))&&this.throwUnexpectedToken(o.Messages.TemplateOctalLiteral),e+="\0"):i.Character.isOctalDigit(u.charCodeAt(0))?this.throwUnexpectedToken(o.Messages.TemplateOctalLiteral):e+=u;}else i.Character.isLineTerminator(u.charCodeAt(0))?(++this.lineNumber,"\r"===u&&"\n"===this.source[this.index]&&++this.index,this.lineStart=this.index,e+="\n"):e+=u;}return t||this.throwUnexpectedToken(),n||this.curlyStack.pop(),{type:10,value:this.source.slice(r+1,this.index-s),cooked:e,head:n,tail:a,lineNumber:this.lineNumber,lineStart:this.lineStart,start:r,end:this.index}},e.prototype.testRegExp=function(e,t){var r=e,n=this;t.indexOf("u")>=0&&(r=r.replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g,(function(e,t,r){var i=parseInt(t||r,16);return i>1114111&&n.throwUnexpectedToken(o.Messages.InvalidRegExp),i<=65535?String.fromCharCode(i):"￿"})).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,"￿"));try{RegExp(r);}catch(e){this.throwUnexpectedToken(o.Messages.InvalidRegExp);}try{return new RegExp(e,t)}catch(e){return null}},e.prototype.scanRegExpBody=function(){var e=this.source[this.index];n.assert("/"===e,"Regular expression literal must start with a slash");for(var t=this.source[this.index++],r=!1,a=!1;!this.eof();)if(t+=e=this.source[this.index++],"\\"===e)e=this.source[this.index++],i.Character.isLineTerminator(e.charCodeAt(0))&&this.throwUnexpectedToken(o.Messages.UnterminatedRegExp),t+=e;else if(i.Character.isLineTerminator(e.charCodeAt(0)))this.throwUnexpectedToken(o.Messages.UnterminatedRegExp);else if(r)"]"===e&&(r=!1);else {if("/"===e){a=!0;break}"["===e&&(r=!0);}return a||this.throwUnexpectedToken(o.Messages.UnterminatedRegExp),t.substr(1,t.length-2)},e.prototype.scanRegExpFlags=function(){for(var e="";!this.eof();){var t=this.source[this.index];if(!i.Character.isIdentifierPart(t.charCodeAt(0)))break;if(++this.index,"\\"!==t||this.eof())e+=t;else if("u"===(t=this.source[this.index])){++this.index;var r=this.index,n=this.scanHexEscape("u");if(null!==n)for(e+=n;r<this.index;++r)this.source[r];else this.index=r,e+="u";this.tolerateUnexpectedToken();}else this.tolerateUnexpectedToken();}return e},e.prototype.scanRegExp=function(){var e=this.index,t=this.scanRegExpBody(),r=this.scanRegExpFlags();return {type:9,value:"",pattern:t,flags:r,regex:this.testRegExp(t,r),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.lex=function(){if(this.eof())return {type:2,value:"",lineNumber:this.lineNumber,lineStart:this.lineStart,start:this.index,end:this.index};var e=this.source.charCodeAt(this.index);return i.Character.isIdentifierStart(e)?this.scanIdentifier():40===e||41===e||59===e?this.scanPunctuator():39===e||34===e?this.scanStringLiteral():46===e?i.Character.isDecimalDigit(this.source.charCodeAt(this.index+1))?this.scanNumericLiteral():this.scanPunctuator():i.Character.isDecimalDigit(e)?this.scanNumericLiteral():96===e||125===e&&"${"===this.curlyStack[this.curlyStack.length-1]?this.scanTemplate():e>=55296&&e<57343&&i.Character.isIdentifierStart(this.codePointAt(this.index))?this.scanIdentifier():this.scanPunctuator()},e}();t.Scanner=u;},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.TokenName={},t.TokenName[1]="Boolean",t.TokenName[2]="<end>",t.TokenName[3]="Identifier",t.TokenName[4]="Keyword",t.TokenName[5]="Null",t.TokenName[6]="Numeric",t.TokenName[7]="Punctuator",t.TokenName[8]="String",t.TokenName[9]="RegularExpression",t.TokenName[10]="Template";},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.XHTMLEntities={quot:'"',amp:"&",apos:"'",gt:">",nbsp:" ",iexcl:"¡",cent:"¢",pound:"£",curren:"¤",yen:"¥",brvbar:"¦",sect:"§",uml:"¨",copy:"©",ordf:"ª",laquo:"«",not:"¬",shy:"­",reg:"®",macr:"¯",deg:"°",plusmn:"±",sup2:"²",sup3:"³",acute:"´",micro:"µ",para:"¶",middot:"·",cedil:"¸",sup1:"¹",ordm:"º",raquo:"»",frac14:"¼",frac12:"½",frac34:"¾",iquest:"¿",Agrave:"À",Aacute:"Á",Acirc:"Â",Atilde:"Ã",Auml:"Ä",Aring:"Å",AElig:"Æ",Ccedil:"Ç",Egrave:"È",Eacute:"É",Ecirc:"Ê",Euml:"Ë",Igrave:"Ì",Iacute:"Í",Icirc:"Î",Iuml:"Ï",ETH:"Ð",Ntilde:"Ñ",Ograve:"Ò",Oacute:"Ó",Ocirc:"Ô",Otilde:"Õ",Ouml:"Ö",times:"×",Oslash:"Ø",Ugrave:"Ù",Uacute:"Ú",Ucirc:"Û",Uuml:"Ü",Yacute:"Ý",THORN:"Þ",szlig:"ß",agrave:"à",aacute:"á",acirc:"â",atilde:"ã",auml:"ä",aring:"å",aelig:"æ",ccedil:"ç",egrave:"è",eacute:"é",ecirc:"ê",euml:"ë",igrave:"ì",iacute:"í",icirc:"î",iuml:"ï",eth:"ð",ntilde:"ñ",ograve:"ò",oacute:"ó",ocirc:"ô",otilde:"õ",ouml:"ö",divide:"÷",oslash:"ø",ugrave:"ù",uacute:"ú",ucirc:"û",uuml:"ü",yacute:"ý",thorn:"þ",yuml:"ÿ",OElig:"Œ",oelig:"œ",Scaron:"Š",scaron:"š",Yuml:"Ÿ",fnof:"ƒ",circ:"ˆ",tilde:"˜",Alpha:"Α",Beta:"Β",Gamma:"Γ",Delta:"Δ",Epsilon:"Ε",Zeta:"Ζ",Eta:"Η",Theta:"Θ",Iota:"Ι",Kappa:"Κ",Lambda:"Λ",Mu:"Μ",Nu:"Ν",Xi:"Ξ",Omicron:"Ο",Pi:"Π",Rho:"Ρ",Sigma:"Σ",Tau:"Τ",Upsilon:"Υ",Phi:"Φ",Chi:"Χ",Psi:"Ψ",Omega:"Ω",alpha:"α",beta:"β",gamma:"γ",delta:"δ",epsilon:"ε",zeta:"ζ",eta:"η",theta:"θ",iota:"ι",kappa:"κ",lambda:"λ",mu:"μ",nu:"ν",xi:"ξ",omicron:"ο",pi:"π",rho:"ρ",sigmaf:"ς",sigma:"σ",tau:"τ",upsilon:"υ",phi:"φ",chi:"χ",psi:"ψ",omega:"ω",thetasym:"ϑ",upsih:"ϒ",piv:"ϖ",ensp:" ",emsp:" ",thinsp:" ",zwnj:"‌",zwj:"‍",lrm:"‎",rlm:"‏",ndash:"–",mdash:"—",lsquo:"‘",rsquo:"’",sbquo:"‚",ldquo:"“",rdquo:"”",bdquo:"„",dagger:"†",Dagger:"‡",bull:"•",hellip:"…",permil:"‰",prime:"′",Prime:"″",lsaquo:"‹",rsaquo:"›",oline:"‾",frasl:"⁄",euro:"€",image:"ℑ",weierp:"℘",real:"ℜ",trade:"™",alefsym:"ℵ",larr:"←",uarr:"↑",rarr:"→",darr:"↓",harr:"↔",crarr:"↵",lArr:"⇐",uArr:"⇑",rArr:"⇒",dArr:"⇓",hArr:"⇔",forall:"∀",part:"∂",exist:"∃",empty:"∅",nabla:"∇",isin:"∈",notin:"∉",ni:"∋",prod:"∏",sum:"∑",minus:"−",lowast:"∗",radic:"√",prop:"∝",infin:"∞",ang:"∠",and:"∧",or:"∨",cap:"∩",cup:"∪",int:"∫",there4:"∴",sim:"∼",cong:"≅",asymp:"≈",ne:"≠",equiv:"≡",le:"≤",ge:"≥",sub:"⊂",sup:"⊃",nsub:"⊄",sube:"⊆",supe:"⊇",oplus:"⊕",otimes:"⊗",perp:"⊥",sdot:"⋅",lceil:"⌈",rceil:"⌉",lfloor:"⌊",rfloor:"⌋",loz:"◊",spades:"♠",clubs:"♣",hearts:"♥",diams:"♦",lang:"⟨",rang:"⟩"};},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(10),i=r(12),o=r(13),a=function(){function e(){this.values=[],this.curly=this.paren=-1;}return e.prototype.beforeFunctionExpression=function(e){return ["(","{","[","in","typeof","instanceof","new","return","case","delete","throw","void","=","+=","-=","*=","**=","/=","%=","<<=",">>=",">>>=","&=","|=","^=",",","+","-","*","**","/","%","++","--","<<",">>",">>>","&","|","^","!","~","&&","||","?",":","===","==",">=","<=","<",">","!=","!=="].indexOf(e)>=0},e.prototype.isRegexStart=function(){var e=this.values[this.values.length-1],t=null!==e;switch(e){case"this":case"]":t=!1;break;case")":var r=this.values[this.paren-1];t="if"===r||"while"===r||"for"===r||"with"===r;break;case"}":if(t=!1,"function"===this.values[this.curly-3])t=!!(n=this.values[this.curly-4])&&!this.beforeFunctionExpression(n);else if("function"===this.values[this.curly-4]){var n;t=!(n=this.values[this.curly-5])||!this.beforeFunctionExpression(n);}}return t},e.prototype.push=function(e){7===e.type||4===e.type?("{"===e.value?this.curly=this.values.length:"("===e.value&&(this.paren=this.values.length),this.values.push(e.value)):this.values.push(null);},e}(),s=function(){function e(e,t){this.errorHandler=new n.ErrorHandler,this.errorHandler.tolerant=!!t&&"boolean"==typeof t.tolerant&&t.tolerant,this.scanner=new i.Scanner(e,this.errorHandler),this.scanner.trackComment=!!t&&"boolean"==typeof t.comment&&t.comment,this.trackRange=!!t&&"boolean"==typeof t.range&&t.range,this.trackLoc=!!t&&"boolean"==typeof t.loc&&t.loc,this.buffer=[],this.reader=new a;}return e.prototype.errors=function(){return this.errorHandler.errors},e.prototype.getNextToken=function(){if(0===this.buffer.length){var e=this.scanner.scanComments();if(this.scanner.trackComment)for(var t=0;t<e.length;++t){var r=e[t],n=this.scanner.source.slice(r.slice[0],r.slice[1]),i={type:r.multiLine?"BlockComment":"LineComment",value:n};this.trackRange&&(i.range=r.range),this.trackLoc&&(i.loc=r.loc),this.buffer.push(i);}if(!this.scanner.eof()){var a=void 0;this.trackLoc&&(a={start:{line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart},end:{}});var s="/"===this.scanner.source[this.scanner.index]&&this.reader.isRegexStart()?this.scanner.scanRegExp():this.scanner.lex();this.reader.push(s);var u={type:o.TokenName[s.type],value:this.scanner.source.slice(s.start,s.end)};if(this.trackRange&&(u.range=[s.start,s.end]),this.trackLoc&&(a.end={line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart},u.loc=a),9===s.type){var l=s.pattern,c=s.flags;u.regex={pattern:l,flags:c};}this.buffer.push(u);}}return this.buffer.shift()},e}();t.Tokenizer=s;}])},e.exports=n();},function(e,t,r){var n=r(38),i=r(53),o=r(76),a=r(54),s=Object.prototype.toString,u=Object.prototype.hasOwnProperty,l={0:"\\0",7:"\\a",8:"\\b",9:"\\t",10:"\\n",11:"\\v",12:"\\f",13:"\\r",27:"\\e",34:'\\"',92:"\\\\",133:"\\N",160:"\\_",8232:"\\L",8233:"\\P"},c=["y","Y","yes","Yes","YES","on","On","ON","n","N","no","No","NO","off","Off","OFF"];function h(e){var t,r,o;if(t=e.toString(16).toUpperCase(),e<=255)r="x",o=2;else if(e<=65535)r="u",o=4;else {if(!(e<=4294967295))throw new i("code point within a string may not be greater than 0xFFFFFFFF");r="U",o=8;}return "\\"+r+n.repeat("0",o-t.length)+t}function p(e){this.schema=e.schema||o,this.indent=Math.max(1,e.indent||2),this.noArrayIndent=e.noArrayIndent||!1,this.skipInvalid=e.skipInvalid||!1,this.flowLevel=n.isNothing(e.flowLevel)?-1:e.flowLevel,this.styleMap=function(e,t){var r,n,i,o,a,s,l;if(null===t)return {};for(r={},i=0,o=(n=Object.keys(t)).length;i<o;i+=1)a=n[i],s=String(t[a]),"!!"===a.slice(0,2)&&(a="tag:yaml.org,2002:"+a.slice(2)),(l=e.compiledTypeMap.fallback[a])&&u.call(l.styleAliases,s)&&(s=l.styleAliases[s]),r[a]=s;return r}(this.schema,e.styles||null),this.sortKeys=e.sortKeys||!1,this.lineWidth=e.lineWidth||80,this.noRefs=e.noRefs||!1,this.noCompatMode=e.noCompatMode||!1,this.condenseFlow=e.condenseFlow||!1,this.implicitTypes=this.schema.compiledImplicit,this.explicitTypes=this.schema.compiledExplicit,this.tag=null,this.result="",this.duplicates=[],this.usedDuplicates=null;}function f(e,t){for(var r,i=n.repeat(" ",t),o=0,a=-1,s="",u=e.length;o<u;)-1===(a=e.indexOf("\n",o))?(r=e.slice(o),o=u):(r=e.slice(o,a+1),o=a+1),r.length&&"\n"!==r&&(s+=i),s+=r;return s}function d(e,t){return "\n"+n.repeat(" ",e.indent*t)}function m(e){return 32===e||9===e}function y(e){return 32<=e&&e<=126||161<=e&&e<=55295&&8232!==e&&8233!==e||57344<=e&&e<=65533&&65279!==e||65536<=e&&e<=1114111}function v(e,t){return y(e)&&65279!==e&&44!==e&&91!==e&&93!==e&&123!==e&&125!==e&&58!==e&&(35!==e||t&&function(e){return y(e)&&!m(e)&&65279!==e&&13!==e&&10!==e}(t))}function _(e){return /^\n* /.test(e)}function g(e,t,r,n,i){var o,a,s,u,l=!1,c=!1,h=-1!==n,p=-1,f=y(u=e.charCodeAt(0))&&65279!==u&&!m(u)&&45!==u&&63!==u&&58!==u&&44!==u&&91!==u&&93!==u&&123!==u&&125!==u&&35!==u&&38!==u&&42!==u&&33!==u&&124!==u&&61!==u&&62!==u&&39!==u&&34!==u&&37!==u&&64!==u&&96!==u&&!m(e.charCodeAt(e.length-1));if(t)for(o=0;o<e.length;o++){if(!y(a=e.charCodeAt(o)))return 5;s=o>0?e.charCodeAt(o-1):null,f=f&&v(a,s);}else {for(o=0;o<e.length;o++){if(10===(a=e.charCodeAt(o)))l=!0,h&&(c=c||o-p-1>n&&" "!==e[p+1],p=o);else if(!y(a))return 5;s=o>0?e.charCodeAt(o-1):null,f=f&&v(a,s);}c=c||h&&o-p-1>n&&" "!==e[p+1];}return l||c?r>9&&_(e)?5:c?4:3:f&&!i(e)?1:2}function b(e,t,r,n){e.dump=function(){if(0===t.length)return "''";if(!e.noCompatMode&&-1!==c.indexOf(t))return "'"+t+"'";var o=e.indent*Math.max(1,r),a=-1===e.lineWidth?-1:Math.max(Math.min(e.lineWidth,40),e.lineWidth-o),s=n||e.flowLevel>-1&&r>=e.flowLevel;switch(g(t,s,e.indent,a,(function(t){return function(e,t){var r,n;for(r=0,n=e.implicitTypes.length;r<n;r+=1)if(e.implicitTypes[r].resolve(t))return !0;return !1}(e,t)}))){case 1:return t;case 2:return "'"+t.replace(/'/g,"''")+"'";case 3:return "|"+x(t,e.indent)+w(f(t,o));case 4:return ">"+x(t,e.indent)+w(f(function(e,t){var r,n,i=/(\n+)([^\n]*)/g,o=(s=e.indexOf("\n"),s=-1!==s?s:e.length,i.lastIndex=s,E(e.slice(0,s),t)),a="\n"===e[0]||" "===e[0];var s;for(;n=i.exec(e);){var u=n[1],l=n[2];r=" "===l[0],o+=u+(a||r||""===l?"":"\n")+E(l,t),a=r;}return o}(t,a),o));case 5:return '"'+function(e){for(var t,r,n,i="",o=0;o<e.length;o++)(t=e.charCodeAt(o))>=55296&&t<=56319&&(r=e.charCodeAt(o+1))>=56320&&r<=57343?(i+=h(1024*(t-55296)+r-56320+65536),o++):(n=l[t],i+=!n&&y(t)?e[o]:n||h(t));return i}(t)+'"';default:throw new i("impossible error: invalid scalar style")}}();}function x(e,t){var r=_(e)?String(t):"",n="\n"===e[e.length-1];return r+(n&&("\n"===e[e.length-2]||"\n"===e)?"+":n?"":"-")+"\n"}function w(e){return "\n"===e[e.length-1]?e.slice(0,-1):e}function E(e,t){if(""===e||" "===e[0])return e;for(var r,n,i=/ [^ ]/g,o=0,a=0,s=0,u="";r=i.exec(e);)(s=r.index)-o>t&&(n=a>o?a:s,u+="\n"+e.slice(o,n),o=n+1),a=s;return u+="\n",e.length-o>t&&a>o?u+=e.slice(o,a)+"\n"+e.slice(a+1):u+=e.slice(o),u.slice(1)}function D(e,t,r){var n,o,a,l,c,h;for(a=0,l=(o=r?e.explicitTypes:e.implicitTypes).length;a<l;a+=1)if(((c=o[a]).instanceOf||c.predicate)&&(!c.instanceOf||"object"==typeof t&&t instanceof c.instanceOf)&&(!c.predicate||c.predicate(t))){if(e.tag=r?c.tag:"?",c.represent){if(h=e.styleMap[c.tag]||c.defaultStyle,"[object Function]"===s.call(c.represent))n=c.represent(t,h);else {if(!u.call(c.represent,h))throw new i("!<"+c.tag+'> tag resolver accepts not "'+h+'" style');n=c.represent[h](t,h);}e.dump=n;}return !0}return !1}function S(e,t,r,n,o,a){e.tag=null,e.dump=r,D(e,r,!1)||D(e,r,!0);var u=s.call(e.dump);n&&(n=e.flowLevel<0||e.flowLevel>t);var l,c,h="[object Object]"===u||"[object Array]"===u;if(h&&(c=-1!==(l=e.duplicates.indexOf(r))),(null!==e.tag&&"?"!==e.tag||c||2!==e.indent&&t>0)&&(o=!1),c&&e.usedDuplicates[l])e.dump="*ref_"+l;else {if(h&&c&&!e.usedDuplicates[l]&&(e.usedDuplicates[l]=!0),"[object Object]"===u)n&&0!==Object.keys(e.dump).length?(!function(e,t,r,n){var o,a,s,u,l,c,h="",p=e.tag,f=Object.keys(r);if(!0===e.sortKeys)f.sort();else if("function"==typeof e.sortKeys)f.sort(e.sortKeys);else if(e.sortKeys)throw new i("sortKeys must be a boolean or a function");for(o=0,a=f.length;o<a;o+=1)c="",n&&0===o||(c+=d(e,t)),u=r[s=f[o]],S(e,t+1,s,!0,!0,!0)&&((l=null!==e.tag&&"?"!==e.tag||e.dump&&e.dump.length>1024)&&(e.dump&&10===e.dump.charCodeAt(0)?c+="?":c+="? "),c+=e.dump,l&&(c+=d(e,t)),S(e,t+1,u,!0,l)&&(e.dump&&10===e.dump.charCodeAt(0)?c+=":":c+=": ",h+=c+=e.dump));e.tag=p,e.dump=h||"{}";}(e,t,e.dump,o),c&&(e.dump="&ref_"+l+e.dump)):(!function(e,t,r){var n,i,o,a,s,u="",l=e.tag,c=Object.keys(r);for(n=0,i=c.length;n<i;n+=1)s="",0!==n&&(s+=", "),e.condenseFlow&&(s+='"'),a=r[o=c[n]],S(e,t,o,!1,!1)&&(e.dump.length>1024&&(s+="? "),s+=e.dump+(e.condenseFlow?'"':"")+":"+(e.condenseFlow?"":" "),S(e,t,a,!1,!1)&&(u+=s+=e.dump));e.tag=l,e.dump="{"+u+"}";}(e,t,e.dump),c&&(e.dump="&ref_"+l+" "+e.dump));else if("[object Array]"===u){var p=e.noArrayIndent&&t>0?t-1:t;n&&0!==e.dump.length?(!function(e,t,r,n){var i,o,a="",s=e.tag;for(i=0,o=r.length;i<o;i+=1)S(e,t+1,r[i],!0,!0)&&(n&&0===i||(a+=d(e,t)),e.dump&&10===e.dump.charCodeAt(0)?a+="-":a+="- ",a+=e.dump);e.tag=s,e.dump=a||"[]";}(e,p,e.dump,o),c&&(e.dump="&ref_"+l+e.dump)):(!function(e,t,r){var n,i,o="",a=e.tag;for(n=0,i=r.length;n<i;n+=1)S(e,t,r[n],!1,!1)&&(0!==n&&(o+=","+(e.condenseFlow?"":" ")),o+=e.dump);e.tag=a,e.dump="["+o+"]";}(e,p,e.dump),c&&(e.dump="&ref_"+l+" "+e.dump));}else {if("[object String]"!==u){if(e.skipInvalid)return !1;throw new i("unacceptable kind of an object to dump "+u)}"?"!==e.tag&&b(e,e.dump,t,a);}null!==e.tag&&"?"!==e.tag&&(e.dump="!<"+e.tag+"> "+e.dump);}return !0}function C(e,t){var r,n,i=[],o=[];for(function e(t,r,n){var i,o,a;if(null!==t&&"object"==typeof t)if(-1!==(o=r.indexOf(t)))-1===n.indexOf(o)&&n.push(o);else if(r.push(t),Array.isArray(t))for(o=0,a=t.length;o<a;o+=1)e(t[o],r,n);else for(i=Object.keys(t),o=0,a=i.length;o<a;o+=1)e(t[i[o]],r,n);}(e,i,o),r=0,n=o.length;r<n;r+=1)t.duplicates.push(i[o[r]]);t.usedDuplicates=new Array(n);}function A(e,t){var r=new p(t=t||{});return r.noRefs||C(e,r),S(r,0,e,!0,!0)?r.dump+"\n":""}e.exports.dump=A,e.exports.safeDump=function(e,t){return A(e,n.extend({schema:a},t))};},function(e,t,r){r(31),r(32),r(33),r(64),r(19),r(65),r(20),r(68),r(92),r(144),r(22),r(94),r(23);var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},a=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value);}catch(e){i={error:e};}finally{try{n&&!n.done&&(r=o.return)&&r.call(o);}finally{if(i)throw i.error}}return a};Object.defineProperty(t,"__esModule",{value:!0});var s=r(91),u=r(1),l=r(183),c=r(0),h=r(7),p=r(95),f=r(69),d=r(3),m=r(305),y=r(306),v=r(307),_=function(e){function t(t,r){void 0===r&&(r=!1);var n=e.call(this)||this;return n._hasDeclaration=!1,n._docTypeName="",n._hasDocumentElement=!1,n._currentElementSerialized=!1,n._openTags=[],n._ended=!1,n._fragment=r,n._options=u.applyDefaults(t||{},s.DefaultXMLBuilderCBOptions),n._builderOptions={defaultNamespace:n._options.defaultNamespace,namespaceAlias:n._options.namespaceAlias},"json"===n._options.format?n._writer=new y.JSONCBWriter(n._options):"yaml"===n._options.format?n._writer=new v.YAMLCBWriter(n._options):n._writer=new m.XMLCBWriter(n._options),void 0!==n._options.data&&n.on("data",n._options.data),void 0!==n._options.end&&n.on("end",n._options.end),void 0!==n._options.error&&n.on("error",n._options.error),n._prefixMap=new p.NamespacePrefixMap,n._prefixMap.set("xml",h.namespace.XML),n._prefixIndex={value:1},n._push(n._writer.frontMatter()),n}return i(t,e),t.prototype.ele=function(e,t,r){var n,i;if(u.isObject(e)||u.isString(e)&&(/^\s*</.test(e)||/^\s*[\{\[]/.test(e)||/^(\s*|(#.*)|(%.*))*---/.test(e))){var a=l.fragment().set(this._options);try{a.ele(e);}catch(e){return this.emit("error",e),this}try{for(var s=o(a.node.childNodes),c=s.next();!c.done;c=s.next()){var h=c.value;this._fromNode(h);}}catch(e){n={error:e};}finally{try{c&&!c.done&&(i=s.return)&&i.call(s);}finally{if(n)throw n.error}}return this}if(this._serializeOpenTag(!0),!this._fragment&&this._hasDocumentElement&&0===this._writer.level)return this.emit("error",new Error("Document cannot have multiple document element nodes.")),this;try{this._currentElement=l.fragment(this._builderOptions).ele(e,t,r);}catch(e){return this.emit("error",e),this}return this._fragment||this._hasDocumentElement||""===this._docTypeName||this._currentElement.node._qualifiedName===this._docTypeName?(this._currentElementSerialized=!1,this._fragment||(this._hasDocumentElement=!0),this):(this.emit("error",new Error("Document element name does not match DocType declaration name.")),this)},t.prototype.att=function(e,t,r){if(void 0===this._currentElement)return this.emit("error",new Error("Cannot insert an attribute node as child of a document node.")),this;try{this._currentElement.att(e,t,r);}catch(e){return this.emit("error",e),this}return this},t.prototype.com=function(e){var t;this._serializeOpenTag(!0);try{t=l.fragment(this._builderOptions).com(e).first().node;}catch(e){return this.emit("error",e),this}return !this._options.wellFormed||c.xml_isLegalChar(t.data)&&-1===t.data.indexOf("--")&&!t.data.endsWith("-")?(this._push(this._writer.comment(t.data)),this):(this.emit("error",new Error("Comment data contains invalid characters (well-formed required).")),this)},t.prototype.txt=function(e){if(!this._fragment&&void 0===this._currentElement)return this.emit("error",new Error("Cannot insert a text node as child of a document node.")),this;var t;this._serializeOpenTag(!0);try{t=l.fragment(this._builderOptions).txt(e).first().node;}catch(e){return this.emit("error",e),this}if(this._options.wellFormed&&!c.xml_isLegalChar(t.data))return this.emit("error",new Error("Text data contains invalid characters (well-formed required).")),this;var r=t.data.replace(/(?!&(lt|gt|amp|apos|quot);)&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;");return this._push(this._writer.text(r)),this},t.prototype.ins=function(e,t){var r;void 0===t&&(t=""),this._serializeOpenTag(!0);try{r=l.fragment(this._builderOptions).ins(e,t).first().node;}catch(e){return this.emit("error",e),this}return this._options.wellFormed&&(-1!==r.target.indexOf(":")||/^xml$/i.test(r.target))?(this.emit("error",new Error("Processing instruction target contains invalid characters (well-formed required).")),this):this._options.wellFormed&&!c.xml_isLegalChar(r.data)?(this.emit("error",Error("Processing instruction data contains invalid characters (well-formed required).")),this):(this._push(this._writer.instruction(r.target,r.data)),this)},t.prototype.dat=function(e){var t;this._serializeOpenTag(!0);try{t=l.fragment(this._builderOptions).dat(e).first().node;}catch(e){return this.emit("error",e),this}return this._push(this._writer.cdata(t.data)),this},t.prototype.dec=function(e){return void 0===e&&(e={version:"1.0"}),this._fragment?(this.emit("error",Error("Cannot insert an XML declaration into a document fragment.")),this):this._hasDeclaration?(this.emit("error",Error("XML declaration is already inserted.")),this):(this._push(this._writer.declaration(e.version||"1.0",e.encoding,e.standalone)),this._hasDeclaration=!0,this)},t.prototype.dtd=function(e){if(this._fragment)return this.emit("error",Error("Cannot insert a DocType declaration into a document fragment.")),this;if(""!==this._docTypeName)return this.emit("error",new Error("DocType declaration is already inserted.")),this;if(this._hasDocumentElement)return this.emit("error",new Error("Cannot insert DocType declaration after document element.")),this;var t;try{t=l.create().dtd(e).first().node;}catch(e){return this.emit("error",e),this}return this._options.wellFormed&&!c.xml_isPubidChar(t.publicId)?(this.emit("error",new Error("DocType public identifier does not match PubidChar construct (well-formed required).")),this):this._options.wellFormed&&(!c.xml_isLegalChar(t.systemId)||-1!==t.systemId.indexOf('"')&&-1!==t.systemId.indexOf("'"))?(this.emit("error",new Error("DocType system identifier contains invalid characters (well-formed required).")),this):(this._docTypeName=e.name,this._push(this._writer.docType(e.name,t.publicId,t.systemId)),this)},t.prototype.import=function(e){var t,r,n=l.fragment().set(this._options);try{n.import(e);}catch(e){return this.emit("error",e),this}try{for(var i=o(n.node.childNodes),a=i.next();!a.done;a=i.next()){var s=a.value;this._fromNode(s);}}catch(e){t={error:e};}finally{try{a&&!a.done&&(r=i.return)&&r.call(i);}finally{if(t)throw t.error}}return this},t.prototype.up=function(){return this._serializeOpenTag(!1),this._serializeCloseTag(),this},t.prototype.end=function(){for(this._serializeOpenTag(!1);this._openTags.length>0;)this._serializeCloseTag();return this._push(null),this},t.prototype._serializeOpenTag=function(e){if(!this._currentElementSerialized&&void 0!==this._currentElement){var r=this._currentElement.node;if(!this._options.wellFormed||-1===r.localName.indexOf(":")&&c.xml_isName(r.localName)){var n="",i=!1,o=this._prefixMap.copy(),a={},s=this._recordNamespaceInformation(r,o,a),u=0===this._openTags.length?null:this._openTags[this._openTags.length-1][1],l=r.namespaceURI;if(null===l&&(l=u),u===l)null!==s&&(i=!0),n=l===h.namespace.XML?"xml:"+r.localName:r.localName,this._writer.beginElement(n),this._push(this._writer.openTagBegin(n));else {var p=r.prefix,f=null;if(null===p&&l===s||(f=o.get(p,l)),"xmlns"===p){if(this._options.wellFormed)return void this.emit("error",new Error("An element cannot have the 'xmlns' prefix (well-formed required)."));f=p;}null!==f?(n=f+":"+r.localName,null!==s&&s!==h.namespace.XML&&(u=s||null),this._writer.beginElement(n),this._push(this._writer.openTagBegin(n))):null!==p?(p in a&&(p=this._generatePrefix(l,o,this._prefixIndex)),o.set(p,l),n+=p+":"+r.localName,this._writer.beginElement(n),this._push(this._writer.openTagBegin(n)),this._push(this._writer.attribute("xmlns:"+p,this._serializeAttributeValue(l,this._options.wellFormed))),null!==s&&(u=s||null)):null===s||null!==s&&s!==l?(i=!0,n+=r.localName,u=l,this._writer.beginElement(n),this._push(this._writer.openTagBegin(n)),this._push(this._writer.attribute("xmlns",this._serializeAttributeValue(l,this._options.wellFormed)))):(n+=r.localName,u=l,this._writer.beginElement(n),this._push(this._writer.openTagBegin(n)));}this._serializeAttributes(r,o,this._prefixIndex,a,i,this._options.wellFormed);var d=l===h.namespace.HTML;d&&!e&&t._VoidElementNames.has(r.localName)?(this._push(this._writer.openTagEnd(n,!0,!0)),this._writer.endElement(n)):d||e?this._push(this._writer.openTagEnd(n,!1,!1)):(this._push(this._writer.openTagEnd(n,!0,!1)),this._writer.endElement(n)),this._currentElementSerialized=!0,this._openTags.push([n,u,this._prefixMap,e]),this._isPrefixMapModified(this._prefixMap,o)&&(this._prefixMap=o),this._writer.level++;}else this.emit("error",new Error("Node local name contains invalid characters (well-formed required)."));}},t.prototype._serializeCloseTag=function(){this._writer.level--;var e=this._openTags.pop();if(void 0!==e){var t=a(e,4),r=t[0],n=(t[1],t[2]),i=t[3];this._prefixMap=n,i&&(this._push(this._writer.closeTag(r)),this._writer.endElement(r));}else this.emit("error",new Error("Last element is undefined."));},t.prototype._push=function(e){null===e?(this._ended=!0,this.emit("end")):this._ended?this.emit("error",new Error("Cannot push to ended stream.")):0!==e.length&&(this._writer.hasData=!0,this.emit("data",e,this._writer.level));},t.prototype._fromNode=function(e){var t,r,n,i;if(d.Guard.isElementNode(e)){var a=e.prefix?e.prefix+":"+e.localName:e.localName;null!==e.namespaceURI?this.ele(e.namespaceURI,a):this.ele(a);try{for(var s=o(e.attributes),u=s.next();!u.done;u=s.next()){var l=u.value,c=l.prefix?l.prefix+":"+l.localName:l.localName;null!==l.namespaceURI?this.att(l.namespaceURI,c,l.value):this.att(c,l.value);}}catch(e){t={error:e};}finally{try{u&&!u.done&&(r=s.return)&&r.call(s);}finally{if(t)throw t.error}}try{for(var h=o(e.childNodes),p=h.next();!p.done;p=h.next()){var f=p.value;this._fromNode(f);}}catch(e){n={error:e};}finally{try{p&&!p.done&&(i=h.return)&&i.call(h);}finally{if(n)throw n.error}}this.up();}else d.Guard.isExclusiveTextNode(e)&&e.data?this.txt(e.data):d.Guard.isCommentNode(e)?this.com(e.data):d.Guard.isCDATASectionNode(e)?this.dat(e.data):d.Guard.isProcessingInstructionNode(e)&&this.ins(e.target,e.data);},t.prototype._serializeAttributes=function(e,t,r,n,i,a){var s,u,l=a?new f.LocalNameSet:void 0;try{for(var p=o(e.attributes),d=p.next();!d.done;d=p.next()){var m=d.value;if(a||i||null!==m.namespaceURI){if(a&&l&&l.has(m.namespaceURI,m.localName))return void this.emit("error",new Error("Element contains duplicate attributes (well-formed required)."));a&&l&&l.set(m.namespaceURI,m.localName);var y=m.namespaceURI,v=null;if(null!==y)if(v=t.get(m.prefix,y),y===h.namespace.XMLNS){if(m.value===h.namespace.XML||null===m.prefix&&i||null!==m.prefix&&(!(m.localName in n)||n[m.localName]!==m.value)&&t.has(m.localName,m.value))continue;if(a&&m.value===h.namespace.XMLNS)return void this.emit("error",new Error("XMLNS namespace is reserved (well-formed required)."));if(a&&""===m.value)return void this.emit("error",new Error("Namespace prefix declarations cannot be used to undeclare a namespace (well-formed required)."));"xmlns"===m.prefix&&(v="xmlns");}else null===v&&(v=null===m.prefix||t.hasPrefix(m.prefix)&&!t.has(m.prefix,y)?this._generatePrefix(y,t,r):m.prefix,this._push(this._writer.attribute("xmlns:"+v,this._serializeAttributeValue(y,this._options.wellFormed))));if(a&&(-1!==m.localName.indexOf(":")||!c.xml_isName(m.localName)||"xmlns"===m.localName&&null===y))return void this.emit("error",new Error("Attribute local name contains invalid characters (well-formed required)."));this._push(this._writer.attribute((null!==v?v+":":"")+m.localName,this._serializeAttributeValue(m.value,this._options.wellFormed)));}else this._push(this._writer.attribute(m.localName,this._serializeAttributeValue(m.value,this._options.wellFormed)));}}catch(e){s={error:e};}finally{try{d&&!d.done&&(u=p.return)&&u.call(p);}finally{if(s)throw s.error}}},t.prototype._serializeAttributeValue=function(e,t){return t&&null!==e&&!c.xml_isLegalChar(e)?(this.emit("error",new Error("Invalid characters in attribute value.")),""):null===e?"":e.replace(/(?!&(lt|gt|amp|apos|quot);)&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;")},t.prototype._recordNamespaceInformation=function(e,t,r){var n,i,a=null;try{for(var s=o(e.attributes),u=s.next();!u.done;u=s.next()){var l=u.value,c=l.namespaceURI,p=l.prefix;if(c===h.namespace.XMLNS){if(null===p){a=l.value;continue}var f=l.localName,d=l.value;if(d===h.namespace.XML)continue;if(""===d&&(d=null),t.has(f,d))continue;t.set(f,d),r[f]=d||"";}}}catch(e){n={error:e};}finally{try{u&&!u.done&&(i=s.return)&&i.call(s);}finally{if(n)throw n.error}}return a},t.prototype._generatePrefix=function(e,t,r){var n="ns"+r.value;return r.value++,t.set(n,e),n},t.prototype._isPrefixMapModified=function(e,t){var r=e._items,n=t._items,i=e._nullItems,o=t._nullItems;for(var a in n){var s=r[a];if(void 0===s)return !0;var u=n[a];if(s.length!==u.length)return !0;for(var l=0;l<s.length;l++)if(s[l]!==u[l])return !0}if(i.length!==o.length)return !0;for(l=0;l<i.length;l++)if(i[l]!==o[l])return !0;return !1},t._VoidElementNames=new Set(["area","base","basefont","bgsound","br","col","embed","frame","hr","img","input","keygen","link","menuitem","meta","param","source","track","wbr"]),t}(r(308).EventEmitter);t.XMLBuilderCBImpl=_;},function(e,t,r){r(74);var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(t){var r=e.call(this,t)||this;return r._lineLength=0,r}return i(t,e),t.prototype.frontMatter=function(){return ""},t.prototype.declaration=function(e,t,r){var n=this._beginLine()+"<?xml";return n+=' version="'+e+'"',void 0!==t&&(n+=' encoding="'+t+'"'),void 0!==r&&(n+=' standalone="'+(r?"yes":"no")+'"'),n+="?>"},t.prototype.docType=function(e,t,r){var n=this._beginLine();return n+=t&&r?"<!DOCTYPE "+e+' PUBLIC "'+t+'" "'+r+'">':t?"<!DOCTYPE "+e+' PUBLIC "'+t+'">':r?"<!DOCTYPE "+e+' SYSTEM "'+r+'">':"<!DOCTYPE "+e+">"},t.prototype.comment=function(e){return this._beginLine()+"\x3c!--"+e+"--\x3e"},t.prototype.text=function(e){return this._beginLine()+e},t.prototype.instruction=function(e,t){return t?this._beginLine()+"<?"+e+" "+t+"?>":this._beginLine()+"<?"+e+"?>"},t.prototype.cdata=function(e){return this._beginLine()+"<![CDATA["+e+"]]>"},t.prototype.openTagBegin=function(e){return this._lineLength+=1+e.length,this._beginLine()+"<"+e},t.prototype.openTagEnd=function(e,t,r){return r?" />":t?this._writerOptions.allowEmptyTags?"></"+e+">":this._writerOptions.spaceBeforeSlash?" />":"/>":">"},t.prototype.closeTag=function(e){return this._beginLine()+"</"+e+">"},t.prototype.attribute=function(e,t){var r=e+'="'+t+'"';return this._writerOptions.prettyPrint&&this._writerOptions.width>0&&this._lineLength+1+r.length>this._writerOptions.width?(r=this._beginLine()+this._indent(1)+r,this._lineLength=r.length,r):(this._lineLength+=1+r.length," "+r)},t.prototype.beginElement=function(e){},t.prototype.endElement=function(e){},t.prototype._beginLine=function(){if(this._writerOptions.prettyPrint){var e=(this.hasData?this._writerOptions.newline:"")+this._indent(this._writerOptions.offset+this.level);return this._lineLength=e.length,e}return ""},t.prototype._indent=function(e){return e<=0?"":this._writerOptions.indent.repeat(e)},t}(r(114).BaseCBWriter);t.XMLCBWriter=o;},function(e,t,r){r(74);var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(t){var r=e.call(this,t)||this;return r._hasChildren=[],r._additionalLevel=0,r}return i(t,e),t.prototype.frontMatter=function(){return ""},t.prototype.declaration=function(e,t,r){return ""},t.prototype.docType=function(e,t,r){return ""},t.prototype.comment=function(e){return this._comma()+this._beginLine()+"{"+this._sep()+this._key(this._builderOptions.convert.comment)+this._sep()+this._val(e)+this._sep()+"}"},t.prototype.text=function(e){return this._comma()+this._beginLine()+"{"+this._sep()+this._key(this._builderOptions.convert.text)+this._sep()+this._val(e)+this._sep()+"}"},t.prototype.instruction=function(e,t){return this._comma()+this._beginLine()+"{"+this._sep()+this._key(this._builderOptions.convert.ins)+this._sep()+this._val(t?e+" "+t:e)+this._sep()+"}"},t.prototype.cdata=function(e){return this._comma()+this._beginLine()+"{"+this._sep()+this._key(this._builderOptions.convert.cdata)+this._sep()+this._val(e)+this._sep()+"}"},t.prototype.attribute=function(e,t){return this._comma()+this._beginLine(1)+"{"+this._sep()+this._key(this._builderOptions.convert.att+e)+this._sep()+this._val(t)+this._sep()+"}"},t.prototype.openTagBegin=function(e){var t=this._comma()+this._beginLine()+"{"+this._sep()+this._key(e)+this._sep()+"{";return this._additionalLevel++,this.hasData=!0,t+=this._beginLine()+this._key(this._builderOptions.convert.text)+this._sep()+"[",this._hasChildren.push(!1),t},t.prototype.openTagEnd=function(e,t,r){if(t){var n=this._sep()+"]";return this._additionalLevel--,n+=this._beginLine()+"}"+this._sep()+"}"}return ""},t.prototype.closeTag=function(e){var t=this._beginLine()+"]";return this._additionalLevel--,t+=this._beginLine()+"}"+this._sep()+"}"},t.prototype.beginElement=function(e){},t.prototype.endElement=function(e){this._hasChildren.pop();},t.prototype._beginLine=function(e){return void 0===e&&(e=0),this._writerOptions.prettyPrint?(this.hasData?this._writerOptions.newline:"")+this._indent(this._writerOptions.offset+this.level+e):""},t.prototype._indent=function(e){return e+this._additionalLevel<=0?"":this._writerOptions.indent.repeat(e+this._additionalLevel)},t.prototype._comma=function(){var e=this._hasChildren[this._hasChildren.length-1]?",":"";return this._hasChildren.length>0&&(this._hasChildren[this._hasChildren.length-1]=!0),e},t.prototype._sep=function(){return this._writerOptions.prettyPrint?" ":""},t.prototype._key=function(e){return '"'+e+'":'},t.prototype._val=function(e){return JSON.stringify(e)},t}(r(114).BaseCBWriter);t.JSONCBWriter=o;},function(e,t,r){r(74);var n,i=this&&this.__extends||(n=function(e,t){return (n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)},function(e,t){function r(){this.constructor=e;}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(t){var r=e.call(this,t)||this;if(r._rootWritten=!1,r._additionalLevel=0,t.indent.length<2)throw new Error("YAML indententation string must be at least two characters long.");if(t.offset<0)throw new Error("YAML offset should be zero or a positive number.");return r}return i(t,e),t.prototype.frontMatter=function(){return this._beginLine()+"---"},t.prototype.declaration=function(e,t,r){return ""},t.prototype.docType=function(e,t,r){return ""},t.prototype.comment=function(e){return this._beginLine()+this._key(this._builderOptions.convert.comment)+" "+this._val(e)},t.prototype.text=function(e){return this._beginLine()+this._key(this._builderOptions.convert.text)+" "+this._val(e)},t.prototype.instruction=function(e,t){return this._beginLine()+this._key(this._builderOptions.convert.ins)+" "+this._val(t?e+" "+t:e)},t.prototype.cdata=function(e){return this._beginLine()+this._key(this._builderOptions.convert.cdata)+" "+this._val(e)},t.prototype.attribute=function(e,t){this._additionalLevel++;var r=this._beginLine()+this._key(this._builderOptions.convert.att+e)+" "+this._val(t);return this._additionalLevel--,r},t.prototype.openTagBegin=function(e){var t=this._beginLine()+this._key(e);return this._rootWritten||(this._rootWritten=!0),this.hasData=!0,this._additionalLevel++,t+=this._beginLine(!0)+this._key(this._builderOptions.convert.text)},t.prototype.openTagEnd=function(e,t,r){return t?" "+this._val(""):""},t.prototype.closeTag=function(e){return this._additionalLevel--,""},t.prototype.beginElement=function(e){},t.prototype.endElement=function(e){},t.prototype._beginLine=function(e){return void 0===e&&(e=!1),(this.hasData?this._writerOptions.newline:"")+this._indent(this._writerOptions.offset+this.level,e)},t.prototype._indent=function(e,t){if(e+this._additionalLevel<=0)return "";var r=this._writerOptions.indent.repeat(e+this._additionalLevel);return !t&&this._rootWritten?r.substr(0,r.length-2)+"-"+r.substr(-1,1):r},t.prototype._key=function(e){return '"'+e+'":'},t.prototype._val=function(e){return JSON.stringify(e)},t}(r(114).BaseCBWriter);t.YAMLCBWriter=o;},function(e,t,r){var n,i="object"==typeof Reflect?Reflect:null,o=i&&"function"==typeof i.apply?i.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};n=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var a=Number.isNaN||function(e){return e!=e};function s(){s.init.call(this);}e.exports=s,s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var u=10;function l(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function c(e){return void 0===e._maxListeners?s.defaultMaxListeners:e._maxListeners}function h(e,t,r,n){var i,o,a,s;if(l(r),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),o=e._events),a=o[t]),void 0===a)a=o[t]=r,++e._eventsCount;else if("function"==typeof a?a=o[t]=n?[r,a]:[a,r]:n?a.unshift(r):a.push(r),(i=c(e))>0&&a.length>i&&!a.warned){a.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=a.length,s=u,console&&console.warn&&console.warn(s);}return e}function p(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function f(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},i=p.bind(n);return i.listener=r,n.wrapFn=i,i}function d(e,t,r){var n=e._events;if(void 0===n)return [];var i=n[t];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(i):y(i,i.length)}function m(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function y(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");u=e;}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0;},s.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},s.prototype.getMaxListeners=function(){return c(this)},s.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var n="error"===e,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return !1;if(n){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var u=i[e];if(void 0===u)return !1;if("function"==typeof u)o(u,this,t);else {var l=u.length,c=y(u,l);for(r=0;r<l;++r)o(c[r],this,t);}return !0},s.prototype.addListener=function(e,t){return h(this,e,t,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(e,t){return h(this,e,t,!0)},s.prototype.once=function(e,t){return l(t),this.on(e,f(this,e,t)),this},s.prototype.prependOnceListener=function(e,t){return l(t),this.prependListener(e,f(this,e,t)),this},s.prototype.removeListener=function(e,t){var r,n,i,o,a;if(l(t),void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(i=-1,o=r.length-1;o>=0;o--)if(r[o]===t||r[o].listener===t){a=r[o].listener,i=o;break}if(i<0)return this;0===i?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop();}(r,i),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,a||t);}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var i,o=Object.keys(r);for(n=0;n<o.length;++n)"removeListener"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},s.prototype.listeners=function(e){return d(this,e,!0)},s.prototype.rawListeners=function(e){return d(this,e,!1)},s.listenerCount=function(e,t){return "function"==typeof e.listenerCount?e.listenerCount(t):m.call(e,t)},s.prototype.listenerCount=m,s.prototype.eventNames=function(){return this._eventsCount>0?n(this._events):[]};},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(77);t.createCB=function(e){return new n.XMLBuilderCBImpl(e)},t.fragmentCB=function(e){return new n.XMLBuilderCBImpl(e,!0)};}])}));
  });

  /*! pako 2.0.4 https://github.com/nodeca/pako @license (MIT AND Zlib) */
  // (C) 1995-2013 Jean-loup Gailly and Mark Adler
  // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
  //
  // This software is provided 'as-is', without any express or implied
  // warranty. In no event will the authors be held liable for any damages
  // arising from the use of this software.
  //
  // Permission is granted to anyone to use this software for any purpose,
  // including commercial applications, and to alter it and redistribute it
  // freely, subject to the following restrictions:
  //
  // 1. The origin of this software must not be misrepresented; you must not
  //   claim that you wrote the original software. If you use this software
  //   in a product, an acknowledgment in the product documentation would be
  //   appreciated but is not required.
  // 2. Altered source versions must be plainly marked as such, and must not be
  //   misrepresented as being the original software.
  // 3. This notice may not be removed or altered from any source distribution.

  /* eslint-disable space-unary-ops */

  /* Public constants ==========================================================*/
  /* ===========================================================================*/


  //const Z_FILTERED          = 1;
  //const Z_HUFFMAN_ONLY      = 2;
  //const Z_RLE               = 3;
  const Z_FIXED$1               = 4;
  //const Z_DEFAULT_STRATEGY  = 0;

  /* Possible values of the data_type field (though see inflate()) */
  const Z_BINARY              = 0;
  const Z_TEXT                = 1;
  //const Z_ASCII             = 1; // = Z_TEXT
  const Z_UNKNOWN$1             = 2;

  /*============================================================================*/


  function zero$1(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }

  // From zutil.h

  const STORED_BLOCK = 0;
  const STATIC_TREES = 1;
  const DYN_TREES    = 2;
  /* The three kinds of block type */

  const MIN_MATCH$1    = 3;
  const MAX_MATCH$1    = 258;
  /* The minimum and maximum match lengths */

  // From deflate.h
  /* ===========================================================================
   * Internal compression state.
   */

  const LENGTH_CODES$1  = 29;
  /* number of length codes, not counting the special END_BLOCK code */

  const LITERALS$1      = 256;
  /* number of literal bytes 0..255 */

  const L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;
  /* number of Literal or Length codes, including the END_BLOCK code */

  const D_CODES$1       = 30;
  /* number of distance codes */

  const BL_CODES$1      = 19;
  /* number of codes used to transfer the bit lengths */

  const HEAP_SIZE$1     = 2 * L_CODES$1 + 1;
  /* maximum heap size */

  const MAX_BITS$1      = 15;
  /* All codes must not exceed MAX_BITS bits */

  const Buf_size      = 16;
  /* size of bit buffer in bi_buf */


  /* ===========================================================================
   * Constants
   */

  const MAX_BL_BITS = 7;
  /* Bit length codes must not exceed MAX_BL_BITS bits */

  const END_BLOCK   = 256;
  /* end of block literal code */

  const REP_3_6     = 16;
  /* repeat previous bit length 3-6 times (2 bits of repeat count) */

  const REPZ_3_10   = 17;
  /* repeat a zero length 3-10 times  (3 bits of repeat count) */

  const REPZ_11_138 = 18;
  /* repeat a zero length 11-138 times  (7 bits of repeat count) */

  /* eslint-disable comma-spacing,array-bracket-spacing */
  const extra_lbits =   /* extra bits for each length code */
    new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);

  const extra_dbits =   /* extra bits for each distance code */
    new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);

  const extra_blbits =  /* extra bits for each bit length code */
    new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);

  const bl_order =
    new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);
  /* eslint-enable comma-spacing,array-bracket-spacing */

  /* The lengths of the bit length codes are sent in order of decreasing
   * probability, to avoid transmitting the lengths for unused bit length codes.
   */

  /* ===========================================================================
   * Local data. These are initialized only once.
   */

  // We pre-fill arrays with 0 to avoid uninitialized gaps

  const DIST_CODE_LEN = 512; /* see definition of array dist_code below */

  // !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
  const static_ltree  = new Array((L_CODES$1 + 2) * 2);
  zero$1(static_ltree);
  /* The static literal tree. Since the bit lengths are imposed, there is no
   * need for the L_CODES extra codes used during heap construction. However
   * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
   * below).
   */

  const static_dtree  = new Array(D_CODES$1 * 2);
  zero$1(static_dtree);
  /* The static distance tree. (Actually a trivial tree since all codes use
   * 5 bits.)
   */

  const _dist_code    = new Array(DIST_CODE_LEN);
  zero$1(_dist_code);
  /* Distance codes. The first 256 values correspond to the distances
   * 3 .. 258, the last 256 values correspond to the top 8 bits of
   * the 15 bit distances.
   */

  const _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);
  zero$1(_length_code);
  /* length code for each normalized match length (0 == MIN_MATCH) */

  const base_length   = new Array(LENGTH_CODES$1);
  zero$1(base_length);
  /* First normalized length for each code (0 = MIN_MATCH) */

  const base_dist     = new Array(D_CODES$1);
  zero$1(base_dist);
  /* First normalized distance for each code (0 = distance of 1) */


  function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

    this.static_tree  = static_tree;  /* static tree or NULL */
    this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
    this.extra_base   = extra_base;   /* base index for extra_bits */
    this.elems        = elems;        /* max number of elements in the tree */
    this.max_length   = max_length;   /* max bit length for the codes */

    // show if `static_tree` has data or dummy - needed for monomorphic objects
    this.has_stree    = static_tree && static_tree.length;
  }


  let static_l_desc;
  let static_d_desc;
  let static_bl_desc;


  function TreeDesc(dyn_tree, stat_desc) {
    this.dyn_tree = dyn_tree;     /* the dynamic tree */
    this.max_code = 0;            /* largest code with non zero frequency */
    this.stat_desc = stat_desc;   /* the corresponding static tree */
  }



  const d_code = (dist) => {

    return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
  };


  /* ===========================================================================
   * Output a short LSB first on the stream.
   * IN assertion: there is enough room in pendingBuf.
   */
  const put_short = (s, w) => {
  //    put_byte(s, (uch)((w) & 0xff));
  //    put_byte(s, (uch)((ush)(w) >> 8));
    s.pending_buf[s.pending++] = (w) & 0xff;
    s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
  };


  /* ===========================================================================
   * Send a value on a given number of bits.
   * IN assertion: length <= 16 and value fits in length bits.
   */
  const send_bits = (s, value, length) => {

    if (s.bi_valid > (Buf_size - length)) {
      s.bi_buf |= (value << s.bi_valid) & 0xffff;
      put_short(s, s.bi_buf);
      s.bi_buf = value >> (Buf_size - s.bi_valid);
      s.bi_valid += length - Buf_size;
    } else {
      s.bi_buf |= (value << s.bi_valid) & 0xffff;
      s.bi_valid += length;
    }
  };


  const send_code = (s, c, tree) => {

    send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
  };


  /* ===========================================================================
   * Reverse the first len bits of a code, using straightforward code (a faster
   * method would use a table)
   * IN assertion: 1 <= len <= 15
   */
  const bi_reverse = (code, len) => {

    let res = 0;
    do {
      res |= code & 1;
      code >>>= 1;
      res <<= 1;
    } while (--len > 0);
    return res >>> 1;
  };


  /* ===========================================================================
   * Flush the bit buffer, keeping at most 7 bits in it.
   */
  const bi_flush = (s) => {

    if (s.bi_valid === 16) {
      put_short(s, s.bi_buf);
      s.bi_buf = 0;
      s.bi_valid = 0;

    } else if (s.bi_valid >= 8) {
      s.pending_buf[s.pending++] = s.bi_buf & 0xff;
      s.bi_buf >>= 8;
      s.bi_valid -= 8;
    }
  };


  /* ===========================================================================
   * Compute the optimal bit lengths for a tree and update the total bit length
   * for the current block.
   * IN assertion: the fields freq and dad are set, heap[heap_max] and
   *    above are the tree nodes sorted by increasing frequency.
   * OUT assertions: the field len is set to the optimal bit length, the
   *     array bl_count contains the frequencies for each bit length.
   *     The length opt_len is updated; static_len is also updated if stree is
   *     not null.
   */
  const gen_bitlen = (s, desc) =>
  //    deflate_state *s;
  //    tree_desc *desc;    /* the tree descriptor */
  {
    const tree            = desc.dyn_tree;
    const max_code        = desc.max_code;
    const stree           = desc.stat_desc.static_tree;
    const has_stree       = desc.stat_desc.has_stree;
    const extra           = desc.stat_desc.extra_bits;
    const base            = desc.stat_desc.extra_base;
    const max_length      = desc.stat_desc.max_length;
    let h;              /* heap index */
    let n, m;           /* iterate over the tree elements */
    let bits;           /* bit length */
    let xbits;          /* extra bits */
    let f;              /* frequency */
    let overflow = 0;   /* number of elements with bit length too large */

    for (bits = 0; bits <= MAX_BITS$1; bits++) {
      s.bl_count[bits] = 0;
    }

    /* In a first pass, compute the optimal bit lengths (which may
     * overflow in the case of the bit length tree).
     */
    tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

    for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {
      n = s.heap[h];
      bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
      if (bits > max_length) {
        bits = max_length;
        overflow++;
      }
      tree[n * 2 + 1]/*.Len*/ = bits;
      /* We overwrite tree[n].Dad which is no longer needed */

      if (n > max_code) { continue; } /* not a leaf node */

      s.bl_count[bits]++;
      xbits = 0;
      if (n >= base) {
        xbits = extra[n - base];
      }
      f = tree[n * 2]/*.Freq*/;
      s.opt_len += f * (bits + xbits);
      if (has_stree) {
        s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
      }
    }
    if (overflow === 0) { return; }

    // Trace((stderr,"\nbit length overflow\n"));
    /* This happens for example on obj2 and pic of the Calgary corpus */

    /* Find the first bit length which could increase: */
    do {
      bits = max_length - 1;
      while (s.bl_count[bits] === 0) { bits--; }
      s.bl_count[bits]--;      /* move one leaf down the tree */
      s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
      s.bl_count[max_length]--;
      /* The brother of the overflow item also moves one step up,
       * but this does not affect bl_count[max_length]
       */
      overflow -= 2;
    } while (overflow > 0);

    /* Now recompute all bit lengths, scanning in increasing frequency.
     * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
     * lengths instead of fixing only the wrong ones. This idea is taken
     * from 'ar' written by Haruhiko Okumura.)
     */
    for (bits = max_length; bits !== 0; bits--) {
      n = s.bl_count[bits];
      while (n !== 0) {
        m = s.heap[--h];
        if (m > max_code) { continue; }
        if (tree[m * 2 + 1]/*.Len*/ !== bits) {
          // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
          s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
          tree[m * 2 + 1]/*.Len*/ = bits;
        }
        n--;
      }
    }
  };


  /* ===========================================================================
   * Generate the codes for a given tree and bit counts (which need not be
   * optimal).
   * IN assertion: the array bl_count contains the bit length statistics for
   * the given tree and the field len is set for all tree elements.
   * OUT assertion: the field code is set for all tree elements of non
   *     zero code length.
   */
  const gen_codes = (tree, max_code, bl_count) =>
  //    ct_data *tree;             /* the tree to decorate */
  //    int max_code;              /* largest code with non zero frequency */
  //    ushf *bl_count;            /* number of codes at each bit length */
  {
    const next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */
    let code = 0;              /* running code value */
    let bits;                  /* bit index */
    let n;                     /* code index */

    /* The distribution counts are first used to generate the code values
     * without bit reversal.
     */
    for (bits = 1; bits <= MAX_BITS$1; bits++) {
      next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
    }
    /* Check that the bit counts in bl_count are consistent. The last code
     * must be all ones.
     */
    //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
    //        "inconsistent bit counts");
    //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

    for (n = 0;  n <= max_code; n++) {
      let len = tree[n * 2 + 1]/*.Len*/;
      if (len === 0) { continue; }
      /* Now reverse the bits */
      tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

      //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
      //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
    }
  };


  /* ===========================================================================
   * Initialize the various 'constant' tables.
   */
  const tr_static_init = () => {

    let n;        /* iterates over tree elements */
    let bits;     /* bit counter */
    let length;   /* length value */
    let code;     /* code value */
    let dist;     /* distance index */
    const bl_count = new Array(MAX_BITS$1 + 1);
    /* number of codes at each bit length for an optimal tree */

    // do check in _tr_init()
    //if (static_init_done) return;

    /* For some embedded targets, global variables are not initialized: */
  /*#ifdef NO_INIT_GLOBAL_POINTERS
    static_l_desc.static_tree = static_ltree;
    static_l_desc.extra_bits = extra_lbits;
    static_d_desc.static_tree = static_dtree;
    static_d_desc.extra_bits = extra_dbits;
    static_bl_desc.extra_bits = extra_blbits;
  #endif*/

    /* Initialize the mapping length (0..255) -> length code (0..28) */
    length = 0;
    for (code = 0; code < LENGTH_CODES$1 - 1; code++) {
      base_length[code] = length;
      for (n = 0; n < (1 << extra_lbits[code]); n++) {
        _length_code[length++] = code;
      }
    }
    //Assert (length == 256, "tr_static_init: length != 256");
    /* Note that the length 255 (match length 258) can be represented
     * in two different ways: code 284 + 5 bits or code 285, so we
     * overwrite length_code[255] to use the best encoding:
     */
    _length_code[length - 1] = code;

    /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
    dist = 0;
    for (code = 0; code < 16; code++) {
      base_dist[code] = dist;
      for (n = 0; n < (1 << extra_dbits[code]); n++) {
        _dist_code[dist++] = code;
      }
    }
    //Assert (dist == 256, "tr_static_init: dist != 256");
    dist >>= 7; /* from now on, all distances are divided by 128 */
    for (; code < D_CODES$1; code++) {
      base_dist[code] = dist << 7;
      for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
        _dist_code[256 + dist++] = code;
      }
    }
    //Assert (dist == 256, "tr_static_init: 256+dist != 512");

    /* Construct the codes of the static literal tree */
    for (bits = 0; bits <= MAX_BITS$1; bits++) {
      bl_count[bits] = 0;
    }

    n = 0;
    while (n <= 143) {
      static_ltree[n * 2 + 1]/*.Len*/ = 8;
      n++;
      bl_count[8]++;
    }
    while (n <= 255) {
      static_ltree[n * 2 + 1]/*.Len*/ = 9;
      n++;
      bl_count[9]++;
    }
    while (n <= 279) {
      static_ltree[n * 2 + 1]/*.Len*/ = 7;
      n++;
      bl_count[7]++;
    }
    while (n <= 287) {
      static_ltree[n * 2 + 1]/*.Len*/ = 8;
      n++;
      bl_count[8]++;
    }
    /* Codes 286 and 287 do not exist, but we must include them in the
     * tree construction to get a canonical Huffman tree (longest code
     * all ones)
     */
    gen_codes(static_ltree, L_CODES$1 + 1, bl_count);

    /* The static distance tree is trivial: */
    for (n = 0; n < D_CODES$1; n++) {
      static_dtree[n * 2 + 1]/*.Len*/ = 5;
      static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
    }

    // Now data ready and we can init static trees
    static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);
    static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);
    static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);

    //static_init_done = true;
  };


  /* ===========================================================================
   * Initialize a new block.
   */
  const init_block = (s) => {

    let n; /* iterates over tree elements */

    /* Initialize the trees. */
    for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
    for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
    for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

    s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
    s.opt_len = s.static_len = 0;
    s.last_lit = s.matches = 0;
  };


  /* ===========================================================================
   * Flush the bit buffer and align the output on a byte boundary
   */
  const bi_windup = (s) =>
  {
    if (s.bi_valid > 8) {
      put_short(s, s.bi_buf);
    } else if (s.bi_valid > 0) {
      //put_byte(s, (Byte)s->bi_buf);
      s.pending_buf[s.pending++] = s.bi_buf;
    }
    s.bi_buf = 0;
    s.bi_valid = 0;
  };

  /* ===========================================================================
   * Copy a stored block, storing first the length and its
   * one's complement if requested.
   */
  const copy_block = (s, buf, len, header) =>
  //DeflateState *s;
  //charf    *buf;    /* the input data */
  //unsigned len;     /* its length */
  //int      header;  /* true if block header must be written */
  {
    bi_windup(s);        /* align on byte boundary */

    if (header) {
      put_short(s, len);
      put_short(s, ~len);
    }
  //  while (len--) {
  //    put_byte(s, *buf++);
  //  }
    s.pending_buf.set(s.window.subarray(buf, buf + len), s.pending);
    s.pending += len;
  };

  /* ===========================================================================
   * Compares to subtrees, using the tree depth as tie breaker when
   * the subtrees have equal frequency. This minimizes the worst case length.
   */
  const smaller = (tree, n, m, depth) => {

    const _n2 = n * 2;
    const _m2 = m * 2;
    return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
           (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
  };

  /* ===========================================================================
   * Restore the heap property by moving down the tree starting at node k,
   * exchanging a node with the smallest of its two sons if necessary, stopping
   * when the heap property is re-established (each father smaller than its
   * two sons).
   */
  const pqdownheap = (s, tree, k) =>
  //    deflate_state *s;
  //    ct_data *tree;  /* the tree to restore */
  //    int k;               /* node to move down */
  {
    const v = s.heap[k];
    let j = k << 1;  /* left son of k */
    while (j <= s.heap_len) {
      /* Set j to the smallest of the two sons: */
      if (j < s.heap_len &&
        smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
        j++;
      }
      /* Exit if v is smaller than both sons */
      if (smaller(tree, v, s.heap[j], s.depth)) { break; }

      /* Exchange v with the smallest son */
      s.heap[k] = s.heap[j];
      k = j;

      /* And continue down the tree, setting j to the left son of k */
      j <<= 1;
    }
    s.heap[k] = v;
  };


  // inlined manually
  // const SMALLEST = 1;

  /* ===========================================================================
   * Send the block data compressed using the given Huffman trees
   */
  const compress_block = (s, ltree, dtree) =>
  //    deflate_state *s;
  //    const ct_data *ltree; /* literal tree */
  //    const ct_data *dtree; /* distance tree */
  {
    let dist;           /* distance of matched string */
    let lc;             /* match length or unmatched char (if dist == 0) */
    let lx = 0;         /* running index in l_buf */
    let code;           /* the code to send */
    let extra;          /* number of extra bits to send */

    if (s.last_lit !== 0) {
      do {
        dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
        lc = s.pending_buf[s.l_buf + lx];
        lx++;

        if (dist === 0) {
          send_code(s, lc, ltree); /* send a literal byte */
          //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
        } else {
          /* Here, lc is the match length - MIN_MATCH */
          code = _length_code[lc];
          send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */
          extra = extra_lbits[code];
          if (extra !== 0) {
            lc -= base_length[code];
            send_bits(s, lc, extra);       /* send the extra length bits */
          }
          dist--; /* dist is now the match distance - 1 */
          code = d_code(dist);
          //Assert (code < D_CODES, "bad d_code");

          send_code(s, code, dtree);       /* send the distance code */
          extra = extra_dbits[code];
          if (extra !== 0) {
            dist -= base_dist[code];
            send_bits(s, dist, extra);   /* send the extra distance bits */
          }
        } /* literal or match pair ? */

        /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
        //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
        //       "pendingBuf overflow");

      } while (lx < s.last_lit);
    }

    send_code(s, END_BLOCK, ltree);
  };


  /* ===========================================================================
   * Construct one Huffman tree and assigns the code bit strings and lengths.
   * Update the total bit length for the current block.
   * IN assertion: the field freq is set for all tree elements.
   * OUT assertions: the fields len and code are set to the optimal bit length
   *     and corresponding code. The length opt_len is updated; static_len is
   *     also updated if stree is not null. The field max_code is set.
   */
  const build_tree = (s, desc) =>
  //    deflate_state *s;
  //    tree_desc *desc; /* the tree descriptor */
  {
    const tree     = desc.dyn_tree;
    const stree    = desc.stat_desc.static_tree;
    const has_stree = desc.stat_desc.has_stree;
    const elems    = desc.stat_desc.elems;
    let n, m;          /* iterate over heap elements */
    let max_code = -1; /* largest code with non zero frequency */
    let node;          /* new node being created */

    /* Construct the initial heap, with least frequent element in
     * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
     * heap[0] is not used.
     */
    s.heap_len = 0;
    s.heap_max = HEAP_SIZE$1;

    for (n = 0; n < elems; n++) {
      if (tree[n * 2]/*.Freq*/ !== 0) {
        s.heap[++s.heap_len] = max_code = n;
        s.depth[n] = 0;

      } else {
        tree[n * 2 + 1]/*.Len*/ = 0;
      }
    }

    /* The pkzip format requires that at least one distance code exists,
     * and that at least one bit should be sent even if there is only one
     * possible code. So to avoid special checks later on we force at least
     * two codes of non zero frequency.
     */
    while (s.heap_len < 2) {
      node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
      tree[node * 2]/*.Freq*/ = 1;
      s.depth[node] = 0;
      s.opt_len--;

      if (has_stree) {
        s.static_len -= stree[node * 2 + 1]/*.Len*/;
      }
      /* node is 0 or 1 so it does not have extra bits */
    }
    desc.max_code = max_code;

    /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
     * establish sub-heaps of increasing lengths:
     */
    for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

    /* Construct the Huffman tree by repeatedly combining the least two
     * frequent nodes.
     */
    node = elems;              /* next internal node of the tree */
    do {
      //pqremove(s, tree, n);  /* n = node of least frequency */
      /*** pqremove ***/
      n = s.heap[1/*SMALLEST*/];
      s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
      pqdownheap(s, tree, 1/*SMALLEST*/);
      /***/

      m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

      s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
      s.heap[--s.heap_max] = m;

      /* Create a new node father of n and m */
      tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
      s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
      tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

      /* and insert the new node in the heap */
      s.heap[1/*SMALLEST*/] = node++;
      pqdownheap(s, tree, 1/*SMALLEST*/);

    } while (s.heap_len >= 2);

    s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

    /* At this point, the fields freq and dad are set. We can now
     * generate the bit lengths.
     */
    gen_bitlen(s, desc);

    /* The field len is now set, we can generate the bit codes */
    gen_codes(tree, max_code, s.bl_count);
  };


  /* ===========================================================================
   * Scan a literal or distance tree to determine the frequencies of the codes
   * in the bit length tree.
   */
  const scan_tree = (s, tree, max_code) =>
  //    deflate_state *s;
  //    ct_data *tree;   /* the tree to be scanned */
  //    int max_code;    /* and its largest code of non zero frequency */
  {
    let n;                     /* iterates over all tree elements */
    let prevlen = -1;          /* last emitted length */
    let curlen;                /* length of current code */

    let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

    let count = 0;             /* repeat count of the current code */
    let max_count = 7;         /* max repeat count */
    let min_count = 4;         /* min repeat count */

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    }
    tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

    for (n = 0; n <= max_code; n++) {
      curlen = nextlen;
      nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

      if (++count < max_count && curlen === nextlen) {
        continue;

      } else if (count < min_count) {
        s.bl_tree[curlen * 2]/*.Freq*/ += count;

      } else if (curlen !== 0) {

        if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
        s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

      } else if (count <= 10) {
        s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

      } else {
        s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
      }

      count = 0;
      prevlen = curlen;

      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;

      } else if (curlen === nextlen) {
        max_count = 6;
        min_count = 3;

      } else {
        max_count = 7;
        min_count = 4;
      }
    }
  };


  /* ===========================================================================
   * Send a literal or distance tree in compressed form, using the codes in
   * bl_tree.
   */
  const send_tree = (s, tree, max_code) =>
  //    deflate_state *s;
  //    ct_data *tree; /* the tree to be scanned */
  //    int max_code;       /* and its largest code of non zero frequency */
  {
    let n;                     /* iterates over all tree elements */
    let prevlen = -1;          /* last emitted length */
    let curlen;                /* length of current code */

    let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

    let count = 0;             /* repeat count of the current code */
    let max_count = 7;         /* max repeat count */
    let min_count = 4;         /* min repeat count */

    /* tree[max_code+1].Len = -1; */  /* guard already set */
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    }

    for (n = 0; n <= max_code; n++) {
      curlen = nextlen;
      nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

      if (++count < max_count && curlen === nextlen) {
        continue;

      } else if (count < min_count) {
        do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

      } else if (curlen !== 0) {
        if (curlen !== prevlen) {
          send_code(s, curlen, s.bl_tree);
          count--;
        }
        //Assert(count >= 3 && count <= 6, " 3_6?");
        send_code(s, REP_3_6, s.bl_tree);
        send_bits(s, count - 3, 2);

      } else if (count <= 10) {
        send_code(s, REPZ_3_10, s.bl_tree);
        send_bits(s, count - 3, 3);

      } else {
        send_code(s, REPZ_11_138, s.bl_tree);
        send_bits(s, count - 11, 7);
      }

      count = 0;
      prevlen = curlen;
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;

      } else if (curlen === nextlen) {
        max_count = 6;
        min_count = 3;

      } else {
        max_count = 7;
        min_count = 4;
      }
    }
  };


  /* ===========================================================================
   * Construct the Huffman tree for the bit lengths and return the index in
   * bl_order of the last bit length code to send.
   */
  const build_bl_tree = (s) => {

    let max_blindex;  /* index of last bit length code of non zero freq */

    /* Determine the bit length frequencies for literal and distance trees */
    scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
    scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

    /* Build the bit length tree: */
    build_tree(s, s.bl_desc);
    /* opt_len now includes the length of the tree representations, except
     * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
     */

    /* Determine the number of bit length codes to send. The pkzip format
     * requires that at least 4 bit length codes be sent. (appnote.txt says
     * 3 but the actual value used is 4.)
     */
    for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {
      if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
        break;
      }
    }
    /* Update opt_len to include the bit length tree and counts */
    s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
    //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
    //        s->opt_len, s->static_len));

    return max_blindex;
  };


  /* ===========================================================================
   * Send the header for a block using dynamic Huffman trees: the counts, the
   * lengths of the bit length codes, the literal tree and the distance tree.
   * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
   */
  const send_all_trees = (s, lcodes, dcodes, blcodes) =>
  //    deflate_state *s;
  //    int lcodes, dcodes, blcodes; /* number of codes for each tree */
  {
    let rank;                    /* index in bl_order */

    //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
    //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
    //        "too many codes");
    //Tracev((stderr, "\nbl counts: "));
    send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
    send_bits(s, dcodes - 1,   5);
    send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
    for (rank = 0; rank < blcodes; rank++) {
      //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
      send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
    }
    //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

    send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
    //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

    send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
    //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
  };


  /* ===========================================================================
   * Check if the data type is TEXT or BINARY, using the following algorithm:
   * - TEXT if the two conditions below are satisfied:
   *    a) There are no non-portable control characters belonging to the
   *       "black list" (0..6, 14..25, 28..31).
   *    b) There is at least one printable character belonging to the
   *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
   * - BINARY otherwise.
   * - The following partially-portable control characters form a
   *   "gray list" that is ignored in this detection algorithm:
   *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
   * IN assertion: the fields Freq of dyn_ltree are set.
   */
  const detect_data_type = (s) => {
    /* black_mask is the bit mask of black-listed bytes
     * set bits 0..6, 14..25, and 28..31
     * 0xf3ffc07f = binary 11110011111111111100000001111111
     */
    let black_mask = 0xf3ffc07f;
    let n;

    /* Check for non-textual ("black-listed") bytes. */
    for (n = 0; n <= 31; n++, black_mask >>>= 1) {
      if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
        return Z_BINARY;
      }
    }

    /* Check for textual ("white-listed") bytes. */
    if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
        s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
    for (n = 32; n < LITERALS$1; n++) {
      if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
        return Z_TEXT;
      }
    }

    /* There are no "black-listed" or "white-listed" bytes:
     * this stream either is empty or has tolerated ("gray-listed") bytes only.
     */
    return Z_BINARY;
  };


  let static_init_done = false;

  /* ===========================================================================
   * Initialize the tree data structures for a new zlib stream.
   */
  const _tr_init$1 = (s) =>
  {

    if (!static_init_done) {
      tr_static_init();
      static_init_done = true;
    }

    s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
    s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
    s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

    s.bi_buf = 0;
    s.bi_valid = 0;

    /* Initialize the first block of the first file: */
    init_block(s);
  };


  /* ===========================================================================
   * Send a stored block
   */
  const _tr_stored_block$1 = (s, buf, stored_len, last) =>
  //DeflateState *s;
  //charf *buf;       /* input block */
  //ulg stored_len;   /* length of input block */
  //int last;         /* one if this is the last block for a file */
  {
    send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
    copy_block(s, buf, stored_len, true); /* with header */
  };


  /* ===========================================================================
   * Send one empty static block to give enough lookahead for inflate.
   * This takes 10 bits, of which 7 may remain in the bit buffer.
   */
  const _tr_align$1 = (s) => {
    send_bits(s, STATIC_TREES << 1, 3);
    send_code(s, END_BLOCK, static_ltree);
    bi_flush(s);
  };


  /* ===========================================================================
   * Determine the best encoding for the current block: dynamic trees, static
   * trees or store, and output the encoded block to the zip file.
   */
  const _tr_flush_block$1 = (s, buf, stored_len, last) =>
  //DeflateState *s;
  //charf *buf;       /* input block, or NULL if too old */
  //ulg stored_len;   /* length of input block */
  //int last;         /* one if this is the last block for a file */
  {
    let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
    let max_blindex = 0;        /* index of last bit length code of non zero freq */

    /* Build the Huffman trees unless a stored block is forced */
    if (s.level > 0) {

      /* Check if the file is binary or text */
      if (s.strm.data_type === Z_UNKNOWN$1) {
        s.strm.data_type = detect_data_type(s);
      }

      /* Construct the literal and distance trees */
      build_tree(s, s.l_desc);
      // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
      //        s->static_len));

      build_tree(s, s.d_desc);
      // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
      //        s->static_len));
      /* At this point, opt_len and static_len are the total bit lengths of
       * the compressed block data, excluding the tree representations.
       */

      /* Build the bit length tree for the above two trees, and get the index
       * in bl_order of the last bit length code to send.
       */
      max_blindex = build_bl_tree(s);

      /* Determine the best encoding. Compute the block lengths in bytes. */
      opt_lenb = (s.opt_len + 3 + 7) >>> 3;
      static_lenb = (s.static_len + 3 + 7) >>> 3;

      // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
      //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
      //        s->last_lit));

      if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

    } else {
      // Assert(buf != (char*)0, "lost buf");
      opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
    }

    if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
      /* 4: two words for the lengths */

      /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
       * Otherwise we can't have processed more than WSIZE input bytes since
       * the last block flush, because compression would have been
       * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
       * transform a block into a stored block.
       */
      _tr_stored_block$1(s, buf, stored_len, last);

    } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {

      send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
      compress_block(s, static_ltree, static_dtree);

    } else {
      send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
      send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
      compress_block(s, s.dyn_ltree, s.dyn_dtree);
    }
    // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
    /* The above check is made mod 2^32, for files larger than 512 MB
     * and uLong implemented on 32 bits.
     */
    init_block(s);

    if (last) {
      bi_windup(s);
    }
    // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
    //       s->compressed_len-7*last));
  };

  /* ===========================================================================
   * Save the match info and tally the frequency counts. Return true if
   * the current block must be flushed.
   */
  const _tr_tally$1 = (s, dist, lc) =>
  //    deflate_state *s;
  //    unsigned dist;  /* distance of matched string */
  //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
  {
    //let out_length, in_length, dcode;

    s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
    s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

    s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
    s.last_lit++;

    if (dist === 0) {
      /* lc is the unmatched char */
      s.dyn_ltree[lc * 2]/*.Freq*/++;
    } else {
      s.matches++;
      /* Here, lc is the match length - MIN_MATCH */
      dist--;             /* dist = match distance - 1 */
      //Assert((ush)dist < (ush)MAX_DIST(s) &&
      //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
      //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

      s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]/*.Freq*/++;
      s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
    }

  // (!) This block is disabled in zlib defaults,
  // don't enable it for binary compatibility

  //#ifdef TRUNCATE_BLOCK
  //  /* Try to guess if it is profitable to stop the current block here */
  //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
  //    /* Compute an upper bound for the compressed length */
  //    out_length = s.last_lit*8;
  //    in_length = s.strstart - s.block_start;
  //
  //    for (dcode = 0; dcode < D_CODES; dcode++) {
  //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
  //    }
  //    out_length >>>= 3;
  //    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
  //    //       s->last_lit, in_length, out_length,
  //    //       100L - out_length*100L/in_length));
  //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
  //      return true;
  //    }
  //  }
  //#endif

    return (s.last_lit === s.lit_bufsize - 1);
    /* We avoid equality with lit_bufsize because of wraparound at 64K
     * on 16 bit machines and because stored blocks are restricted to
     * 64K-1 bytes.
     */
  };

  var _tr_init_1  = _tr_init$1;
  var _tr_stored_block_1 = _tr_stored_block$1;
  var _tr_flush_block_1  = _tr_flush_block$1;
  var _tr_tally_1 = _tr_tally$1;
  var _tr_align_1 = _tr_align$1;

  var trees = {
  	_tr_init: _tr_init_1,
  	_tr_stored_block: _tr_stored_block_1,
  	_tr_flush_block: _tr_flush_block_1,
  	_tr_tally: _tr_tally_1,
  	_tr_align: _tr_align_1
  };

  // Note: adler32 takes 12% for level 0 and 2% for level 6.
  // It isn't worth it to make additional optimizations as in original.
  // Small size is preferable.

  // (C) 1995-2013 Jean-loup Gailly and Mark Adler
  // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
  //
  // This software is provided 'as-is', without any express or implied
  // warranty. In no event will the authors be held liable for any damages
  // arising from the use of this software.
  //
  // Permission is granted to anyone to use this software for any purpose,
  // including commercial applications, and to alter it and redistribute it
  // freely, subject to the following restrictions:
  //
  // 1. The origin of this software must not be misrepresented; you must not
  //   claim that you wrote the original software. If you use this software
  //   in a product, an acknowledgment in the product documentation would be
  //   appreciated but is not required.
  // 2. Altered source versions must be plainly marked as such, and must not be
  //   misrepresented as being the original software.
  // 3. This notice may not be removed or altered from any source distribution.

  const adler32 = (adler, buf, len, pos) => {
    let s1 = (adler & 0xffff) |0,
        s2 = ((adler >>> 16) & 0xffff) |0,
        n = 0;

    while (len !== 0) {
      // Set limit ~ twice less than 5552, to keep
      // s2 in 31-bits, because we force signed ints.
      // in other case %= will fail.
      n = len > 2000 ? 2000 : len;
      len -= n;

      do {
        s1 = (s1 + buf[pos++]) |0;
        s2 = (s2 + s1) |0;
      } while (--n);

      s1 %= 65521;
      s2 %= 65521;
    }

    return (s1 | (s2 << 16)) |0;
  };


  var adler32_1 = adler32;

  // Note: we can't get significant speed boost here.
  // So write code to minimize size - no pregenerated tables
  // and array tools dependencies.

  // (C) 1995-2013 Jean-loup Gailly and Mark Adler
  // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
  //
  // This software is provided 'as-is', without any express or implied
  // warranty. In no event will the authors be held liable for any damages
  // arising from the use of this software.
  //
  // Permission is granted to anyone to use this software for any purpose,
  // including commercial applications, and to alter it and redistribute it
  // freely, subject to the following restrictions:
  //
  // 1. The origin of this software must not be misrepresented; you must not
  //   claim that you wrote the original software. If you use this software
  //   in a product, an acknowledgment in the product documentation would be
  //   appreciated but is not required.
  // 2. Altered source versions must be plainly marked as such, and must not be
  //   misrepresented as being the original software.
  // 3. This notice may not be removed or altered from any source distribution.

  // Use ordinary array, since untyped makes no boost here
  const makeTable = () => {
    let c, table = [];

    for (var n = 0; n < 256; n++) {
      c = n;
      for (var k = 0; k < 8; k++) {
        c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
      }
      table[n] = c;
    }

    return table;
  };

  // Create table on load. Just 255 signed longs. Not a problem.
  const crcTable = new Uint32Array(makeTable());


  const crc32 = (crc, buf, len, pos) => {
    const t = crcTable;
    const end = pos + len;

    crc ^= -1;

    for (let i = pos; i < end; i++) {
      crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
    }

    return (crc ^ (-1)); // >>> 0;
  };


  var crc32_1 = crc32;

  // (C) 1995-2013 Jean-loup Gailly and Mark Adler
  // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
  //
  // This software is provided 'as-is', without any express or implied
  // warranty. In no event will the authors be held liable for any damages
  // arising from the use of this software.
  //
  // Permission is granted to anyone to use this software for any purpose,
  // including commercial applications, and to alter it and redistribute it
  // freely, subject to the following restrictions:
  //
  // 1. The origin of this software must not be misrepresented; you must not
  //   claim that you wrote the original software. If you use this software
  //   in a product, an acknowledgment in the product documentation would be
  //   appreciated but is not required.
  // 2. Altered source versions must be plainly marked as such, and must not be
  //   misrepresented as being the original software.
  // 3. This notice may not be removed or altered from any source distribution.

  var messages = {
    2:      'need dictionary',     /* Z_NEED_DICT       2  */
    1:      'stream end',          /* Z_STREAM_END      1  */
    0:      '',                    /* Z_OK              0  */
    '-1':   'file error',          /* Z_ERRNO         (-1) */
    '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
    '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
    '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
    '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
    '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
  };

  // (C) 1995-2013 Jean-loup Gailly and Mark Adler
  // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
  //
  // This software is provided 'as-is', without any express or implied
  // warranty. In no event will the authors be held liable for any damages
  // arising from the use of this software.
  //
  // Permission is granted to anyone to use this software for any purpose,
  // including commercial applications, and to alter it and redistribute it
  // freely, subject to the following restrictions:
  //
  // 1. The origin of this software must not be misrepresented; you must not
  //   claim that you wrote the original software. If you use this software
  //   in a product, an acknowledgment in the product documentation would be
  //   appreciated but is not required.
  // 2. Altered source versions must be plainly marked as such, and must not be
  //   misrepresented as being the original software.
  // 3. This notice may not be removed or altered from any source distribution.

  var constants$2 = {

    /* Allowed flush values; see deflate() and inflate() below for details */
    Z_NO_FLUSH:         0,
    Z_PARTIAL_FLUSH:    1,
    Z_SYNC_FLUSH:       2,
    Z_FULL_FLUSH:       3,
    Z_FINISH:           4,
    Z_BLOCK:            5,
    Z_TREES:            6,

    /* Return codes for the compression/decompression functions. Negative values
    * are errors, positive values are used for special but normal events.
    */
    Z_OK:               0,
    Z_STREAM_END:       1,
    Z_NEED_DICT:        2,
    Z_ERRNO:           -1,
    Z_STREAM_ERROR:    -2,
    Z_DATA_ERROR:      -3,
    Z_MEM_ERROR:       -4,
    Z_BUF_ERROR:       -5,
    //Z_VERSION_ERROR: -6,

    /* compression levels */
    Z_NO_COMPRESSION:         0,
    Z_BEST_SPEED:             1,
    Z_BEST_COMPRESSION:       9,
    Z_DEFAULT_COMPRESSION:   -1,


    Z_FILTERED:               1,
    Z_HUFFMAN_ONLY:           2,
    Z_RLE:                    3,
    Z_FIXED:                  4,
    Z_DEFAULT_STRATEGY:       0,

    /* Possible values of the data_type field (though see inflate()) */
    Z_BINARY:                 0,
    Z_TEXT:                   1,
    //Z_ASCII:                1, // = Z_TEXT (deprecated)
    Z_UNKNOWN:                2,

    /* The deflate compression method */
    Z_DEFLATED:               8
    //Z_NULL:                 null // Use -1 or null inline, depending on var type
  };

  // (C) 1995-2013 Jean-loup Gailly and Mark Adler
  // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
  //
  // This software is provided 'as-is', without any express or implied
  // warranty. In no event will the authors be held liable for any damages
  // arising from the use of this software.
  //
  // Permission is granted to anyone to use this software for any purpose,
  // including commercial applications, and to alter it and redistribute it
  // freely, subject to the following restrictions:
  //
  // 1. The origin of this software must not be misrepresented; you must not
  //   claim that you wrote the original software. If you use this software
  //   in a product, an acknowledgment in the product documentation would be
  //   appreciated but is not required.
  // 2. Altered source versions must be plainly marked as such, and must not be
  //   misrepresented as being the original software.
  // 3. This notice may not be removed or altered from any source distribution.

  const { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;




  /* Public constants ==========================================================*/
  /* ===========================================================================*/

  const {
    Z_NO_FLUSH: Z_NO_FLUSH$2, Z_PARTIAL_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$3, Z_BLOCK: Z_BLOCK$1,
    Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_BUF_ERROR: Z_BUF_ERROR$1,
    Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,
    Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,
    Z_UNKNOWN,
    Z_DEFLATED: Z_DEFLATED$2
  } = constants$2;

  /*============================================================================*/


  const MAX_MEM_LEVEL = 9;
  /* Maximum value for memLevel in deflateInit2 */
  const MAX_WBITS$1 = 15;
  /* 32K LZ77 window */
  const DEF_MEM_LEVEL = 8;


  const LENGTH_CODES  = 29;
  /* number of length codes, not counting the special END_BLOCK code */
  const LITERALS      = 256;
  /* number of literal bytes 0..255 */
  const L_CODES       = LITERALS + 1 + LENGTH_CODES;
  /* number of Literal or Length codes, including the END_BLOCK code */
  const D_CODES       = 30;
  /* number of distance codes */
  const BL_CODES      = 19;
  /* number of codes used to transfer the bit lengths */
  const HEAP_SIZE     = 2 * L_CODES + 1;
  /* maximum heap size */
  const MAX_BITS  = 15;
  /* All codes must not exceed MAX_BITS bits */

  const MIN_MATCH = 3;
  const MAX_MATCH = 258;
  const MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

  const PRESET_DICT = 0x20;

  const INIT_STATE = 42;
  const EXTRA_STATE = 69;
  const NAME_STATE = 73;
  const COMMENT_STATE = 91;
  const HCRC_STATE = 103;
  const BUSY_STATE = 113;
  const FINISH_STATE = 666;

  const BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
  const BS_BLOCK_DONE     = 2; /* block flush performed */
  const BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
  const BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

  const OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

  const err = (strm, errorCode) => {
    strm.msg = messages[errorCode];
    return errorCode;
  };

  const rank = (f) => {
    return ((f) << 1) - ((f) > 4 ? 9 : 0);
  };

  const zero = (buf) => {
    let len = buf.length; while (--len >= 0) { buf[len] = 0; }
  };


  /* eslint-disable new-cap */
  let HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;
  // This hash causes less collisions, https://github.com/nodeca/pako/issues/135
  // But breaks binary compatibility
  //let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;
  let HASH = HASH_ZLIB;

  /* =========================================================================
   * Flush as much pending output as possible. All deflate() output goes
   * through this function so some applications may wish to modify it
   * to avoid allocating a large strm->output buffer and copying into it.
   * (See also read_buf()).
   */
  const flush_pending = (strm) => {
    const s = strm.state;

    //_tr_flush_bits(s);
    let len = s.pending;
    if (len > strm.avail_out) {
      len = strm.avail_out;
    }
    if (len === 0) { return; }

    strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);
    strm.next_out += len;
    s.pending_out += len;
    strm.total_out += len;
    strm.avail_out -= len;
    s.pending -= len;
    if (s.pending === 0) {
      s.pending_out = 0;
    }
  };


  const flush_block_only = (s, last) => {
    _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
    s.block_start = s.strstart;
    flush_pending(s.strm);
  };


  const put_byte = (s, b) => {
    s.pending_buf[s.pending++] = b;
  };


  /* =========================================================================
   * Put a short in the pending buffer. The 16-bit value is put in MSB order.
   * IN assertion: the stream state is correct and there is enough room in
   * pending_buf.
   */
  const putShortMSB = (s, b) => {

    //  put_byte(s, (Byte)(b >> 8));
  //  put_byte(s, (Byte)(b & 0xff));
    s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
    s.pending_buf[s.pending++] = b & 0xff;
  };


  /* ===========================================================================
   * Read a new buffer from the current input stream, update the adler32
   * and total number of bytes read.  All deflate() input goes through
   * this function so some applications may wish to modify it to avoid
   * allocating a large strm->input buffer and copying from it.
   * (See also flush_pending()).
   */
  const read_buf = (strm, buf, start, size) => {

    let len = strm.avail_in;

    if (len > size) { len = size; }
    if (len === 0) { return 0; }

    strm.avail_in -= len;

    // zmemcpy(buf, strm->next_in, len);
    buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);
    if (strm.state.wrap === 1) {
      strm.adler = adler32_1(strm.adler, buf, len, start);
    }

    else if (strm.state.wrap === 2) {
      strm.adler = crc32_1(strm.adler, buf, len, start);
    }

    strm.next_in += len;
    strm.total_in += len;

    return len;
  };


  /* ===========================================================================
   * Set match_start to the longest match starting at the given string and
   * return its length. Matches shorter or equal to prev_length are discarded,
   * in which case the result is equal to prev_length and match_start is
   * garbage.
   * IN assertions: cur_match is the head of the hash chain for the current
   *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
   * OUT assertion: the match length is not greater than s->lookahead.
   */
  const longest_match = (s, cur_match) => {

    let chain_length = s.max_chain_length;      /* max hash chain length */
    let scan = s.strstart; /* current string */
    let match;                       /* matched string */
    let len;                           /* length of current match */
    let best_len = s.prev_length;              /* best match length so far */
    let nice_match = s.nice_match;             /* stop if match long enough */
    const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
        s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

    const _win = s.window; // shortcut

    const wmask = s.w_mask;
    const prev  = s.prev;

    /* Stop when cur_match becomes <= limit. To simplify the code,
     * we prevent matches with the string of window index 0.
     */

    const strend = s.strstart + MAX_MATCH;
    let scan_end1  = _win[scan + best_len - 1];
    let scan_end   = _win[scan + best_len];

    /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
     * It is easy to get rid of this optimization if necessary.
     */
    // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

    /* Do not waste too much time if we already have a good match: */
    if (s.prev_length >= s.good_match) {
      chain_length >>= 2;
    }
    /* Do not look for matches beyond the end of the input. This is necessary
     * to make deflate deterministic.
     */
    if (nice_match > s.lookahead) { nice_match = s.lookahead; }

    // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

    do {
      // Assert(cur_match < s->strstart, "no future");
      match = cur_match;

      /* Skip to next match if the match length cannot increase
       * or if the match length is less than 2.  Note that the checks below
       * for insufficient lookahead only occur occasionally for performance
       * reasons.  Therefore uninitialized memory will be accessed, and
       * conditional jumps will be made that depend on those values.
       * However the length of the match is limited to the lookahead, so
       * the output of deflate is not affected by the uninitialized values.
       */

      if (_win[match + best_len]     !== scan_end  ||
          _win[match + best_len - 1] !== scan_end1 ||
          _win[match]                !== _win[scan] ||
          _win[++match]              !== _win[scan + 1]) {
        continue;
      }

      /* The check at best_len-1 can be removed because it will be made
       * again later. (This heuristic is not always a win.)
       * It is not necessary to compare scan[2] and match[2] since they
       * are always equal when the other bytes match, given that
       * the hash keys are equal and that HASH_BITS >= 8.
       */
      scan += 2;
      match++;
      // Assert(*scan == *match, "match[2]?");

      /* We check for insufficient lookahead only every 8th comparison;
       * the 256th check will be made at strstart+258.
       */
      do {
        /*jshint noempty:false*/
      } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
               _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
               _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
               _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
               scan < strend);

      // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

      len = MAX_MATCH - (strend - scan);
      scan = strend - MAX_MATCH;

      if (len > best_len) {
        s.match_start = cur_match;
        best_len = len;
        if (len >= nice_match) {
          break;
        }
        scan_end1  = _win[scan + best_len - 1];
        scan_end   = _win[scan + best_len];
      }
    } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

    if (best_len <= s.lookahead) {
      return best_len;
    }
    return s.lookahead;
  };


  /* ===========================================================================
   * Fill the window when the lookahead becomes insufficient.
   * Updates strstart and lookahead.
   *
   * IN assertion: lookahead < MIN_LOOKAHEAD
   * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
   *    At least one byte has been read, or avail_in == 0; reads are
   *    performed for at least two bytes (required for the zip translate_eol
   *    option -- not supported here).
   */
  const fill_window = (s) => {

    const _w_size = s.w_size;
    let p, n, m, more, str;

    //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

    do {
      more = s.window_size - s.lookahead - s.strstart;

      // JS ints have 32 bit, block below not needed
      /* Deal with !@#$% 64K limit: */
      //if (sizeof(int) <= 2) {
      //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
      //        more = wsize;
      //
      //  } else if (more == (unsigned)(-1)) {
      //        /* Very unlikely, but possible on 16 bit machine if
      //         * strstart == 0 && lookahead == 1 (input done a byte at time)
      //         */
      //        more--;
      //    }
      //}


      /* If the window is almost full and there is insufficient lookahead,
       * move the upper half to the lower one to make room in the upper half.
       */
      if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

        s.window.set(s.window.subarray(_w_size, _w_size + _w_size), 0);
        s.match_start -= _w_size;
        s.strstart -= _w_size;
        /* we now have strstart >= MAX_DIST */
        s.block_start -= _w_size;

        /* Slide the hash table (could be avoided with 32 bit values
         at the expense of memory usage). We slide even when level == 0
         to keep the hash table consistent if we switch back to level > 0
         later. (Using level 0 permanently is not an optimal usage of
         zlib, so we don't care about this pathological case.)
         */

        n = s.hash_size;
        p = n;

        do {
          m = s.head[--p];
          s.head[p] = (m >= _w_size ? m - _w_size : 0);
        } while (--n);

        n = _w_size;
        p = n;

        do {
          m = s.prev[--p];
          s.prev[p] = (m >= _w_size ? m - _w_size : 0);
          /* If n is not on any hash chain, prev[n] is garbage but
           * its value will never be used.
           */
        } while (--n);

        more += _w_size;
      }
      if (s.strm.avail_in === 0) {
        break;
      }

      /* If there was no sliding:
       *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
       *    more == window_size - lookahead - strstart
       * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
       * => more >= window_size - 2*WSIZE + 2
       * In the BIG_MEM or MMAP case (not yet supported),
       *   window_size == input_size + MIN_LOOKAHEAD  &&
       *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
       * Otherwise, window_size == 2*WSIZE so more >= 2.
       * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
       */
      //Assert(more >= 2, "more < 2");
      n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
      s.lookahead += n;

      /* Initialize the hash value now that we have some input: */
      if (s.lookahead + s.insert >= MIN_MATCH) {
        str = s.strstart - s.insert;
        s.ins_h = s.window[str];

        /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
        s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);
  //#if MIN_MATCH != 3
  //        Call update_hash() MIN_MATCH-3 more times
  //#endif
        while (s.insert) {
          /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
          s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);

          s.prev[str & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = str;
          str++;
          s.insert--;
          if (s.lookahead + s.insert < MIN_MATCH) {
            break;
          }
        }
      }
      /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
       * but this is not important since only literal bytes will be emitted.
       */

    } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

    /* If the WIN_INIT bytes after the end of the current data have never been
     * written, then zero those bytes in order to avoid memory check reports of
     * the use of uninitialized (or uninitialised as Julian writes) bytes by
     * the longest match routines.  Update the high water mark for the next
     * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
     * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
     */
  //  if (s.high_water < s.window_size) {
  //    const curr = s.strstart + s.lookahead;
  //    let init = 0;
  //
  //    if (s.high_water < curr) {
  //      /* Previous high water mark below current data -- zero WIN_INIT
  //       * bytes or up to end of window, whichever is less.
  //       */
  //      init = s.window_size - curr;
  //      if (init > WIN_INIT)
  //        init = WIN_INIT;
  //      zmemzero(s->window + curr, (unsigned)init);
  //      s->high_water = curr + init;
  //    }
  //    else if (s->high_water < (ulg)curr + WIN_INIT) {
  //      /* High water mark at or above current data, but below current data
  //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
  //       * to end of window, whichever is less.
  //       */
  //      init = (ulg)curr + WIN_INIT - s->high_water;
  //      if (init > s->window_size - s->high_water)
  //        init = s->window_size - s->high_water;
  //      zmemzero(s->window + s->high_water, (unsigned)init);
  //      s->high_water += init;
  //    }
  //  }
  //
  //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
  //    "not enough room for search");
  };

  /* ===========================================================================
   * Copy without compression as much as possible from the input stream, return
   * the current block state.
   * This function does not insert new strings in the dictionary since
   * uncompressible data is probably not useful. This function is used
   * only for the level=0 compression option.
   * NOTE: this function should be optimized to avoid extra copying from
   * window to pending_buf.
   */
  const deflate_stored = (s, flush) => {

    /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
     * to pending_buf_size, and each stored block has a 5 byte header:
     */
    let max_block_size = 0xffff;

    if (max_block_size > s.pending_buf_size - 5) {
      max_block_size = s.pending_buf_size - 5;
    }

    /* Copy as much as possible from input to output: */
    for (;;) {
      /* Fill the window as much as possible: */
      if (s.lookahead <= 1) {

        //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
        //  s->block_start >= (long)s->w_size, "slide too late");
  //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
  //        s.block_start >= s.w_size)) {
  //        throw  new Error("slide too late");
  //      }

        fill_window(s);
        if (s.lookahead === 0 && flush === Z_NO_FLUSH$2) {
          return BS_NEED_MORE;
        }

        if (s.lookahead === 0) {
          break;
        }
        /* flush the current block */
      }
      //Assert(s->block_start >= 0L, "block gone");
  //    if (s.block_start < 0) throw new Error("block gone");

      s.strstart += s.lookahead;
      s.lookahead = 0;

      /* Emit a stored block if pending_buf will be full: */
      const max_start = s.block_start + max_block_size;

      if (s.strstart === 0 || s.strstart >= max_start) {
        /* strstart == 0 is possible when wraparound on 16-bit machine */
        s.lookahead = s.strstart - max_start;
        s.strstart = max_start;
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/


      }
      /* Flush if we may have to slide, otherwise block_start may become
       * negative and the data will be gone:
       */
      if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
    }

    s.insert = 0;

    if (flush === Z_FINISH$3) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/
      return BS_FINISH_DONE;
    }

    if (s.strstart > s.block_start) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }

    return BS_NEED_MORE;
  };

  /* ===========================================================================
   * Compress as much as possible from the input stream, return the current
   * block state.
   * This function does not perform lazy evaluation of matches and inserts
   * new strings in the dictionary only for unmatched strings or for short
   * matches. It is used only for the fast compression options.
   */
  const deflate_fast = (s, flush) => {

    let hash_head;        /* head of the hash chain */
    let bflush;           /* set if current block must be flushed */

    for (;;) {
      /* Make sure that we always have enough lookahead, except
       * at the end of the input file. We need MAX_MATCH bytes
       * for the next match, plus MIN_MATCH bytes to insert the
       * string following the next match.
       */
      if (s.lookahead < MIN_LOOKAHEAD) {
        fill_window(s);
        if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {
          return BS_NEED_MORE;
        }
        if (s.lookahead === 0) {
          break; /* flush the current block */
        }
      }

      /* Insert the string window[strstart .. strstart+2] in the
       * dictionary, and set hash_head to the head of the hash chain:
       */
      hash_head = 0/*NIL*/;
      if (s.lookahead >= MIN_MATCH) {
        /*** INSERT_STRING(s, s.strstart, hash_head); ***/
        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = s.strstart;
        /***/
      }

      /* Find the longest match, discarding those <= prev_length.
       * At this point we have always match_length < MIN_MATCH
       */
      if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
        /* To simplify the code, we prevent matches with the string
         * of window index 0 (in particular we have to avoid a match
         * of the string with itself at the start of the input file).
         */
        s.match_length = longest_match(s, hash_head);
        /* longest_match() sets match_start */
      }
      if (s.match_length >= MIN_MATCH) {
        // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

        /*** _tr_tally_dist(s, s.strstart - s.match_start,
                       s.match_length - MIN_MATCH, bflush); ***/
        bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

        s.lookahead -= s.match_length;

        /* Insert new strings in the hash table only if the match length
         * is not too large. This saves time but degrades compression.
         */
        if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
          s.match_length--; /* string at strstart already in table */
          do {
            s.strstart++;
            /*** INSERT_STRING(s, s.strstart, hash_head); ***/
            s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
            /***/
            /* strstart never exceeds WSIZE-MAX_MATCH, so there are
             * always MIN_MATCH bytes ahead.
             */
          } while (--s.match_length !== 0);
          s.strstart++;
        } else
        {
          s.strstart += s.match_length;
          s.match_length = 0;
          s.ins_h = s.window[s.strstart];
          /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);

  //#if MIN_MATCH != 3
  //                Call UPDATE_HASH() MIN_MATCH-3 more times
  //#endif
          /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
           * matter since it will be recomputed at next deflate call.
           */
        }
      } else {
        /* No match, output a literal byte */
        //Tracevv((stderr,"%c", s.window[s.strstart]));
        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
        bflush = _tr_tally(s, 0, s.window[s.strstart]);

        s.lookahead--;
        s.strstart++;
      }
      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
    }
    s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
    if (flush === Z_FINISH$3) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/
      return BS_FINISH_DONE;
    }
    if (s.last_lit) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
    return BS_BLOCK_DONE;
  };

  /* ===========================================================================
   * Same as above, but achieves better compression. We use a lazy
   * evaluation for matches: a match is finally adopted only if there is
   * no better match at the next window position.
   */
  const deflate_slow = (s, flush) => {

    let hash_head;          /* head of hash chain */
    let bflush;              /* set if current block must be flushed */

    let max_insert;

    /* Process the input block. */
    for (;;) {
      /* Make sure that we always have enough lookahead, except
       * at the end of the input file. We need MAX_MATCH bytes
       * for the next match, plus MIN_MATCH bytes to insert the
       * string following the next match.
       */
      if (s.lookahead < MIN_LOOKAHEAD) {
        fill_window(s);
        if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {
          return BS_NEED_MORE;
        }
        if (s.lookahead === 0) { break; } /* flush the current block */
      }

      /* Insert the string window[strstart .. strstart+2] in the
       * dictionary, and set hash_head to the head of the hash chain:
       */
      hash_head = 0/*NIL*/;
      if (s.lookahead >= MIN_MATCH) {
        /*** INSERT_STRING(s, s.strstart, hash_head); ***/
        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = s.strstart;
        /***/
      }

      /* Find the longest match, discarding those <= prev_length.
       */
      s.prev_length = s.match_length;
      s.prev_match = s.match_start;
      s.match_length = MIN_MATCH - 1;

      if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
          s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
        /* To simplify the code, we prevent matches with the string
         * of window index 0 (in particular we have to avoid a match
         * of the string with itself at the start of the input file).
         */
        s.match_length = longest_match(s, hash_head);
        /* longest_match() sets match_start */

        if (s.match_length <= 5 &&
           (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

          /* If prev_match is also MIN_MATCH, match_start is garbage
           * but we will ignore the current match anyway.
           */
          s.match_length = MIN_MATCH - 1;
        }
      }
      /* If there was a match at the previous step and the current
       * match is not better, output the previous match:
       */
      if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
        max_insert = s.strstart + s.lookahead - MIN_MATCH;
        /* Do not insert strings in hash table beyond this. */

        //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

        /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                       s.prev_length - MIN_MATCH, bflush);***/
        bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
        /* Insert in hash table all strings up to the end of the match.
         * strstart-1 and strstart are already inserted. If there is not
         * enough lookahead, the last two strings are not inserted in
         * the hash table.
         */
        s.lookahead -= s.prev_length - 1;
        s.prev_length -= 2;
        do {
          if (++s.strstart <= max_insert) {
            /*** INSERT_STRING(s, s.strstart, hash_head); ***/
            s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
            /***/
          }
        } while (--s.prev_length !== 0);
        s.match_available = 0;
        s.match_length = MIN_MATCH - 1;
        s.strstart++;

        if (bflush) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }

      } else if (s.match_available) {
        /* If there was no match at the previous position, output a
         * single literal. If there was a match but the current match
         * is longer, truncate the previous match to a single literal.
         */
        //Tracevv((stderr,"%c", s->window[s->strstart-1]));
        /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
        bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

        if (bflush) {
          /*** FLUSH_BLOCK_ONLY(s, 0) ***/
          flush_block_only(s, false);
          /***/
        }
        s.strstart++;
        s.lookahead--;
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      } else {
        /* There is no previous match to compare with, wait for
         * the next step to decide.
         */
        s.match_available = 1;
        s.strstart++;
        s.lookahead--;
      }
    }
    //Assert (flush != Z_NO_FLUSH, "no flush?");
    if (s.match_available) {
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

      s.match_available = 0;
    }
    s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
    if (flush === Z_FINISH$3) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/
      return BS_FINISH_DONE;
    }
    if (s.last_lit) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }

    return BS_BLOCK_DONE;
  };


  /* ===========================================================================
   * For Z_RLE, simply look for runs of bytes, generate matches only of distance
   * one.  Do not maintain a hash table.  (It will be regenerated if this run of
   * deflate switches away from Z_RLE.)
   */
  const deflate_rle = (s, flush) => {

    let bflush;            /* set if current block must be flushed */
    let prev;              /* byte at distance one to match */
    let scan, strend;      /* scan goes up to strend for length of run */

    const _win = s.window;

    for (;;) {
      /* Make sure that we always have enough lookahead, except
       * at the end of the input file. We need MAX_MATCH bytes
       * for the longest run, plus one for the unrolled loop.
       */
      if (s.lookahead <= MAX_MATCH) {
        fill_window(s);
        if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) {
          return BS_NEED_MORE;
        }
        if (s.lookahead === 0) { break; } /* flush the current block */
      }

      /* See how many times the previous byte repeats */
      s.match_length = 0;
      if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
        scan = s.strstart - 1;
        prev = _win[scan];
        if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
          strend = s.strstart + MAX_MATCH;
          do {
            /*jshint noempty:false*/
          } while (prev === _win[++scan] && prev === _win[++scan] &&
                   prev === _win[++scan] && prev === _win[++scan] &&
                   prev === _win[++scan] && prev === _win[++scan] &&
                   prev === _win[++scan] && prev === _win[++scan] &&
                   scan < strend);
          s.match_length = MAX_MATCH - (strend - scan);
          if (s.match_length > s.lookahead) {
            s.match_length = s.lookahead;
          }
        }
        //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
      }

      /* Emit match if have run of MIN_MATCH or longer, else emit literal */
      if (s.match_length >= MIN_MATCH) {
        //check_match(s, s.strstart, s.strstart - 1, s.match_length);

        /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
        bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);

        s.lookahead -= s.match_length;
        s.strstart += s.match_length;
        s.match_length = 0;
      } else {
        /* No match, output a literal byte */
        //Tracevv((stderr,"%c", s->window[s->strstart]));
        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
        bflush = _tr_tally(s, 0, s.window[s.strstart]);

        s.lookahead--;
        s.strstart++;
      }
      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
    }
    s.insert = 0;
    if (flush === Z_FINISH$3) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/
      return BS_FINISH_DONE;
    }
    if (s.last_lit) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
    return BS_BLOCK_DONE;
  };

  /* ===========================================================================
   * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
   * (It will be regenerated if this run of deflate switches away from Huffman.)
   */
  const deflate_huff = (s, flush) => {

    let bflush;             /* set if current block must be flushed */

    for (;;) {
      /* Make sure that we have a literal to write. */
      if (s.lookahead === 0) {
        fill_window(s);
        if (s.lookahead === 0) {
          if (flush === Z_NO_FLUSH$2) {
            return BS_NEED_MORE;
          }
          break;      /* flush the current block */
        }
      }

      /* Output a literal byte */
      s.match_length = 0;
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = _tr_tally(s, 0, s.window[s.strstart]);
      s.lookahead--;
      s.strstart++;
      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
    }
    s.insert = 0;
    if (flush === Z_FINISH$3) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/
      return BS_FINISH_DONE;
    }
    if (s.last_lit) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
    return BS_BLOCK_DONE;
  };

  /* Values for max_lazy_match, good_match and max_chain_length, depending on
   * the desired pack level (0..9). The values given below have been tuned to
   * exclude worst case performance for pathological files. Better values may be
   * found for specific files.
   */
  function Config(good_length, max_lazy, nice_length, max_chain, func) {

    this.good_length = good_length;
    this.max_lazy = max_lazy;
    this.nice_length = nice_length;
    this.max_chain = max_chain;
    this.func = func;
  }

  const configuration_table = [
    /*      good lazy nice chain */
    new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
    new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
    new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
    new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

    new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
    new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
    new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
    new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
    new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
    new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
  ];


  /* ===========================================================================
   * Initialize the "longest match" routines for a new zlib stream
   */
  const lm_init = (s) => {

    s.window_size = 2 * s.w_size;

    /*** CLEAR_HASH(s); ***/
    zero(s.head); // Fill with NIL (= 0);

    /* Set the default configuration parameters:
     */
    s.max_lazy_match = configuration_table[s.level].max_lazy;
    s.good_match = configuration_table[s.level].good_length;
    s.nice_match = configuration_table[s.level].nice_length;
    s.max_chain_length = configuration_table[s.level].max_chain;

    s.strstart = 0;
    s.block_start = 0;
    s.lookahead = 0;
    s.insert = 0;
    s.match_length = s.prev_length = MIN_MATCH - 1;
    s.match_available = 0;
    s.ins_h = 0;
  };


  function DeflateState() {
    this.strm = null;            /* pointer back to this zlib stream */
    this.status = 0;            /* as the name implies */
    this.pending_buf = null;      /* output still pending */
    this.pending_buf_size = 0;  /* size of pending_buf */
    this.pending_out = 0;       /* next pending byte to output to the stream */
    this.pending = 0;           /* nb of bytes in the pending buffer */
    this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
    this.gzhead = null;         /* gzip header information to write */
    this.gzindex = 0;           /* where in extra, name, or comment */
    this.method = Z_DEFLATED$2; /* can only be DEFLATED */
    this.last_flush = -1;   /* value of flush param for previous deflate call */

    this.w_size = 0;  /* LZ77 window size (32K by default) */
    this.w_bits = 0;  /* log2(w_size)  (8..16) */
    this.w_mask = 0;  /* w_size - 1 */

    this.window = null;
    /* Sliding window. Input bytes are read into the second half of the window,
     * and move to the first half later to keep a dictionary of at least wSize
     * bytes. With this organization, matches are limited to a distance of
     * wSize-MAX_MATCH bytes, but this ensures that IO is always
     * performed with a length multiple of the block size.
     */

    this.window_size = 0;
    /* Actual size of window: 2*wSize, except when the user input buffer
     * is directly used as sliding window.
     */

    this.prev = null;
    /* Link to older string with same hash index. To limit the size of this
     * array to 64K, this link is maintained only for the last 32K strings.
     * An index in this array is thus a window index modulo 32K.
     */

    this.head = null;   /* Heads of the hash chains or NIL. */

    this.ins_h = 0;       /* hash index of string to be inserted */
    this.hash_size = 0;   /* number of elements in hash table */
    this.hash_bits = 0;   /* log2(hash_size) */
    this.hash_mask = 0;   /* hash_size-1 */

    this.hash_shift = 0;
    /* Number of bits by which ins_h must be shifted at each input
     * step. It must be such that after MIN_MATCH steps, the oldest
     * byte no longer takes part in the hash key, that is:
     *   hash_shift * MIN_MATCH >= hash_bits
     */

    this.block_start = 0;
    /* Window position at the beginning of the current output block. Gets
     * negative when the window is moved backwards.
     */

    this.match_length = 0;      /* length of best match */
    this.prev_match = 0;        /* previous match */
    this.match_available = 0;   /* set if previous match exists */
    this.strstart = 0;          /* start of string to insert */
    this.match_start = 0;       /* start of matching string */
    this.lookahead = 0;         /* number of valid bytes ahead in window */

    this.prev_length = 0;
    /* Length of the best match at previous step. Matches not greater than this
     * are discarded. This is used in the lazy match evaluation.
     */

    this.max_chain_length = 0;
    /* To speed up deflation, hash chains are never searched beyond this
     * length.  A higher limit improves compression ratio but degrades the
     * speed.
     */

    this.max_lazy_match = 0;
    /* Attempt to find a better match only when the current match is strictly
     * smaller than this value. This mechanism is used only for compression
     * levels >= 4.
     */
    // That's alias to max_lazy_match, don't use directly
    //this.max_insert_length = 0;
    /* Insert new strings in the hash table only if the match length is not
     * greater than this length. This saves time but degrades compression.
     * max_insert_length is used only for compression levels <= 3.
     */

    this.level = 0;     /* compression level (1..9) */
    this.strategy = 0;  /* favor or force Huffman coding*/

    this.good_match = 0;
    /* Use a faster search when the previous match is longer than this */

    this.nice_match = 0; /* Stop searching when current match exceeds this */

                /* used by trees.c: */

    /* Didn't use ct_data typedef below to suppress compiler warning */

    // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
    // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
    // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

    // Use flat array of DOUBLE size, with interleaved fata,
    // because JS does not support effective
    this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);
    this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);
    this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);
    zero(this.dyn_ltree);
    zero(this.dyn_dtree);
    zero(this.bl_tree);

    this.l_desc   = null;         /* desc. for literal tree */
    this.d_desc   = null;         /* desc. for distance tree */
    this.bl_desc  = null;         /* desc. for bit length tree */

    //ush bl_count[MAX_BITS+1];
    this.bl_count = new Uint16Array(MAX_BITS + 1);
    /* number of codes at each bit length for an optimal tree */

    //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
    this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
    zero(this.heap);

    this.heap_len = 0;               /* number of elements in the heap */
    this.heap_max = 0;               /* element of largest frequency */
    /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
     * The same heap array is used to build all trees.
     */

    this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
    zero(this.depth);
    /* Depth of each subtree used as tie breaker for trees of equal frequency
     */

    this.l_buf = 0;          /* buffer index for literals or lengths */

    this.lit_bufsize = 0;
    /* Size of match buffer for literals/lengths.  There are 4 reasons for
     * limiting lit_bufsize to 64K:
     *   - frequencies can be kept in 16 bit counters
     *   - if compression is not successful for the first block, all input
     *     data is still in the window so we can still emit a stored block even
     *     when input comes from standard input.  (This can also be done for
     *     all blocks if lit_bufsize is not greater than 32K.)
     *   - if compression is not successful for a file smaller than 64K, we can
     *     even emit a stored file instead of a stored block (saving 5 bytes).
     *     This is applicable only for zip (not gzip or zlib).
     *   - creating new Huffman trees less frequently may not provide fast
     *     adaptation to changes in the input data statistics. (Take for
     *     example a binary file with poorly compressible code followed by
     *     a highly compressible string table.) Smaller buffer sizes give
     *     fast adaptation but have of course the overhead of transmitting
     *     trees more frequently.
     *   - I can't count above 4
     */

    this.last_lit = 0;      /* running index in l_buf */

    this.d_buf = 0;
    /* Buffer index for distances. To simplify the code, d_buf and l_buf have
     * the same number of elements. To use different lengths, an extra flag
     * array would be necessary.
     */

    this.opt_len = 0;       /* bit length of current block with optimal trees */
    this.static_len = 0;    /* bit length of current block with static trees */
    this.matches = 0;       /* number of string matches in current block */
    this.insert = 0;        /* bytes at end of window left to insert */


    this.bi_buf = 0;
    /* Output buffer. bits are inserted starting at the bottom (least
     * significant bits).
     */
    this.bi_valid = 0;
    /* Number of valid bits in bi_buf.  All bits above the last valid bit
     * are always zero.
     */

    // Used for window memory init. We safely ignore it for JS. That makes
    // sense only for pointers and memory check tools.
    //this.high_water = 0;
    /* High water mark offset in window for initialized bytes -- bytes above
     * this are set to zero in order to avoid memory check warnings when
     * longest match routines access bytes past the input.  This is then
     * updated to the new high water mark.
     */
  }


  const deflateResetKeep = (strm) => {

    if (!strm || !strm.state) {
      return err(strm, Z_STREAM_ERROR$2);
    }

    strm.total_in = strm.total_out = 0;
    strm.data_type = Z_UNKNOWN;

    const s = strm.state;
    s.pending = 0;
    s.pending_out = 0;

    if (s.wrap < 0) {
      s.wrap = -s.wrap;
      /* was made negative by deflate(..., Z_FINISH); */
    }
    s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
    strm.adler = (s.wrap === 2) ?
      0  // crc32(0, Z_NULL, 0)
    :
      1; // adler32(0, Z_NULL, 0)
    s.last_flush = Z_NO_FLUSH$2;
    _tr_init(s);
    return Z_OK$3;
  };


  const deflateReset = (strm) => {

    const ret = deflateResetKeep(strm);
    if (ret === Z_OK$3) {
      lm_init(strm.state);
    }
    return ret;
  };


  const deflateSetHeader = (strm, head) => {

    if (!strm || !strm.state) { return Z_STREAM_ERROR$2; }
    if (strm.state.wrap !== 2) { return Z_STREAM_ERROR$2; }
    strm.state.gzhead = head;
    return Z_OK$3;
  };


  const deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {

    if (!strm) { // === Z_NULL
      return Z_STREAM_ERROR$2;
    }
    let wrap = 1;

    if (level === Z_DEFAULT_COMPRESSION$1) {
      level = 6;
    }

    if (windowBits < 0) { /* suppress zlib wrapper */
      wrap = 0;
      windowBits = -windowBits;
    }

    else if (windowBits > 15) {
      wrap = 2;           /* write gzip wrapper instead */
      windowBits -= 16;
    }


    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||
      windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
      strategy < 0 || strategy > Z_FIXED) {
      return err(strm, Z_STREAM_ERROR$2);
    }


    if (windowBits === 8) {
      windowBits = 9;
    }
    /* until 256-byte window bug fixed */

    const s = new DeflateState();

    strm.state = s;
    s.strm = strm;

    s.wrap = wrap;
    s.gzhead = null;
    s.w_bits = windowBits;
    s.w_size = 1 << s.w_bits;
    s.w_mask = s.w_size - 1;

    s.hash_bits = memLevel + 7;
    s.hash_size = 1 << s.hash_bits;
    s.hash_mask = s.hash_size - 1;
    s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

    s.window = new Uint8Array(s.w_size * 2);
    s.head = new Uint16Array(s.hash_size);
    s.prev = new Uint16Array(s.w_size);

    // Don't need mem init magic for JS.
    //s.high_water = 0;  /* nothing written to s->window yet */

    s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

    s.pending_buf_size = s.lit_bufsize * 4;

    //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
    //s->pending_buf = (uchf *) overlay;
    s.pending_buf = new Uint8Array(s.pending_buf_size);

    // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
    //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
    s.d_buf = 1 * s.lit_bufsize;

    //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
    s.l_buf = (1 + 2) * s.lit_bufsize;

    s.level = level;
    s.strategy = strategy;
    s.method = method;

    return deflateReset(strm);
  };

  const deflateInit = (strm, level) => {

    return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);
  };


  const deflate$2 = (strm, flush) => {

    let beg, val; // for gzip header write only

    if (!strm || !strm.state ||
      flush > Z_BLOCK$1 || flush < 0) {
      return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;
    }

    const s = strm.state;

    if (!strm.output ||
        (!strm.input && strm.avail_in !== 0) ||
        (s.status === FINISH_STATE && flush !== Z_FINISH$3)) {
      return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);
    }

    s.strm = strm; /* just in case */
    const old_flush = s.last_flush;
    s.last_flush = flush;

    /* Write the header */
    if (s.status === INIT_STATE) {

      if (s.wrap === 2) { // GZIP header
        strm.adler = 0;  //crc32(0L, Z_NULL, 0);
        put_byte(s, 31);
        put_byte(s, 139);
        put_byte(s, 8);
        if (!s.gzhead) { // s->gzhead == Z_NULL
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, s.level === 9 ? 2 :
                      (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                       4 : 0));
          put_byte(s, OS_CODE);
          s.status = BUSY_STATE;
        }
        else {
          put_byte(s, (s.gzhead.text ? 1 : 0) +
                      (s.gzhead.hcrc ? 2 : 0) +
                      (!s.gzhead.extra ? 0 : 4) +
                      (!s.gzhead.name ? 0 : 8) +
                      (!s.gzhead.comment ? 0 : 16)
          );
          put_byte(s, s.gzhead.time & 0xff);
          put_byte(s, (s.gzhead.time >> 8) & 0xff);
          put_byte(s, (s.gzhead.time >> 16) & 0xff);
          put_byte(s, (s.gzhead.time >> 24) & 0xff);
          put_byte(s, s.level === 9 ? 2 :
                      (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                       4 : 0));
          put_byte(s, s.gzhead.os & 0xff);
          if (s.gzhead.extra && s.gzhead.extra.length) {
            put_byte(s, s.gzhead.extra.length & 0xff);
            put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
          }
          if (s.gzhead.hcrc) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);
          }
          s.gzindex = 0;
          s.status = EXTRA_STATE;
        }
      }
      else // DEFLATE header
      {
        let header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;
        let level_flags = -1;

        if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
          level_flags = 0;
        } else if (s.level < 6) {
          level_flags = 1;
        } else if (s.level === 6) {
          level_flags = 2;
        } else {
          level_flags = 3;
        }
        header |= (level_flags << 6);
        if (s.strstart !== 0) { header |= PRESET_DICT; }
        header += 31 - (header % 31);

        s.status = BUSY_STATE;
        putShortMSB(s, header);

        /* Save the adler32 of the preset dictionary: */
        if (s.strstart !== 0) {
          putShortMSB(s, strm.adler >>> 16);
          putShortMSB(s, strm.adler & 0xffff);
        }
        strm.adler = 1; // adler32(0L, Z_NULL, 0);
      }
    }

  //#ifdef GZIP
    if (s.status === EXTRA_STATE) {
      if (s.gzhead.extra/* != Z_NULL*/) {
        beg = s.pending;  /* start of bytes to update crc */

        while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            flush_pending(strm);
            beg = s.pending;
            if (s.pending === s.pending_buf_size) {
              break;
            }
          }
          put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
          s.gzindex++;
        }
        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        if (s.gzindex === s.gzhead.extra.length) {
          s.gzindex = 0;
          s.status = NAME_STATE;
        }
      }
      else {
        s.status = NAME_STATE;
      }
    }
    if (s.status === NAME_STATE) {
      if (s.gzhead.name/* != Z_NULL*/) {
        beg = s.pending;  /* start of bytes to update crc */
        //int val;

        do {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            flush_pending(strm);
            beg = s.pending;
            if (s.pending === s.pending_buf_size) {
              val = 1;
              break;
            }
          }
          // JS specific: little magic to add zero terminator to end of string
          if (s.gzindex < s.gzhead.name.length) {
            val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
          } else {
            val = 0;
          }
          put_byte(s, val);
        } while (val !== 0);

        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        if (val === 0) {
          s.gzindex = 0;
          s.status = COMMENT_STATE;
        }
      }
      else {
        s.status = COMMENT_STATE;
      }
    }
    if (s.status === COMMENT_STATE) {
      if (s.gzhead.comment/* != Z_NULL*/) {
        beg = s.pending;  /* start of bytes to update crc */
        //int val;

        do {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            flush_pending(strm);
            beg = s.pending;
            if (s.pending === s.pending_buf_size) {
              val = 1;
              break;
            }
          }
          // JS specific: little magic to add zero terminator to end of string
          if (s.gzindex < s.gzhead.comment.length) {
            val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
          } else {
            val = 0;
          }
          put_byte(s, val);
        } while (val !== 0);

        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        if (val === 0) {
          s.status = HCRC_STATE;
        }
      }
      else {
        s.status = HCRC_STATE;
      }
    }
    if (s.status === HCRC_STATE) {
      if (s.gzhead.hcrc) {
        if (s.pending + 2 > s.pending_buf_size) {
          flush_pending(strm);
        }
        if (s.pending + 2 <= s.pending_buf_size) {
          put_byte(s, strm.adler & 0xff);
          put_byte(s, (strm.adler >> 8) & 0xff);
          strm.adler = 0; //crc32(0L, Z_NULL, 0);
          s.status = BUSY_STATE;
        }
      }
      else {
        s.status = BUSY_STATE;
      }
    }
  //#endif

    /* Flush as much pending output as possible */
    if (s.pending !== 0) {
      flush_pending(strm);
      if (strm.avail_out === 0) {
        /* Since avail_out is 0, deflate will be called again with
         * more output space, but possibly with both pending and
         * avail_in equal to zero. There won't be anything to do,
         * but this is not an error situation so make sure we
         * return OK instead of BUF_ERROR at next call of deflate:
         */
        s.last_flush = -1;
        return Z_OK$3;
      }

      /* Make sure there is something to do and avoid duplicate consecutive
       * flushes. For repeated and useless calls with Z_FINISH, we keep
       * returning Z_STREAM_END instead of Z_BUF_ERROR.
       */
    } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
      flush !== Z_FINISH$3) {
      return err(strm, Z_BUF_ERROR$1);
    }

    /* User must not provide more input after the first FINISH: */
    if (s.status === FINISH_STATE && strm.avail_in !== 0) {
      return err(strm, Z_BUF_ERROR$1);
    }

    /* Start a new block or continue the current one.
     */
    if (strm.avail_in !== 0 || s.lookahead !== 0 ||
      (flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE)) {
      let bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
        (s.strategy === Z_RLE ? deflate_rle(s, flush) :
          configuration_table[s.level].func(s, flush));

      if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
        s.status = FINISH_STATE;
      }
      if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
        if (strm.avail_out === 0) {
          s.last_flush = -1;
          /* avoid BUF_ERROR next call, see above */
        }
        return Z_OK$3;
        /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
         * of deflate should use the same flush parameter to make sure
         * that the flush is complete. So we don't have to output an
         * empty block here, this will be done at next call. This also
         * ensures that for a very small output buffer, we emit at most
         * one empty block.
         */
      }
      if (bstate === BS_BLOCK_DONE) {
        if (flush === Z_PARTIAL_FLUSH) {
          _tr_align(s);
        }
        else if (flush !== Z_BLOCK$1) { /* FULL_FLUSH or SYNC_FLUSH */

          _tr_stored_block(s, 0, 0, false);
          /* For a full flush, this empty block will be recognized
           * as a special marker by inflate_sync().
           */
          if (flush === Z_FULL_FLUSH$1) {
            /*** CLEAR_HASH(s); ***/             /* forget history */
            zero(s.head); // Fill with NIL (= 0);

            if (s.lookahead === 0) {
              s.strstart = 0;
              s.block_start = 0;
              s.insert = 0;
            }
          }
        }
        flush_pending(strm);
        if (strm.avail_out === 0) {
          s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
          return Z_OK$3;
        }
      }
    }
    //Assert(strm->avail_out > 0, "bug2");
    //if (strm.avail_out <= 0) { throw new Error("bug2");}

    if (flush !== Z_FINISH$3) { return Z_OK$3; }
    if (s.wrap <= 0) { return Z_STREAM_END$3; }

    /* Write the trailer */
    if (s.wrap === 2) {
      put_byte(s, strm.adler & 0xff);
      put_byte(s, (strm.adler >> 8) & 0xff);
      put_byte(s, (strm.adler >> 16) & 0xff);
      put_byte(s, (strm.adler >> 24) & 0xff);
      put_byte(s, strm.total_in & 0xff);
      put_byte(s, (strm.total_in >> 8) & 0xff);
      put_byte(s, (strm.total_in >> 16) & 0xff);
      put_byte(s, (strm.total_in >> 24) & 0xff);
    }
    else
    {
      putShortMSB(s, strm.adler >>> 16);
      putShortMSB(s, strm.adler & 0xffff);
    }

    flush_pending(strm);
    /* If avail_out is zero, the application will call deflate again
     * to flush the rest.
     */
    if (s.wrap > 0) { s.wrap = -s.wrap; }
    /* write the trailer only once! */
    return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;
  };


  const deflateEnd = (strm) => {

    if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
      return Z_STREAM_ERROR$2;
    }

    const status = strm.state.status;
    if (status !== INIT_STATE &&
      status !== EXTRA_STATE &&
      status !== NAME_STATE &&
      status !== COMMENT_STATE &&
      status !== HCRC_STATE &&
      status !== BUSY_STATE &&
      status !== FINISH_STATE
    ) {
      return err(strm, Z_STREAM_ERROR$2);
    }

    strm.state = null;

    return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;
  };


  /* =========================================================================
   * Initializes the compression dictionary from the given byte
   * sequence without producing any compressed output.
   */
  const deflateSetDictionary = (strm, dictionary) => {

    let dictLength = dictionary.length;

    if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
      return Z_STREAM_ERROR$2;
    }

    const s = strm.state;
    const wrap = s.wrap;

    if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
      return Z_STREAM_ERROR$2;
    }

    /* when using zlib wrappers, compute Adler-32 for provided dictionary */
    if (wrap === 1) {
      /* adler32(strm->adler, dictionary, dictLength); */
      strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);
    }

    s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

    /* if dictionary would fill window, just replace the history */
    if (dictLength >= s.w_size) {
      if (wrap === 0) {            /* already empty otherwise */
        /*** CLEAR_HASH(s); ***/
        zero(s.head); // Fill with NIL (= 0);
        s.strstart = 0;
        s.block_start = 0;
        s.insert = 0;
      }
      /* use the tail */
      // dictionary = dictionary.slice(dictLength - s.w_size);
      let tmpDict = new Uint8Array(s.w_size);
      tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);
      dictionary = tmpDict;
      dictLength = s.w_size;
    }
    /* insert dictionary into window and hash */
    const avail = strm.avail_in;
    const next = strm.next_in;
    const input = strm.input;
    strm.avail_in = dictLength;
    strm.next_in = 0;
    strm.input = dictionary;
    fill_window(s);
    while (s.lookahead >= MIN_MATCH) {
      let str = s.strstart;
      let n = s.lookahead - (MIN_MATCH - 1);
      do {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);

        s.prev[str & s.w_mask] = s.head[s.ins_h];

        s.head[s.ins_h] = str;
        str++;
      } while (--n);
      s.strstart = str;
      s.lookahead = MIN_MATCH - 1;
      fill_window(s);
    }
    s.strstart += s.lookahead;
    s.block_start = s.strstart;
    s.insert = s.lookahead;
    s.lookahead = 0;
    s.match_length = s.prev_length = MIN_MATCH - 1;
    s.match_available = 0;
    strm.next_in = next;
    strm.input = input;
    strm.avail_in = avail;
    s.wrap = wrap;
    return Z_OK$3;
  };


  var deflateInit_1 = deflateInit;
  var deflateInit2_1 = deflateInit2;
  var deflateReset_1 = deflateReset;
  var deflateResetKeep_1 = deflateResetKeep;
  var deflateSetHeader_1 = deflateSetHeader;
  var deflate_2$1 = deflate$2;
  var deflateEnd_1 = deflateEnd;
  var deflateSetDictionary_1 = deflateSetDictionary;
  var deflateInfo = 'pako deflate (from Nodeca project)';

  /* Not implemented
  module.exports.deflateBound = deflateBound;
  module.exports.deflateCopy = deflateCopy;
  module.exports.deflateParams = deflateParams;
  module.exports.deflatePending = deflatePending;
  module.exports.deflatePrime = deflatePrime;
  module.exports.deflateTune = deflateTune;
  */

  var deflate_1$2 = {
  	deflateInit: deflateInit_1,
  	deflateInit2: deflateInit2_1,
  	deflateReset: deflateReset_1,
  	deflateResetKeep: deflateResetKeep_1,
  	deflateSetHeader: deflateSetHeader_1,
  	deflate: deflate_2$1,
  	deflateEnd: deflateEnd_1,
  	deflateSetDictionary: deflateSetDictionary_1,
  	deflateInfo: deflateInfo
  };

  const _has = (obj, key) => {
    return Object.prototype.hasOwnProperty.call(obj, key);
  };

  var assign = function (obj /*from1, from2, from3, ...*/) {
    const sources = Array.prototype.slice.call(arguments, 1);
    while (sources.length) {
      const source = sources.shift();
      if (!source) { continue; }

      if (typeof source !== 'object') {
        throw new TypeError(source + 'must be non-object');
      }

      for (const p in source) {
        if (_has(source, p)) {
          obj[p] = source[p];
        }
      }
    }

    return obj;
  };


  // Join array of chunks to single array.
  var flattenChunks = (chunks) => {
    // calculate data length
    let len = 0;

    for (let i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    const result = new Uint8Array(len);

    for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {
      let chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  };

  var common = {
  	assign: assign,
  	flattenChunks: flattenChunks
  };

  // String encode/decode helpers


  // Quick check if we can use fast array to bin string conversion
  //
  // - apply(Array) can fail on Android 2.2
  // - apply(Uint8Array) can fail on iOS 5.1 Safari
  //
  let STR_APPLY_UIA_OK = true;

  try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


  // Table with utf8 lengths (calculated by first byte of sequence)
  // Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
  // because max possible codepoint is 0x10ffff
  const _utf8len = new Uint8Array(256);
  for (let q = 0; q < 256; q++) {
    _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
  }
  _utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


  // convert string to array (typed, when possible)
  var string2buf = (str) => {
    if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {
      return new TextEncoder().encode(str);
    }

    let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

    // count binary size
    for (m_pos = 0; m_pos < str_len; m_pos++) {
      c = str.charCodeAt(m_pos);
      if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
        c2 = str.charCodeAt(m_pos + 1);
        if ((c2 & 0xfc00) === 0xdc00) {
          c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
          m_pos++;
        }
      }
      buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
    }

    // allocate buffer
    buf = new Uint8Array(buf_len);

    // convert
    for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
      c = str.charCodeAt(m_pos);
      if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
        c2 = str.charCodeAt(m_pos + 1);
        if ((c2 & 0xfc00) === 0xdc00) {
          c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
          m_pos++;
        }
      }
      if (c < 0x80) {
        /* one byte */
        buf[i++] = c;
      } else if (c < 0x800) {
        /* two bytes */
        buf[i++] = 0xC0 | (c >>> 6);
        buf[i++] = 0x80 | (c & 0x3f);
      } else if (c < 0x10000) {
        /* three bytes */
        buf[i++] = 0xE0 | (c >>> 12);
        buf[i++] = 0x80 | (c >>> 6 & 0x3f);
        buf[i++] = 0x80 | (c & 0x3f);
      } else {
        /* four bytes */
        buf[i++] = 0xf0 | (c >>> 18);
        buf[i++] = 0x80 | (c >>> 12 & 0x3f);
        buf[i++] = 0x80 | (c >>> 6 & 0x3f);
        buf[i++] = 0x80 | (c & 0x3f);
      }
    }

    return buf;
  };

  // Helper
  const buf2binstring = (buf, len) => {
    // On Chrome, the arguments in a function call that are allowed is `65534`.
    // If the length of the buffer is smaller than that, we can use this optimization,
    // otherwise we will take a slower path.
    if (len < 65534) {
      if (buf.subarray && STR_APPLY_UIA_OK) {
        return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));
      }
    }

    let result = '';
    for (let i = 0; i < len; i++) {
      result += String.fromCharCode(buf[i]);
    }
    return result;
  };


  // convert array to string
  var buf2string = (buf, max) => {
    const len = max || buf.length;

    if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {
      return new TextDecoder().decode(buf.subarray(0, max));
    }

    let i, out;

    // Reserve max possible length (2 words per char)
    // NB: by unknown reasons, Array is significantly faster for
    //     String.fromCharCode.apply than Uint16Array.
    const utf16buf = new Array(len * 2);

    for (out = 0, i = 0; i < len;) {
      let c = buf[i++];
      // quick process ascii
      if (c < 0x80) { utf16buf[out++] = c; continue; }

      let c_len = _utf8len[c];
      // skip 5 & 6 byte codes
      if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

      // apply mask on first byte
      c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
      // join the rest
      while (c_len > 1 && i < len) {
        c = (c << 6) | (buf[i++] & 0x3f);
        c_len--;
      }

      // terminated by end of string?
      if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

      if (c < 0x10000) {
        utf16buf[out++] = c;
      } else {
        c -= 0x10000;
        utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
        utf16buf[out++] = 0xdc00 | (c & 0x3ff);
      }
    }

    return buf2binstring(utf16buf, out);
  };


  // Calculate max possible position in utf8 buffer,
  // that will not break sequence. If that's not possible
  // - (very small limits) return max size as is.
  //
  // buf[] - utf8 bytes array
  // max   - length limit (mandatory);
  var utf8border = (buf, max) => {

    max = max || buf.length;
    if (max > buf.length) { max = buf.length; }

    // go back from last position, until start of sequence found
    let pos = max - 1;
    while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

    // Very small and broken sequence,
    // return max, because we should return something anyway.
    if (pos < 0) { return max; }

    // If we came to start of buffer - that means buffer is too small,
    // return max too.
    if (pos === 0) { return max; }

    return (pos + _utf8len[buf[pos]] > max) ? pos : max;
  };

  var strings = {
  	string2buf: string2buf,
  	buf2string: buf2string,
  	utf8border: utf8border
  };

  // (C) 1995-2013 Jean-loup Gailly and Mark Adler
  // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
  //
  // This software is provided 'as-is', without any express or implied
  // warranty. In no event will the authors be held liable for any damages
  // arising from the use of this software.
  //
  // Permission is granted to anyone to use this software for any purpose,
  // including commercial applications, and to alter it and redistribute it
  // freely, subject to the following restrictions:
  //
  // 1. The origin of this software must not be misrepresented; you must not
  //   claim that you wrote the original software. If you use this software
  //   in a product, an acknowledgment in the product documentation would be
  //   appreciated but is not required.
  // 2. Altered source versions must be plainly marked as such, and must not be
  //   misrepresented as being the original software.
  // 3. This notice may not be removed or altered from any source distribution.

  function ZStream() {
    /* next input byte */
    this.input = null; // JS specific, because we have no pointers
    this.next_in = 0;
    /* number of bytes available at input */
    this.avail_in = 0;
    /* total number of input bytes read so far */
    this.total_in = 0;
    /* next output byte should be put there */
    this.output = null; // JS specific, because we have no pointers
    this.next_out = 0;
    /* remaining free space at output */
    this.avail_out = 0;
    /* total number of bytes output so far */
    this.total_out = 0;
    /* last error message, NULL if no error */
    this.msg = ''/*Z_NULL*/;
    /* not visible by applications */
    this.state = null;
    /* best guess about the data type: binary or text */
    this.data_type = 2/*Z_UNKNOWN*/;
    /* adler32 value of the uncompressed data */
    this.adler = 0;
  }

  var zstream = ZStream;

  const toString$1 = Object.prototype.toString;

  /* Public constants ==========================================================*/
  /* ===========================================================================*/

  const {
    Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH: Z_FINISH$2,
    Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2,
    Z_DEFAULT_COMPRESSION,
    Z_DEFAULT_STRATEGY,
    Z_DEFLATED: Z_DEFLATED$1
  } = constants$2;

  /* ===========================================================================*/


  /**
   * class Deflate
   *
   * Generic JS-style wrapper for zlib calls. If you don't need
   * streaming behaviour - use more simple functions: [[deflate]],
   * [[deflateRaw]] and [[gzip]].
   **/

  /* internal
   * Deflate.chunks -> Array
   *
   * Chunks of output data, if [[Deflate#onData]] not overridden.
   **/

  /**
   * Deflate.result -> Uint8Array
   *
   * Compressed result, generated by default [[Deflate#onData]]
   * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
   * (call [[Deflate#push]] with `Z_FINISH` / `true` param).
   **/

  /**
   * Deflate.err -> Number
   *
   * Error code after deflate finished. 0 (Z_OK) on success.
   * You will not need it in real life, because deflate errors
   * are possible only on wrong options or bad `onData` / `onEnd`
   * custom handlers.
   **/

  /**
   * Deflate.msg -> String
   *
   * Error message, if [[Deflate.err]] != 0
   **/


  /**
   * new Deflate(options)
   * - options (Object): zlib deflate options.
   *
   * Creates new deflator instance with specified params. Throws exception
   * on bad params. Supported options:
   *
   * - `level`
   * - `windowBits`
   * - `memLevel`
   * - `strategy`
   * - `dictionary`
   *
   * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
   * for more information on these.
   *
   * Additional options, for internal needs:
   *
   * - `chunkSize` - size of generated data chunks (16K by default)
   * - `raw` (Boolean) - do raw deflate
   * - `gzip` (Boolean) - create gzip wrapper
   * - `header` (Object) - custom header for gzip
   *   - `text` (Boolean) - true if compressed data believed to be text
   *   - `time` (Number) - modification time, unix timestamp
   *   - `os` (Number) - operation system code
   *   - `extra` (Array) - array of bytes with extra data (max 65536)
   *   - `name` (String) - file name (binary string)
   *   - `comment` (String) - comment (binary string)
   *   - `hcrc` (Boolean) - true if header crc should be added
   *
   * ##### Example:
   *
   * ```javascript
   * const pako = require('pako')
   *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
   *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
   *
   * const deflate = new pako.Deflate({ level: 3});
   *
   * deflate.push(chunk1, false);
   * deflate.push(chunk2, true);  // true -> last chunk
   *
   * if (deflate.err) { throw new Error(deflate.err); }
   *
   * console.log(deflate.result);
   * ```
   **/
  function Deflate$1(options) {
    this.options = common.assign({
      level: Z_DEFAULT_COMPRESSION,
      method: Z_DEFLATED$1,
      chunkSize: 16384,
      windowBits: 15,
      memLevel: 8,
      strategy: Z_DEFAULT_STRATEGY
    }, options || {});

    let opt = this.options;

    if (opt.raw && (opt.windowBits > 0)) {
      opt.windowBits = -opt.windowBits;
    }

    else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
      opt.windowBits += 16;
    }

    this.err    = 0;      // error code, if happens (0 = Z_OK)
    this.msg    = '';     // error message
    this.ended  = false;  // used to avoid multiple onEnd() calls
    this.chunks = [];     // chunks of compressed data

    this.strm = new zstream();
    this.strm.avail_out = 0;

    let status = deflate_1$2.deflateInit2(
      this.strm,
      opt.level,
      opt.method,
      opt.windowBits,
      opt.memLevel,
      opt.strategy
    );

    if (status !== Z_OK$2) {
      throw new Error(messages[status]);
    }

    if (opt.header) {
      deflate_1$2.deflateSetHeader(this.strm, opt.header);
    }

    if (opt.dictionary) {
      let dict;
      // Convert data if needed
      if (typeof opt.dictionary === 'string') {
        // If we need to compress text, change encoding to utf8.
        dict = strings.string2buf(opt.dictionary);
      } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {
        dict = new Uint8Array(opt.dictionary);
      } else {
        dict = opt.dictionary;
      }

      status = deflate_1$2.deflateSetDictionary(this.strm, dict);

      if (status !== Z_OK$2) {
        throw new Error(messages[status]);
      }

      this._dict_set = true;
    }
  }

  /**
   * Deflate#push(data[, flush_mode]) -> Boolean
   * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be
   *   converted to utf8 byte sequence.
   * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
   *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
   *
   * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
   * new compressed chunks. Returns `true` on success. The last data block must
   * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending
   * buffers and call [[Deflate#onEnd]].
   *
   * On fail call [[Deflate#onEnd]] with error code and return false.
   *
   * ##### Example
   *
   * ```javascript
   * push(chunk, false); // push one of data chunks
   * ...
   * push(chunk, true);  // push last chunk
   * ```
   **/
  Deflate$1.prototype.push = function (data, flush_mode) {
    const strm = this.strm;
    const chunkSize = this.options.chunkSize;
    let status, _flush_mode;

    if (this.ended) { return false; }

    if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
    else _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;

    // Convert data if needed
    if (typeof data === 'string') {
      // If we need to compress text, change encoding to utf8.
      strm.input = strings.string2buf(data);
    } else if (toString$1.call(data) === '[object ArrayBuffer]') {
      strm.input = new Uint8Array(data);
    } else {
      strm.input = data;
    }

    strm.next_in = 0;
    strm.avail_in = strm.input.length;

    for (;;) {
      if (strm.avail_out === 0) {
        strm.output = new Uint8Array(chunkSize);
        strm.next_out = 0;
        strm.avail_out = chunkSize;
      }

      // Make sure avail_out > 6 to avoid repeating markers
      if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {
        this.onData(strm.output.subarray(0, strm.next_out));
        strm.avail_out = 0;
        continue;
      }

      status = deflate_1$2.deflate(strm, _flush_mode);

      // Ended => flush and finish
      if (status === Z_STREAM_END$2) {
        if (strm.next_out > 0) {
          this.onData(strm.output.subarray(0, strm.next_out));
        }
        status = deflate_1$2.deflateEnd(this.strm);
        this.onEnd(status);
        this.ended = true;
        return status === Z_OK$2;
      }

      // Flush if out buffer full
      if (strm.avail_out === 0) {
        this.onData(strm.output);
        continue;
      }

      // Flush if requested and has data
      if (_flush_mode > 0 && strm.next_out > 0) {
        this.onData(strm.output.subarray(0, strm.next_out));
        strm.avail_out = 0;
        continue;
      }

      if (strm.avail_in === 0) break;
    }

    return true;
  };


  /**
   * Deflate#onData(chunk) -> Void
   * - chunk (Uint8Array): output data.
   *
   * By default, stores data blocks in `chunks[]` property and glue
   * those in `onEnd`. Override this handler, if you need another behaviour.
   **/
  Deflate$1.prototype.onData = function (chunk) {
    this.chunks.push(chunk);
  };


  /**
   * Deflate#onEnd(status) -> Void
   * - status (Number): deflate status. 0 (Z_OK) on success,
   *   other if not.
   *
   * Called once after you tell deflate that the input stream is
   * complete (Z_FINISH). By default - join collected chunks,
   * free memory and fill `results` / `err` properties.
   **/
  Deflate$1.prototype.onEnd = function (status) {
    // On success - join
    if (status === Z_OK$2) {
      this.result = common.flattenChunks(this.chunks);
    }
    this.chunks = [];
    this.err = status;
    this.msg = this.strm.msg;
  };


  /**
   * deflate(data[, options]) -> Uint8Array
   * - data (Uint8Array|String): input data to compress.
   * - options (Object): zlib deflate options.
   *
   * Compress `data` with deflate algorithm and `options`.
   *
   * Supported options are:
   *
   * - level
   * - windowBits
   * - memLevel
   * - strategy
   * - dictionary
   *
   * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
   * for more information on these.
   *
   * Sugar (options):
   *
   * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
   *   negative windowBits implicitly.
   *
   * ##### Example:
   *
   * ```javascript
   * const pako = require('pako')
   * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);
   *
   * console.log(pako.deflate(data));
   * ```
   **/
  function deflate$1(input, options) {
    const deflator = new Deflate$1(options);

    deflator.push(input, true);

    // That will never happens, if you don't cheat with options :)
    if (deflator.err) { throw deflator.msg || messages[deflator.err]; }

    return deflator.result;
  }


  /**
   * deflateRaw(data[, options]) -> Uint8Array
   * - data (Uint8Array|String): input data to compress.
   * - options (Object): zlib deflate options.
   *
   * The same as [[deflate]], but creates raw data, without wrapper
   * (header and adler32 crc).
   **/
  function deflateRaw$1(input, options) {
    options = options || {};
    options.raw = true;
    return deflate$1(input, options);
  }


  /**
   * gzip(data[, options]) -> Uint8Array
   * - data (Uint8Array|String): input data to compress.
   * - options (Object): zlib deflate options.
   *
   * The same as [[deflate]], but create gzip wrapper instead of
   * deflate one.
   **/
  function gzip$1(input, options) {
    options = options || {};
    options.gzip = true;
    return deflate$1(input, options);
  }


  var Deflate_1$1 = Deflate$1;
  var deflate_2 = deflate$1;
  var deflateRaw_1$1 = deflateRaw$1;
  var gzip_1$1 = gzip$1;
  var constants$1 = constants$2;

  var deflate_1$1 = {
  	Deflate: Deflate_1$1,
  	deflate: deflate_2,
  	deflateRaw: deflateRaw_1$1,
  	gzip: gzip_1$1,
  	constants: constants$1
  };

  // (C) 1995-2013 Jean-loup Gailly and Mark Adler
  // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
  //
  // This software is provided 'as-is', without any express or implied
  // warranty. In no event will the authors be held liable for any damages
  // arising from the use of this software.
  //
  // Permission is granted to anyone to use this software for any purpose,
  // including commercial applications, and to alter it and redistribute it
  // freely, subject to the following restrictions:
  //
  // 1. The origin of this software must not be misrepresented; you must not
  //   claim that you wrote the original software. If you use this software
  //   in a product, an acknowledgment in the product documentation would be
  //   appreciated but is not required.
  // 2. Altered source versions must be plainly marked as such, and must not be
  //   misrepresented as being the original software.
  // 3. This notice may not be removed or altered from any source distribution.

  // See state defs from inflate.js
  const BAD$1 = 30;       /* got a data error -- remain here until reset */
  const TYPE$1 = 12;      /* i: waiting for type bits, including last-flag bit */

  /*
     Decode literal, length, and distance codes and write out the resulting
     literal and match bytes until either not enough input or output is
     available, an end-of-block is encountered, or a data error is encountered.
     When large enough input and output buffers are supplied to inflate(), for
     example, a 16K input buffer and a 64K output buffer, more than 95% of the
     inflate execution time is spent in this routine.

     Entry assumptions:

          state.mode === LEN
          strm.avail_in >= 6
          strm.avail_out >= 258
          start >= strm.avail_out
          state.bits < 8

     On return, state.mode is one of:

          LEN -- ran out of enough output space or enough available input
          TYPE -- reached end of block code, inflate() to interpret next block
          BAD -- error in block data

     Notes:

      - The maximum input bits used by a length/distance pair is 15 bits for the
        length code, 5 bits for the length extra, 15 bits for the distance code,
        and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
        Therefore if strm.avail_in >= 6, then there is enough input to avoid
        checking for available input while decoding.

      - The maximum bytes that a single length/distance pair can output is 258
        bytes, which is the maximum length that can be coded.  inflate_fast()
        requires strm.avail_out >= 258 for each loop to avoid checking for
        output space.
   */
  var inffast = function inflate_fast(strm, start) {
    let _in;                    /* local strm.input */
    let last;                   /* have enough input while in < last */
    let _out;                   /* local strm.output */
    let beg;                    /* inflate()'s initial strm.output */
    let end;                    /* while out < end, enough space available */
  //#ifdef INFLATE_STRICT
    let dmax;                   /* maximum distance from zlib header */
  //#endif
    let wsize;                  /* window size or zero if not using window */
    let whave;                  /* valid bytes in the window */
    let wnext;                  /* window write index */
    // Use `s_window` instead `window`, avoid conflict with instrumentation tools
    let s_window;               /* allocated sliding window, if wsize != 0 */
    let hold;                   /* local strm.hold */
    let bits;                   /* local strm.bits */
    let lcode;                  /* local strm.lencode */
    let dcode;                  /* local strm.distcode */
    let lmask;                  /* mask for first level of length codes */
    let dmask;                  /* mask for first level of distance codes */
    let here;                   /* retrieved table entry */
    let op;                     /* code bits, operation, extra bits, or */
                                /*  window position, window bytes to copy */
    let len;                    /* match length, unused bytes */
    let dist;                   /* match distance */
    let from;                   /* where to copy match from */
    let from_source;


    let input, output; // JS specific, because we have no pointers

    /* copy state to local variables */
    const state = strm.state;
    //here = state.here;
    _in = strm.next_in;
    input = strm.input;
    last = _in + (strm.avail_in - 5);
    _out = strm.next_out;
    output = strm.output;
    beg = _out - (start - strm.avail_out);
    end = _out + (strm.avail_out - 257);
  //#ifdef INFLATE_STRICT
    dmax = state.dmax;
  //#endif
    wsize = state.wsize;
    whave = state.whave;
    wnext = state.wnext;
    s_window = state.window;
    hold = state.hold;
    bits = state.bits;
    lcode = state.lencode;
    dcode = state.distcode;
    lmask = (1 << state.lenbits) - 1;
    dmask = (1 << state.distbits) - 1;


    /* decode literals and length/distances until end-of-block or not enough
       input data or output space */

    top:
    do {
      if (bits < 15) {
        hold += input[_in++] << bits;
        bits += 8;
        hold += input[_in++] << bits;
        bits += 8;
      }

      here = lcode[hold & lmask];

      dolen:
      for (;;) { // Goto emulation
        op = here >>> 24/*here.bits*/;
        hold >>>= op;
        bits -= op;
        op = (here >>> 16) & 0xff/*here.op*/;
        if (op === 0) {                          /* literal */
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          output[_out++] = here & 0xffff/*here.val*/;
        }
        else if (op & 16) {                     /* length base */
          len = here & 0xffff/*here.val*/;
          op &= 15;                           /* number of extra bits */
          if (op) {
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
            }
            len += hold & ((1 << op) - 1);
            hold >>>= op;
            bits -= op;
          }
          //Tracevv((stderr, "inflate:         length %u\n", len));
          if (bits < 15) {
            hold += input[_in++] << bits;
            bits += 8;
            hold += input[_in++] << bits;
            bits += 8;
          }
          here = dcode[hold & dmask];

          dodist:
          for (;;) { // goto emulation
            op = here >>> 24/*here.bits*/;
            hold >>>= op;
            bits -= op;
            op = (here >>> 16) & 0xff/*here.op*/;

            if (op & 16) {                      /* distance base */
              dist = here & 0xffff/*here.val*/;
              op &= 15;                       /* number of extra bits */
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
                if (bits < op) {
                  hold += input[_in++] << bits;
                  bits += 8;
                }
              }
              dist += hold & ((1 << op) - 1);
  //#ifdef INFLATE_STRICT
              if (dist > dmax) {
                strm.msg = 'invalid distance too far back';
                state.mode = BAD$1;
                break top;
              }
  //#endif
              hold >>>= op;
              bits -= op;
              //Tracevv((stderr, "inflate:         distance %u\n", dist));
              op = _out - beg;                /* max distance in output */
              if (dist > op) {                /* see if copy from window */
                op = dist - op;               /* distance back in window */
                if (op > whave) {
                  if (state.sane) {
                    strm.msg = 'invalid distance too far back';
                    state.mode = BAD$1;
                    break top;
                  }

  // (!) This block is disabled in zlib defaults,
  // don't enable it for binary compatibility
  //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
  //                if (len <= op - whave) {
  //                  do {
  //                    output[_out++] = 0;
  //                  } while (--len);
  //                  continue top;
  //                }
  //                len -= op - whave;
  //                do {
  //                  output[_out++] = 0;
  //                } while (--op > whave);
  //                if (op === 0) {
  //                  from = _out - dist;
  //                  do {
  //                    output[_out++] = output[from++];
  //                  } while (--len);
  //                  continue top;
  //                }
  //#endif
                }
                from = 0; // window index
                from_source = s_window;
                if (wnext === 0) {           /* very common case */
                  from += wsize - op;
                  if (op < len) {         /* some from window */
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;  /* rest from output */
                    from_source = output;
                  }
                }
                else if (wnext < op) {      /* wrap around window */
                  from += wsize + wnext - op;
                  op -= wnext;
                  if (op < len) {         /* some from end of window */
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = 0;
                    if (wnext < len) {  /* some from start of window */
                      op = wnext;
                      len -= op;
                      do {
                        output[_out++] = s_window[from++];
                      } while (--op);
                      from = _out - dist;      /* rest from output */
                      from_source = output;
                    }
                  }
                }
                else {                      /* contiguous in window */
                  from += wnext - op;
                  if (op < len) {         /* some from window */
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;  /* rest from output */
                    from_source = output;
                  }
                }
                while (len > 2) {
                  output[_out++] = from_source[from++];
                  output[_out++] = from_source[from++];
                  output[_out++] = from_source[from++];
                  len -= 3;
                }
                if (len) {
                  output[_out++] = from_source[from++];
                  if (len > 1) {
                    output[_out++] = from_source[from++];
                  }
                }
              }
              else {
                from = _out - dist;          /* copy direct from output */
                do {                        /* minimum length is three */
                  output[_out++] = output[from++];
                  output[_out++] = output[from++];
                  output[_out++] = output[from++];
                  len -= 3;
                } while (len > 2);
                if (len) {
                  output[_out++] = output[from++];
                  if (len > 1) {
                    output[_out++] = output[from++];
                  }
                }
              }
            }
            else if ((op & 64) === 0) {          /* 2nd level distance code */
              here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
              continue dodist;
            }
            else {
              strm.msg = 'invalid distance code';
              state.mode = BAD$1;
              break top;
            }

            break; // need to emulate goto via "continue"
          }
        }
        else if ((op & 64) === 0) {              /* 2nd level length code */
          here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
          continue dolen;
        }
        else if (op & 32) {                     /* end-of-block */
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.mode = TYPE$1;
          break top;
        }
        else {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD$1;
          break top;
        }

        break; // need to emulate goto via "continue"
      }
    } while (_in < last && _out < end);

    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
    len = bits >> 3;
    _in -= len;
    bits -= len << 3;
    hold &= (1 << bits) - 1;

    /* update state and return */
    strm.next_in = _in;
    strm.next_out = _out;
    strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
    strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
    state.hold = hold;
    state.bits = bits;
    return;
  };

  // (C) 1995-2013 Jean-loup Gailly and Mark Adler
  // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
  //
  // This software is provided 'as-is', without any express or implied
  // warranty. In no event will the authors be held liable for any damages
  // arising from the use of this software.
  //
  // Permission is granted to anyone to use this software for any purpose,
  // including commercial applications, and to alter it and redistribute it
  // freely, subject to the following restrictions:
  //
  // 1. The origin of this software must not be misrepresented; you must not
  //   claim that you wrote the original software. If you use this software
  //   in a product, an acknowledgment in the product documentation would be
  //   appreciated but is not required.
  // 2. Altered source versions must be plainly marked as such, and must not be
  //   misrepresented as being the original software.
  // 3. This notice may not be removed or altered from any source distribution.

  const MAXBITS = 15;
  const ENOUGH_LENS$1 = 852;
  const ENOUGH_DISTS$1 = 592;
  //const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

  const CODES$1 = 0;
  const LENS$1 = 1;
  const DISTS$1 = 2;

  const lbase = new Uint16Array([ /* Length codes 257..285 base */
    3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
    35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
  ]);

  const lext = new Uint8Array([ /* Length codes 257..285 extra */
    16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
    19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
  ]);

  const dbase = new Uint16Array([ /* Distance codes 0..29 base */
    1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
    257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
    8193, 12289, 16385, 24577, 0, 0
  ]);

  const dext = new Uint8Array([ /* Distance codes 0..29 extra */
    16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
    23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
    28, 28, 29, 29, 64, 64
  ]);

  const inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>
  {
    const bits = opts.bits;
        //here = opts.here; /* table entry for duplication */

    let len = 0;               /* a code's length in bits */
    let sym = 0;               /* index of code symbols */
    let min = 0, max = 0;          /* minimum and maximum code lengths */
    let root = 0;              /* number of index bits for root table */
    let curr = 0;              /* number of index bits for current table */
    let drop = 0;              /* code bits to drop for sub-table */
    let left = 0;                   /* number of prefix codes available */
    let used = 0;              /* code entries in table used */
    let huff = 0;              /* Huffman code */
    let incr;              /* for incrementing code, index */
    let fill;              /* index for replicating entries */
    let low;               /* low bits for current root entry */
    let mask;              /* mask for low root bits */
    let next;             /* next available space in table */
    let base = null;     /* base value table to use */
    let base_index = 0;
  //  let shoextra;    /* extra bits table to use */
    let end;                    /* use base and extra for symbol > end */
    const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
    const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
    let extra = null;
    let extra_index = 0;

    let here_bits, here_op, here_val;

    /*
     Process a set of code lengths to create a canonical Huffman code.  The
     code lengths are lens[0..codes-1].  Each length corresponds to the
     symbols 0..codes-1.  The Huffman code is generated by first sorting the
     symbols by length from short to long, and retaining the symbol order
     for codes with equal lengths.  Then the code starts with all zero bits
     for the first code of the shortest length, and the codes are integer
     increments for the same length, and zeros are appended as the length
     increases.  For the deflate format, these bits are stored backwards
     from their more natural integer increment ordering, and so when the
     decoding tables are built in the large loop below, the integer codes
     are incremented backwards.

     This routine assumes, but does not check, that all of the entries in
     lens[] are in the range 0..MAXBITS.  The caller must assure this.
     1..MAXBITS is interpreted as that code length.  zero means that that
     symbol does not occur in this code.

     The codes are sorted by computing a count of codes for each length,
     creating from that a table of starting indices for each length in the
     sorted table, and then entering the symbols in order in the sorted
     table.  The sorted table is work[], with that space being provided by
     the caller.

     The length counts are used for other purposes as well, i.e. finding
     the minimum and maximum length codes, determining if there are any
     codes at all, checking for a valid set of lengths, and looking ahead
     at length counts to determine sub-table sizes when building the
     decoding tables.
     */

    /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
    for (len = 0; len <= MAXBITS; len++) {
      count[len] = 0;
    }
    for (sym = 0; sym < codes; sym++) {
      count[lens[lens_index + sym]]++;
    }

    /* bound code lengths, force root to be within code lengths */
    root = bits;
    for (max = MAXBITS; max >= 1; max--) {
      if (count[max] !== 0) { break; }
    }
    if (root > max) {
      root = max;
    }
    if (max === 0) {                     /* no symbols to code at all */
      //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
      //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
      //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
      table[table_index++] = (1 << 24) | (64 << 16) | 0;


      //table.op[opts.table_index] = 64;
      //table.bits[opts.table_index] = 1;
      //table.val[opts.table_index++] = 0;
      table[table_index++] = (1 << 24) | (64 << 16) | 0;

      opts.bits = 1;
      return 0;     /* no symbols, but wait for decoding to report error */
    }
    for (min = 1; min < max; min++) {
      if (count[min] !== 0) { break; }
    }
    if (root < min) {
      root = min;
    }

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
      left <<= 1;
      left -= count[len];
      if (left < 0) {
        return -1;
      }        /* over-subscribed */
    }
    if (left > 0 && (type === CODES$1 || max !== 1)) {
      return -1;                      /* incomplete set */
    }

    /* generate offsets into symbol table for each length for sorting */
    offs[1] = 0;
    for (len = 1; len < MAXBITS; len++) {
      offs[len + 1] = offs[len] + count[len];
    }

    /* sort symbols by length, by symbol order within each length */
    for (sym = 0; sym < codes; sym++) {
      if (lens[lens_index + sym] !== 0) {
        work[offs[lens[lens_index + sym]]++] = sym;
      }
    }

    /*
     Create and fill in decoding tables.  In this loop, the table being
     filled is at next and has curr index bits.  The code being used is huff
     with length len.  That code is converted to an index by dropping drop
     bits off of the bottom.  For codes where len is less than drop + curr,
     those top drop + curr - len bits are incremented through all values to
     fill the table with replicated entries.

     root is the number of index bits for the root table.  When len exceeds
     root, sub-tables are created pointed to by the root entry with an index
     of the low root bits of huff.  This is saved in low to check for when a
     new sub-table should be started.  drop is zero when the root table is
     being filled, and drop is root when sub-tables are being filled.

     When a new sub-table is needed, it is necessary to look ahead in the
     code lengths to determine what size sub-table is needed.  The length
     counts are used for this, and so count[] is decremented as codes are
     entered in the tables.

     used keeps track of how many table entries have been allocated from the
     provided *table space.  It is checked for LENS and DIST tables against
     the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
     the initial root table size constants.  See the comments in inftrees.h
     for more information.

     sym increments through all symbols, and the loop terminates when
     all codes of length max, i.e. all codes, have been processed.  This
     routine permits incomplete codes, so another loop after this one fills
     in the rest of the decoding tables with invalid code markers.
     */

    /* set up for code type */
    // poor man optimization - use if-else instead of switch,
    // to avoid deopts in old v8
    if (type === CODES$1) {
      base = extra = work;    /* dummy value--not used */
      end = 19;

    } else if (type === LENS$1) {
      base = lbase;
      base_index -= 257;
      extra = lext;
      extra_index -= 257;
      end = 256;

    } else {                    /* DISTS */
      base = dbase;
      extra = dext;
      end = -1;
    }

    /* initialize opts for loop */
    huff = 0;                   /* starting code */
    sym = 0;                    /* starting code symbol */
    len = min;                  /* starting code length */
    next = table_index;              /* current table to fill in */
    curr = root;                /* current table index bits */
    drop = 0;                   /* current bits to drop from code for index */
    low = -1;                   /* trigger new sub-table when len > root */
    used = 1 << root;          /* use root table entries */
    mask = used - 1;            /* mask for comparing low */

    /* check available table space */
    if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
      (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
      return 1;
    }

    /* process all codes and make table entries */
    for (;;) {
      /* create table entry */
      here_bits = len - drop;
      if (work[sym] < end) {
        here_op = 0;
        here_val = work[sym];
      }
      else if (work[sym] > end) {
        here_op = extra[extra_index + work[sym]];
        here_val = base[base_index + work[sym]];
      }
      else {
        here_op = 32 + 64;         /* end of block */
        here_val = 0;
      }

      /* replicate for those indices with low len bits equal to huff */
      incr = 1 << (len - drop);
      fill = 1 << curr;
      min = fill;                 /* save offset to next table */
      do {
        fill -= incr;
        table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
      } while (fill !== 0);

      /* backwards increment the len-bit code huff */
      incr = 1 << (len - 1);
      while (huff & incr) {
        incr >>= 1;
      }
      if (incr !== 0) {
        huff &= incr - 1;
        huff += incr;
      } else {
        huff = 0;
      }

      /* go to next symbol, update count, len */
      sym++;
      if (--count[len] === 0) {
        if (len === max) { break; }
        len = lens[lens_index + work[sym]];
      }

      /* create new sub-table if needed */
      if (len > root && (huff & mask) !== low) {
        /* if first time, transition to sub-tables */
        if (drop === 0) {
          drop = root;
        }

        /* increment past last table */
        next += min;            /* here min is 1 << curr */

        /* determine length of next table */
        curr = len - drop;
        left = 1 << curr;
        while (curr + drop < max) {
          left -= count[curr + drop];
          if (left <= 0) { break; }
          curr++;
          left <<= 1;
        }

        /* check for enough space */
        used += 1 << curr;
        if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
          (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
          return 1;
        }

        /* point entry in root table to sub-table */
        low = huff & mask;
        /*table.op[low] = curr;
        table.bits[low] = root;
        table.val[low] = next - opts.table_index;*/
        table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
      }
    }

    /* fill in remaining table entry if code is incomplete (guaranteed to have
     at most one remaining entry, since if the code is incomplete, the
     maximum code length that was allowed to get this far is one bit) */
    if (huff !== 0) {
      //table.op[next + huff] = 64;            /* invalid code marker */
      //table.bits[next + huff] = len - drop;
      //table.val[next + huff] = 0;
      table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
    }

    /* set return parameters */
    //opts.table_index += used;
    opts.bits = root;
    return 0;
  };


  var inftrees = inflate_table;

  // (C) 1995-2013 Jean-loup Gailly and Mark Adler
  // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
  //
  // This software is provided 'as-is', without any express or implied
  // warranty. In no event will the authors be held liable for any damages
  // arising from the use of this software.
  //
  // Permission is granted to anyone to use this software for any purpose,
  // including commercial applications, and to alter it and redistribute it
  // freely, subject to the following restrictions:
  //
  // 1. The origin of this software must not be misrepresented; you must not
  //   claim that you wrote the original software. If you use this software
  //   in a product, an acknowledgment in the product documentation would be
  //   appreciated but is not required.
  // 2. Altered source versions must be plainly marked as such, and must not be
  //   misrepresented as being the original software.
  // 3. This notice may not be removed or altered from any source distribution.






  const CODES = 0;
  const LENS = 1;
  const DISTS = 2;

  /* Public constants ==========================================================*/
  /* ===========================================================================*/

  const {
    Z_FINISH: Z_FINISH$1, Z_BLOCK, Z_TREES,
    Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR: Z_MEM_ERROR$1, Z_BUF_ERROR,
    Z_DEFLATED
  } = constants$2;


  /* STATES ====================================================================*/
  /* ===========================================================================*/


  const    HEAD = 1;       /* i: waiting for magic header */
  const    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
  const    TIME = 3;       /* i: waiting for modification time (gzip) */
  const    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
  const    EXLEN = 5;      /* i: waiting for extra length (gzip) */
  const    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
  const    NAME = 7;       /* i: waiting for end of file name (gzip) */
  const    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
  const    HCRC = 9;       /* i: waiting for header crc (gzip) */
  const    DICTID = 10;    /* i: waiting for dictionary check value */
  const    DICT = 11;      /* waiting for inflateSetDictionary() call */
  const        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
  const        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
  const        STORED = 14;    /* i: waiting for stored size (length and complement) */
  const        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
  const        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
  const        TABLE = 17;     /* i: waiting for dynamic block table lengths */
  const        LENLENS = 18;   /* i: waiting for code length code lengths */
  const        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
  const            LEN_ = 20;      /* i: same as LEN below, but only first time in */
  const            LEN = 21;       /* i: waiting for length/lit/eob code */
  const            LENEXT = 22;    /* i: waiting for length extra bits */
  const            DIST = 23;      /* i: waiting for distance code */
  const            DISTEXT = 24;   /* i: waiting for distance extra bits */
  const            MATCH = 25;     /* o: waiting for output space to copy string */
  const            LIT = 26;       /* o: waiting for output space to write literal */
  const    CHECK = 27;     /* i: waiting for 32-bit check value */
  const    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
  const    DONE = 29;      /* finished check, done -- remain here until reset */
  const    BAD = 30;       /* got a data error -- remain here until reset */
  const    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
  const    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

  /* ===========================================================================*/



  const ENOUGH_LENS = 852;
  const ENOUGH_DISTS = 592;
  //const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

  const MAX_WBITS = 15;
  /* 32K LZ77 window */
  const DEF_WBITS = MAX_WBITS;


  const zswap32 = (q) => {

    return  (((q >>> 24) & 0xff) +
            ((q >>> 8) & 0xff00) +
            ((q & 0xff00) << 8) +
            ((q & 0xff) << 24));
  };


  function InflateState() {
    this.mode = 0;             /* current inflate mode */
    this.last = false;          /* true if processing last block */
    this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
    this.havedict = false;      /* true if dictionary provided */
    this.flags = 0;             /* gzip header method and flags (0 if zlib) */
    this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
    this.check = 0;             /* protected copy of check value */
    this.total = 0;             /* protected copy of output count */
    // TODO: may be {}
    this.head = null;           /* where to save gzip header information */

    /* sliding window */
    this.wbits = 0;             /* log base 2 of requested window size */
    this.wsize = 0;             /* window size or zero if not using window */
    this.whave = 0;             /* valid bytes in the window */
    this.wnext = 0;             /* window write index */
    this.window = null;         /* allocated sliding window, if needed */

    /* bit accumulator */
    this.hold = 0;              /* input bit accumulator */
    this.bits = 0;              /* number of bits in "in" */

    /* for string and stored block copying */
    this.length = 0;            /* literal or length of data to copy */
    this.offset = 0;            /* distance back to copy string from */

    /* for table and code decoding */
    this.extra = 0;             /* extra bits needed */

    /* fixed and dynamic code tables */
    this.lencode = null;          /* starting table for length/literal codes */
    this.distcode = null;         /* starting table for distance codes */
    this.lenbits = 0;           /* index bits for lencode */
    this.distbits = 0;          /* index bits for distcode */

    /* dynamic table building */
    this.ncode = 0;             /* number of code length code lengths */
    this.nlen = 0;              /* number of length code lengths */
    this.ndist = 0;             /* number of distance code lengths */
    this.have = 0;              /* number of code lengths in lens[] */
    this.next = null;              /* next available space in codes[] */

    this.lens = new Uint16Array(320); /* temporary storage for code lengths */
    this.work = new Uint16Array(288); /* work area for code table building */

    /*
     because we don't have pointers in js, we use lencode and distcode directly
     as buffers so we don't need codes
    */
    //this.codes = new Int32Array(ENOUGH);       /* space for code tables */
    this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
    this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
    this.sane = 0;                   /* if false, allow invalid distance too far */
    this.back = 0;                   /* bits back of last unprocessed length/lit */
    this.was = 0;                    /* initial length of match */
  }


  const inflateResetKeep = (strm) => {

    if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }
    const state = strm.state;
    strm.total_in = strm.total_out = state.total = 0;
    strm.msg = ''; /*Z_NULL*/
    if (state.wrap) {       /* to support ill-conceived Java test suite */
      strm.adler = state.wrap & 1;
    }
    state.mode = HEAD;
    state.last = 0;
    state.havedict = 0;
    state.dmax = 32768;
    state.head = null/*Z_NULL*/;
    state.hold = 0;
    state.bits = 0;
    //state.lencode = state.distcode = state.next = state.codes;
    state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);
    state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);

    state.sane = 1;
    state.back = -1;
    //Tracev((stderr, "inflate: reset\n"));
    return Z_OK$1;
  };


  const inflateReset = (strm) => {

    if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }
    const state = strm.state;
    state.wsize = 0;
    state.whave = 0;
    state.wnext = 0;
    return inflateResetKeep(strm);

  };


  const inflateReset2 = (strm, windowBits) => {
    let wrap;

    /* get the state */
    if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }
    const state = strm.state;

    /* extract wrap request from windowBits parameter */
    if (windowBits < 0) {
      wrap = 0;
      windowBits = -windowBits;
    }
    else {
      wrap = (windowBits >> 4) + 1;
      if (windowBits < 48) {
        windowBits &= 15;
      }
    }

    /* set number of window bits, free window if different */
    if (windowBits && (windowBits < 8 || windowBits > 15)) {
      return Z_STREAM_ERROR$1;
    }
    if (state.window !== null && state.wbits !== windowBits) {
      state.window = null;
    }

    /* update state and reset the rest of it */
    state.wrap = wrap;
    state.wbits = windowBits;
    return inflateReset(strm);
  };


  const inflateInit2 = (strm, windowBits) => {

    if (!strm) { return Z_STREAM_ERROR$1; }
    //strm.msg = Z_NULL;                 /* in case we return an error */

    const state = new InflateState();

    //if (state === Z_NULL) return Z_MEM_ERROR;
    //Tracev((stderr, "inflate: allocated\n"));
    strm.state = state;
    state.window = null/*Z_NULL*/;
    const ret = inflateReset2(strm, windowBits);
    if (ret !== Z_OK$1) {
      strm.state = null/*Z_NULL*/;
    }
    return ret;
  };


  const inflateInit = (strm) => {

    return inflateInit2(strm, DEF_WBITS);
  };


  /*
   Return state with length and distance decoding tables and index sizes set to
   fixed code decoding.  Normally this returns fixed tables from inffixed.h.
   If BUILDFIXED is defined, then instead this routine builds the tables the
   first time it's called, and returns those tables the first time and
   thereafter.  This reduces the size of the code by about 2K bytes, in
   exchange for a little execution time.  However, BUILDFIXED should not be
   used for threaded applications, since the rewriting of the tables and virgin
   may not be thread-safe.
   */
  let virgin = true;

  let lenfix, distfix; // We have no pointers in JS, so keep tables separate


  const fixedtables = (state) => {

    /* build fixed huffman tables if first call (may not be thread safe) */
    if (virgin) {
      lenfix = new Int32Array(512);
      distfix = new Int32Array(32);

      /* literal/length table */
      let sym = 0;
      while (sym < 144) { state.lens[sym++] = 8; }
      while (sym < 256) { state.lens[sym++] = 9; }
      while (sym < 280) { state.lens[sym++] = 7; }
      while (sym < 288) { state.lens[sym++] = 8; }

      inftrees(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

      /* distance table */
      sym = 0;
      while (sym < 32) { state.lens[sym++] = 5; }

      inftrees(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

      /* do this just once */
      virgin = false;
    }

    state.lencode = lenfix;
    state.lenbits = 9;
    state.distcode = distfix;
    state.distbits = 5;
  };


  /*
   Update the window with the last wsize (normally 32K) bytes written before
   returning.  If window does not exist yet, create it.  This is only called
   when a window is already in use, or when output has been written during this
   inflate call, but the end of the deflate stream has not been reached yet.
   It is also called to create a window for dictionary data when a dictionary
   is loaded.

   Providing output buffers larger than 32K to inflate() should provide a speed
   advantage, since only the last 32K of output is copied to the sliding window
   upon return from inflate(), and since all distances after the first 32K of
   output will fall in the output data, making match copies simpler and faster.
   The advantage may be dependent on the size of the processor's data caches.
   */
  const updatewindow = (strm, src, end, copy) => {

    let dist;
    const state = strm.state;

    /* if it hasn't been done already, allocate space for the window */
    if (state.window === null) {
      state.wsize = 1 << state.wbits;
      state.wnext = 0;
      state.whave = 0;

      state.window = new Uint8Array(state.wsize);
    }

    /* copy state->wsize or less output bytes into the circular window */
    if (copy >= state.wsize) {
      state.window.set(src.subarray(end - state.wsize, end), 0);
      state.wnext = 0;
      state.whave = state.wsize;
    }
    else {
      dist = state.wsize - state.wnext;
      if (dist > copy) {
        dist = copy;
      }
      //zmemcpy(state->window + state->wnext, end - copy, dist);
      state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);
      copy -= dist;
      if (copy) {
        //zmemcpy(state->window, end - copy, copy);
        state.window.set(src.subarray(end - copy, end), 0);
        state.wnext = copy;
        state.whave = state.wsize;
      }
      else {
        state.wnext += dist;
        if (state.wnext === state.wsize) { state.wnext = 0; }
        if (state.whave < state.wsize) { state.whave += dist; }
      }
    }
    return 0;
  };


  const inflate$2 = (strm, flush) => {

    let state;
    let input, output;          // input/output buffers
    let next;                   /* next input INDEX */
    let put;                    /* next output INDEX */
    let have, left;             /* available input and output */
    let hold;                   /* bit buffer */
    let bits;                   /* bits in bit buffer */
    let _in, _out;              /* save starting available input and output */
    let copy;                   /* number of stored or match bytes to copy */
    let from;                   /* where to copy match bytes from */
    let from_source;
    let here = 0;               /* current decoding table entry */
    let here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
    //let last;                   /* parent table entry */
    let last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
    let len;                    /* length to copy for repeats, bits to drop */
    let ret;                    /* return code */
    const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */
    let opts;

    let n; // temporary variable for NEED_BITS

    const order = /* permutation of code lengths */
      new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);


    if (!strm || !strm.state || !strm.output ||
        (!strm.input && strm.avail_in !== 0)) {
      return Z_STREAM_ERROR$1;
    }

    state = strm.state;
    if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


    //--- LOAD() ---
    put = strm.next_out;
    output = strm.output;
    left = strm.avail_out;
    next = strm.next_in;
    input = strm.input;
    have = strm.avail_in;
    hold = state.hold;
    bits = state.bits;
    //---

    _in = have;
    _out = left;
    ret = Z_OK$1;

    inf_leave: // goto emulation
    for (;;) {
      switch (state.mode) {
        case HEAD:
          if (state.wrap === 0) {
            state.mode = TYPEDO;
            break;
          }
          //=== NEEDBITS(16);
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
            state.check = 0/*crc32(0L, Z_NULL, 0)*/;
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32_1(state.check, hbuf, 2, 0);
            //===//

            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = FLAGS;
            break;
          }
          state.flags = 0;           /* expect zlib header */
          if (state.head) {
            state.head.done = false;
          }
          if (!(state.wrap & 1) ||   /* check if zlib header allowed */
            (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
            strm.msg = 'incorrect header check';
            state.mode = BAD;
            break;
          }
          if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
            strm.msg = 'unknown compression method';
            state.mode = BAD;
            break;
          }
          //--- DROPBITS(4) ---//
          hold >>>= 4;
          bits -= 4;
          //---//
          len = (hold & 0x0f)/*BITS(4)*/ + 8;
          if (state.wbits === 0) {
            state.wbits = len;
          }
          else if (len > state.wbits) {
            strm.msg = 'invalid window size';
            state.mode = BAD;
            break;
          }

          // !!! pako patch. Force use `options.windowBits` if passed.
          // Required to always use max window size by default.
          state.dmax = 1 << state.wbits;
          //state.dmax = 1 << len;

          //Tracev((stderr, "inflate:   zlib header ok\n"));
          strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
          state.mode = hold & 0x200 ? DICTID : TYPE;
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          break;
        case FLAGS:
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.flags = hold;
          if ((state.flags & 0xff) !== Z_DEFLATED) {
            strm.msg = 'unknown compression method';
            state.mode = BAD;
            break;
          }
          if (state.flags & 0xe000) {
            strm.msg = 'unknown header flags set';
            state.mode = BAD;
            break;
          }
          if (state.head) {
            state.head.text = ((hold >> 8) & 1);
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32_1(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = TIME;
          /* falls through */
        case TIME:
          //=== NEEDBITS(32); */
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (state.head) {
            state.head.time = hold;
          }
          if (state.flags & 0x0200) {
            //=== CRC4(state.check, hold)
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            hbuf[2] = (hold >>> 16) & 0xff;
            hbuf[3] = (hold >>> 24) & 0xff;
            state.check = crc32_1(state.check, hbuf, 4, 0);
            //===
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = OS;
          /* falls through */
        case OS:
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (state.head) {
            state.head.xflags = (hold & 0xff);
            state.head.os = (hold >> 8);
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32_1(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = EXLEN;
          /* falls through */
        case EXLEN:
          if (state.flags & 0x0400) {
            //=== NEEDBITS(16); */
            while (bits < 16) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.length = hold;
            if (state.head) {
              state.head.extra_len = hold;
            }
            if (state.flags & 0x0200) {
              //=== CRC2(state.check, hold);
              hbuf[0] = hold & 0xff;
              hbuf[1] = (hold >>> 8) & 0xff;
              state.check = crc32_1(state.check, hbuf, 2, 0);
              //===//
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
          }
          else if (state.head) {
            state.head.extra = null/*Z_NULL*/;
          }
          state.mode = EXTRA;
          /* falls through */
        case EXTRA:
          if (state.flags & 0x0400) {
            copy = state.length;
            if (copy > have) { copy = have; }
            if (copy) {
              if (state.head) {
                len = state.head.extra_len - state.length;
                if (!state.head.extra) {
                  // Use untyped array for more convenient processing later
                  state.head.extra = new Uint8Array(state.head.extra_len);
                }
                state.head.extra.set(
                  input.subarray(
                    next,
                    // extra field is limited to 65536 bytes
                    // - no need for additional size check
                    next + copy
                  ),
                  /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                  len
                );
                //zmemcpy(state.head.extra + len, next,
                //        len + copy > state.head.extra_max ?
                //        state.head.extra_max - len : copy);
              }
              if (state.flags & 0x0200) {
                state.check = crc32_1(state.check, input, copy, next);
              }
              have -= copy;
              next += copy;
              state.length -= copy;
            }
            if (state.length) { break inf_leave; }
          }
          state.length = 0;
          state.mode = NAME;
          /* falls through */
        case NAME:
          if (state.flags & 0x0800) {
            if (have === 0) { break inf_leave; }
            copy = 0;
            do {
              // TODO: 2 or 1 bytes?
              len = input[next + copy++];
              /* use constant limit because in js we should not preallocate memory */
              if (state.head && len &&
                  (state.length < 65536 /*state.head.name_max*/)) {
                state.head.name += String.fromCharCode(len);
              }
            } while (len && copy < have);

            if (state.flags & 0x0200) {
              state.check = crc32_1(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            if (len) { break inf_leave; }
          }
          else if (state.head) {
            state.head.name = null;
          }
          state.length = 0;
          state.mode = COMMENT;
          /* falls through */
        case COMMENT:
          if (state.flags & 0x1000) {
            if (have === 0) { break inf_leave; }
            copy = 0;
            do {
              len = input[next + copy++];
              /* use constant limit because in js we should not preallocate memory */
              if (state.head && len &&
                  (state.length < 65536 /*state.head.comm_max*/)) {
                state.head.comment += String.fromCharCode(len);
              }
            } while (len && copy < have);
            if (state.flags & 0x0200) {
              state.check = crc32_1(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            if (len) { break inf_leave; }
          }
          else if (state.head) {
            state.head.comment = null;
          }
          state.mode = HCRC;
          /* falls through */
        case HCRC:
          if (state.flags & 0x0200) {
            //=== NEEDBITS(16); */
            while (bits < 16) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if (hold !== (state.check & 0xffff)) {
              strm.msg = 'header crc mismatch';
              state.mode = BAD;
              break;
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
          }
          if (state.head) {
            state.head.hcrc = ((state.flags >> 9) & 1);
            state.head.done = true;
          }
          strm.adler = state.check = 0;
          state.mode = TYPE;
          break;
        case DICTID:
          //=== NEEDBITS(32); */
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          strm.adler = state.check = zswap32(hold);
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = DICT;
          /* falls through */
        case DICT:
          if (state.havedict === 0) {
            //--- RESTORE() ---
            strm.next_out = put;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state.hold = hold;
            state.bits = bits;
            //---
            return Z_NEED_DICT$1;
          }
          strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
          state.mode = TYPE;
          /* falls through */
        case TYPE:
          if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
          /* falls through */
        case TYPEDO:
          if (state.last) {
            //--- BYTEBITS() ---//
            hold >>>= bits & 7;
            bits -= bits & 7;
            //---//
            state.mode = CHECK;
            break;
          }
          //=== NEEDBITS(3); */
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.last = (hold & 0x01)/*BITS(1)*/;
          //--- DROPBITS(1) ---//
          hold >>>= 1;
          bits -= 1;
          //---//

          switch ((hold & 0x03)/*BITS(2)*/) {
            case 0:                             /* stored block */
              //Tracev((stderr, "inflate:     stored block%s\n",
              //        state.last ? " (last)" : ""));
              state.mode = STORED;
              break;
            case 1:                             /* fixed block */
              fixedtables(state);
              //Tracev((stderr, "inflate:     fixed codes block%s\n",
              //        state.last ? " (last)" : ""));
              state.mode = LEN_;             /* decode codes */
              if (flush === Z_TREES) {
                //--- DROPBITS(2) ---//
                hold >>>= 2;
                bits -= 2;
                //---//
                break inf_leave;
              }
              break;
            case 2:                             /* dynamic block */
              //Tracev((stderr, "inflate:     dynamic codes block%s\n",
              //        state.last ? " (last)" : ""));
              state.mode = TABLE;
              break;
            case 3:
              strm.msg = 'invalid block type';
              state.mode = BAD;
          }
          //--- DROPBITS(2) ---//
          hold >>>= 2;
          bits -= 2;
          //---//
          break;
        case STORED:
          //--- BYTEBITS() ---// /* go to byte boundary */
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          //=== NEEDBITS(32); */
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
            strm.msg = 'invalid stored block lengths';
            state.mode = BAD;
            break;
          }
          state.length = hold & 0xffff;
          //Tracev((stderr, "inflate:       stored length %u\n",
          //        state.length));
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = COPY_;
          if (flush === Z_TREES) { break inf_leave; }
          /* falls through */
        case COPY_:
          state.mode = COPY;
          /* falls through */
        case COPY:
          copy = state.length;
          if (copy) {
            if (copy > have) { copy = have; }
            if (copy > left) { copy = left; }
            if (copy === 0) { break inf_leave; }
            //--- zmemcpy(put, next, copy); ---
            output.set(input.subarray(next, next + copy), put);
            //---//
            have -= copy;
            next += copy;
            left -= copy;
            put += copy;
            state.length -= copy;
            break;
          }
          //Tracev((stderr, "inflate:       stored end\n"));
          state.mode = TYPE;
          break;
        case TABLE:
          //=== NEEDBITS(14); */
          while (bits < 14) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
          //--- DROPBITS(5) ---//
          hold >>>= 5;
          bits -= 5;
          //---//
          state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
          //--- DROPBITS(5) ---//
          hold >>>= 5;
          bits -= 5;
          //---//
          state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
          //--- DROPBITS(4) ---//
          hold >>>= 4;
          bits -= 4;
          //---//
  //#ifndef PKZIP_BUG_WORKAROUND
          if (state.nlen > 286 || state.ndist > 30) {
            strm.msg = 'too many length or distance symbols';
            state.mode = BAD;
            break;
          }
  //#endif
          //Tracev((stderr, "inflate:       table sizes ok\n"));
          state.have = 0;
          state.mode = LENLENS;
          /* falls through */
        case LENLENS:
          while (state.have < state.ncode) {
            //=== NEEDBITS(3);
            while (bits < 3) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
            //--- DROPBITS(3) ---//
            hold >>>= 3;
            bits -= 3;
            //---//
          }
          while (state.have < 19) {
            state.lens[order[state.have++]] = 0;
          }
          // We have separate tables & no pointers. 2 commented lines below not needed.
          //state.next = state.codes;
          //state.lencode = state.next;
          // Switch to use dynamic table
          state.lencode = state.lendyn;
          state.lenbits = 7;

          opts = { bits: state.lenbits };
          ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
          state.lenbits = opts.bits;

          if (ret) {
            strm.msg = 'invalid code lengths set';
            state.mode = BAD;
            break;
          }
          //Tracev((stderr, "inflate:       code lengths ok\n"));
          state.have = 0;
          state.mode = CODELENS;
          /* falls through */
        case CODELENS:
          while (state.have < state.nlen + state.ndist) {
            for (;;) {
              here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;

              if ((here_bits) <= bits) { break; }
              //--- PULLBYTE() ---//
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
              //---//
            }
            if (here_val < 16) {
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              state.lens[state.have++] = here_val;
            }
            else {
              if (here_val === 16) {
                //=== NEEDBITS(here.bits + 2);
                n = here_bits + 2;
                while (bits < n) {
                  if (have === 0) { break inf_leave; }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                //===//
                //--- DROPBITS(here.bits) ---//
                hold >>>= here_bits;
                bits -= here_bits;
                //---//
                if (state.have === 0) {
                  strm.msg = 'invalid bit length repeat';
                  state.mode = BAD;
                  break;
                }
                len = state.lens[state.have - 1];
                copy = 3 + (hold & 0x03);//BITS(2);
                //--- DROPBITS(2) ---//
                hold >>>= 2;
                bits -= 2;
                //---//
              }
              else if (here_val === 17) {
                //=== NEEDBITS(here.bits + 3);
                n = here_bits + 3;
                while (bits < n) {
                  if (have === 0) { break inf_leave; }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                //===//
                //--- DROPBITS(here.bits) ---//
                hold >>>= here_bits;
                bits -= here_bits;
                //---//
                len = 0;
                copy = 3 + (hold & 0x07);//BITS(3);
                //--- DROPBITS(3) ---//
                hold >>>= 3;
                bits -= 3;
                //---//
              }
              else {
                //=== NEEDBITS(here.bits + 7);
                n = here_bits + 7;
                while (bits < n) {
                  if (have === 0) { break inf_leave; }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                //===//
                //--- DROPBITS(here.bits) ---//
                hold >>>= here_bits;
                bits -= here_bits;
                //---//
                len = 0;
                copy = 11 + (hold & 0x7f);//BITS(7);
                //--- DROPBITS(7) ---//
                hold >>>= 7;
                bits -= 7;
                //---//
              }
              if (state.have + copy > state.nlen + state.ndist) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              while (copy--) {
                state.lens[state.have++] = len;
              }
            }
          }

          /* handle error breaks in while */
          if (state.mode === BAD) { break; }

          /* check for end-of-block code (better have one) */
          if (state.lens[256] === 0) {
            strm.msg = 'invalid code -- missing end-of-block';
            state.mode = BAD;
            break;
          }

          /* build code tables -- note: do not change the lenbits or distbits
             values here (9 and 6) without reading the comments in inftrees.h
             concerning the ENOUGH constants, which depend on those values */
          state.lenbits = 9;

          opts = { bits: state.lenbits };
          ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
          // We have separate tables & no pointers. 2 commented lines below not needed.
          // state.next_index = opts.table_index;
          state.lenbits = opts.bits;
          // state.lencode = state.next;

          if (ret) {
            strm.msg = 'invalid literal/lengths set';
            state.mode = BAD;
            break;
          }

          state.distbits = 6;
          //state.distcode.copy(state.codes);
          // Switch to use dynamic table
          state.distcode = state.distdyn;
          opts = { bits: state.distbits };
          ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
          // We have separate tables & no pointers. 2 commented lines below not needed.
          // state.next_index = opts.table_index;
          state.distbits = opts.bits;
          // state.distcode = state.next;

          if (ret) {
            strm.msg = 'invalid distances set';
            state.mode = BAD;
            break;
          }
          //Tracev((stderr, 'inflate:       codes ok\n'));
          state.mode = LEN_;
          if (flush === Z_TREES) { break inf_leave; }
          /* falls through */
        case LEN_:
          state.mode = LEN;
          /* falls through */
        case LEN:
          if (have >= 6 && left >= 258) {
            //--- RESTORE() ---
            strm.next_out = put;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state.hold = hold;
            state.bits = bits;
            //---
            inffast(strm, _out);
            //--- LOAD() ---
            put = strm.next_out;
            output = strm.output;
            left = strm.avail_out;
            next = strm.next_in;
            input = strm.input;
            have = strm.avail_in;
            hold = state.hold;
            bits = state.bits;
            //---

            if (state.mode === TYPE) {
              state.back = -1;
            }
            break;
          }
          state.back = 0;
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if (here_bits <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_op && (here_op & 0xf0) === 0) {
            last_bits = here_bits;
            last_op = here_op;
            last_val = here_val;
            for (;;) {
              here = state.lencode[last_val +
                      ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;

              if ((last_bits + here_bits) <= bits) { break; }
              //--- PULLBYTE() ---//
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
              //---//
            }
            //--- DROPBITS(last.bits) ---//
            hold >>>= last_bits;
            bits -= last_bits;
            //---//
            state.back += last_bits;
          }
          //--- DROPBITS(here.bits) ---//
          hold >>>= here_bits;
          bits -= here_bits;
          //---//
          state.back += here_bits;
          state.length = here_val;
          if (here_op === 0) {
            //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
            //        "inflate:         literal '%c'\n" :
            //        "inflate:         literal 0x%02x\n", here.val));
            state.mode = LIT;
            break;
          }
          if (here_op & 32) {
            //Tracevv((stderr, "inflate:         end of block\n"));
            state.back = -1;
            state.mode = TYPE;
            break;
          }
          if (here_op & 64) {
            strm.msg = 'invalid literal/length code';
            state.mode = BAD;
            break;
          }
          state.extra = here_op & 15;
          state.mode = LENEXT;
          /* falls through */
        case LENEXT:
          if (state.extra) {
            //=== NEEDBITS(state.extra);
            n = state.extra;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
            //--- DROPBITS(state.extra) ---//
            hold >>>= state.extra;
            bits -= state.extra;
            //---//
            state.back += state.extra;
          }
          //Tracevv((stderr, "inflate:         length %u\n", state.length));
          state.was = state.length;
          state.mode = DIST;
          /* falls through */
        case DIST:
          for (;;) {
            here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if ((here_op & 0xf0) === 0) {
            last_bits = here_bits;
            last_op = here_op;
            last_val = here_val;
            for (;;) {
              here = state.distcode[last_val +
                      ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;

              if ((last_bits + here_bits) <= bits) { break; }
              //--- PULLBYTE() ---//
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
              //---//
            }
            //--- DROPBITS(last.bits) ---//
            hold >>>= last_bits;
            bits -= last_bits;
            //---//
            state.back += last_bits;
          }
          //--- DROPBITS(here.bits) ---//
          hold >>>= here_bits;
          bits -= here_bits;
          //---//
          state.back += here_bits;
          if (here_op & 64) {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break;
          }
          state.offset = here_val;
          state.extra = (here_op) & 15;
          state.mode = DISTEXT;
          /* falls through */
        case DISTEXT:
          if (state.extra) {
            //=== NEEDBITS(state.extra);
            n = state.extra;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
            //--- DROPBITS(state.extra) ---//
            hold >>>= state.extra;
            bits -= state.extra;
            //---//
            state.back += state.extra;
          }
  //#ifdef INFLATE_STRICT
          if (state.offset > state.dmax) {
            strm.msg = 'invalid distance too far back';
            state.mode = BAD;
            break;
          }
  //#endif
          //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
          state.mode = MATCH;
          /* falls through */
        case MATCH:
          if (left === 0) { break inf_leave; }
          copy = _out - left;
          if (state.offset > copy) {         /* copy from window */
            copy = state.offset - copy;
            if (copy > state.whave) {
              if (state.sane) {
                strm.msg = 'invalid distance too far back';
                state.mode = BAD;
                break;
              }
  // (!) This block is disabled in zlib defaults,
  // don't enable it for binary compatibility
  //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
  //          Trace((stderr, "inflate.c too far\n"));
  //          copy -= state.whave;
  //          if (copy > state.length) { copy = state.length; }
  //          if (copy > left) { copy = left; }
  //          left -= copy;
  //          state.length -= copy;
  //          do {
  //            output[put++] = 0;
  //          } while (--copy);
  //          if (state.length === 0) { state.mode = LEN; }
  //          break;
  //#endif
            }
            if (copy > state.wnext) {
              copy -= state.wnext;
              from = state.wsize - copy;
            }
            else {
              from = state.wnext - copy;
            }
            if (copy > state.length) { copy = state.length; }
            from_source = state.window;
          }
          else {                              /* copy from output */
            from_source = output;
            from = put - state.offset;
            copy = state.length;
          }
          if (copy > left) { copy = left; }
          left -= copy;
          state.length -= copy;
          do {
            output[put++] = from_source[from++];
          } while (--copy);
          if (state.length === 0) { state.mode = LEN; }
          break;
        case LIT:
          if (left === 0) { break inf_leave; }
          output[put++] = state.length;
          left--;
          state.mode = LEN;
          break;
        case CHECK:
          if (state.wrap) {
            //=== NEEDBITS(32);
            while (bits < 32) {
              if (have === 0) { break inf_leave; }
              have--;
              // Use '|' instead of '+' to make sure that result is signed
              hold |= input[next++] << bits;
              bits += 8;
            }
            //===//
            _out -= left;
            strm.total_out += _out;
            state.total += _out;
            if (_out) {
              strm.adler = state.check =
                  /*UPDATE(state.check, put - _out, _out);*/
                  (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));

            }
            _out = left;
            // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
            if ((state.flags ? hold : zswap32(hold)) !== state.check) {
              strm.msg = 'incorrect data check';
              state.mode = BAD;
              break;
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            //Tracev((stderr, "inflate:   check matches trailer\n"));
          }
          state.mode = LENGTH;
          /* falls through */
        case LENGTH:
          if (state.wrap && state.flags) {
            //=== NEEDBITS(32);
            while (bits < 32) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if (hold !== (state.total & 0xffffffff)) {
              strm.msg = 'incorrect length check';
              state.mode = BAD;
              break;
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            //Tracev((stderr, "inflate:   length matches trailer\n"));
          }
          state.mode = DONE;
          /* falls through */
        case DONE:
          ret = Z_STREAM_END$1;
          break inf_leave;
        case BAD:
          ret = Z_DATA_ERROR$1;
          break inf_leave;
        case MEM:
          return Z_MEM_ERROR$1;
        case SYNC:
          /* falls through */
        default:
          return Z_STREAM_ERROR$1;
      }
    }

    // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

    /*
       Return from inflate(), updating the total counts and the check value.
       If there was no progress during the inflate() call, return a buffer
       error.  Call updatewindow() to create and/or update the window state.
       Note: a memory error from inflate() is non-recoverable.
     */

    //--- RESTORE() ---
    strm.next_out = put;
    strm.avail_out = left;
    strm.next_in = next;
    strm.avail_in = have;
    state.hold = hold;
    state.bits = bits;
    //---

    if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                        (state.mode < CHECK || flush !== Z_FINISH$1))) {
      if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
    }
    _in -= strm.avail_in;
    _out -= strm.avail_out;
    strm.total_in += _in;
    strm.total_out += _out;
    state.total += _out;
    if (state.wrap && _out) {
      strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
        (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));
    }
    strm.data_type = state.bits + (state.last ? 64 : 0) +
                      (state.mode === TYPE ? 128 : 0) +
                      (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
    if (((_in === 0 && _out === 0) || flush === Z_FINISH$1) && ret === Z_OK$1) {
      ret = Z_BUF_ERROR;
    }
    return ret;
  };


  const inflateEnd = (strm) => {

    if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
      return Z_STREAM_ERROR$1;
    }

    let state = strm.state;
    if (state.window) {
      state.window = null;
    }
    strm.state = null;
    return Z_OK$1;
  };


  const inflateGetHeader = (strm, head) => {

    /* check state */
    if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }
    const state = strm.state;
    if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR$1; }

    /* save header structure */
    state.head = head;
    head.done = false;
    return Z_OK$1;
  };


  const inflateSetDictionary = (strm, dictionary) => {
    const dictLength = dictionary.length;

    let state;
    let dictid;
    let ret;

    /* check state */
    if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR$1; }
    state = strm.state;

    if (state.wrap !== 0 && state.mode !== DICT) {
      return Z_STREAM_ERROR$1;
    }

    /* check for correct dictionary identifier */
    if (state.mode === DICT) {
      dictid = 1; /* adler32(0, null, 0)*/
      /* dictid = adler32(dictid, dictionary, dictLength); */
      dictid = adler32_1(dictid, dictionary, dictLength, 0);
      if (dictid !== state.check) {
        return Z_DATA_ERROR$1;
      }
    }
    /* copy dictionary to window using updatewindow(), which will amend the
     existing dictionary if appropriate */
    ret = updatewindow(strm, dictionary, dictLength, dictLength);
    if (ret) {
      state.mode = MEM;
      return Z_MEM_ERROR$1;
    }
    state.havedict = 1;
    // Tracev((stderr, "inflate:   dictionary set\n"));
    return Z_OK$1;
  };


  var inflateReset_1 = inflateReset;
  var inflateReset2_1 = inflateReset2;
  var inflateResetKeep_1 = inflateResetKeep;
  var inflateInit_1 = inflateInit;
  var inflateInit2_1 = inflateInit2;
  var inflate_2$1 = inflate$2;
  var inflateEnd_1 = inflateEnd;
  var inflateGetHeader_1 = inflateGetHeader;
  var inflateSetDictionary_1 = inflateSetDictionary;
  var inflateInfo = 'pako inflate (from Nodeca project)';

  /* Not implemented
  module.exports.inflateCopy = inflateCopy;
  module.exports.inflateGetDictionary = inflateGetDictionary;
  module.exports.inflateMark = inflateMark;
  module.exports.inflatePrime = inflatePrime;
  module.exports.inflateSync = inflateSync;
  module.exports.inflateSyncPoint = inflateSyncPoint;
  module.exports.inflateUndermine = inflateUndermine;
  */

  var inflate_1$2 = {
  	inflateReset: inflateReset_1,
  	inflateReset2: inflateReset2_1,
  	inflateResetKeep: inflateResetKeep_1,
  	inflateInit: inflateInit_1,
  	inflateInit2: inflateInit2_1,
  	inflate: inflate_2$1,
  	inflateEnd: inflateEnd_1,
  	inflateGetHeader: inflateGetHeader_1,
  	inflateSetDictionary: inflateSetDictionary_1,
  	inflateInfo: inflateInfo
  };

  // (C) 1995-2013 Jean-loup Gailly and Mark Adler
  // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
  //
  // This software is provided 'as-is', without any express or implied
  // warranty. In no event will the authors be held liable for any damages
  // arising from the use of this software.
  //
  // Permission is granted to anyone to use this software for any purpose,
  // including commercial applications, and to alter it and redistribute it
  // freely, subject to the following restrictions:
  //
  // 1. The origin of this software must not be misrepresented; you must not
  //   claim that you wrote the original software. If you use this software
  //   in a product, an acknowledgment in the product documentation would be
  //   appreciated but is not required.
  // 2. Altered source versions must be plainly marked as such, and must not be
  //   misrepresented as being the original software.
  // 3. This notice may not be removed or altered from any source distribution.

  function GZheader() {
    /* true if compressed data believed to be text */
    this.text       = 0;
    /* modification time */
    this.time       = 0;
    /* extra flags (not used when writing a gzip file) */
    this.xflags     = 0;
    /* operating system */
    this.os         = 0;
    /* pointer to extra field or Z_NULL if none */
    this.extra      = null;
    /* extra field length (valid if extra != Z_NULL) */
    this.extra_len  = 0; // Actually, we don't need it in JS,
                         // but leave for few code modifications

    //
    // Setup limits is not necessary because in js we should not preallocate memory
    // for inflate use constant limit in 65536 bytes
    //

    /* space at extra (only when reading header) */
    // this.extra_max  = 0;
    /* pointer to zero-terminated file name or Z_NULL */
    this.name       = '';
    /* space at name (only when reading header) */
    // this.name_max   = 0;
    /* pointer to zero-terminated comment or Z_NULL */
    this.comment    = '';
    /* space at comment (only when reading header) */
    // this.comm_max   = 0;
    /* true if there was or will be a header crc */
    this.hcrc       = 0;
    /* true when done reading gzip header (not used when writing a gzip file) */
    this.done       = false;
  }

  var gzheader = GZheader;

  const toString$2 = Object.prototype.toString;

  /* Public constants ==========================================================*/
  /* ===========================================================================*/

  const {
    Z_NO_FLUSH, Z_FINISH,
    Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR
  } = constants$2;

  /* ===========================================================================*/


  /**
   * class Inflate
   *
   * Generic JS-style wrapper for zlib calls. If you don't need
   * streaming behaviour - use more simple functions: [[inflate]]
   * and [[inflateRaw]].
   **/

  /* internal
   * inflate.chunks -> Array
   *
   * Chunks of output data, if [[Inflate#onData]] not overridden.
   **/

  /**
   * Inflate.result -> Uint8Array|String
   *
   * Uncompressed result, generated by default [[Inflate#onData]]
   * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
   * (call [[Inflate#push]] with `Z_FINISH` / `true` param).
   **/

  /**
   * Inflate.err -> Number
   *
   * Error code after inflate finished. 0 (Z_OK) on success.
   * Should be checked if broken data possible.
   **/

  /**
   * Inflate.msg -> String
   *
   * Error message, if [[Inflate.err]] != 0
   **/


  /**
   * new Inflate(options)
   * - options (Object): zlib inflate options.
   *
   * Creates new inflator instance with specified params. Throws exception
   * on bad params. Supported options:
   *
   * - `windowBits`
   * - `dictionary`
   *
   * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
   * for more information on these.
   *
   * Additional options, for internal needs:
   *
   * - `chunkSize` - size of generated data chunks (16K by default)
   * - `raw` (Boolean) - do raw inflate
   * - `to` (String) - if equal to 'string', then result will be converted
   *   from utf8 to utf16 (javascript) string. When string output requested,
   *   chunk length can differ from `chunkSize`, depending on content.
   *
   * By default, when no options set, autodetect deflate/gzip data format via
   * wrapper header.
   *
   * ##### Example:
   *
   * ```javascript
   * const pako = require('pako')
   * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
   * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
   *
   * const inflate = new pako.Inflate({ level: 3});
   *
   * inflate.push(chunk1, false);
   * inflate.push(chunk2, true);  // true -> last chunk
   *
   * if (inflate.err) { throw new Error(inflate.err); }
   *
   * console.log(inflate.result);
   * ```
   **/
  function Inflate$1(options) {
    this.options = common.assign({
      chunkSize: 1024 * 64,
      windowBits: 15,
      to: ''
    }, options || {});

    const opt = this.options;

    // Force window size for `raw` data, if not set directly,
    // because we have no header for autodetect.
    if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
      opt.windowBits = -opt.windowBits;
      if (opt.windowBits === 0) { opt.windowBits = -15; }
    }

    // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
    if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
        !(options && options.windowBits)) {
      opt.windowBits += 32;
    }

    // Gzip header has no info about windows size, we can do autodetect only
    // for deflate. So, if window size not set, force it to max when gzip possible
    if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
      // bit 3 (16) -> gzipped data
      // bit 4 (32) -> autodetect gzip/deflate
      if ((opt.windowBits & 15) === 0) {
        opt.windowBits |= 15;
      }
    }

    this.err    = 0;      // error code, if happens (0 = Z_OK)
    this.msg    = '';     // error message
    this.ended  = false;  // used to avoid multiple onEnd() calls
    this.chunks = [];     // chunks of compressed data

    this.strm   = new zstream();
    this.strm.avail_out = 0;

    let status  = inflate_1$2.inflateInit2(
      this.strm,
      opt.windowBits
    );

    if (status !== Z_OK) {
      throw new Error(messages[status]);
    }

    this.header = new gzheader();

    inflate_1$2.inflateGetHeader(this.strm, this.header);

    // Setup dictionary
    if (opt.dictionary) {
      // Convert data if needed
      if (typeof opt.dictionary === 'string') {
        opt.dictionary = strings.string2buf(opt.dictionary);
      } else if (toString$2.call(opt.dictionary) === '[object ArrayBuffer]') {
        opt.dictionary = new Uint8Array(opt.dictionary);
      }
      if (opt.raw) { //In raw mode we need to set the dictionary early
        status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);
        if (status !== Z_OK) {
          throw new Error(messages[status]);
        }
      }
    }
  }

  /**
   * Inflate#push(data[, flush_mode]) -> Boolean
   * - data (Uint8Array|ArrayBuffer): input data
   * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE
   *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,
   *   `true` means Z_FINISH.
   *
   * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
   * new output chunks. Returns `true` on success. If end of stream detected,
   * [[Inflate#onEnd]] will be called.
   *
   * `flush_mode` is not needed for normal operation, because end of stream
   * detected automatically. You may try to use it for advanced things, but
   * this functionality was not tested.
   *
   * On fail call [[Inflate#onEnd]] with error code and return false.
   *
   * ##### Example
   *
   * ```javascript
   * push(chunk, false); // push one of data chunks
   * ...
   * push(chunk, true);  // push last chunk
   * ```
   **/
  Inflate$1.prototype.push = function (data, flush_mode) {
    const strm = this.strm;
    const chunkSize = this.options.chunkSize;
    const dictionary = this.options.dictionary;
    let status, _flush_mode, last_avail_out;

    if (this.ended) return false;

    if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
    else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;

    // Convert data if needed
    if (toString$2.call(data) === '[object ArrayBuffer]') {
      strm.input = new Uint8Array(data);
    } else {
      strm.input = data;
    }

    strm.next_in = 0;
    strm.avail_in = strm.input.length;

    for (;;) {
      if (strm.avail_out === 0) {
        strm.output = new Uint8Array(chunkSize);
        strm.next_out = 0;
        strm.avail_out = chunkSize;
      }

      status = inflate_1$2.inflate(strm, _flush_mode);

      if (status === Z_NEED_DICT && dictionary) {
        status = inflate_1$2.inflateSetDictionary(strm, dictionary);

        if (status === Z_OK) {
          status = inflate_1$2.inflate(strm, _flush_mode);
        } else if (status === Z_DATA_ERROR) {
          // Replace code with more verbose
          status = Z_NEED_DICT;
        }
      }

      // Skip snyc markers if more data follows and not raw mode
      while (strm.avail_in > 0 &&
             status === Z_STREAM_END &&
             strm.state.wrap > 0 &&
             data[strm.next_in] !== 0)
      {
        inflate_1$2.inflateReset(strm);
        status = inflate_1$2.inflate(strm, _flush_mode);
      }

      switch (status) {
        case Z_STREAM_ERROR:
        case Z_DATA_ERROR:
        case Z_NEED_DICT:
        case Z_MEM_ERROR:
          this.onEnd(status);
          this.ended = true;
          return false;
      }

      // Remember real `avail_out` value, because we may patch out buffer content
      // to align utf8 strings boundaries.
      last_avail_out = strm.avail_out;

      if (strm.next_out) {
        if (strm.avail_out === 0 || status === Z_STREAM_END) {

          if (this.options.to === 'string') {

            let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

            let tail = strm.next_out - next_out_utf8;
            let utf8str = strings.buf2string(strm.output, next_out_utf8);

            // move tail & realign counters
            strm.next_out = tail;
            strm.avail_out = chunkSize - tail;
            if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);

            this.onData(utf8str);

          } else {
            this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));
          }
        }
      }

      // Must repeat iteration if out buffer is full
      if (status === Z_OK && last_avail_out === 0) continue;

      // Finalize if end of stream reached.
      if (status === Z_STREAM_END) {
        status = inflate_1$2.inflateEnd(this.strm);
        this.onEnd(status);
        this.ended = true;
        return true;
      }

      if (strm.avail_in === 0) break;
    }

    return true;
  };


  /**
   * Inflate#onData(chunk) -> Void
   * - chunk (Uint8Array|String): output data. When string output requested,
   *   each chunk will be string.
   *
   * By default, stores data blocks in `chunks[]` property and glue
   * those in `onEnd`. Override this handler, if you need another behaviour.
   **/
  Inflate$1.prototype.onData = function (chunk) {
    this.chunks.push(chunk);
  };


  /**
   * Inflate#onEnd(status) -> Void
   * - status (Number): inflate status. 0 (Z_OK) on success,
   *   other if not.
   *
   * Called either after you tell inflate that the input stream is
   * complete (Z_FINISH). By default - join collected chunks,
   * free memory and fill `results` / `err` properties.
   **/
  Inflate$1.prototype.onEnd = function (status) {
    // On success - join
    if (status === Z_OK) {
      if (this.options.to === 'string') {
        this.result = this.chunks.join('');
      } else {
        this.result = common.flattenChunks(this.chunks);
      }
    }
    this.chunks = [];
    this.err = status;
    this.msg = this.strm.msg;
  };


  /**
   * inflate(data[, options]) -> Uint8Array|String
   * - data (Uint8Array): input data to decompress.
   * - options (Object): zlib inflate options.
   *
   * Decompress `data` with inflate/ungzip and `options`. Autodetect
   * format via wrapper header by default. That's why we don't provide
   * separate `ungzip` method.
   *
   * Supported options are:
   *
   * - windowBits
   *
   * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
   * for more information.
   *
   * Sugar (options):
   *
   * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
   *   negative windowBits implicitly.
   * - `to` (String) - if equal to 'string', then result will be converted
   *   from utf8 to utf16 (javascript) string. When string output requested,
   *   chunk length can differ from `chunkSize`, depending on content.
   *
   *
   * ##### Example:
   *
   * ```javascript
   * const pako = require('pako');
   * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));
   * let output;
   *
   * try {
   *   output = pako.inflate(input);
   * } catch (err) {
   *   console.log(err);
   * }
   * ```
   **/
  function inflate$1(input, options) {
    const inflator = new Inflate$1(options);

    inflator.push(input);

    // That will never happens, if you don't cheat with options :)
    if (inflator.err) throw inflator.msg || messages[inflator.err];

    return inflator.result;
  }


  /**
   * inflateRaw(data[, options]) -> Uint8Array|String
   * - data (Uint8Array): input data to decompress.
   * - options (Object): zlib inflate options.
   *
   * The same as [[inflate]], but creates raw data, without wrapper
   * (header and adler32 crc).
   **/
  function inflateRaw$1(input, options) {
    options = options || {};
    options.raw = true;
    return inflate$1(input, options);
  }


  /**
   * ungzip(data[, options]) -> Uint8Array|String
   * - data (Uint8Array): input data to decompress.
   * - options (Object): zlib inflate options.
   *
   * Just shortcut to [[inflate]], because it autodetects format
   * by header.content. Done for convenience.
   **/


  var Inflate_1$1 = Inflate$1;
  var inflate_2 = inflate$1;
  var inflateRaw_1$1 = inflateRaw$1;
  var ungzip$1 = inflate$1;
  var constants = constants$2;

  var inflate_1$1 = {
  	Inflate: Inflate_1$1,
  	inflate: inflate_2,
  	inflateRaw: inflateRaw_1$1,
  	ungzip: ungzip$1,
  	constants: constants
  };

  const { Deflate, deflate, deflateRaw, gzip } = deflate_1$1;

  const { Inflate, inflate, inflateRaw, ungzip } = inflate_1$1;



  var Deflate_1 = Deflate;
  var deflate_1 = deflate;
  var deflateRaw_1 = deflateRaw;
  var gzip_1 = gzip;
  var Inflate_1 = Inflate;
  var inflate_1 = inflate;
  var inflateRaw_1 = inflateRaw;
  var ungzip_1 = ungzip;
  var constants_1 = constants$2;

  var pako = {
  	Deflate: Deflate_1,
  	deflate: deflate_1,
  	deflateRaw: deflateRaw_1,
  	gzip: gzip_1,
  	Inflate: Inflate_1,
  	inflate: inflate_1,
  	inflateRaw: inflateRaw_1,
  	ungzip: ungzip_1,
  	constants: constants_1
  };

  var TYPE_MAPPING = {};
  function has(type) {
    return !!TYPE_MAPPING[type];
  }
  function get() {
    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'http';
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return TYPE_MAPPING[type](options);
  }
  function registerType(type, fn) {
    TYPE_MAPPING[type] = fn;
  }
  var DataAccessHelper = {
    get: get,
    has: has,
    registerType: registerType
  };

  /* eslint-disable no-bitwise */
  // ----------------------------------------------------------------------------
  // Decoding infrastructure
  // ----------------------------------------------------------------------------
  var REVERSE_LOOKUP = [];
  REVERSE_LOOKUP['-'.charCodeAt(0)] = 62;
  REVERSE_LOOKUP['_'.charCodeAt(0)] = 63;
  var BASE64_CODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

  for (var i = 0; i < BASE64_CODE.length; i++) {
    REVERSE_LOOKUP[BASE64_CODE.charCodeAt(i)] = i;
  } // ----------------------------------------------------------------------------
  // Base64 analysis
  // ----------------------------------------------------------------------------


  function isValidChar(c) {
    return REVERSE_LOOKUP[c.charCodeAt(0)] !== undefined;
  }

  function extractChunks(b64Str) {
    var strSize = b64Str.length;
    var chunks = [];
    var currentChunk = null;

    for (var _i = 0; _i < strSize; _i++) {
      if (isValidChar(b64Str[_i])) {
        if (!currentChunk) {
          currentChunk = {
            start: _i,
            count: 0
          };
        }

        currentChunk.count++;
        currentChunk.end = _i;
      } else if (b64Str[_i] === '=' && currentChunk) {
        // End of chunk (found padding char)
        chunks.push(currentChunk);
        currentChunk = null;
      }
    }

    if (currentChunk) {
      chunks.push(currentChunk);
    }

    return chunks;
  }

  function writeChunk(b64Str, chunk, dstOffset, uint8) {
    var start = chunk.start,
        count = chunk.count;
    var remain = count % 4;
    var fourCharProcessCount = Math.floor(count / 4);
    var charIdx = start;
    var tmp = null;
    var offset = dstOffset; // Handle 4=>3

    for (var _i2 = 0; _i2 < fourCharProcessCount; _i2++) {
      while (!isValidChar(b64Str[charIdx])) {
        charIdx++;
      }

      tmp = REVERSE_LOOKUP[b64Str.charCodeAt(charIdx++)] << 18;

      while (!isValidChar(b64Str[charIdx])) {
        charIdx++;
      }

      tmp |= REVERSE_LOOKUP[b64Str.charCodeAt(charIdx++)] << 12;

      while (!isValidChar(b64Str[charIdx])) {
        charIdx++;
      }

      tmp |= REVERSE_LOOKUP[b64Str.charCodeAt(charIdx++)] << 6;

      while (!isValidChar(b64Str[charIdx])) {
        charIdx++;
      }

      tmp |= REVERSE_LOOKUP[b64Str.charCodeAt(charIdx++)];
      uint8[offset++] = tmp >> 16 & 0xff;
      uint8[offset++] = tmp >> 8 & 0xff;
      uint8[offset++] = tmp & 0xff;
    } // Handle remain


    switch (remain) {
      case 3:
        while (!isValidChar(b64Str[charIdx])) {
          charIdx++;
        }

        tmp = REVERSE_LOOKUP[b64Str.charCodeAt(charIdx++)] << 10;

        while (!isValidChar(b64Str[charIdx])) {
          charIdx++;
        }

        tmp |= REVERSE_LOOKUP[b64Str.charCodeAt(charIdx++)] << 4;

        while (!isValidChar(b64Str[charIdx])) {
          charIdx++;
        }

        tmp |= REVERSE_LOOKUP[b64Str.charCodeAt(charIdx++)] >> 2;
        uint8[offset++] = tmp >> 8 & 0xff;
        uint8[offset++] = tmp & 0xff;
        break;

      case 2:
        while (!isValidChar(b64Str[charIdx])) {
          charIdx++;
        }

        tmp = REVERSE_LOOKUP[b64Str.charCodeAt(charIdx++)] << 2;

        while (!isValidChar(b64Str[charIdx])) {
          charIdx++;
        }

        tmp |= REVERSE_LOOKUP[b64Str.charCodeAt(charIdx++)] >> 4;
        uint8[offset++] = tmp & 0xff;
        break;

      case 1:
        throw new Error('BASE64: remain 1 should not happen');
    }

    return offset;
  }

  function toArrayBuffer(b64Str) {
    var chunks = extractChunks(b64Str);
    var totalEncodedLength = chunks[chunks.length - 1].end + 1;
    var padding = (4 - totalEncodedLength % 4) % 4; // -length mod 4
    // Any padding chars in the middle of b64Str is to be interpreted as \x00,
    // whereas the terminating padding chars are to be interpreted as literal padding.

    var totalSize = (totalEncodedLength + padding) * 3 / 4 - padding;
    var arrayBuffer = new ArrayBuffer(totalSize);
    var view = new Uint8Array(arrayBuffer);
    var dstOffset = 0;

    for (var _i3 = 0; _i3 < chunks.length; _i3++) {
      dstOffset += writeChunk(b64Str, chunks[_i3], dstOffset, view);
      dstOffset += (4 - chunks[_i3].count % 4) % 4;
    }

    return arrayBuffer;
  }

  function encodeTriplet(v1, v2, v3) {
    var triplet = (v1 << 16) + (v2 << 8) + v3;
    return BASE64_CODE[triplet >> 18] + BASE64_CODE[triplet >> 12 & 0x3f] + BASE64_CODE[triplet >> 6 & 0x3f] + BASE64_CODE[triplet & 0x3f];
  }

  function fromArrayBuffer(ab) {
    var uint8 = new Uint8Array(ab);
    var leftoverLength = ab.byteLength % 3;
    var maxTripletIndex = ab.byteLength - leftoverLength;
    var segments = Array(maxTripletIndex / 3);

    for (var _i4 = 0; _i4 < segments.length; _i4++) {
      var bufOffset = _i4 * 3;
      segments[_i4] = encodeTriplet(uint8[bufOffset], uint8[bufOffset + 1], uint8[bufOffset + 2]);
    }

    if (leftoverLength > 0) {
      var segment = encodeTriplet(uint8[maxTripletIndex], uint8[maxTripletIndex + 1] || 0, uint8[maxTripletIndex + 2] || 0);

      if (leftoverLength === 1) {
        segments.push("".concat(segment.substr(0, 2), "=="));
      } else if (leftoverLength === 2) {
        segments.push("".concat(segment.substr(0, 3), "="));
      }
    }

    return segments.join('');
  }
  var Base64 = {
    toArrayBuffer: toArrayBuffer,
    fromArrayBuffer: fromArrayBuffer
  };

  /**
   * Converts a binary buffer in an ArrayBuffer to a string.
   *
   * Note this does not take encoding into consideration, so don't
   * expect proper Unicode or any other encoding.
   */
  function arrayBufferToString(arrayBuffer) {
    var decoder = new TextDecoder('latin1');
    return decoder.decode(arrayBuffer);
  }
  /**
   * Extracts binary data out of a file ArrayBuffer given a prefix/suffix.
   */


  function extractBinary(arrayBuffer, prefixRegex) {
    var suffixRegex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var str = arrayBufferToString(arrayBuffer);
    var prefixMatch = prefixRegex.exec(str);

    if (!prefixMatch) {
      return {
        text: str
      };
    }

    var dataStartIndex = prefixMatch.index + prefixMatch[0].length;
    var strFirstHalf = str.substring(0, dataStartIndex);
    var retVal = null;
    var suffixMatch = suffixRegex ? suffixRegex.exec(str) : null;

    if (suffixMatch) {
      var strSecondHalf = str.substr(suffixMatch.index);
      retVal = {
        text: strFirstHalf + strSecondHalf,
        binaryBuffer: arrayBuffer.slice(dataStartIndex, suffixMatch.index)
      };
    } else {
      // no suffix, so just take all the data starting from dataStartIndex
      retVal = {
        text: strFirstHalf,
        binaryBuffer: arrayBuffer.slice(dataStartIndex)
      };
    }

    return retVal;
  }

  var BinaryHelper = {
    arrayBufferToString: arrayBufferToString,
    extractBinary: extractBinary
  };

  function getEndianness() {
    var a = new ArrayBuffer(4);
    var b = new Uint8Array(a);
    var c = new Uint32Array(a);
    b[0] = 0xa1;
    b[1] = 0xb2;
    b[2] = 0xc3;
    b[3] = 0xd4;
    if (c[0] === 0xd4c3b2a1) return 'LittleEndian';
    if (c[0] === 0xa1b2c3d4) return 'BigEndian';
    return null;
  }
  var ENDIANNESS = getEndianness();
  function swapBytes(buffer, wordSize) {
    if (wordSize < 2) {
      return;
    }

    var bytes = new Int8Array(buffer);
    var size = bytes.length;
    var tempBuffer = [];

    for (var i = 0; i < size; i += wordSize) {
      for (var j = 0; j < wordSize; j++) {
        tempBuffer.push(bytes[i + j]);
      }

      for (var _j = 0; _j < wordSize; _j++) {
        bytes[i + _j] = tempBuffer.pop();
      }
    }
  }
  var Endian = {
    ENDIANNESS: ENDIANNESS,
    getEndianness: getEndianness,
    swapBytes: swapBytes
  };

  var vtkErrorMacro = macro.vtkErrorMacro,
      vtkDebugMacro = macro.vtkDebugMacro;

  var REJECT_COMPRESSION = function REJECT_COMPRESSION() {
    vtkErrorMacro('LiteHttpDataAccessHelper does not support compression. Need to register HttpDataAccessHelper instead.');
    return Promise.reject(new Error('LiteHttpDataAccessHelper does not support compression. Need to register HttpDataAccessHelper instead.'));
  };
  /* eslint-disable prefer-promise-reject-errors */


  var requestCount = 0;

  function openAsyncXHR(method, url) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var xhr = new XMLHttpRequest();
    xhr.open(method, url, true);

    if (options.headers) {
      Object.entries(options.headers).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            key = _ref2[0],
            value = _ref2[1];

        return xhr.setRequestHeader(key, value);
      });
    }

    if (options.progressCallback) {
      xhr.addEventListener('progress', options.progressCallback);
    }

    return xhr;
  }

  function fetchBinary(url) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return new Promise(function (resolve, reject) {
      var xhr = openAsyncXHR('GET', url, options);

      xhr.onreadystatechange = function (e) {
        if (xhr.readyState === 4) {
          if (xhr.status === 200 || xhr.status === 0) {
            resolve(xhr.response);
          } else {
            reject({
              xhr: xhr,
              e: e
            });
          }
        }
      }; // Make request


      xhr.responseType = 'arraybuffer';
      xhr.send();
    });
  }

  function fetchArray() {
    var instance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var baseURL = arguments.length > 1 ? arguments[1] : undefined;
    var array = arguments.length > 2 ? arguments[2] : undefined;
    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    if (options && options.compression) {
      return REJECT_COMPRESSION();
    }

    if (array.ref && !array.ref.pending) {
      return new Promise(function (resolve, reject) {
        var url = [baseURL, array.ref.basepath, array.ref.id].join('/');
        var xhr = openAsyncXHR('GET', url, options);

        xhr.onreadystatechange = function (e) {
          if (xhr.readyState === 1) {
            array.ref.pending = true;

            if (++requestCount === 1 && instance.invokeBusy) {
              instance.invokeBusy(true);
            }
          }

          if (xhr.readyState === 4) {
            array.ref.pending = false;

            if (xhr.status === 200 || xhr.status === 0) {
              array.buffer = xhr.response;

              if (array.ref.encode === 'JSON') {
                array.values = JSON.parse(array.buffer);
              } else {
                if (Endian.ENDIANNESS !== array.ref.encode && Endian.ENDIANNESS) {
                  // Need to swap bytes
                  vtkDebugMacro("Swap bytes of ".concat(array.name));
                  Endian.swapBytes(array.buffer, DataTypeByteSize[array.dataType]);
                }

                array.values = macro.newTypedArray(array.dataType, array.buffer);
              }

              if (array.values.length !== array.size) {
                vtkErrorMacro("Error in FetchArray: ".concat(array.name, ", does not have the proper array size. Got ").concat(array.values.length, ", instead of ").concat(array.size));
              } // Done with the ref and work


              delete array.ref;

              if (--requestCount === 0 && instance.invokeBusy) {
                instance.invokeBusy(false);
              }

              if (instance.modified) {
                instance.modified();
              }

              resolve(array);
            } else {
              reject({
                xhr: xhr,
                e: e
              });
            }
          }
        }; // Make request


        xhr.responseType = array.dataType !== 'string' ? 'arraybuffer' : 'text';
        xhr.send();
      });
    }

    return Promise.resolve(array);
  } // ----------------------------------------------------------------------------


  function fetchJSON() {
    var instance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var url = arguments.length > 1 ? arguments[1] : undefined;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    if (options && options.compression) {
      return REJECT_COMPRESSION();
    }

    return new Promise(function (resolve, reject) {
      var xhr = openAsyncXHR('GET', url, options);

      xhr.onreadystatechange = function (e) {
        if (xhr.readyState === 1) {
          if (++requestCount === 1 && instance.invokeBusy) {
            instance.invokeBusy(true);
          }
        }

        if (xhr.readyState === 4) {
          if (--requestCount === 0 && instance.invokeBusy) {
            instance.invokeBusy(false);
          }

          if (xhr.status === 200 || xhr.status === 0) {
            resolve(JSON.parse(xhr.responseText));
          } else {
            reject({
              xhr: xhr,
              e: e
            });
          }
        }
      }; // Make request


      xhr.responseType = 'text';
      xhr.send();
    });
  } // ----------------------------------------------------------------------------


  function fetchText() {
    var instance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var url = arguments.length > 1 ? arguments[1] : undefined;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    if (options && options.compression) {
      return REJECT_COMPRESSION();
    }

    return new Promise(function (resolve, reject) {
      var xhr = openAsyncXHR('GET', url, options);

      xhr.onreadystatechange = function (e) {
        if (xhr.readyState === 1) {
          if (++requestCount === 1 && instance.invokeBusy) {
            instance.invokeBusy(true);
          }
        }

        if (xhr.readyState === 4) {
          if (--requestCount === 0 && instance.invokeBusy) {
            instance.invokeBusy(false);
          }

          if (xhr.status === 200 || xhr.status === 0) {
            resolve(xhr.responseText);
          } else {
            reject({
              xhr: xhr,
              e: e
            });
          }
        }
      }; // Make request


      xhr.responseType = 'text';
      xhr.send();
    });
  } // ----------------------------------------------------------------------------


  function fetchImage() {
    var url = arguments.length > 1 ? arguments[1] : undefined;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    return new Promise(function (resolve, reject) {
      var img = new Image();

      if (options.crossOrigin) {
        img.crossOrigin = options.crossOrigin;
      }

      img.onload = function () {
        return resolve(img);
      };

      img.onerror = reject;
      img.src = url;
    });
  }
  /* eslint-enable prefer-promise-reject-errors */
  // ----------------------------------------------------------------------------


  var LiteHttpDataAccessHelper = {
    fetchArray: fetchArray,
    fetchJSON: fetchJSON,
    fetchText: fetchText,
    fetchBinary: fetchBinary,
    // Only for HTTP
    fetchImage: fetchImage
  }; // The lite version should never override a full feature one...

  if (!has('http')) {
    registerType('http', function (options) {
      return LiteHttpDataAccessHelper;
    });
  }

  // import 'vtk.js/Sources/IO/Core/DataAccessHelper/HttpDataAccessHelper'; // HTTP + zip
  // import 'vtk.js/Sources/IO/Core/DataAccessHelper/HtmlDataAccessHelper'; // html + base64 + zip
  // import 'vtk.js/Sources/IO/Core/DataAccessHelper/JSZipDataAccessHelper'; // zip
  // ----------------------------------------------------------------------------
  // Global methods
  // ----------------------------------------------------------------------------

  function findAllTags(node, tagName) {
    return _toConsumableArray(node.getElementsByTagName(tagName));
  }
  function findFirstTag(node, tagName) {
    return findAllTags(node, tagName)[0];
  }

  function parseXML(xmlStr) {
    // see xmlbuilder2 docs on the object format
    return xmlbuilder2_min.create(xmlStr);
  }

  function extractAppendedData(buffer) {
    // search for appended data tag
    var prefixRegex = /^\s*<AppendedData\s+encoding="raw">\s*_/m;
    var suffixRegex = /\n\s*<\/AppendedData>/m;
    return BinaryHelper.extractBinary(buffer, prefixRegex, suffixRegex);
  } // ----------------------------------------------------------------------------


  var TYPED_ARRAY = {
    Int8: Int8Array,
    UInt8: Uint8Array,
    Int16: Int16Array,
    UInt16: Uint16Array,
    Int32: Int32Array,
    UInt32: Uint32Array,
    Int64: Int32Array,
    // Not supported with JavaScript will cause error in binary
    UInt64: Uint32Array,
    // Not supported with JavaScript will cause error in binary
    Float32: Float32Array,
    Float64: Float64Array
  }; // ----------------------------------------------------------------------------

  var TYPED_ARRAY_BYTES = {
    Int8: 1,
    UInt8: 1,
    Int16: 2,
    UInt16: 2,
    Int32: 4,
    UInt32: 4,
    Int64: 8,
    // Not supported with JavaScript will cause error in binary
    UInt64: 8,
    // Not supported with JavaScript will cause error in binary
    Float32: 4,
    Float64: 8
  }; // ----------------------------------------------------------------------------

  function integer64to32(array) {
    var maxIdx = array.length - 1; // Skip last

    return array.filter(function (v, i) {
      return i < maxIdx && i % 2 === 0;
    });
  } // ----------------------------------------------------------------------------


  function readerHeader(uint8, headerType) {
    // We do not handle endianness or if more than 32 bits are needed to encode the data
    if (headerType === 'UInt64') {
      var _offset = 8;

      var _uint = new Uint32Array(uint8.buffer, 0, 6);

      var _nbBlocks = _uint[0];
      var _s = _uint[2];
      var _s2 = _uint[4];
      var _resultArray = [_offset, _nbBlocks, _s, _s2];
      _uint = new Uint32Array(uint8.buffer, 3 * 8, _nbBlocks * 2);

      for (var i = 0; i < _nbBlocks; i++) {
        _resultArray.push(_uint[i * 2]);
      }

      return _resultArray;
    } // UInt32


    var uint32 = new Uint32Array(uint8.buffer, 0, 3);
    var offset = 4;
    var nbBlocks = uint32[0];
    var s1 = uint32[1];
    var s2 = uint32[2];
    var resultArray = [offset, nbBlocks, s1, s2];
    uint32 = new Uint32Array(uint8.buffer, 3 * 4, nbBlocks);

    for (var _i = 0; _i < nbBlocks; _i++) {
      resultArray.push(uint32[_i]);
    }

    return resultArray;
  } // ----------------------------------------------------------------------------


  function uncompressBlock(compressedUint8, output) {
    var uncompressedBlock = pako.inflate(compressedUint8);
    output.uint8.set(uncompressedBlock, output.offset);
    output.offset += uncompressedBlock.length;
  } // ----------------------------------------------------------------------------


  function processDataArray(size, dataArrayElem, compressor, byteOrder, headerType, binaryBuffer) {
    var dataType = dataArrayElem.getAttribute('type');
    var name = dataArrayElem.getAttribute('Name');
    var format = dataArrayElem.getAttribute('format'); // binary, ascii, appended

    var numberOfComponents = Number(dataArrayElem.getAttribute('NumberOfComponents') || '1');
    var values = null;

    if (format === 'ascii') {
      values = new TYPED_ARRAY[dataType](size * numberOfComponents);
      var offset = 0;
      dataArrayElem.firstChild.nodeValue.split(/[\\t \\n]+/).forEach(function (token) {
        if (token.trim().length) {
          values[offset++] = Number(token);
        }
      });
    } else if (format === 'binary') {
      var uint8 = new Uint8Array(Base64.toArrayBuffer(dataArrayElem.firstChild.nodeValue.trim()));

      if (compressor === 'vtkZLibDataCompressor') {
        var buffer = new ArrayBuffer(TYPED_ARRAY_BYTES[dataType] * size * numberOfComponents);
        values = new TYPED_ARRAY[dataType](buffer);
        var output = {
          offset: 0,
          uint8: new Uint8Array(buffer)
        }; // ----------------------------------------------------------------------
        // Layout of the data
        // header[N, s1, s1, blockSize1, ..., blockSizeN], [padding???], block[compressedData], ..., block[compressedData]
        // [header] N, s1 and s2 are uint 32 or 64 (defined by header_type="UInt64" attribute on the root node)
        // [header] s1: uncompress size of each block except the last one
        // [header] s2: uncompress size of the last blocks
        // [header] blockSize: size of the block in compressed space that represent to bloc to inflate in zlib. (This also give the offset to the next block)
        // ----------------------------------------------------------------------
        // Header reading

        var header = readerHeader(uint8, headerType);
        var nbBlocks = header[1];

        var _offset2 = uint8.length - (header.reduce(function (a, b) {
          return a + b;
        }, 0) - (header[0] + header[1] + header[2] + header[3]));

        for (var i = 0; i < nbBlocks; i++) {
          var blockSize = header[4 + i];
          var compressedBlock = new Uint8Array(uint8.buffer, _offset2, blockSize);
          uncompressBlock(compressedBlock, output);
          _offset2 += blockSize;
        } // Handle (u)int64 hoping for no overflow...


        if (dataType.indexOf('Int64') !== -1) {
          values = integer64to32(values);
        }
      } else {
        values = new TYPED_ARRAY[dataType](uint8.buffer, TYPED_ARRAY_BYTES[headerType]); // Skip the count
        // Handle (u)int64 hoping no overflow...

        if (dataType.indexOf('Int64') !== -1) {
          values = integer64to32(values);
        }
      }
    } else if (format === 'appended') {
      var _offset3 = Number(dataArrayElem.getAttribute('offset')); // read header
      // NOTE: this will incorrectly read the size if headerType is (U)Int64 and
      // the value requires (U)Int64.


      var _header;

      if (_offset3 % TYPED_ARRAY_BYTES[headerType] === 0) {
        _header = new TYPED_ARRAY[headerType](binaryBuffer, _offset3, 1);
      } else {
        _header = new TYPED_ARRAY[headerType](binaryBuffer.slice(_offset3, _offset3 + TYPED_ARRAY_BYTES[headerType]));
      }

      var arraySize = _header[0] / TYPED_ARRAY_BYTES[dataType]; // if we are dealing with Uint64, we need to get double the values since
      // TYPED_ARRAY[Uint64] is Uint32.

      if (dataType.indexOf('Int64') !== -1) {
        arraySize *= 2;
      }

      _offset3 += TYPED_ARRAY_BYTES[headerType]; // read values
      // if offset is aligned to dataType, use view. Otherwise, slice due to misalignment.

      if (_offset3 % TYPED_ARRAY_BYTES[dataType] === 0) {
        values = new TYPED_ARRAY[dataType](binaryBuffer, _offset3, arraySize);
      } else {
        values = new TYPED_ARRAY[dataType](binaryBuffer.slice(_offset3, _offset3 + _header[0]));
      } // remove higher order 32 bits assuming they're not used.


      if (dataType.indexOf('Int64') !== -1) {
        values = integer64to32(values);
      }
    } else {
      console.error('Format not supported', format);
    }

    return {
      name: name,
      values: values,
      numberOfComponents: numberOfComponents
    };
  } // ----------------------------------------------------------------------------


  function processCells(size, containerElem, compressor, byteOrder, headerType, binaryBuffer) {
    var arrayElems = {};
    var dataArrayElems = containerElem.getElementsByTagName('DataArray');

    for (var elIdx = 0; elIdx < dataArrayElems.length; elIdx++) {
      var el = dataArrayElems[elIdx];
      arrayElems[el.getAttribute('Name')] = el;
    }

    var offsets = processDataArray(size, arrayElems.offsets, compressor, byteOrder, headerType, binaryBuffer).values;
    var connectivitySize = offsets[offsets.length - 1];
    var connectivity = processDataArray(connectivitySize, arrayElems.connectivity, compressor, byteOrder, headerType, binaryBuffer).values;
    var values = new Uint32Array(size + connectivitySize);
    var writeOffset = 0;
    var previousOffset = 0;
    offsets.forEach(function (v) {
      var cellSize = v - previousOffset;
      values[writeOffset++] = cellSize;

      for (var i = 0; i < cellSize; i++) {
        values[writeOffset++] = connectivity[previousOffset + i];
      } // save previous offset


      previousOffset = v;
    });
    return values;
  } // ----------------------------------------------------------------------------


  function processFieldData(size, fieldElem, fieldContainer, compressor, byteOrder, headerType, binaryBuffer) {
    if (fieldElem) {
      var attributes = ['Scalars', 'Vectors', 'Normals', 'Tensors', 'TCoords'];
      var nameBinding = {};
      attributes.forEach(function (attrName) {
        var arrayName = fieldElem.getAttribute(attrName);

        if (arrayName) {
          nameBinding[arrayName] = fieldContainer["set".concat(attrName)];
        }
      });
      var dataArrayElems = fieldElem.getElementsByTagName('DataArray');
      var nbArrays = dataArrayElems.length;

      for (var idx = 0; idx < nbArrays; idx++) {
        var array = dataArrayElems[idx];
        var dataArray = vtkDataArray$1.newInstance(processDataArray(size, array, compressor, byteOrder, headerType, binaryBuffer));
        var name = dataArray.getName();
        (nameBinding[name] || fieldContainer.addArray)(dataArray);
      }
    }
  } // ----------------------------------------------------------------------------


  function handleFieldDataArrays(fieldDataElem, compressor, byteOrder, headerType, binaryBuffer) {
    return _toConsumableArray(fieldDataElem.getElementsByTagName('DataArray')).map(function (daElem) {
      return vtkDataArray$1.newInstance(processDataArray(Number(daElem.getAttribute('NumberOfTuples')), daElem, compressor, byteOrder, headerType, binaryBuffer));
    });
  } // ----------------------------------------------------------------------------
  // vtkXMLReader methods
  // ----------------------------------------------------------------------------


  function vtkXMLReader(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkXMLReader'); // Create default dataAccessHelper if not available

    if (!model.dataAccessHelper) {
      model.dataAccessHelper = DataAccessHelper.get('http');
    } // Internal method to fetch Array


    function fetchData(url) {
      var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return model.dataAccessHelper.fetchBinary(url, option);
    } // Set DataSet url


    publicAPI.setUrl = function (url) {
      var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      model.url = url; // Remove the file in the URL

      var path = url.split('/');
      path.pop();
      model.baseURL = path.join('/'); // Fetch metadata

      return publicAPI.loadData(option);
    }; // Fetch the actual data arrays


    publicAPI.loadData = function () {
      var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return fetchData(model.url, option).then(publicAPI.parseAsArrayBuffer);
    };

    publicAPI.parseAsArrayBuffer = function (arrayBuffer) {
      if (!arrayBuffer) {
        return false;
      }

      if (arrayBuffer !== model.rawDataBuffer) {
        publicAPI.modified();
      } else {
        return true;
      }

      var _extractAppendedData = extractAppendedData(arrayBuffer),
          content = _extractAppendedData.text,
          binaryBuffer = _extractAppendedData.binaryBuffer;

      model.rawDataBuffer = arrayBuffer;
      model.binaryBuffer = binaryBuffer; // Parse data here...

      var doc = parseXML(content);
      var rootElem = doc.root().node;
      var type = rootElem.getAttribute('type');
      var compressor = rootElem.getAttribute('compressor');
      var byteOrder = rootElem.getAttribute('byte_order'); // default to UInt32. I think version 0.1 vtp/vti files default to UInt32.

      var headerType = rootElem.getAttribute('header_type') || 'UInt32';

      if (compressor && compressor !== 'vtkZLibDataCompressor') {
        console.error('Invalid compressor', compressor);
        return false;
      }

      if (byteOrder && byteOrder !== 'LittleEndian') {
        console.error('Only LittleEndian encoding is supported');
        return false;
      }

      if (type !== model.dataType) {
        console.error('Invalid data type', type, 'expecting', model.dataType);
        return false;
      } // appended format


      if (findFirstTag(rootElem, 'AppendedData')) {
        var appendedDataElem = findFirstTag(rootElem, 'AppendedData');
        var encoding = appendedDataElem.getAttribute('encoding');
        var arrayElems = findAllTags(rootElem, 'DataArray');
        var appendedBuffer = model.binaryBuffer;

        if (encoding === 'base64') {
          // substr(1) is to remove the '_' prefix
          appendedBuffer = appendedDataElem.textContent.trim().substr(1);
        } // get data array chunks


        var dataArrays = [];

        for (var i = 0; i < arrayElems.length; ++i) {
          var offset = Number(arrayElems[i].getAttribute('offset'));
          var nextOffset = 0;

          if (i === arrayElems.length - 1) {
            nextOffset = appendedBuffer.length || appendedBuffer.byteLength;
          } else {
            nextOffset = Number(arrayElems[i + 1].getAttribute('offset'));
          }

          if (encoding === 'base64') {
            dataArrays.push(new Uint8Array(Base64.toArrayBuffer(appendedBuffer.substring(offset, nextOffset))));
          } else {
            // encoding === 'raw'
            // Need to slice the ArrayBuffer so readerHeader() works properly
            dataArrays.push(new Uint8Array(appendedBuffer.slice(offset, nextOffset)));
          }
        }

        if (compressor === 'vtkZLibDataCompressor') {
          for (var arrayidx = 0; arrayidx < dataArrays.length; ++arrayidx) {
            var dataArray = dataArrays[arrayidx]; // Header reading
            // Refer to processDataArray() above for info on header fields

            var header = readerHeader(dataArray, headerType);
            var nbBlocks = header[1];
            var compressedOffset = dataArray.length - (header.reduce(function (a, b) {
              return a + b;
            }, 0) - (header[0] + header[1] + header[2] + header[3]));
            var _buffer = null;

            if (nbBlocks > 0) {
              // If the last block's size is labeled as 0, that means the last block
              // really has size header[2].
              if (header[3] === 0) {
                _buffer = new ArrayBuffer(header[2] * nbBlocks);
              } else {
                _buffer = new ArrayBuffer(header[2] * (nbBlocks - 1) + header[3]);
              }
            } else {
              // if there is no blocks, then default to a zero array of size 0.
              _buffer = new ArrayBuffer(0);
            } // uncompressed buffer


            var uncompressed = new Uint8Array(_buffer);
            var output = {
              offset: 0,
              uint8: uncompressed
            };

            for (var _i2 = 0; _i2 < nbBlocks; _i2++) {
              var blockSize = header[4 + _i2];
              var compressedBlock = new Uint8Array(dataArray.buffer, compressedOffset, blockSize);
              uncompressBlock(compressedBlock, output);
              compressedOffset += blockSize;
            }

            var data = new Uint8Array(uncompressed.length + TYPED_ARRAY_BYTES[headerType]); // set length header
            // TODO this does not work for lengths that are greater than the max Uint32 value.

            new TYPED_ARRAY[headerType](data.buffer, 0, 1)[0] = uncompressed.length;
            data.set(uncompressed, TYPED_ARRAY_BYTES[headerType]);
            dataArrays[arrayidx] = data;
          }
        }

        var bufferLength = dataArrays.reduce(function (acc, arr) {
          return acc + arr.length;
        }, 0);
        var buffer = new ArrayBuffer(bufferLength);
        var view = new Uint8Array(buffer);

        for (var _i3 = 0, _offset4 = 0; _i3 < dataArrays.length; ++_i3) {
          // set correct offsets
          arrayElems[_i3].setAttribute('offset', _offset4); // set final buffer data


          view.set(dataArrays[_i3], _offset4);
          _offset4 += dataArrays[_i3].length;
        }

        model.binaryBuffer = buffer;

        if (!model.binaryBuffer) {
          console.error('Processing appended data format: requires binaryBuffer to parse');
          return false;
        }
      }

      publicAPI.parseXML(rootElem, type, compressor, byteOrder, headerType);
      var datasetElem = rootElem.getElementsByTagName(type)[0];
      var fieldDataElem = datasetElem.getElementsByTagName('FieldData')[0];

      if (fieldDataElem) {
        var fieldDataArrays = handleFieldDataArrays(fieldDataElem, compressor, byteOrder, headerType, model.binaryBuffer);

        for (var _i4 = 0; _i4 < model.output.length; _i4++) {
          var fieldData = model.output[_i4].getFieldData();

          for (var j = 0; j < fieldDataArrays.length; j++) {
            fieldData.addArray(fieldDataArrays[j]);
          }
        }
      }

      return true;
    };

    publicAPI.requestData = function (inData, outData) {
      publicAPI.parseAsArrayBuffer(model.rawDataBuffer);
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$2 = {// baseURL: null,
    // dataAccessHelper: null,
    // url: null,
  }; // ----------------------------------------------------------------------------

  function extend$3(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$2, initialValues); // Build VTK API

    macro.obj(publicAPI, model);
    macro.get(publicAPI, model, ['url', 'baseURL']);
    macro.setGet(publicAPI, model, ['dataAccessHelper']);
    macro.algo(publicAPI, model, 0, 1); // vtkXMLReader methods

    vtkXMLReader(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var vtkXMLReader$1 = {
    extend: extend$3,
    processDataArray: processDataArray,
    processFieldData: processFieldData,
    processCells: processCells
  };

  // Global method
  // ----------------------------------------------------------------------------

  function handleArray(polydata, cellType, piece, compressor, byteOrder, headerType, binaryBuffer) {
    var size = Number(piece.getAttribute("NumberOf".concat(cellType)));

    if (size > 0) {
      var dataArrayElem = piece.getElementsByTagName(cellType)[0].getElementsByTagName('DataArray')[0];

      var _vtkXMLReader$process = vtkXMLReader$1.processDataArray(size, dataArrayElem, compressor, byteOrder, headerType, binaryBuffer),
          values = _vtkXMLReader$process.values,
          numberOfComponents = _vtkXMLReader$process.numberOfComponents;

      polydata["get".concat(cellType)]().setData(values, numberOfComponents);
    }

    return size;
  } // ----------------------------------------------------------------------------


  function handleCells(polydata, cellType, piece, compressor, byteOrder, headerType, binaryBuffer) {
    var size = Number(piece.getAttribute("NumberOf".concat(cellType)));

    if (size > 0) {
      var values = vtkXMLReader$1.processCells(size, piece.getElementsByTagName(cellType)[0], compressor, byteOrder, headerType, binaryBuffer);
      polydata["get".concat(cellType)]().setData(values);
    }

    return size;
  } // ----------------------------------------------------------------------------
  // vtkXMLPolyDataReader methods
  // ----------------------------------------------------------------------------


  function vtkXMLPolyDataReader(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkXMLPolyDataReader');

    publicAPI.parseXML = function (rootElem, type, compressor, byteOrder, headerType) {
      var datasetElem = rootElem.getElementsByTagName(model.dataType)[0];
      var pieces = datasetElem.getElementsByTagName('Piece');
      var nbPieces = pieces.length;

      var _loop = function _loop(outputIndex) {
        // Create dataset
        var polydata = vtkPolyData$1.newInstance();
        var piece = pieces[outputIndex]; // Points

        var nbPoints = handleArray(polydata, 'Points', piece, compressor, byteOrder, headerType, model.binaryBuffer); // Cells

        var nbCells = 0;
        ['Verts', 'Lines', 'Strips', 'Polys'].forEach(function (cellType) {
          nbCells += handleCells(polydata, cellType, piece, compressor, byteOrder, headerType, model.binaryBuffer);
        }); // Fill data

        vtkXMLReader$1.processFieldData(nbPoints, piece.getElementsByTagName('PointData')[0], polydata.getPointData(), compressor, byteOrder, headerType, model.binaryBuffer);
        vtkXMLReader$1.processFieldData(nbCells, piece.getElementsByTagName('CellData')[0], polydata.getCellData(), compressor, byteOrder, headerType, model.binaryBuffer); // Add new output

        model.output[outputIndex] = polydata;
      };

      for (var outputIndex = 0; outputIndex < nbPieces; outputIndex++) {
        _loop(outputIndex);
      }
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES$1 = {
    dataType: 'PolyData'
  }; // ----------------------------------------------------------------------------

  function extend$2(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES$1, initialValues);
    vtkXMLReader$1.extend(publicAPI, model, initialValues);
    vtkXMLPolyDataReader(publicAPI, model);
  } // ----------------------------------------------------------------------------

  var newInstance$1 = macro.newInstance(extend$2, 'vtkXMLPolyDataReader'); // ----------------------------------------------------------------------------

  var vtkXMLPolyDataReader$1 = {
    newInstance: newInstance$1,
    extend: extend$2
  };

  // import 'vtk.js/Sources/IO/Core/DataAccessHelper/HttpDataAccessHelper'; // HTTP + zip
  // import 'vtk.js/Sources/IO/Core/DataAccessHelper/HtmlDataAccessHelper'; // html + base64 + zip
  // import 'vtk.js/Sources/IO/Core/DataAccessHelper/JSZipDataAccessHelper'; // zip

  var PLYFormats = {
    ASCII: 'ascii',
    BINARY_BIG_ENDIAN: 'binary_big_endian',
    BINARY_LITTLE_ENDIAN: 'binary_little_endian'
  };
  var mapping = {
    diffuse_red: 'red',
    diffuse_green: 'green',
    diffuse_blue: 'blue'
  };
  var patterns = {
    patternHeader: /ply([\s\S]*)end_header\r?\n/,
    patternBody: /end_header\s([\s\S]*)$/
  };

  function parseHeader(data) {
    var headerText = '';
    var headerLength = 0;
    var result = patterns.patternHeader.exec(data);

    if (result !== null) {
      headerText = result[1];
      headerLength = result[0].length;
    }

    var header = {
      comments: [],
      elements: [],
      headerLength: headerLength
    };
    var lines = headerText.split('\n');
    var elem;
    var lineType;
    var lineValues;

    for (var i = 0; i < lines.length; i++) {
      var line = lines[i];
      line = line.trim();

      if (line !== '') {
        var property = void 0;
        lineValues = line.split(/\s+/);
        lineType = lineValues.shift();
        line = lineValues.join(' ');

        switch (lineType) {
          case 'format':
            header.format = lineValues[0];
            header.version = lineValues[1];
            break;

          case 'comment':
            header.comments.push(line);
            break;

          case 'element':
            if (elem !== undefined) {
              header.elements.push(elem);
            }

            elem = {};
            elem.name = lineValues[0];
            elem.count = parseInt(lineValues[1], 10);
            elem.properties = [];
            break;

          case 'property':
            property = {
              type: lineValues[0]
            };

            if (property.type === 'list') {
              property.name = lineValues[3];
              property.countType = lineValues[1];
              property.itemType = lineValues[2];
            } else {
              property.name = lineValues[1];
            }

            if (property.name in mapping) {
              property.name = mapping[property.name];
            }

            elem.properties.push(property);
            break;

          case 'obj_info':
            header.objInfo = line;
            break;

          default:
            console.warn('unhandled', lineType, lineValues);
            break;
        }
      }
    }

    if (elem !== undefined) {
      header.elements.push(elem);
    }

    return header;
  }

  function postProcess(buffer, elements) {
    var vertElement = elements.find(function (element) {
      return element.name === 'vertex';
    });
    var faceElement = elements.find(function (element) {
      return element.name === 'face';
    });
    var nbVerts = 0;
    var nbFaces = 0;

    if (vertElement) {
      nbVerts = vertElement.count;
    }

    if (faceElement) {
      nbFaces = faceElement.count;
    }

    var pointValues = new Float32Array(nbVerts * 3);
    var colorArray = new Uint8Array(nbVerts * 3);
    var tcoordsArray = new Float32Array(nbVerts * 2);
    var normalsArray = new Float32Array(nbVerts * 3);
    var hasColor = buffer.colors.length > 0;
    var hasVertTCoords = buffer.uvs.length > 0;
    var hasNorms = buffer.normals.length > 0;
    var hasFaceTCoords = buffer.faceVertexUvs.length > 0;

    for (var vertIdx = 0; vertIdx < nbVerts; vertIdx++) {
      var a = vertIdx * 3 + 0;
      var b = vertIdx * 3 + 1;
      var c = vertIdx * 3 + 2;
      pointValues[a] = buffer.vertices[a];
      pointValues[b] = buffer.vertices[b];
      pointValues[c] = buffer.vertices[c];

      if (hasColor) {
        colorArray[a] = buffer.colors[a];
        colorArray[b] = buffer.colors[b];
        colorArray[c] = buffer.colors[c];
      }

      if (hasVertTCoords) {
        a = vertIdx * 2 + 0;
        b = vertIdx * 2 + 1;
        tcoordsArray[a] = buffer.uvs[a];
        tcoordsArray[b] = buffer.uvs[b];
      }

      if (hasNorms) {
        normalsArray[a] = buffer.normals[a];
        normalsArray[b] = buffer.normals[b];
        normalsArray[c] = buffer.normals[c];
      }
    }

    if (!hasVertTCoords && hasFaceTCoords) {
      // don't use array.shift, because buffer.indices will be used later
      var idxVerts = 0;
      var idxCoord = 0;

      for (var faceIdx = 0; faceIdx < nbFaces; ++faceIdx) {
        var nbFaceVerts = buffer.indices[idxVerts++];
        var texcoords = buffer.faceVertexUvs[idxCoord++];

        if (texcoords && nbFaceVerts * 2 === texcoords.length) {
          // grab the vertex index
          for (var _vertIdx = 0; _vertIdx < nbFaceVerts; ++_vertIdx) {
            var vert = buffer.indices[idxVerts++]; // new texture stored at the current face

            tcoordsArray[vert * 2 + 0] = texcoords[_vertIdx * 2 + 0];
            tcoordsArray[vert * 2 + 1] = texcoords[_vertIdx * 2 + 1];
          }
        } else {
          idxVerts += nbFaceVerts;
        }
      }
    }

    var polydata = vtkPolyData$1.newInstance();
    polydata.getPoints().setData(pointValues, 3);

    if (hasColor) {
      polydata.getPointData().setScalars(vtkDataArray$1.newInstance({
        numberOfComponents: 3,
        values: colorArray,
        name: 'Scalars'
      }));
    }

    if (hasVertTCoords || hasFaceTCoords) {
      var da = vtkDataArray$1.newInstance({
        numberOfComponents: 2,
        values: tcoordsArray,
        name: 'TextureCoordinates'
      });
      var cpd = polydata.getPointData();
      cpd.addArray(da);
      cpd.setActiveTCoords(da.getName());
    }

    if (hasNorms) {
      polydata.getPointData().setNormals(vtkDataArray$1.newInstance({
        numberOfComponents: 3,
        name: 'Normals',
        values: normalsArray
      }));
    }

    polydata.getPolys().setData(Uint32Array.from(buffer.indices));
    return polydata;
  }

  function parseNumber(n, type) {
    var r;

    switch (type) {
      case 'char':
      case 'uchar':
      case 'short':
      case 'ushort':
      case 'int':
      case 'uint':
      case 'int8':
      case 'uint8':
      case 'int16':
      case 'uint16':
      case 'int32':
      case 'uint32':
        r = parseInt(n, 10);
        break;

      case 'float':
      case 'double':
      case 'float32':
      case 'float64':
        r = parseFloat(n);
        break;

      default:
        console.log('Unsupported type');
        break;
    }

    return r;
  }

  function parseElement(properties, line) {
    var values = line.split(/\s+/);
    var element = {};

    for (var i = 0; i < properties.length; i++) {
      if (properties[i].type === 'list') {
        var list = [];
        var n = parseNumber(values.shift(), properties[i].countType);

        for (var j = 0; j < n; j++) {
          list.push(parseNumber(values.shift(), properties[i].itemType));
        }

        element[properties[i].name] = list;
      } else {
        element[properties[i].name] = parseNumber(values.shift(), properties[i].type);
      }
    }

    return element;
  }

  function handleElement(buffer, name, element) {
    if (name === 'vertex') {
      buffer.vertices.push(element.x, element.y, element.z); // Normals

      if ('nx' in element && 'ny' in element && 'nz' in element) {
        buffer.normals.push(element.nx, element.ny, element.nz);
      } // Uvs


      if ('s' in element && 't' in element) {
        buffer.uvs.push(element.s, element.t);
      } else if ('u' in element && 'v' in element) {
        buffer.uvs.push(element.u, element.v);
      } else if ('texture_u' in element && 'texture_v' in element) {
        buffer.uvs.push(element.texture_u, element.texture_v);
      } // Colors


      if ('red' in element && 'green' in element && 'blue' in element) {
        buffer.colors.push(element.red, element.green, element.blue);
      }
    } else if (name === 'face') {
      var vertexIndices = element.vertex_indices || element.vertex_index;
      var texcoord = element.texcoord;

      if (vertexIndices && vertexIndices.length > 0) {
        buffer.indices.push(vertexIndices.length);
        vertexIndices.forEach(function (val, idx) {
          buffer.indices.push(val);
        });
      }

      buffer.faceVertexUvs.push(texcoord);
    }
  }

  function binaryRead(dataview, at, type, littleEndian) {
    var r;

    switch (type) {
      case 'int8':
      case 'char':
        r = [dataview.getInt8(at), 1];
        break;

      case 'uint8':
      case 'uchar':
        r = [dataview.getUint8(at), 1];
        break;

      case 'int16':
      case 'short':
        r = [dataview.getInt16(at, littleEndian), 2];
        break;

      case 'uint16':
      case 'ushort':
        r = [dataview.getUint16(at, littleEndian), 2];
        break;

      case 'int32':
      case 'int':
        r = [dataview.getInt32(at, littleEndian), 4];
        break;

      case 'uint32':
      case 'uint':
        r = [dataview.getUint32(at, littleEndian), 4];
        break;

      case 'float32':
      case 'float':
        r = [dataview.getFloat32(at, littleEndian), 4];
        break;

      case 'float64':
      case 'double':
        r = [dataview.getFloat64(at, littleEndian), 8];
        break;

      default:
        console.log('Unsupported type');
        break;
    }

    return r;
  }

  function binaryReadElement(dataview, at, properties, littleEndian) {
    var element = {};
    var result;
    var read = 0;

    for (var i = 0; i < properties.length; i++) {
      if (properties[i].type === 'list') {
        var list = [];
        result = binaryRead(dataview, at + read, properties[i].countType, littleEndian);
        var n = result[0];
        read += result[1];

        for (var j = 0; j < n; j++) {
          result = binaryRead(dataview, at + read, properties[i].itemType, littleEndian);
          list.push(result[0]);
          read += result[1];
        }

        element[properties[i].name] = list;
      } else {
        result = binaryRead(dataview, at + read, properties[i].type, littleEndian);
        element[properties[i].name] = result[0];
        read += result[1];
      }
    }

    return [element, read];
  } // ----------------------------------------------------------------------------
  // vtkPLYReader methods
  // ----------------------------------------------------------------------------


  function vtkPLYReader(publicAPI, model) {
    // Set our className
    model.classHierarchy.push('vtkPLYReader'); // Create default dataAccessHelper if not available

    if (!model.dataAccessHelper) {
      model.dataAccessHelper = DataAccessHelper.get('http');
    } // Internal method to fetch Array


    function fetchData(url) {
      var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var compression = model.compression,
          progressCallback = model.progressCallback;

      if (option.binary) {
        return model.dataAccessHelper.fetchBinary(url, {
          compression: compression,
          progressCallback: progressCallback
        });
      }

      return model.dataAccessHelper.fetchText(publicAPI, url, {
        compression: compression,
        progressCallback: progressCallback
      });
    } // Set DataSet url


    publicAPI.setUrl = function (url) {
      var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        binary: true
      };
      model.url = url; // Remove the file in the URL

      var path = url.split('/');
      path.pop();
      model.baseURL = path.join('/');
      model.compression = option.compression; // Fetch metadata

      return publicAPI.loadData({
        progressCallback: option.progressCallback,
        binary: !!option.binary
      });
    }; // Fetch the actual data arrays


    publicAPI.loadData = function () {
      var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var promise = fetchData(model.url, option);
      promise.then(publicAPI.parse);
      return promise;
    };

    publicAPI.parse = function (content) {
      if (typeof content === 'string') {
        publicAPI.parseAsText(content);
      } else {
        publicAPI.parseAsArrayBuffer(content);
      }
    };

    publicAPI.parseAsArrayBuffer = function (content) {
      if (!content) {
        return;
      }

      if (content !== model.parseData) {
        publicAPI.modified();
      } else {
        return;
      } // Header


      var text = BinaryHelper.arrayBufferToString(content);
      var header = parseHeader(text); // ascii/binary detection

      var isBinary = header.format !== PLYFormats.ASCII; // Check if ascii format

      if (!isBinary) {
        publicAPI.parseAsText(content);
        return;
      }

      model.parseData = content; // Binary parsing

      var buffer = {
        indices: [],
        vertices: [],
        normals: [],
        uvs: [],
        faceVertexUvs: [],
        colors: []
      };
      var littleEndian = header.format === PLYFormats.BINARY_LITTLE_ENDIAN;
      var arraybuffer = content instanceof ArrayBuffer ? content : content.buffer;
      var body = new DataView(arraybuffer, header.headerLength);
      var result;
      var loc = 0;

      for (var elem = 0; elem < header.elements.length; elem++) {
        for (var idx = 0; idx < header.elements[elem].count; idx++) {
          result = binaryReadElement(body, loc, header.elements[elem].properties, littleEndian);
          loc += result[1];
          var element = result[0];
          handleElement(buffer, header.elements[elem].name, element);
        }
      }

      var polydata = postProcess(buffer, header.elements); // Add new output

      model.output[0] = polydata;
    };

    publicAPI.parseAsText = function (content) {
      if (!content) {
        return;
      }

      if (content !== model.parseData) {
        publicAPI.modified();
      } else {
        return;
      }

      model.parseData = content; // Header

      var text = BinaryHelper.arrayBufferToString(content);
      var header = parseHeader(text); // ascii/binary detection

      var isBinary = header.format !== PLYFormats.ASCII; // Check if ascii format

      if (isBinary) {
        publicAPI.parseAsArrayBuffer(content);
        return;
      } // Text parsing


      var buffer = {
        indices: [],
        vertices: [],
        normals: [],
        uvs: [],
        faceVertexUvs: [],
        colors: []
      };
      var result = patterns.patternBody.exec(text);
      var body = '';

      if (result !== null) {
        body = result[1];
      }

      var lines = body.split('\n');
      var elem = 0;
      var idx = 0;

      for (var i = 0; i < lines.length; i++) {
        var line = lines[i];
        line = line.trim();

        if (line !== '') {
          if (idx >= header.elements[elem].count) {
            elem++;
            idx = 0;
          }

          var element = parseElement(header.elements[elem].properties, line);
          handleElement(buffer, header.elements[elem].name, element);
          idx++;
        }
      }

      var polydata = postProcess(buffer, header.elements); // Add new output

      model.output[0] = polydata;
    };

    publicAPI.requestData = function (inData, outData) {
      publicAPI.parse(model.parseData);
    };
  } // ----------------------------------------------------------------------------
  // Object factory
  // ----------------------------------------------------------------------------


  var DEFAULT_VALUES = {// baseURL: null,
    // dataAccessHelper: null,
    // url: null,
  }; // ----------------------------------------------------------------------------

  function extend$1(publicAPI, model) {
    var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

    macro.obj(publicAPI, model);
    macro.get(publicAPI, model, ['url', 'baseURL']);
    macro.setGet(publicAPI, model, ['dataAccessHelper']);
    macro.algo(publicAPI, model, 0, 1); // vtkPLYReader methods

    vtkPLYReader(publicAPI, model); // To support destructuring

    if (!model.compression) {
      model.compression = null;
    }

    if (!model.progressCallback) {
      model.progressCallback = null;
    }
  } // ----------------------------------------------------------------------------

  var newInstance = macro.newInstance(extend$1, 'vtkPLYReader'); // ----------------------------------------------------------------------------

  var vtkPLYReader$1 = {
    extend: extend$1,
    newInstance: newInstance
  };

  var bind = function bind(fn, thisArg) {
    return function wrap() {
      var args = new Array(arguments.length);
      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }
      return fn.apply(thisArg, args);
    };
  };

  // utils is a library of generic helper functions non-specific to axios

  var toString = Object.prototype.toString;

  /**
   * Determine if a value is an Array
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is an Array, otherwise false
   */
  function isArray(val) {
    return toString.call(val) === '[object Array]';
  }

  /**
   * Determine if a value is undefined
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if the value is undefined, otherwise false
   */
  function isUndefined(val) {
    return typeof val === 'undefined';
  }

  /**
   * Determine if a value is a Buffer
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Buffer, otherwise false
   */
  function isBuffer(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
      && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
  }

  /**
   * Determine if a value is an ArrayBuffer
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is an ArrayBuffer, otherwise false
   */
  function isArrayBuffer(val) {
    return toString.call(val) === '[object ArrayBuffer]';
  }

  /**
   * Determine if a value is a FormData
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is an FormData, otherwise false
   */
  function isFormData(val) {
    return (typeof FormData !== 'undefined') && (val instanceof FormData);
  }

  /**
   * Determine if a value is a view on an ArrayBuffer
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
   */
  function isArrayBufferView(val) {
    var result;
    if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
      result = ArrayBuffer.isView(val);
    } else {
      result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
    }
    return result;
  }

  /**
   * Determine if a value is a String
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a String, otherwise false
   */
  function isString(val) {
    return typeof val === 'string';
  }

  /**
   * Determine if a value is a Number
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Number, otherwise false
   */
  function isNumber(val) {
    return typeof val === 'number';
  }

  /**
   * Determine if a value is an Object
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is an Object, otherwise false
   */
  function isObject(val) {
    return val !== null && typeof val === 'object';
  }

  /**
   * Determine if a value is a plain Object
   *
   * @param {Object} val The value to test
   * @return {boolean} True if value is a plain Object, otherwise false
   */
  function isPlainObject(val) {
    if (toString.call(val) !== '[object Object]') {
      return false;
    }

    var prototype = Object.getPrototypeOf(val);
    return prototype === null || prototype === Object.prototype;
  }

  /**
   * Determine if a value is a Date
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Date, otherwise false
   */
  function isDate(val) {
    return toString.call(val) === '[object Date]';
  }

  /**
   * Determine if a value is a File
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a File, otherwise false
   */
  function isFile(val) {
    return toString.call(val) === '[object File]';
  }

  /**
   * Determine if a value is a Blob
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Blob, otherwise false
   */
  function isBlob(val) {
    return toString.call(val) === '[object Blob]';
  }

  /**
   * Determine if a value is a Function
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Function, otherwise false
   */
  function isFunction(val) {
    return toString.call(val) === '[object Function]';
  }

  /**
   * Determine if a value is a Stream
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Stream, otherwise false
   */
  function isStream(val) {
    return isObject(val) && isFunction(val.pipe);
  }

  /**
   * Determine if a value is a URLSearchParams object
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a URLSearchParams object, otherwise false
   */
  function isURLSearchParams(val) {
    return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
  }

  /**
   * Trim excess whitespace off the beginning and end of a string
   *
   * @param {String} str The String to trim
   * @returns {String} The String freed of excess whitespace
   */
  function trim(str) {
    return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
  }

  /**
   * Determine if we're running in a standard browser environment
   *
   * This allows axios to run in a web worker, and react-native.
   * Both environments support XMLHttpRequest, but not fully standard globals.
   *
   * web workers:
   *  typeof window -> undefined
   *  typeof document -> undefined
   *
   * react-native:
   *  navigator.product -> 'ReactNative'
   * nativescript
   *  navigator.product -> 'NativeScript' or 'NS'
   */
  function isStandardBrowserEnv() {
    if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                             navigator.product === 'NativeScript' ||
                                             navigator.product === 'NS')) {
      return false;
    }
    return (
      typeof window !== 'undefined' &&
      typeof document !== 'undefined'
    );
  }

  /**
   * Iterate over an Array or an Object invoking a function for each item.
   *
   * If `obj` is an Array callback will be called passing
   * the value, index, and complete array for each item.
   *
   * If 'obj' is an Object callback will be called passing
   * the value, key, and complete object for each property.
   *
   * @param {Object|Array} obj The object to iterate
   * @param {Function} fn The callback to invoke for each item
   */
  function forEach(obj, fn) {
    // Don't bother if no value provided
    if (obj === null || typeof obj === 'undefined') {
      return;
    }

    // Force an array if not already something iterable
    if (typeof obj !== 'object') {
      /*eslint no-param-reassign:0*/
      obj = [obj];
    }

    if (isArray(obj)) {
      // Iterate over array values
      for (var i = 0, l = obj.length; i < l; i++) {
        fn.call(null, obj[i], i, obj);
      }
    } else {
      // Iterate over object keys
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          fn.call(null, obj[key], key, obj);
        }
      }
    }
  }

  /**
   * Accepts varargs expecting each argument to be an object, then
   * immutably merges the properties of each object and returns result.
   *
   * When multiple objects contain the same key the later object in
   * the arguments list will take precedence.
   *
   * Example:
   *
   * ```js
   * var result = merge({foo: 123}, {foo: 456});
   * console.log(result.foo); // outputs 456
   * ```
   *
   * @param {Object} obj1 Object to merge
   * @returns {Object} Result of all merge properties
   */
  function merge(/* obj1, obj2, obj3, ... */) {
    var result = {};
    function assignValue(val, key) {
      if (isPlainObject(result[key]) && isPlainObject(val)) {
        result[key] = merge(result[key], val);
      } else if (isPlainObject(val)) {
        result[key] = merge({}, val);
      } else if (isArray(val)) {
        result[key] = val.slice();
      } else {
        result[key] = val;
      }
    }

    for (var i = 0, l = arguments.length; i < l; i++) {
      forEach(arguments[i], assignValue);
    }
    return result;
  }

  /**
   * Extends object a by mutably adding to it the properties of object b.
   *
   * @param {Object} a The object to be extended
   * @param {Object} b The object to copy properties from
   * @param {Object} thisArg The object to bind function to
   * @return {Object} The resulting value of object a
   */
  function extend(a, b, thisArg) {
    forEach(b, function assignValue(val, key) {
      if (thisArg && typeof val === 'function') {
        a[key] = bind(val, thisArg);
      } else {
        a[key] = val;
      }
    });
    return a;
  }

  /**
   * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
   *
   * @param {string} content with BOM
   * @return {string} content value without BOM
   */
  function stripBOM(content) {
    if (content.charCodeAt(0) === 0xFEFF) {
      content = content.slice(1);
    }
    return content;
  }

  var utils = {
    isArray: isArray,
    isArrayBuffer: isArrayBuffer,
    isBuffer: isBuffer,
    isFormData: isFormData,
    isArrayBufferView: isArrayBufferView,
    isString: isString,
    isNumber: isNumber,
    isObject: isObject,
    isPlainObject: isPlainObject,
    isUndefined: isUndefined,
    isDate: isDate,
    isFile: isFile,
    isBlob: isBlob,
    isFunction: isFunction,
    isStream: isStream,
    isURLSearchParams: isURLSearchParams,
    isStandardBrowserEnv: isStandardBrowserEnv,
    forEach: forEach,
    merge: merge,
    extend: extend,
    trim: trim,
    stripBOM: stripBOM
  };

  function encode(val) {
    return encodeURIComponent(val).
      replace(/%3A/gi, ':').
      replace(/%24/g, '$').
      replace(/%2C/gi, ',').
      replace(/%20/g, '+').
      replace(/%5B/gi, '[').
      replace(/%5D/gi, ']');
  }

  /**
   * Build a URL by appending params to the end
   *
   * @param {string} url The base of the url (e.g., http://www.google.com)
   * @param {object} [params] The params to be appended
   * @returns {string} The formatted url
   */
  var buildURL = function buildURL(url, params, paramsSerializer) {
    /*eslint no-param-reassign:0*/
    if (!params) {
      return url;
    }

    var serializedParams;
    if (paramsSerializer) {
      serializedParams = paramsSerializer(params);
    } else if (utils.isURLSearchParams(params)) {
      serializedParams = params.toString();
    } else {
      var parts = [];

      utils.forEach(params, function serialize(val, key) {
        if (val === null || typeof val === 'undefined') {
          return;
        }

        if (utils.isArray(val)) {
          key = key + '[]';
        } else {
          val = [val];
        }

        utils.forEach(val, function parseValue(v) {
          if (utils.isDate(v)) {
            v = v.toISOString();
          } else if (utils.isObject(v)) {
            v = JSON.stringify(v);
          }
          parts.push(encode(key) + '=' + encode(v));
        });
      });

      serializedParams = parts.join('&');
    }

    if (serializedParams) {
      var hashmarkIndex = url.indexOf('#');
      if (hashmarkIndex !== -1) {
        url = url.slice(0, hashmarkIndex);
      }

      url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
    }

    return url;
  };

  function InterceptorManager() {
    this.handlers = [];
  }

  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled: fulfilled,
      rejected: rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  };

  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   */
  InterceptorManager.prototype.eject = function eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  };

  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   */
  InterceptorManager.prototype.forEach = function forEach(fn) {
    utils.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  };

  var InterceptorManager_1 = InterceptorManager;

  var normalizeHeaderName = function normalizeHeaderName(headers, normalizedName) {
    utils.forEach(headers, function processHeader(value, name) {
      if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
        headers[normalizedName] = value;
        delete headers[name];
      }
    });
  };

  /**
   * Update an Error with the specified config, error code, and response.
   *
   * @param {Error} error The error to update.
   * @param {Object} config The config.
   * @param {string} [code] The error code (for example, 'ECONNABORTED').
   * @param {Object} [request] The request.
   * @param {Object} [response] The response.
   * @returns {Error} The error.
   */
  var enhanceError = function enhanceError(error, config, code, request, response) {
    error.config = config;
    if (code) {
      error.code = code;
    }

    error.request = request;
    error.response = response;
    error.isAxiosError = true;

    error.toJSON = function toJSON() {
      return {
        // Standard
        message: this.message,
        name: this.name,
        // Microsoft
        description: this.description,
        number: this.number,
        // Mozilla
        fileName: this.fileName,
        lineNumber: this.lineNumber,
        columnNumber: this.columnNumber,
        stack: this.stack,
        // Axios
        config: this.config,
        code: this.code
      };
    };
    return error;
  };

  /**
   * Create an Error with the specified message, config, error code, request and response.
   *
   * @param {string} message The error message.
   * @param {Object} config The config.
   * @param {string} [code] The error code (for example, 'ECONNABORTED').
   * @param {Object} [request] The request.
   * @param {Object} [response] The response.
   * @returns {Error} The created error.
   */
  var createError = function createError(message, config, code, request, response) {
    var error = new Error(message);
    return enhanceError(error, config, code, request, response);
  };

  /**
   * Resolve or reject a Promise based on response status.
   *
   * @param {Function} resolve A function that resolves the promise.
   * @param {Function} reject A function that rejects the promise.
   * @param {object} response The response.
   */
  var settle = function settle(resolve, reject, response) {
    var validateStatus = response.config.validateStatus;
    if (!response.status || !validateStatus || validateStatus(response.status)) {
      resolve(response);
    } else {
      reject(createError(
        'Request failed with status code ' + response.status,
        response.config,
        null,
        response.request,
        response
      ));
    }
  };

  var cookies = (
    utils.isStandardBrowserEnv() ?

    // Standard browser envs support document.cookie
      (function standardBrowserEnv() {
        return {
          write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + '=' + encodeURIComponent(value));

            if (utils.isNumber(expires)) {
              cookie.push('expires=' + new Date(expires).toGMTString());
            }

            if (utils.isString(path)) {
              cookie.push('path=' + path);
            }

            if (utils.isString(domain)) {
              cookie.push('domain=' + domain);
            }

            if (secure === true) {
              cookie.push('secure');
            }

            document.cookie = cookie.join('; ');
          },

          read: function read(name) {
            var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
            return (match ? decodeURIComponent(match[3]) : null);
          },

          remove: function remove(name) {
            this.write(name, '', Date.now() - 86400000);
          }
        };
      })() :

    // Non standard browser env (web workers, react-native) lack needed support.
      (function nonStandardBrowserEnv() {
        return {
          write: function write() {},
          read: function read() { return null; },
          remove: function remove() {}
        };
      })()
  );

  /**
   * Determines whether the specified URL is absolute
   *
   * @param {string} url The URL to test
   * @returns {boolean} True if the specified URL is absolute, otherwise false
   */
  var isAbsoluteURL = function isAbsoluteURL(url) {
    // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
    // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
    // by any combination of letters, digits, plus, period, or hyphen.
    return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
  };

  /**
   * Creates a new URL by combining the specified URLs
   *
   * @param {string} baseURL The base URL
   * @param {string} relativeURL The relative URL
   * @returns {string} The combined URL
   */
  var combineURLs = function combineURLs(baseURL, relativeURL) {
    return relativeURL
      ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
      : baseURL;
  };

  /**
   * Creates a new URL by combining the baseURL with the requestedURL,
   * only when the requestedURL is not already an absolute URL.
   * If the requestURL is absolute, this function returns the requestedURL untouched.
   *
   * @param {string} baseURL The base URL
   * @param {string} requestedURL Absolute or relative URL to combine
   * @returns {string} The combined full path
   */
  var buildFullPath = function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) {
      return combineURLs(baseURL, requestedURL);
    }
    return requestedURL;
  };

  // Headers whose duplicates are ignored by node
  // c.f. https://nodejs.org/api/http.html#http_message_headers
  var ignoreDuplicateOf = [
    'age', 'authorization', 'content-length', 'content-type', 'etag',
    'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
    'last-modified', 'location', 'max-forwards', 'proxy-authorization',
    'referer', 'retry-after', 'user-agent'
  ];

  /**
   * Parse headers into an object
   *
   * ```
   * Date: Wed, 27 Aug 2014 08:58:49 GMT
   * Content-Type: application/json
   * Connection: keep-alive
   * Transfer-Encoding: chunked
   * ```
   *
   * @param {String} headers Headers needing to be parsed
   * @returns {Object} Headers parsed into an object
   */
  var parseHeaders = function parseHeaders(headers) {
    var parsed = {};
    var key;
    var val;
    var i;

    if (!headers) { return parsed; }

    utils.forEach(headers.split('\n'), function parser(line) {
      i = line.indexOf(':');
      key = utils.trim(line.substr(0, i)).toLowerCase();
      val = utils.trim(line.substr(i + 1));

      if (key) {
        if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
          return;
        }
        if (key === 'set-cookie') {
          parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
        }
      }
    });

    return parsed;
  };

  var isURLSameOrigin = (
    utils.isStandardBrowserEnv() ?

    // Standard browser envs have full support of the APIs needed to test
    // whether the request URL is of the same origin as current location.
      (function standardBrowserEnv() {
        var msie = /(msie|trident)/i.test(navigator.userAgent);
        var urlParsingNode = document.createElement('a');
        var originURL;

        /**
      * Parse a URL to discover it's components
      *
      * @param {String} url The URL to be parsed
      * @returns {Object}
      */
        function resolveURL(url) {
          var href = url;

          if (msie) {
          // IE needs attribute set twice to normalize properties
            urlParsingNode.setAttribute('href', href);
            href = urlParsingNode.href;
          }

          urlParsingNode.setAttribute('href', href);

          // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
              urlParsingNode.pathname :
              '/' + urlParsingNode.pathname
          };
        }

        originURL = resolveURL(window.location.href);

        /**
      * Determine if a URL shares the same origin as the current location
      *
      * @param {String} requestURL The URL to test
      * @returns {boolean} True if URL shares the same origin, otherwise false
      */
        return function isURLSameOrigin(requestURL) {
          var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
          return (parsed.protocol === originURL.protocol &&
              parsed.host === originURL.host);
        };
      })() :

    // Non standard browser envs (web workers, react-native) lack needed support.
      (function nonStandardBrowserEnv() {
        return function isURLSameOrigin() {
          return true;
        };
      })()
  );

  var xhr = function xhrAdapter(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
      var requestData = config.data;
      var requestHeaders = config.headers;
      var responseType = config.responseType;

      if (utils.isFormData(requestData)) {
        delete requestHeaders['Content-Type']; // Let the browser set it
      }

      var request = new XMLHttpRequest();

      // HTTP basic authentication
      if (config.auth) {
        var username = config.auth.username || '';
        var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
        requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
      }

      var fullPath = buildFullPath(config.baseURL, config.url);
      request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

      // Set the request timeout in MS
      request.timeout = config.timeout;

      function onloadend() {
        if (!request) {
          return;
        }
        // Prepare the response
        var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
        var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
          request.responseText : request.response;
        var response = {
          data: responseData,
          status: request.status,
          statusText: request.statusText,
          headers: responseHeaders,
          config: config,
          request: request
        };

        settle(resolve, reject, response);

        // Clean up request
        request = null;
      }

      if ('onloadend' in request) {
        // Use onloadend if available
        request.onloadend = onloadend;
      } else {
        // Listen for ready state to emulate onloadend
        request.onreadystatechange = function handleLoad() {
          if (!request || request.readyState !== 4) {
            return;
          }

          // The request errored out and we didn't get a response, this will be
          // handled by onerror instead
          // With one exception: request that using file: protocol, most browsers
          // will return status as 0 even though it's a successful request
          if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
            return;
          }
          // readystate handler is calling before onerror or ontimeout handlers,
          // so we should call onloadend on the next 'tick'
          setTimeout(onloadend);
        };
      }

      // Handle browser request cancellation (as opposed to a manual cancellation)
      request.onabort = function handleAbort() {
        if (!request) {
          return;
        }

        reject(createError('Request aborted', config, 'ECONNABORTED', request));

        // Clean up request
        request = null;
      };

      // Handle low level network errors
      request.onerror = function handleError() {
        // Real errors are hidden from us by the browser
        // onerror should only fire if it's a network error
        reject(createError('Network Error', config, null, request));

        // Clean up request
        request = null;
      };

      // Handle timeout
      request.ontimeout = function handleTimeout() {
        var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
        if (config.timeoutErrorMessage) {
          timeoutErrorMessage = config.timeoutErrorMessage;
        }
        reject(createError(
          timeoutErrorMessage,
          config,
          config.transitional && config.transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
          request));

        // Clean up request
        request = null;
      };

      // Add xsrf header
      // This is only done if running in a standard browser environment.
      // Specifically not if we're in a web worker, or react-native.
      if (utils.isStandardBrowserEnv()) {
        // Add xsrf header
        var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
          cookies.read(config.xsrfCookieName) :
          undefined;

        if (xsrfValue) {
          requestHeaders[config.xsrfHeaderName] = xsrfValue;
        }
      }

      // Add headers to the request
      if ('setRequestHeader' in request) {
        utils.forEach(requestHeaders, function setRequestHeader(val, key) {
          if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
            // Remove Content-Type if data is undefined
            delete requestHeaders[key];
          } else {
            // Otherwise add header to the request
            request.setRequestHeader(key, val);
          }
        });
      }

      // Add withCredentials to request if needed
      if (!utils.isUndefined(config.withCredentials)) {
        request.withCredentials = !!config.withCredentials;
      }

      // Add responseType to request if needed
      if (responseType && responseType !== 'json') {
        request.responseType = config.responseType;
      }

      // Handle progress if needed
      if (typeof config.onDownloadProgress === 'function') {
        request.addEventListener('progress', config.onDownloadProgress);
      }

      // Not all browsers support upload events
      if (typeof config.onUploadProgress === 'function' && request.upload) {
        request.upload.addEventListener('progress', config.onUploadProgress);
      }

      if (config.cancelToken) {
        // Handle cancellation
        config.cancelToken.promise.then(function onCanceled(cancel) {
          if (!request) {
            return;
          }

          request.abort();
          reject(cancel);
          // Clean up request
          request = null;
        });
      }

      if (!requestData) {
        requestData = null;
      }

      // Send the request
      request.send(requestData);
    });
  };

  var DEFAULT_CONTENT_TYPE = {
    'Content-Type': 'application/x-www-form-urlencoded'
  };

  function setContentTypeIfUnset(headers, value) {
    if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
      headers['Content-Type'] = value;
    }
  }

  function getDefaultAdapter() {
    var adapter;
    if (typeof XMLHttpRequest !== 'undefined') {
      // For browsers use XHR adapter
      adapter = xhr;
    } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
      // For node use HTTP adapter
      adapter = xhr;
    }
    return adapter;
  }

  function stringifySafely(rawValue, parser, encoder) {
    if (utils.isString(rawValue)) {
      try {
        (parser || JSON.parse)(rawValue);
        return utils.trim(rawValue);
      } catch (e) {
        if (e.name !== 'SyntaxError') {
          throw e;
        }
      }
    }

    return (encoder || JSON.stringify)(rawValue);
  }

  var defaults = {

    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },

    adapter: getDefaultAdapter(),

    transformRequest: [function transformRequest(data, headers) {
      normalizeHeaderName(headers, 'Accept');
      normalizeHeaderName(headers, 'Content-Type');

      if (utils.isFormData(data) ||
        utils.isArrayBuffer(data) ||
        utils.isBuffer(data) ||
        utils.isStream(data) ||
        utils.isFile(data) ||
        utils.isBlob(data)
      ) {
        return data;
      }
      if (utils.isArrayBufferView(data)) {
        return data.buffer;
      }
      if (utils.isURLSearchParams(data)) {
        setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
        return data.toString();
      }
      if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
        setContentTypeIfUnset(headers, 'application/json');
        return stringifySafely(data);
      }
      return data;
    }],

    transformResponse: [function transformResponse(data) {
      var transitional = this.transitional;
      var silentJSONParsing = transitional && transitional.silentJSONParsing;
      var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
      var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

      if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
        try {
          return JSON.parse(data);
        } catch (e) {
          if (strictJSONParsing) {
            if (e.name === 'SyntaxError') {
              throw enhanceError(e, this, 'E_JSON_PARSE');
            }
            throw e;
          }
        }
      }

      return data;
    }],

    /**
     * A timeout in milliseconds to abort a request. If set to 0 (default) a
     * timeout is not created.
     */
    timeout: 0,

    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',

    maxContentLength: -1,
    maxBodyLength: -1,

    validateStatus: function validateStatus(status) {
      return status >= 200 && status < 300;
    }
  };

  defaults.headers = {
    common: {
      'Accept': 'application/json, text/plain, */*'
    }
  };

  utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
    defaults.headers[method] = {};
  });

  utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
    defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
  });

  var defaults_1 = defaults;

  /**
   * Transform the data for a request or a response
   *
   * @param {Object|String} data The data to be transformed
   * @param {Array} headers The headers for the request or response
   * @param {Array|Function} fns A single function or Array of functions
   * @returns {*} The resulting transformed data
   */
  var transformData = function transformData(data, headers, fns) {
    var context = this || defaults_1;
    /*eslint no-param-reassign:0*/
    utils.forEach(fns, function transform(fn) {
      data = fn.call(context, data, headers);
    });

    return data;
  };

  var isCancel = function isCancel(value) {
    return !!(value && value.__CANCEL__);
  };

  /**
   * Throws a `Cancel` if cancellation has been requested.
   */
  function throwIfCancellationRequested(config) {
    if (config.cancelToken) {
      config.cancelToken.throwIfRequested();
    }
  }

  /**
   * Dispatch a request to the server using the configured adapter.
   *
   * @param {object} config The config that is to be used for the request
   * @returns {Promise} The Promise to be fulfilled
   */
  var dispatchRequest = function dispatchRequest(config) {
    throwIfCancellationRequested(config);

    // Ensure headers exist
    config.headers = config.headers || {};

    // Transform request data
    config.data = transformData.call(
      config,
      config.data,
      config.headers,
      config.transformRequest
    );

    // Flatten headers
    config.headers = utils.merge(
      config.headers.common || {},
      config.headers[config.method] || {},
      config.headers
    );

    utils.forEach(
      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
      function cleanHeaderConfig(method) {
        delete config.headers[method];
      }
    );

    var adapter = config.adapter || defaults_1.adapter;

    return adapter(config).then(function onAdapterResolution(response) {
      throwIfCancellationRequested(config);

      // Transform response data
      response.data = transformData.call(
        config,
        response.data,
        response.headers,
        config.transformResponse
      );

      return response;
    }, function onAdapterRejection(reason) {
      if (!isCancel(reason)) {
        throwIfCancellationRequested(config);

        // Transform response data
        if (reason && reason.response) {
          reason.response.data = transformData.call(
            config,
            reason.response.data,
            reason.response.headers,
            config.transformResponse
          );
        }
      }

      return Promise.reject(reason);
    });
  };

  /**
   * Config-specific merge-function which creates a new config-object
   * by merging two configuration objects together.
   *
   * @param {Object} config1
   * @param {Object} config2
   * @returns {Object} New object resulting from merging config2 to config1
   */
  var mergeConfig = function mergeConfig(config1, config2) {
    // eslint-disable-next-line no-param-reassign
    config2 = config2 || {};
    var config = {};

    var valueFromConfig2Keys = ['url', 'method', 'data'];
    var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
    var defaultToConfig2Keys = [
      'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',
      'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
      'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',
      'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',
      'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'
    ];
    var directMergeKeys = ['validateStatus'];

    function getMergedValue(target, source) {
      if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
        return utils.merge(target, source);
      } else if (utils.isPlainObject(source)) {
        return utils.merge({}, source);
      } else if (utils.isArray(source)) {
        return source.slice();
      }
      return source;
    }

    function mergeDeepProperties(prop) {
      if (!utils.isUndefined(config2[prop])) {
        config[prop] = getMergedValue(config1[prop], config2[prop]);
      } else if (!utils.isUndefined(config1[prop])) {
        config[prop] = getMergedValue(undefined, config1[prop]);
      }
    }

    utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
      if (!utils.isUndefined(config2[prop])) {
        config[prop] = getMergedValue(undefined, config2[prop]);
      }
    });

    utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);

    utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
      if (!utils.isUndefined(config2[prop])) {
        config[prop] = getMergedValue(undefined, config2[prop]);
      } else if (!utils.isUndefined(config1[prop])) {
        config[prop] = getMergedValue(undefined, config1[prop]);
      }
    });

    utils.forEach(directMergeKeys, function merge(prop) {
      if (prop in config2) {
        config[prop] = getMergedValue(config1[prop], config2[prop]);
      } else if (prop in config1) {
        config[prop] = getMergedValue(undefined, config1[prop]);
      }
    });

    var axiosKeys = valueFromConfig2Keys
      .concat(mergeDeepPropertiesKeys)
      .concat(defaultToConfig2Keys)
      .concat(directMergeKeys);

    var otherKeys = Object
      .keys(config1)
      .concat(Object.keys(config2))
      .filter(function filterAxiosKeys(key) {
        return axiosKeys.indexOf(key) === -1;
      });

    utils.forEach(otherKeys, mergeDeepProperties);

    return config;
  };

  var name = "axios";
  var version = "0.21.4";
  var description = "Promise based HTTP client for the browser and node.js";
  var main = "index.js";
  var scripts = {
  	test: "grunt test",
  	start: "node ./sandbox/server.js",
  	build: "NODE_ENV=production grunt build",
  	preversion: "npm test",
  	version: "npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json",
  	postversion: "git push && git push --tags",
  	examples: "node ./examples/server.js",
  	coveralls: "cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
  	fix: "eslint --fix lib/**/*.js"
  };
  var repository = {
  	type: "git",
  	url: "https://github.com/axios/axios.git"
  };
  var keywords = [
  	"xhr",
  	"http",
  	"ajax",
  	"promise",
  	"node"
  ];
  var author = "Matt Zabriskie";
  var license = "MIT";
  var bugs = {
  	url: "https://github.com/axios/axios/issues"
  };
  var homepage = "https://axios-http.com";
  var devDependencies = {
  	coveralls: "^3.0.0",
  	"es6-promise": "^4.2.4",
  	grunt: "^1.3.0",
  	"grunt-banner": "^0.6.0",
  	"grunt-cli": "^1.2.0",
  	"grunt-contrib-clean": "^1.1.0",
  	"grunt-contrib-watch": "^1.0.0",
  	"grunt-eslint": "^23.0.0",
  	"grunt-karma": "^4.0.0",
  	"grunt-mocha-test": "^0.13.3",
  	"grunt-ts": "^6.0.0-beta.19",
  	"grunt-webpack": "^4.0.2",
  	"istanbul-instrumenter-loader": "^1.0.0",
  	"jasmine-core": "^2.4.1",
  	karma: "^6.3.2",
  	"karma-chrome-launcher": "^3.1.0",
  	"karma-firefox-launcher": "^2.1.0",
  	"karma-jasmine": "^1.1.1",
  	"karma-jasmine-ajax": "^0.1.13",
  	"karma-safari-launcher": "^1.0.0",
  	"karma-sauce-launcher": "^4.3.6",
  	"karma-sinon": "^1.0.5",
  	"karma-sourcemap-loader": "^0.3.8",
  	"karma-webpack": "^4.0.2",
  	"load-grunt-tasks": "^3.5.2",
  	minimist: "^1.2.0",
  	mocha: "^8.2.1",
  	sinon: "^4.5.0",
  	"terser-webpack-plugin": "^4.2.3",
  	typescript: "^4.0.5",
  	"url-search-params": "^0.10.0",
  	webpack: "^4.44.2",
  	"webpack-dev-server": "^3.11.0"
  };
  var browser = {
  	"./lib/adapters/http.js": "./lib/adapters/xhr.js"
  };
  var jsdelivr = "dist/axios.min.js";
  var unpkg = "dist/axios.min.js";
  var typings = "./index.d.ts";
  var dependencies = {
  	"follow-redirects": "^1.14.0"
  };
  var bundlesize = [
  	{
  		path: "./dist/axios.min.js",
  		threshold: "5kB"
  	}
  ];
  var pkg = {
  	name: name,
  	version: version,
  	description: description,
  	main: main,
  	scripts: scripts,
  	repository: repository,
  	keywords: keywords,
  	author: author,
  	license: license,
  	bugs: bugs,
  	homepage: homepage,
  	devDependencies: devDependencies,
  	browser: browser,
  	jsdelivr: jsdelivr,
  	unpkg: unpkg,
  	typings: typings,
  	dependencies: dependencies,
  	bundlesize: bundlesize
  };

  var validators$1 = {};

  // eslint-disable-next-line func-names
  ['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
    validators$1[type] = function validator(thing) {
      return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
    };
  });

  var deprecatedWarnings = {};
  var currentVerArr = pkg.version.split('.');

  /**
   * Compare package versions
   * @param {string} version
   * @param {string?} thanVersion
   * @returns {boolean}
   */
  function isOlderVersion(version, thanVersion) {
    var pkgVersionArr = thanVersion ? thanVersion.split('.') : currentVerArr;
    var destVer = version.split('.');
    for (var i = 0; i < 3; i++) {
      if (pkgVersionArr[i] > destVer[i]) {
        return true;
      } else if (pkgVersionArr[i] < destVer[i]) {
        return false;
      }
    }
    return false;
  }

  /**
   * Transitional option validator
   * @param {function|boolean?} validator
   * @param {string?} version
   * @param {string} message
   * @returns {function}
   */
  validators$1.transitional = function transitional(validator, version, message) {
    var isDeprecated = version && isOlderVersion(version);

    function formatMessage(opt, desc) {
      return '[Axios v' + pkg.version + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
    }

    // eslint-disable-next-line func-names
    return function(value, opt, opts) {
      if (validator === false) {
        throw new Error(formatMessage(opt, ' has been removed in ' + version));
      }

      if (isDeprecated && !deprecatedWarnings[opt]) {
        deprecatedWarnings[opt] = true;
        // eslint-disable-next-line no-console
        console.warn(
          formatMessage(
            opt,
            ' has been deprecated since v' + version + ' and will be removed in the near future'
          )
        );
      }

      return validator ? validator(value, opt, opts) : true;
    };
  };

  /**
   * Assert object's properties type
   * @param {object} options
   * @param {object} schema
   * @param {boolean?} allowUnknown
   */

  function assertOptions(options, schema, allowUnknown) {
    if (typeof options !== 'object') {
      throw new TypeError('options must be an object');
    }
    var keys = Object.keys(options);
    var i = keys.length;
    while (i-- > 0) {
      var opt = keys[i];
      var validator = schema[opt];
      if (validator) {
        var value = options[opt];
        var result = value === undefined || validator(value, opt, options);
        if (result !== true) {
          throw new TypeError('option ' + opt + ' must be ' + result);
        }
        continue;
      }
      if (allowUnknown !== true) {
        throw Error('Unknown option ' + opt);
      }
    }
  }

  var validator = {
    isOlderVersion: isOlderVersion,
    assertOptions: assertOptions,
    validators: validators$1
  };

  var validators = validator.validators;
  /**
   * Create a new instance of Axios
   *
   * @param {Object} instanceConfig The default config for the instance
   */
  function Axios(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager_1(),
      response: new InterceptorManager_1()
    };
  }

  /**
   * Dispatch a request
   *
   * @param {Object} config The config specific for this request (merged with this.defaults)
   */
  Axios.prototype.request = function request(config) {
    /*eslint no-param-reassign:0*/
    // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof config === 'string') {
      config = arguments[1] || {};
      config.url = arguments[0];
    } else {
      config = config || {};
    }

    config = mergeConfig(this.defaults, config);

    // Set config.method
    if (config.method) {
      config.method = config.method.toLowerCase();
    } else if (this.defaults.method) {
      config.method = this.defaults.method.toLowerCase();
    } else {
      config.method = 'get';
    }

    var transitional = config.transitional;

    if (transitional !== undefined) {
      validator.assertOptions(transitional, {
        silentJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
        forcedJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
        clarifyTimeoutError: validators.transitional(validators.boolean, '1.0.0')
      }, false);
    }

    // filter out skipped interceptors
    var requestInterceptorChain = [];
    var synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
        return;
      }

      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });

    var responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });

    var promise;

    if (!synchronousRequestInterceptors) {
      var chain = [dispatchRequest, undefined];

      Array.prototype.unshift.apply(chain, requestInterceptorChain);
      chain = chain.concat(responseInterceptorChain);

      promise = Promise.resolve(config);
      while (chain.length) {
        promise = promise.then(chain.shift(), chain.shift());
      }

      return promise;
    }


    var newConfig = config;
    while (requestInterceptorChain.length) {
      var onFulfilled = requestInterceptorChain.shift();
      var onRejected = requestInterceptorChain.shift();
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected(error);
        break;
      }
    }

    try {
      promise = dispatchRequest(newConfig);
    } catch (error) {
      return Promise.reject(error);
    }

    while (responseInterceptorChain.length) {
      promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
    }

    return promise;
  };

  Axios.prototype.getUri = function getUri(config) {
    config = mergeConfig(this.defaults, config);
    return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
  };

  // Provide aliases for supported request methods
  utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
    /*eslint func-names:0*/
    Axios.prototype[method] = function(url, config) {
      return this.request(mergeConfig(config || {}, {
        method: method,
        url: url,
        data: (config || {}).data
      }));
    };
  });

  utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
    /*eslint func-names:0*/
    Axios.prototype[method] = function(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method: method,
        url: url,
        data: data
      }));
    };
  });

  var Axios_1 = Axios;

  /**
   * A `Cancel` is an object that is thrown when an operation is canceled.
   *
   * @class
   * @param {string=} message The message.
   */
  function Cancel(message) {
    this.message = message;
  }

  Cancel.prototype.toString = function toString() {
    return 'Cancel' + (this.message ? ': ' + this.message : '');
  };

  Cancel.prototype.__CANCEL__ = true;

  var Cancel_1 = Cancel;

  /**
   * A `CancelToken` is an object that can be used to request cancellation of an operation.
   *
   * @class
   * @param {Function} executor The executor function.
   */
  function CancelToken(executor) {
    if (typeof executor !== 'function') {
      throw new TypeError('executor must be a function.');
    }

    var resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });

    var token = this;
    executor(function cancel(message) {
      if (token.reason) {
        // Cancellation has already been requested
        return;
      }

      token.reason = new Cancel_1(message);
      resolvePromise(token.reason);
    });
  }

  /**
   * Throws a `Cancel` if cancellation has been requested.
   */
  CancelToken.prototype.throwIfRequested = function throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  };

  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  CancelToken.source = function source() {
    var cancel;
    var token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token: token,
      cancel: cancel
    };
  };

  var CancelToken_1 = CancelToken;

  /**
   * Syntactic sugar for invoking a function and expanding an array for arguments.
   *
   * Common use case would be to use `Function.prototype.apply`.
   *
   *  ```js
   *  function f(x, y, z) {}
   *  var args = [1, 2, 3];
   *  f.apply(null, args);
   *  ```
   *
   * With `spread` this example can be re-written.
   *
   *  ```js
   *  spread(function(x, y, z) {})([1, 2, 3]);
   *  ```
   *
   * @param {Function} callback
   * @returns {Function}
   */
  var spread = function spread(callback) {
    return function wrap(arr) {
      return callback.apply(null, arr);
    };
  };

  /**
   * Determines whether the payload is an error thrown by Axios
   *
   * @param {*} payload The value to test
   * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
   */
  var isAxiosError = function isAxiosError(payload) {
    return (typeof payload === 'object') && (payload.isAxiosError === true);
  };

  /**
   * Create an instance of Axios
   *
   * @param {Object} defaultConfig The default config for the instance
   * @return {Axios} A new instance of Axios
   */
  function createInstance(defaultConfig) {
    var context = new Axios_1(defaultConfig);
    var instance = bind(Axios_1.prototype.request, context);

    // Copy axios.prototype to instance
    utils.extend(instance, Axios_1.prototype, context);

    // Copy context to instance
    utils.extend(instance, context);

    return instance;
  }

  // Create the default instance to be exported
  var axios$1 = createInstance(defaults_1);

  // Expose Axios class to allow class inheritance
  axios$1.Axios = Axios_1;

  // Factory for creating new instances
  axios$1.create = function create(instanceConfig) {
    return createInstance(mergeConfig(axios$1.defaults, instanceConfig));
  };

  // Expose Cancel & CancelToken
  axios$1.Cancel = Cancel_1;
  axios$1.CancelToken = CancelToken_1;
  axios$1.isCancel = isCancel;

  // Expose all/spread
  axios$1.all = function all(promises) {
    return Promise.all(promises);
  };
  axios$1.spread = spread;

  // Expose isAxiosError
  axios$1.isAxiosError = isAxiosError;

  var axios_1 = axios$1;

  // Allow use of default import syntax in TypeScript
  var _default = axios$1;
  axios_1.default = _default;

  var axios = axios_1;

  // import * as ort from 'onnxruntime-web'


  //global variables?
  let sampleLatents = [];

  let m_decoderSession = null;
  let m_encoderSession = null;

  const createGenericRenderWindow = () => {
      
      
      let genericRenderWindow = vtkGenericRenderWindow$1.newInstance();    
      

      // const renderer = genericRenderWindow.getRenderer();

      // //modify camera callback?
      // const manipulators = genericRenderWindow
      //     .getInteractor()
      //     .getInteractorStyle()
      //     .getMouseManipulators();
      // for (let i = 0; i < manipulators.length; i++) {
      //     if (
      //         manipulators[i].isA(
      //             'vtkMouseCameraTrackballRotateManipulator'
      //         )
      //     ) {
      //         renderer.getActiveCamera().onModified(() => {
      //             const bds = renderer.computeVisiblePropBounds();
      //             const cen = [
      //                 (bds[0] + bds[1]) * 0.5,
      //                 (bds[2] + bds[3]) * 0.5,
      //                 (bds[4] + bds[5]) * 0.5,
      //             ];
      //             manipulators[i].setCenter(cen[0], cen[1], cen[2]);
      //         });
      //     }
      // }

      genericRenderWindow.getRenderer().setBackground(0, 0, 0, 0);        


      return genericRenderWindow;
  };



  const readArrayBuffer = async (file) =>{
      return new Promise((resolve, reject)=>{
          const filreader = new FileReader();
          filreader.onload = ()=>{
              resolve(filreader.result);
          };

          filreader.readAsArrayBuffer(file);
      })
  };

  const readPolyData = async(path) =>{    
      let filename = path.split("/");
      filename = filename[ filename.length-1 ];
      let ext = filename.split(".");
      ext = ext[ext.length -1];
      

      const response = await axios.get(path, {responseType: "blob"});    
      
      const file = new File([response.data], filename);
      const arrayBuffer = await readArrayBuffer(file);

      let reader;
      if(ext === "vtp")
          reader = vtkXMLPolyDataReader$1.newInstance();
      else if(ext === "ply")
          reader = vtkPLYReader$1.newInstance();
      reader.parseAsArrayBuffer(arrayBuffer);
      reader.update();


      // const renderingObject = await readMesh(path);
      return reader.getOutputData();
  };

  const makeActor = (polydata)=>{
      const mapper = vtkMapper$1.newInstance();
      mapper.setInputData(polydata);

      const actor = vtkActor$1.newInstance();
      actor.setMapper(mapper);

      return actor;
  };

  const warmUp = async ()=>{

      const sessionOption = { 
          executionProviders: ['wasm'] ,
          graphOptimizationLevel: "all"        
      };
      m_decoderSession = await ort.InferenceSession.create('resources/sample_checkpoint_decoder.onnx', sessionOption);
      m_encoderSession = await ort.InferenceSession.create('resources/sample_checkpoint_encoder.onnx', sessionOption);


      //calculate latents
      for(let i=0 ; i<4 ; i++){
          let sample_polydata = await readPolyData(`resources/sample_${i+1}.ply`);
          let latent = await encoder(sample_polydata);
          console.log(latent);
          sampleLatents.push(latent);
      }
  };

  const updateNormals = (polydata) =>{
      let pointsData = polydata.getPoints().getData();
      let polysData = polydata.getPolys().getData();    
      
      const normalsData = new Float32Array(pointsData.length);

      let numberOfPoints = 0;
      const polysDataLength = polysData.length;

      const cellPointIds = [0, 0, 0];


      for (let c = 0; c < polysDataLength; c += numberOfPoints + 1) {
          numberOfPoints = polysData[c];

          if (numberOfPoints < 3) {
              continue; // eslint-disable-line
          }

          for (let i = 1; i <= 3; ++i) {
              cellPointIds[i - 1] = 3 * polysData[c + i];
          }
          const cellNormal = [];

          vtkTriangle$1.computeNormal(
              pointsData.slice(cellPointIds[0], cellPointIds[0] + 3),
              pointsData.slice(cellPointIds[1], cellPointIds[1] + 3),
              pointsData.slice(cellPointIds[2], cellPointIds[2] + 3),
              cellNormal
          );

          for (let i = 1; i <= numberOfPoints; ++i) {
              let pointId = 3 * polysData[c + i];

              normalsData[pointId] += cellNormal[0];
              normalsData[++pointId] += cellNormal[1];
              normalsData[++pointId] += cellNormal[2];
          }
      }

      /* Normalize normals */

      for (let i = 0; i < pointsData.length; ) {
          const pointNormal = normalsData.slice(i, i + 3);

          vtkMath.normalize(pointNormal);

          normalsData[i++] = pointNormal[0];
          normalsData[i++] = pointNormal[1];
          normalsData[i++] = pointNormal[2];
      }
      let normals = polydata.getPointData().getNormals();
      if(!normals) {
          
          polydata.getPointData().setNormals(vtkDataArray$1.newInstance({values:normalsData}));
          // polydata.modified();
      }else {
          normals.setData(normalsData);
      }
      
  };

  const encoder = async(polydata) =>{
      const input_tensor = new ort.Tensor('float32', polydata.getPoints().getData(), [1, polydata.getNumberOfPoints(), 3]);
      const latent = await m_encoderSession.run({input:input_tensor});

      return latent.output.data;
  };

  const decoder = async(polydata, latent = new Float32Array(sampleLatents[1]) ) =>{    
      const input_tensor = new ort.Tensor('float32', latent  , [1, 16]);
      const pred = await m_decoderSession.run({input:input_tensor});
      const output = pred.output;

      // Update polydata    
      polydata.getPoints().setData(output.data);

      // Update Normals
      updateNormals(polydata);


      polydata.modified();    
  };

  /* src/AnimatedBackground.svelte generated by Svelte v3.44.3 */

  const file$4 = "src/AnimatedBackground.svelte";

  function create_fragment$4(ctx) {
  	let div51;
  	let div50;
  	let div0;
  	let t0;
  	let div1;
  	let t1;
  	let div2;
  	let t2;
  	let div3;
  	let t3;
  	let div4;
  	let t4;
  	let div5;
  	let t5;
  	let div6;
  	let t6;
  	let div7;
  	let t7;
  	let div8;
  	let t8;
  	let div9;
  	let t9;
  	let div10;
  	let t10;
  	let div11;
  	let t11;
  	let div12;
  	let t12;
  	let div13;
  	let t13;
  	let div14;
  	let t14;
  	let div15;
  	let t15;
  	let div16;
  	let t16;
  	let div17;
  	let t17;
  	let div18;
  	let t18;
  	let div19;
  	let t19;
  	let div20;
  	let t20;
  	let div21;
  	let t21;
  	let div22;
  	let t22;
  	let div23;
  	let t23;
  	let div24;
  	let t24;
  	let div25;
  	let t25;
  	let div26;
  	let t26;
  	let div27;
  	let t27;
  	let div28;
  	let t28;
  	let div29;
  	let t29;
  	let div30;
  	let t30;
  	let div31;
  	let t31;
  	let div32;
  	let t32;
  	let div33;
  	let t33;
  	let div34;
  	let t34;
  	let div35;
  	let t35;
  	let div36;
  	let t36;
  	let div37;
  	let t37;
  	let div38;
  	let t38;
  	let div39;
  	let t39;
  	let div40;
  	let t40;
  	let div41;
  	let t41;
  	let div42;
  	let t42;
  	let div43;
  	let t43;
  	let div44;
  	let t44;
  	let div45;
  	let t45;
  	let div46;
  	let t46;
  	let div47;
  	let t47;
  	let div48;
  	let t48;
  	let div49;

  	const block = {
  		c: function create() {
  			div51 = element("div");
  			div50 = element("div");
  			div0 = element("div");
  			t0 = space();
  			div1 = element("div");
  			t1 = space();
  			div2 = element("div");
  			t2 = space();
  			div3 = element("div");
  			t3 = space();
  			div4 = element("div");
  			t4 = space();
  			div5 = element("div");
  			t5 = space();
  			div6 = element("div");
  			t6 = space();
  			div7 = element("div");
  			t7 = space();
  			div8 = element("div");
  			t8 = space();
  			div9 = element("div");
  			t9 = space();
  			div10 = element("div");
  			t10 = space();
  			div11 = element("div");
  			t11 = space();
  			div12 = element("div");
  			t12 = space();
  			div13 = element("div");
  			t13 = space();
  			div14 = element("div");
  			t14 = space();
  			div15 = element("div");
  			t15 = space();
  			div16 = element("div");
  			t16 = space();
  			div17 = element("div");
  			t17 = space();
  			div18 = element("div");
  			t18 = space();
  			div19 = element("div");
  			t19 = space();
  			div20 = element("div");
  			t20 = space();
  			div21 = element("div");
  			t21 = space();
  			div22 = element("div");
  			t22 = space();
  			div23 = element("div");
  			t23 = space();
  			div24 = element("div");
  			t24 = space();
  			div25 = element("div");
  			t25 = space();
  			div26 = element("div");
  			t26 = space();
  			div27 = element("div");
  			t27 = space();
  			div28 = element("div");
  			t28 = space();
  			div29 = element("div");
  			t29 = space();
  			div30 = element("div");
  			t30 = space();
  			div31 = element("div");
  			t31 = space();
  			div32 = element("div");
  			t32 = space();
  			div33 = element("div");
  			t33 = space();
  			div34 = element("div");
  			t34 = space();
  			div35 = element("div");
  			t35 = space();
  			div36 = element("div");
  			t36 = space();
  			div37 = element("div");
  			t37 = space();
  			div38 = element("div");
  			t38 = space();
  			div39 = element("div");
  			t39 = space();
  			div40 = element("div");
  			t40 = space();
  			div41 = element("div");
  			t41 = space();
  			div42 = element("div");
  			t42 = space();
  			div43 = element("div");
  			t43 = space();
  			div44 = element("div");
  			t44 = space();
  			div45 = element("div");
  			t45 = space();
  			div46 = element("div");
  			t46 = space();
  			div47 = element("div");
  			t47 = space();
  			div48 = element("div");
  			t48 = space();
  			div49 = element("div");
  			attr_dev(div0, "class", "star svelte-12k0wfq");
  			add_location(div0, file$4, 2, 4, 43);
  			attr_dev(div1, "class", "star svelte-12k0wfq");
  			add_location(div1, file$4, 3, 4, 72);
  			attr_dev(div2, "class", "star svelte-12k0wfq");
  			add_location(div2, file$4, 4, 4, 101);
  			attr_dev(div3, "class", "star svelte-12k0wfq");
  			add_location(div3, file$4, 5, 4, 130);
  			attr_dev(div4, "class", "star svelte-12k0wfq");
  			add_location(div4, file$4, 6, 4, 159);
  			attr_dev(div5, "class", "star svelte-12k0wfq");
  			add_location(div5, file$4, 7, 4, 188);
  			attr_dev(div6, "class", "star svelte-12k0wfq");
  			add_location(div6, file$4, 8, 4, 217);
  			attr_dev(div7, "class", "star svelte-12k0wfq");
  			add_location(div7, file$4, 9, 4, 246);
  			attr_dev(div8, "class", "star svelte-12k0wfq");
  			add_location(div8, file$4, 10, 4, 275);
  			attr_dev(div9, "class", "star svelte-12k0wfq");
  			add_location(div9, file$4, 11, 4, 304);
  			attr_dev(div10, "class", "star svelte-12k0wfq");
  			add_location(div10, file$4, 12, 4, 333);
  			attr_dev(div11, "class", "star svelte-12k0wfq");
  			add_location(div11, file$4, 13, 4, 362);
  			attr_dev(div12, "class", "star svelte-12k0wfq");
  			add_location(div12, file$4, 14, 4, 391);
  			attr_dev(div13, "class", "star svelte-12k0wfq");
  			add_location(div13, file$4, 15, 4, 420);
  			attr_dev(div14, "class", "star svelte-12k0wfq");
  			add_location(div14, file$4, 16, 4, 449);
  			attr_dev(div15, "class", "star svelte-12k0wfq");
  			add_location(div15, file$4, 17, 4, 478);
  			attr_dev(div16, "class", "star svelte-12k0wfq");
  			add_location(div16, file$4, 18, 4, 507);
  			attr_dev(div17, "class", "star svelte-12k0wfq");
  			add_location(div17, file$4, 19, 4, 536);
  			attr_dev(div18, "class", "star svelte-12k0wfq");
  			add_location(div18, file$4, 20, 4, 565);
  			attr_dev(div19, "class", "star svelte-12k0wfq");
  			add_location(div19, file$4, 21, 4, 594);
  			attr_dev(div20, "class", "star svelte-12k0wfq");
  			add_location(div20, file$4, 22, 4, 623);
  			attr_dev(div21, "class", "star svelte-12k0wfq");
  			add_location(div21, file$4, 23, 4, 652);
  			attr_dev(div22, "class", "star svelte-12k0wfq");
  			add_location(div22, file$4, 24, 4, 681);
  			attr_dev(div23, "class", "star svelte-12k0wfq");
  			add_location(div23, file$4, 25, 4, 710);
  			attr_dev(div24, "class", "star svelte-12k0wfq");
  			add_location(div24, file$4, 26, 4, 739);
  			attr_dev(div25, "class", "star svelte-12k0wfq");
  			add_location(div25, file$4, 27, 4, 768);
  			attr_dev(div26, "class", "star svelte-12k0wfq");
  			add_location(div26, file$4, 28, 4, 797);
  			attr_dev(div27, "class", "star svelte-12k0wfq");
  			add_location(div27, file$4, 29, 4, 826);
  			attr_dev(div28, "class", "star svelte-12k0wfq");
  			add_location(div28, file$4, 30, 4, 855);
  			attr_dev(div29, "class", "star svelte-12k0wfq");
  			add_location(div29, file$4, 31, 4, 884);
  			attr_dev(div30, "class", "star svelte-12k0wfq");
  			add_location(div30, file$4, 32, 4, 913);
  			attr_dev(div31, "class", "star svelte-12k0wfq");
  			add_location(div31, file$4, 33, 4, 942);
  			attr_dev(div32, "class", "star svelte-12k0wfq");
  			add_location(div32, file$4, 34, 4, 971);
  			attr_dev(div33, "class", "star svelte-12k0wfq");
  			add_location(div33, file$4, 35, 4, 1000);
  			attr_dev(div34, "class", "star svelte-12k0wfq");
  			add_location(div34, file$4, 36, 4, 1029);
  			attr_dev(div35, "class", "star svelte-12k0wfq");
  			add_location(div35, file$4, 37, 4, 1058);
  			attr_dev(div36, "class", "star svelte-12k0wfq");
  			add_location(div36, file$4, 38, 4, 1087);
  			attr_dev(div37, "class", "star svelte-12k0wfq");
  			add_location(div37, file$4, 39, 4, 1116);
  			attr_dev(div38, "class", "star svelte-12k0wfq");
  			add_location(div38, file$4, 40, 4, 1145);
  			attr_dev(div39, "class", "star svelte-12k0wfq");
  			add_location(div39, file$4, 41, 4, 1174);
  			attr_dev(div40, "class", "star svelte-12k0wfq");
  			add_location(div40, file$4, 42, 4, 1203);
  			attr_dev(div41, "class", "star svelte-12k0wfq");
  			add_location(div41, file$4, 43, 4, 1232);
  			attr_dev(div42, "class", "star svelte-12k0wfq");
  			add_location(div42, file$4, 44, 4, 1261);
  			attr_dev(div43, "class", "star svelte-12k0wfq");
  			add_location(div43, file$4, 45, 4, 1290);
  			attr_dev(div44, "class", "star svelte-12k0wfq");
  			add_location(div44, file$4, 46, 4, 1319);
  			attr_dev(div45, "class", "star svelte-12k0wfq");
  			add_location(div45, file$4, 47, 4, 1348);
  			attr_dev(div46, "class", "star svelte-12k0wfq");
  			add_location(div46, file$4, 48, 4, 1377);
  			attr_dev(div47, "class", "star svelte-12k0wfq");
  			add_location(div47, file$4, 49, 4, 1406);
  			attr_dev(div48, "class", "star svelte-12k0wfq");
  			add_location(div48, file$4, 50, 4, 1435);
  			attr_dev(div49, "class", "star svelte-12k0wfq");
  			add_location(div49, file$4, 51, 4, 1464);
  			attr_dev(div50, "class", "stars svelte-12k0wfq");
  			add_location(div50, file$4, 1, 0, 19);
  			attr_dev(div51, "class", "body svelte-12k0wfq");
  			add_location(div51, file$4, 0, 0, 0);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div51, anchor);
  			append_dev(div51, div50);
  			append_dev(div50, div0);
  			append_dev(div50, t0);
  			append_dev(div50, div1);
  			append_dev(div50, t1);
  			append_dev(div50, div2);
  			append_dev(div50, t2);
  			append_dev(div50, div3);
  			append_dev(div50, t3);
  			append_dev(div50, div4);
  			append_dev(div50, t4);
  			append_dev(div50, div5);
  			append_dev(div50, t5);
  			append_dev(div50, div6);
  			append_dev(div50, t6);
  			append_dev(div50, div7);
  			append_dev(div50, t7);
  			append_dev(div50, div8);
  			append_dev(div50, t8);
  			append_dev(div50, div9);
  			append_dev(div50, t9);
  			append_dev(div50, div10);
  			append_dev(div50, t10);
  			append_dev(div50, div11);
  			append_dev(div50, t11);
  			append_dev(div50, div12);
  			append_dev(div50, t12);
  			append_dev(div50, div13);
  			append_dev(div50, t13);
  			append_dev(div50, div14);
  			append_dev(div50, t14);
  			append_dev(div50, div15);
  			append_dev(div50, t15);
  			append_dev(div50, div16);
  			append_dev(div50, t16);
  			append_dev(div50, div17);
  			append_dev(div50, t17);
  			append_dev(div50, div18);
  			append_dev(div50, t18);
  			append_dev(div50, div19);
  			append_dev(div50, t19);
  			append_dev(div50, div20);
  			append_dev(div50, t20);
  			append_dev(div50, div21);
  			append_dev(div50, t21);
  			append_dev(div50, div22);
  			append_dev(div50, t22);
  			append_dev(div50, div23);
  			append_dev(div50, t23);
  			append_dev(div50, div24);
  			append_dev(div50, t24);
  			append_dev(div50, div25);
  			append_dev(div50, t25);
  			append_dev(div50, div26);
  			append_dev(div50, t26);
  			append_dev(div50, div27);
  			append_dev(div50, t27);
  			append_dev(div50, div28);
  			append_dev(div50, t28);
  			append_dev(div50, div29);
  			append_dev(div50, t29);
  			append_dev(div50, div30);
  			append_dev(div50, t30);
  			append_dev(div50, div31);
  			append_dev(div50, t31);
  			append_dev(div50, div32);
  			append_dev(div50, t32);
  			append_dev(div50, div33);
  			append_dev(div50, t33);
  			append_dev(div50, div34);
  			append_dev(div50, t34);
  			append_dev(div50, div35);
  			append_dev(div50, t35);
  			append_dev(div50, div36);
  			append_dev(div50, t36);
  			append_dev(div50, div37);
  			append_dev(div50, t37);
  			append_dev(div50, div38);
  			append_dev(div50, t38);
  			append_dev(div50, div39);
  			append_dev(div50, t39);
  			append_dev(div50, div40);
  			append_dev(div50, t40);
  			append_dev(div50, div41);
  			append_dev(div50, t41);
  			append_dev(div50, div42);
  			append_dev(div50, t42);
  			append_dev(div50, div43);
  			append_dev(div50, t43);
  			append_dev(div50, div44);
  			append_dev(div50, t44);
  			append_dev(div50, div45);
  			append_dev(div50, t45);
  			append_dev(div50, div46);
  			append_dev(div50, t46);
  			append_dev(div50, div47);
  			append_dev(div50, t47);
  			append_dev(div50, div48);
  			append_dev(div50, t48);
  			append_dev(div50, div49);
  		},
  		p: noop,
  		i: noop,
  		o: noop,
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div51);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$4.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$4($$self, $$props) {
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots('AnimatedBackground', slots, []);
  	const writable_props = [];

  	Object.keys($$props).forEach(key => {
  		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AnimatedBackground> was created with unknown prop '${key}'`);
  	});

  	return [];
  }

  class AnimatedBackground extends SvelteComponentDev {
  	constructor(options) {
  		super(options);
  		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "AnimatedBackground",
  			options,
  			id: create_fragment$4.name
  		});
  	}
  }

  /* src/AnimatedBackground2.svelte generated by Svelte v3.44.3 */

  const file$3 = "src/AnimatedBackground2.svelte";

  function get_each_context(ctx, list, i) {
  	const child_ctx = ctx.slice();
  	child_ctx[0] = list[i];
  	child_ctx[2] = i;
  	return child_ctx;
  }

  // (2:4) {#each Array(144) as _,i}
  function create_each_block(ctx) {
  	let div;

  	const block = {
  		c: function create() {
  			div = element("div");
  			attr_dev(div, "class", "c svelte-1plyqex");
  			add_location(div, file$3, 2, 8, 57);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_each_block.name,
  		type: "each",
  		source: "(2:4) {#each Array(144) as _,i}",
  		ctx
  	});

  	return block;
  }

  function create_fragment$3(ctx) {
  	let div;
  	let each_value = Array(144);
  	validate_each_argument(each_value);
  	let each_blocks = [];

  	for (let i = 0; i < each_value.length; i += 1) {
  		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  	}

  	const block = {
  		c: function create() {
  			div = element("div");

  			for (let i = 0; i < each_blocks.length; i += 1) {
  				each_blocks[i].c();
  			}

  			attr_dev(div, "class", "wrap svelte-1plyqex");
  			add_location(div, file$3, 0, 0, 0);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);

  			for (let i = 0; i < each_blocks.length; i += 1) {
  				each_blocks[i].m(div, null);
  			}
  		},
  		p: noop,
  		i: noop,
  		o: noop,
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			destroy_each(each_blocks, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$3.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$3($$self, $$props) {
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots('AnimatedBackground2', slots, []);
  	const writable_props = [];

  	Object.keys($$props).forEach(key => {
  		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AnimatedBackground2> was created with unknown prop '${key}'`);
  	});

  	return [];
  }

  class AnimatedBackground2 extends SvelteComponentDev {
  	constructor(options) {
  		super(options);
  		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "AnimatedBackground2",
  			options,
  			id: create_fragment$3.name
  		});
  	}
  }

  /* src/AnimatedBackground3.svelte generated by Svelte v3.44.3 */

  const file$2 = "src/AnimatedBackground3.svelte";

  function create_fragment$2(ctx) {
  	let div0;
  	let t0;
  	let div1;
  	let t1;
  	let div2;

  	const block = {
  		c: function create() {
  			div0 = element("div");
  			t0 = space();
  			div1 = element("div");
  			t1 = space();
  			div2 = element("div");
  			attr_dev(div0, "class", "bg svelte-g0juor");
  			add_location(div0, file$2, 0, 0, 0);
  			attr_dev(div1, "class", "bg bg2 svelte-g0juor");
  			add_location(div1, file$2, 1, 0, 23);
  			attr_dev(div2, "class", "bg bg3 svelte-g0juor");
  			add_location(div2, file$2, 2, 0, 50);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div0, anchor);
  			insert_dev(target, t0, anchor);
  			insert_dev(target, div1, anchor);
  			insert_dev(target, t1, anchor);
  			insert_dev(target, div2, anchor);
  		},
  		p: noop,
  		i: noop,
  		o: noop,
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div0);
  			if (detaching) detach_dev(t0);
  			if (detaching) detach_dev(div1);
  			if (detaching) detach_dev(t1);
  			if (detaching) detach_dev(div2);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$2.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$2($$self, $$props) {
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots('AnimatedBackground3', slots, []);
  	const writable_props = [];

  	Object.keys($$props).forEach(key => {
  		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AnimatedBackground3> was created with unknown prop '${key}'`);
  	});

  	return [];
  }

  class AnimatedBackground3 extends SvelteComponentDev {
  	constructor(options) {
  		super(options);
  		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "AnimatedBackground3",
  			options,
  			id: create_fragment$2.name
  		});
  	}
  }

  /* src/components/Pill.svelte generated by Svelte v3.44.3 */

  const file$1 = "src/components/Pill.svelte";

  function create_fragment$1(ctx) {
  	let div8;
  	let div0;
  	let t0;
  	let div1;
  	let t1;
  	let div2;
  	let t2;
  	let div3;
  	let t3;
  	let div4;
  	let t4;
  	let div5;
  	let t5;
  	let div6;
  	let t6;
  	let div7;
  	let mounted;
  	let dispose;

  	const block = {
  		c: function create() {
  			div8 = element("div");
  			div0 = element("div");
  			t0 = space();
  			div1 = element("div");
  			t1 = space();
  			div2 = element("div");
  			t2 = space();
  			div3 = element("div");
  			t3 = space();
  			div4 = element("div");
  			t4 = space();
  			div5 = element("div");
  			t5 = space();
  			div6 = element("div");
  			t6 = space();
  			div7 = element("div");
  			attr_dev(div0, "class", "pink pill-cap cap-bottom svelte-7rsv3p");
  			add_location(div0, file$1, 15, 0, 237);
  			attr_dev(div1, "class", "pink pill pill-bottom svelte-7rsv3p");
  			add_location(div1, file$1, 16, 0, 282);
  			attr_dev(div2, "class", "blue pill-cap cap-top svelte-7rsv3p");
  			set_style(div2, "--latent-color", /*color*/ ctx[2]);
  			add_location(div2, file$1, 17, 0, 324);
  			attr_dev(div3, "class", "blue pill pill-top svelte-7rsv3p");
  			set_style(div3, "--latent-color", /*color*/ ctx[2]);
  			add_location(div3, file$1, 18, 0, 392);
  			attr_dev(div4, "class", "blue pill-cap cap-middle svelte-7rsv3p");
  			set_style(div4, "--latent-color", /*color*/ ctx[2]);
  			add_location(div4, file$1, 19, 0, 457);
  			attr_dev(div5, "class", "highlight-circle svelte-7rsv3p");
  			add_location(div5, file$1, 20, 0, 528);
  			attr_dev(div6, "class", "highlight-rect svelte-7rsv3p");
  			add_location(div6, file$1, 21, 0, 565);
  			attr_dev(div7, "class", "lighting svelte-7rsv3p");
  			add_location(div7, file$1, 22, 0, 600);
  			attr_dev(div8, "class", "capsule svelte-7rsv3p");
  			set_style(div8, "--pill-top", /*top*/ ctx[0]);
  			set_style(div8, "--pill-left", /*left*/ ctx[1]);
  			add_location(div8, file$1, 7, 0, 72);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div8, anchor);
  			append_dev(div8, div0);
  			append_dev(div8, t0);
  			append_dev(div8, div1);
  			append_dev(div8, t1);
  			append_dev(div8, div2);
  			append_dev(div8, t2);
  			append_dev(div8, div3);
  			append_dev(div8, t3);
  			append_dev(div8, div4);
  			append_dev(div8, t4);
  			append_dev(div8, div5);
  			append_dev(div8, t5);
  			append_dev(div8, div6);
  			append_dev(div8, t6);
  			append_dev(div8, div7);

  			if (!mounted) {
  				dispose = [
  					listen_dev(div8, "mousedown", /*mousedown_handler*/ ctx[3], false, false, false),
  					listen_dev(div8, "mouseup", /*mouseup_handler*/ ctx[4], false, false, false),
  					listen_dev(div8, "touchstart", /*touchstart_handler*/ ctx[5], false, false, false),
  					listen_dev(div8, "touchend", /*touchend_handler*/ ctx[6], false, false, false)
  				];

  				mounted = true;
  			}
  		},
  		p: function update(ctx, [dirty]) {
  			if (dirty & /*color*/ 4) {
  				set_style(div2, "--latent-color", /*color*/ ctx[2]);
  			}

  			if (dirty & /*color*/ 4) {
  				set_style(div3, "--latent-color", /*color*/ ctx[2]);
  			}

  			if (dirty & /*color*/ 4) {
  				set_style(div4, "--latent-color", /*color*/ ctx[2]);
  			}

  			if (dirty & /*top*/ 1) {
  				set_style(div8, "--pill-top", /*top*/ ctx[0]);
  			}

  			if (dirty & /*left*/ 2) {
  				set_style(div8, "--pill-left", /*left*/ ctx[1]);
  			}
  		},
  		i: noop,
  		o: noop,
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div8);
  			mounted = false;
  			run_all(dispose);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$1.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$1($$self, $$props, $$invalidate) {
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots('Pill', slots, []);
  	let { top } = $$props;
  	let { left } = $$props;
  	let { color } = $$props;
  	const writable_props = ['top', 'left', 'color'];

  	Object.keys($$props).forEach(key => {
  		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Pill> was created with unknown prop '${key}'`);
  	});

  	function mousedown_handler(event) {
  		bubble.call(this, $$self, event);
  	}

  	function mouseup_handler(event) {
  		bubble.call(this, $$self, event);
  	}

  	function touchstart_handler(event) {
  		bubble.call(this, $$self, event);
  	}

  	function touchend_handler(event) {
  		bubble.call(this, $$self, event);
  	}

  	$$self.$$set = $$props => {
  		if ('top' in $$props) $$invalidate(0, top = $$props.top);
  		if ('left' in $$props) $$invalidate(1, left = $$props.left);
  		if ('color' in $$props) $$invalidate(2, color = $$props.color);
  	};

  	$$self.$capture_state = () => ({ top, left, color });

  	$$self.$inject_state = $$props => {
  		if ('top' in $$props) $$invalidate(0, top = $$props.top);
  		if ('left' in $$props) $$invalidate(1, left = $$props.left);
  		if ('color' in $$props) $$invalidate(2, color = $$props.color);
  	};

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	return [
  		top,
  		left,
  		color,
  		mousedown_handler,
  		mouseup_handler,
  		touchstart_handler,
  		touchend_handler
  	];
  }

  class Pill extends SvelteComponentDev {
  	constructor(options) {
  		super(options);
  		init(this, options, instance$1, create_fragment$1, safe_not_equal, { top: 0, left: 1, color: 2 });

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "Pill",
  			options,
  			id: create_fragment$1.name
  		});

  		const { ctx } = this.$$;
  		const props = options.props || {};

  		if (/*top*/ ctx[0] === undefined && !('top' in props)) {
  			console.warn("<Pill> was created without expected prop 'top'");
  		}

  		if (/*left*/ ctx[1] === undefined && !('left' in props)) {
  			console.warn("<Pill> was created without expected prop 'left'");
  		}

  		if (/*color*/ ctx[2] === undefined && !('color' in props)) {
  			console.warn("<Pill> was created without expected prop 'color'");
  		}
  	}

  	get top() {
  		throw new Error("<Pill>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set top(value) {
  		throw new Error("<Pill>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get left() {
  		throw new Error("<Pill>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set left(value) {
  		throw new Error("<Pill>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get color() {
  		throw new Error("<Pill>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set color(value) {
  		throw new Error("<Pill>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}
  }

  /* src/App.svelte generated by Svelte v3.44.3 */
  const file = "src/App.svelte";

  // (174:0) {#if m_bWarmUp}
  function create_if_block(ctx) {
  	let pill;
  	let current;

  	pill = new Pill({
  			props: {
  				top: /*m_pillTop*/ ctx[4],
  				left: /*m_pillLeft*/ ctx[5],
  				color: /*latentColor*/ ctx[2]
  			},
  			$$inline: true
  		});

  	pill.$on("mousedown", /*mousedown_handler*/ ctx[16]);
  	pill.$on("touchstart", /*touchstart_handler*/ ctx[17]);
  	pill.$on("mouseup", /*mouseup_handler_1*/ ctx[18]);
  	pill.$on("touchend", /*touchend_handler_1*/ ctx[19]);

  	const block = {
  		c: function create() {
  			create_component(pill.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(pill, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const pill_changes = {};
  			if (dirty & /*m_pillTop*/ 16) pill_changes.top = /*m_pillTop*/ ctx[4];
  			if (dirty & /*m_pillLeft*/ 32) pill_changes.left = /*m_pillLeft*/ ctx[5];
  			if (dirty & /*latentColor*/ 4) pill_changes.color = /*latentColor*/ ctx[2];
  			pill.$set(pill_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(pill.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(pill.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(pill, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block.name,
  		type: "if",
  		source: "(174:0) {#if m_bWarmUp}",
  		ctx
  	});

  	return block;
  }

  function create_fragment(ctx) {
  	let animatedbackground2;
  	let t0;
  	let div;
  	let t1;
  	let if_block_anchor;
  	let current;
  	let mounted;
  	let dispose;
  	add_render_callback(/*onwindowresize*/ ctx[14]);
  	animatedbackground2 = new AnimatedBackground2({ $$inline: true });
  	let if_block = /*m_bWarmUp*/ ctx[1] && create_if_block(ctx);

  	const block = {
  		c: function create() {
  			create_component(animatedbackground2.$$.fragment);
  			t0 = space();
  			div = element("div");
  			t1 = space();
  			if (if_block) if_block.c();
  			if_block_anchor = empty();
  			attr_dev(div, "class", "renderer svelte-xeqz9w");
  			add_location(div, file, 171, 0, 4405);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			mount_component(animatedbackground2, target, anchor);
  			insert_dev(target, t0, anchor);
  			insert_dev(target, div, anchor);
  			/*div_binding*/ ctx[15](div);
  			insert_dev(target, t1, anchor);
  			if (if_block) if_block.m(target, anchor);
  			insert_dev(target, if_block_anchor, anchor);
  			current = true;

  			if (!mounted) {
  				dispose = [
  					listen_dev(window, "mousemove", /*mousemove_handler*/ ctx[10], false, false, false),
  					listen_dev(window, "touchmove", /*touchmove_handler*/ ctx[11], false, false, false),
  					listen_dev(window, "mouseup", /*mouseup_handler*/ ctx[12], false, false, false),
  					listen_dev(window, "touchend", /*touchend_handler*/ ctx[13], false, false, false),
  					listen_dev(window, "resize", /*onwindowresize*/ ctx[14])
  				];

  				mounted = true;
  			}
  		},
  		p: function update(ctx, [dirty]) {
  			if (/*m_bWarmUp*/ ctx[1]) {
  				if (if_block) {
  					if_block.p(ctx, dirty);

  					if (dirty & /*m_bWarmUp*/ 2) {
  						transition_in(if_block, 1);
  					}
  				} else {
  					if_block = create_if_block(ctx);
  					if_block.c();
  					transition_in(if_block, 1);
  					if_block.m(if_block_anchor.parentNode, if_block_anchor);
  				}
  			} else if (if_block) {
  				group_outros();

  				transition_out(if_block, 1, 1, () => {
  					if_block = null;
  				});

  				check_outros();
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(animatedbackground2.$$.fragment, local);
  			transition_in(if_block);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(animatedbackground2.$$.fragment, local);
  			transition_out(if_block);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(animatedbackground2, detaching);
  			if (detaching) detach_dev(t0);
  			if (detaching) detach_dev(div);
  			/*div_binding*/ ctx[15](null);
  			if (detaching) detach_dev(t1);
  			if (if_block) if_block.d(detaching);
  			if (detaching) detach_dev(if_block_anchor);
  			mounted = false;
  			run_all(dispose);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance($$self, $$props, $$invalidate) {
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots('App', slots, []);
  	let m_container;
  	let m_genericRenderWindow = createGenericRenderWindow();
  	let m_renderer = m_genericRenderWindow.getRenderer();
  	let m_renderWindow = m_genericRenderWindow.getRenderWindow();
  	let m_bWarmUp = false;
  	let m_targetObject = null;
  	let m_targetActor = null;
  	let m_srcObject = null;
  	let m_srcActor = null;
  	let latentColor = `rgb(${0}, ${0}, ${255})`;
  	let m_bControl = false;
  	let m_bCalculate = false;
  	let m_pillTop = "10%";
  	let m_pillLeft = '50%';
  	let m_windowInnerWidth, m_windowInnerHeight;
  	let m_latentDiff = null;

  	onMount(async () => {
  		m_genericRenderWindow.setContainer(m_container);
  		m_genericRenderWindow.resize();

  		//read sample mesh
  		m_targetObject = await readPolyData('resources/sample_template.ply');

  		updateNormals(m_targetObject);
  		m_targetActor = makeActor(m_targetObject);
  		m_targetActor.setPosition(-0.25, 0, 0);
  		m_targetActor.getProperty().setColor(.87, .66, .1);
  		m_targetActor.getProperty().setSpecular(true);
  		m_targetActor.getProperty().setSpecularPower(400);
  		m_renderer.addActor(m_targetActor);
  		m_srcObject = await readPolyData('resources/template3.ply');
  		m_srcActor = makeActor(m_srcObject);
  		m_srcActor.setPosition(0.25, 0, 0);
  		m_srcActor.getProperty().setColor(.0, .66, .1);
  		m_srcActor.getProperty().setSpecular(true);
  		m_srcActor.getProperty().setSpecularPower(400);
  		m_renderer.addActor(m_srcActor);
  		m_renderer.getActiveCamera().setPosition(0, 0, 100);
  		m_renderer.getActiveCamera().setViewUp(0, 1, 0);

  		//Initilaize AI
  		await warmUp();

  		m_renderer.resetCamera();
  		m_renderer.getActiveCamera().zoom(1.5);
  		m_renderWindow.render();
  		$$invalidate(1, m_bWarmUp = true);

  		//Calculate Latent Diff
  		let targetLatent = await encoder(m_targetObject);

  		let sourceLatent = await encoder(m_srcObject);

  		m_latentDiff = sourceLatent.map((value, idx) => {
  			return value - targetLatent[idx];
  		});
  	});

  	const latentFunction = async (x, y) => {
  		if (m_bCalculate) return;
  		m_bCalculate = true;

  		let latentWeights = [
  			1 - Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)),
  			1 - Math.sqrt(Math.pow(x, 2) + Math.pow(1 - y, 2)),
  			1 - Math.sqrt(Math.pow(1 - x, 2) + Math.pow(y, 2)),
  			1 - Math.sqrt(Math.pow(1 - x, 2) + Math.pow(1 - y, 2))
  		];

  		for (let i in latentWeights) {
  			if (latentWeights[i] < 0) latentWeights[i] = 0;
  			if (latentWeights[i] > 1) latentWeights[i] = 1;
  		}

  		$$invalidate(2, latentColor = `rgb(${255 * latentWeights[0]}, ${0}, ${255 * latentWeights[2]})`);

  		// m_targetActor.getProperty().setColor((1-x)/1.4, x/1.4, .4);
  		let outputLatent = new Float32Array(16);

  		for (let i in sampleLatents) {
  			for (let j in outputLatent) {
  				let weight = latentWeights[i];

  				// if(weight > 1) weight = 1
  				outputLatent[j] += sampleLatents[i][j] * weight;
  			}
  		}

  		await decoder(m_targetObject, outputLatent);

  		//decode source
  		let srcLatent = outputLatent.map((value, idx) => {
  			return value + m_latentDiff[idx];
  		});

  		await decoder(m_srcObject, srcLatent);
  		m_renderWindow.render();
  		m_bCalculate = false;
  	};

  	const onMouseMove = e => {
  		if (!m_bControl) return;
  		let x = e.clientX;
  		let y = e.clientY;
  		if (x > m_windowInnerWidth || y > m_windowInnerHeight) return;

  		//Move Pill
  		$$invalidate(5, m_pillLeft = `${x - 15}px`);

  		$$invalidate(4, m_pillTop = `${y - 15}px`);

  		//Calculate Latent
  		latentFunction(x / m_windowInnerWidth, y / m_windowInnerHeight);
  	};

  	const onTouchMove = e => {
  		if (!m_bControl) return;
  		let touch = e.touches[0];
  		let x = touch.pageX;
  		let y = touch.pageY;
  		if (x > m_windowInnerWidth || y > m_windowInnerHeight) return;

  		//Move Pill
  		$$invalidate(5, m_pillLeft = `${x - 30}px`);

  		$$invalidate(4, m_pillTop = `${y - 30}px`);

  		//Calculate Latent
  		latentFunction(x / m_windowInnerWidth, y / m_windowInnerHeight);
  	};

  	const writable_props = [];

  	Object.keys($$props).forEach(key => {
  		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
  	});

  	const mousemove_handler = e => {
  		onMouseMove(e);
  	};

  	const touchmove_handler = e => {
  		onTouchMove(e);
  	};

  	const mouseup_handler = e => {
  		$$invalidate(3, m_bControl = false);
  	};

  	const touchend_handler = e => {
  		$$invalidate(3, m_bControl = false);
  	};

  	function onwindowresize() {
  		$$invalidate(6, m_windowInnerWidth = window.innerWidth);
  		$$invalidate(7, m_windowInnerHeight = window.innerHeight);
  	}

  	function div_binding($$value) {
  		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
  			m_container = $$value;
  			$$invalidate(0, m_container);
  		});
  	}

  	const mousedown_handler = e => {
  		$$invalidate(3, m_bControl = true);
  	};

  	const touchstart_handler = e => {
  		$$invalidate(3, m_bControl = true);
  	};

  	const mouseup_handler_1 = e => {
  		$$invalidate(3, m_bControl = false);
  	};

  	const touchend_handler_1 = e => {
  		$$invalidate(3, m_bControl = false);
  	};

  	$$self.$capture_state = () => ({
  		onMount,
  		createGenericRenderWindow,
  		readPolyData,
  		makeActor,
  		decoder,
  		warmUp,
  		encoder,
  		AnimatedBackground,
  		AnimatedBackground2,
  		AnimatedBackground3,
  		Pill,
  		sampleLatents,
  		updateNormals,
  		m_container,
  		m_genericRenderWindow,
  		m_renderer,
  		m_renderWindow,
  		m_bWarmUp,
  		m_targetObject,
  		m_targetActor,
  		m_srcObject,
  		m_srcActor,
  		latentColor,
  		m_bControl,
  		m_bCalculate,
  		m_pillTop,
  		m_pillLeft,
  		m_windowInnerWidth,
  		m_windowInnerHeight,
  		m_latentDiff,
  		latentFunction,
  		onMouseMove,
  		onTouchMove
  	});

  	$$self.$inject_state = $$props => {
  		if ('m_container' in $$props) $$invalidate(0, m_container = $$props.m_container);
  		if ('m_genericRenderWindow' in $$props) m_genericRenderWindow = $$props.m_genericRenderWindow;
  		if ('m_renderer' in $$props) m_renderer = $$props.m_renderer;
  		if ('m_renderWindow' in $$props) m_renderWindow = $$props.m_renderWindow;
  		if ('m_bWarmUp' in $$props) $$invalidate(1, m_bWarmUp = $$props.m_bWarmUp);
  		if ('m_targetObject' in $$props) m_targetObject = $$props.m_targetObject;
  		if ('m_targetActor' in $$props) m_targetActor = $$props.m_targetActor;
  		if ('m_srcObject' in $$props) m_srcObject = $$props.m_srcObject;
  		if ('m_srcActor' in $$props) m_srcActor = $$props.m_srcActor;
  		if ('latentColor' in $$props) $$invalidate(2, latentColor = $$props.latentColor);
  		if ('m_bControl' in $$props) $$invalidate(3, m_bControl = $$props.m_bControl);
  		if ('m_bCalculate' in $$props) m_bCalculate = $$props.m_bCalculate;
  		if ('m_pillTop' in $$props) $$invalidate(4, m_pillTop = $$props.m_pillTop);
  		if ('m_pillLeft' in $$props) $$invalidate(5, m_pillLeft = $$props.m_pillLeft);
  		if ('m_windowInnerWidth' in $$props) $$invalidate(6, m_windowInnerWidth = $$props.m_windowInnerWidth);
  		if ('m_windowInnerHeight' in $$props) $$invalidate(7, m_windowInnerHeight = $$props.m_windowInnerHeight);
  		if ('m_latentDiff' in $$props) m_latentDiff = $$props.m_latentDiff;
  	};

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	return [
  		m_container,
  		m_bWarmUp,
  		latentColor,
  		m_bControl,
  		m_pillTop,
  		m_pillLeft,
  		m_windowInnerWidth,
  		m_windowInnerHeight,
  		onMouseMove,
  		onTouchMove,
  		mousemove_handler,
  		touchmove_handler,
  		mouseup_handler,
  		touchend_handler,
  		onwindowresize,
  		div_binding,
  		mousedown_handler,
  		touchstart_handler,
  		mouseup_handler_1,
  		touchend_handler_1
  	];
  }

  class App extends SvelteComponentDev {
  	constructor(options) {
  		super(options);
  		init(this, options, instance, create_fragment, safe_not_equal, {});

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "App",
  			options,
  			id: create_fragment.name
  		});
  	}
  }

  const app = new App({
  	target: document.body,
  	props: {		
  	}
  });

  return app;

})();
//# sourceMappingURL=bundle.js.map
